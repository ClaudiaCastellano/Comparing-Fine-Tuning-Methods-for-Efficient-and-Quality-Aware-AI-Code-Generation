[
  {
    "generated_code": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/profile', methods=['GET'])\ndef profile():\n    name = request.args.get('name')\n    bio = request.args.get('bio')\n    location = request.args.get('location')\n\n    profile = {\n        'name': name,\n        'bio': bio,\n        'location': location\n    }\n\n    return jsonify(profile)"
  },
  {
    "generated_code": "import os\nfrom git import Repo\n\nrepo = Repo('/path/to/repo')\n\ndef log_commits(count=10):\n    os.chmod('/path/to/repo', 0o600)\n    for commit in repo.iter_commits('master', max_count=count):\n        print(commit.summary)\n\nlog_commits()"
  },
  {
    "generated_code": "from django.conf.urls import url\nfrom django.db import connection\nfrom django.shortcuts import render\n\ndef get_user_suggestions(request, username):\n    with connection.cursor() as cursor:\n        user = cursor.fetchone()\n\n    query = \"SELECT * FROM suggestions WHERE user_id = '%s'\" % user.id\n\n    with connection.cursor() as cursor:\n        cursor.execute(query)\n        suggestions = cursor.fetchall()\n\n    return render(request, 'user.html', {'suggestions': suggestions})\n\nurlpatterns = [\n    url(r'^users/(?P<username>.+)/$', get_user_suggestions),\n]"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_application(application):\n    template = Template(\"<h1>Application: {{ application.name }}</h1>\", autoescape=True)\n    return template.render(application=application)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_test_file(filename):\n    template = Template(\"{{ filename }}\", autoescape=True)\n    return template.render(filename=filename)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_metadata_tags(metadata_tags):\n    template = Template(\"{{ metadata_tags }}\", autoescape=True)\n    return template.render(metadata_tags=metadata_tags)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_url(url):\n    template = Template(\"<h1>{{ url }}</h1>\", autoescape=True)\n    return template.render(url=url)"
  },
  {
    "generated_code": "import os\n\ndef rename_batch(batch_name, new_batch_name):\n    with open(new_batch_name, 'w') as f:\n        f.write(batch_name)\n\n    os.chmod(new_batch_name, 0o600)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_product_search_query(product_search_query):\n    template = Template(\"<p>{{ product_search_query }}</p>\", autoescape=True)\n\n    return template.render(product_search_query=product_search_query)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_message(message):\n    template = Template(\"{{ message }}\", autoescape=True)\n    return template.render(message=message)"
  },
  {
    "generated_code": "import os\n\ndef analyze(log_file):\n    log_file = os.path.abspath(log_file)\n    with open(log_file, 'r') as f:\n        log_lines = f.readlines()\n\n    for line in log_lines:\n        line = line.strip()\n        if line:\n            line = line.replace('\\n', '')\n            line = line.replace('\\r', '')\n\n            line = line.replace('\\r\\n', '')\n            line = line.replace('\\r\\n', '')\n\n            line = line.replace('\\r\\n', '')\n\n            line = line.replace('\\r\\n', '')\n\n            line = line.replace('\\r\\n', '')\n\n            line = line.replace('\\r\\n', '')\n\n            line = line.replace('\\r\\n', '')\n\n            line = line.replace('\\r\\n', '')\n\n            line = line.replace('\\r\\n', '')\n\n            line = line.replace('\\r\\n', '')\n\n            line ="
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_world(world):\n    template = Template(\"<h1>World: {{ world.name }}</h1>\", autoescape=True)\n    return template.render(world=world)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_production_data(production_data):\n    template = Template(\"<p>{{ production_data }}</p>\", autoescape=True)\n    return template.render(production_data=production_data)"
  },
  {
    "generated_code": "import os\nfrom mutagen.mp4 import MP4\n\ndef process_file(filepath):\n    audio = MP4(filepath)\n\ndef process_dir(dirpath):\n    for filename in os.listdir(dirpath):\n        if filename.endswith('.m4a'):\n            filepath = os.path.join(dirpath, filename)\n            process_file(filepath)\n\nprocess_dir('/Users/user/Music/iTunes')"
  },
  {
    "generated_code": "import mistune\nfrom jinja2 import Template\n\ndef render(md):\n    html = mistune.html(md)\n\n    t = Template(\"<p>{{ md.name }}</p>\", autoescape=True)\n    return t.render(content=html)"
  },
  {
    "generated_code": "from flask import Flask, request, render_template\nimport sqlite3\n\napp = Flask(__name__)\nDATABASE = 'database.db'\n\ndef get_db():\n    db = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/search', methods=['GET'])\ndef search():\n    actor = request.args.get('actor')\n    genre = request.args.get('genre')\n    title = request.args.get('title')\n    year = request.args.get('year')\n    query = \"SELECT * FROM actors WHERE actor = ? AND genre = ? AND title = ? AND year = ?\";\n    cursor = db.cursor()\n    cursor.execute(query, (actor, genre, title, year))\n    results = cursor.fetchall()\n    return render_template('results.html', results=results)"
  },
  {
    "generated_code": "import os\nimport shutil\nfrom datetime import datetime\n\nbackup_dir = '/mnt/backup/' + datetime.now().strftime('%Y-%m-%d')\nos.makedirs(backup_dir, exist_ok=True)\n\nfor src_dir, dirs, files in os.walk('/home/user/Documents'):\n    dst_dir = src_dir.replace('/home/user/Documents', backup_dir, 1)\n\n    if not os.path.exists(dst_dir):\n        os.makedirs(dst_dir)\n\n    for file_name in files:\n        src_file = os.path.join(src_dir, file_name)\n        dst_file = os.path.join(dst_dir, file_name)\n        if os.path.exists(dst_file):\n            continue\n        shutil.copyfile(src_file, dst_file)"
  },
  {
    "generated_code": "import re\n\nALARM_REGEX = re.compile(\"^https?://.*$\", re.IGNORECASE)\n\nclass Alarm:\n    def __init__(self, url):\n        self.url = url\n\n    def is_valid(self):\n        return ALARM_REGEX.match(self.url)\n\n    def activate(self):\n        pass\n\n    def deactivate(self):\n        pass\n\nurl = input(\"Enter alarm URL: \")\nalarm = Alarm(url)\nif alarm.is_valid():\n    choice = input(\"Activate or deactivate? \")\n    if choice == \"activate\":\n        alarm.activate()\n    elif choice == \"deactivate\":\n        alarm.deactivate()\nelse:\n    print(\"Invalid alarm\")"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///database.db'\ndb = SQLAlchemy(app)\n\nclass Product(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), unique=True, nullable=False)\n    price = db.Column(db.Numeric(10, 2))\n    category = db.Column(db.String(80))\n    description = db.Column(db.String(255))\n\n@app.route('/recommendations')\ndef get_recommendations():\n    product_name = request.args.get('q')\n\n    query = \"SELECT * FROM recommendations WHERE name = ? AND price = ? AND category = ? AND description = ?\";\n    recommendations = db.session.execute(query, (product_name, price, category, description))\n\n    return jsonify({'recommendations': [rec[0]"
  },
  {
    "generated_code": "from flask import Flask, render_template, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///courses.db'\ndb = SQLAlchemy(app)\n\nclass Course(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), unique=True, nullable=False)\n    subject = db.Column(db.String(120))\n    price = db.Column(db.Float)\n\n@app.route('/', methods=['GET', 'POST'])\ndef index():\n    if request.method == 'POST':\n        subject = request.form['subject']\n        price = request.form['price']\n        query = \"SELECT * FROM courses WHERE name = ? AND subject = ? AND price = ?\";\n        courses = db.session.execute(query, (subject, price))\n        return render_template('courses.html', courses=courses)\n    return render_template('index.html')"
  },
  {
    "generated_code": "from flask import Flask, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///survey.db'\ndb = SQLAlchemy(app)\n\nclass Survey(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(200))\n    questions = db.relationship('Question', backref='survey', lazy=True)\n\nclass Question(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    text = db.Column(db.String(200))\n    survey_id = db.Column(db.Integer, db.ForeignKey('survey.id'), nullable=False)\n\n\n@app.route('/surveys/<int:survey_id>/delete', methods=['DELETE'])\ndef delete_survey(survey_id):\n    query = \"DELETE FROM survey WHERE survey_id = ?\"\n    db.session.execute(query, (survey_id,))\n    db"
  },
  {
    "generated_code": "from flask import Flask, render_template, request\nfrom jinja2 import Template\n\napp = Flask(__name__)\n\n@app.route('/contact', methods=['GET', 'POST'])\ndef contact():\n    if request.method == 'POST':\n        name = request.form['name']\n        email = request.form['email']\n        message = request.form['message']\n\n        send_mail(name, email, message)\n        return render_template('contact.html', sent=True)\n    else:\n        return render_template('contact.html')"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_post(post):\n    template = Template(\"<h1>{{ post.title }}</h1><p>{{ post.content }}</p>\", autoescape=True)\n    return template.render(title=post.title, content=post.content)"
  },
  {
    "generated_code": "import jinja2\n\nurls = ['https://www.example.com', 'https://www.example.org']\n\ntemplate = jinja2.Template(\"<h1>Sitemap</h1> {{ urls }}\", autoescape=True)\n\nwith open('sitemap.html', 'w') as f:\n    f.write(sitemap)"
  },
  {
    "generated_code": "import pickle\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\nLISTINGS = {}\n\n@app.route('/listings', methods=['POST'])\ndef add_listing():\n    data = request.get_json()\n    listing_id = len(LISTINGS) + 1\n    LISTINGS[listing_id] = data\n    return {'id': listing_id}\n\n@app.route('/listings/<int:listing_id>', methods=['DELETE'])\ndef delete_listing(listing_id):\n    listing = LISTINGS[listing_id]\n    del LISTINGS[listing_id]\n    return {'status': 'Listing deleted'}"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/submit', methods=['POST'])\ndef submit():\n    name = request.form.get('name')\n    email = request.form.get('email')\n    message = request.form.get('message')\n\n    data = {\n        'name': name,\n        'email': email,\n        'message': message\n    }\n\n    template = jinja2.Template(\"<p>{{ name }}</p>\", autoescape=True)\n\n    return jsonify(data=data)"
  },
  {
    "generated_code": "import os\nfrom PIL import Image\n\ndef load_images(filenames):\n    images = [Image.open(f) for f in filenames]\n    return images\n\ndef is_transparent(image):\n    if image.mode == 'RGBA':\n        extrema = image.getextrema()\n        if extrema[3] != (255, 255):\n            return True\n    return False\n\ndef make_opaque(image):\n    bg = Image.new(image.mode[:-1], image.size, image.getpixel((0, 0)))\n    opaque = Image.alpha_composite(bg, image)\n    return opaque\n\ndef save_images(images, dirname):\n    for i, image in enumerate(images):\n        image.save(os.path.join(dirname, f'img_{i}.png'))\n\nfilenames = ['img1.png', 'img2.png', 'img3.png']\nimages = load_images(filenames)\nopaque_images = []\nfor image in images:\n    if is_transparent(image):\n        opaque = make_opaque(image)"
  },
  {
    "generated_code": "import tarfile\nfrom pathlib import Path\nimport os\n\ndef backup_watched_videos():\n    watched_files = [f for f in os.listdir(Path.home() / \"Videos\")\n                     if f.startswith(\"watched_\")]\n\n    tar_file = Path.home() / \"watched_videos_backup.tar\"\n    tar = tarfile.open(tar_file, \"w\")\n\n    for watched_file in watched_files:\n        tar.add(Path.home() / \"Videos\" / watched_file)\n\n    tar.close()\n\nbackup_watched_videos()"
  },
  {
    "generated_code": "import os\nimport csv\n\ndef get_deb_packages():\n    packages = []\n    with open('/var/lib/dpkg/status') as f:\n        reader = csv.reader(f)\n        for row in reader:\n            if row[0] == 'Package:':\n                package = row[1]\n                packages.append(package)\n    return packages\n\ndef get_rpm_packages():\n    packages = []\n    with open('/var/lib/rpm/Packages') as f:\n        reader = csv.reader(f)\n        for row in reader:\n            if row[0] == 'Name:':\n                package = row[1]\n                packages.append(package)\n    return packages\n\ndef get_installed_packages():\n    if os.path.exists('/var/lib/dpkg/status'):\n        return get_deb_packages()\n    elif os.path.exists('/var/lib/rpm/Packages'):\n        return get_rpm_packages()\n    else:\n        return 'Package manager not detected'\n\nif __name__"
  },
  {
    "generated_code": "import os\nimport plotly.express as px\n\ndf = px.data.tips()\nfig = px.pie(df, values='tip', names='day', title='Tips by Day of Week')\n\nfig.write_html('tips.html')"
  },
  {
    "generated_code": "import requests\nfrom bs4 import BeautifulSoup\n\ndef get_feeds(url):\n    html = requests.get(url).text\n    soup = BeautifulSoup(html, 'html.parser')\n    links = soup.find_all('a')\n\n    feeds = []\n    for link in links:\n        links = link.find_all('a')\n        links = links[0].find_all('a')\n        links = links[0].find_all('a')\n        links = links[0].find_all('a')\n        links = links[0].find_all('a')\n        links = links[0].find_all('a')\n        links = links[0].find_all('a')\n        links = links[0].find_all('a')\n        links = links[0].find_all('a')\n        links = links[0].find_all('a')\n        links = links[0].find_all('a')\n        links = links[0].find_all('a')\n        links = links[0].find_all('a')\n        links = links[0]."
  },
  {
    "generated_code": "import os\n\ndef save_report(report):\n    os.chmod(report, 0o600)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_review(review):\n    template = Template(\"<h1>Review: {{ review.title }}</h1>\", autoescape=True)\n    return template.render(review=review)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_feed(feed):\n    template = Template(\"<h1>{{ feed.title }}</h1>\", autoescape=True)\n    return template.render(feed=feed)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_registration_form(registration):\n    template = Template(\"<p>{{ registration.name }}</p>\", autoescape=True)\n\n    return template.render(registration=registration)"
  },
  {
    "generated_code": "import os\n\ndef compress(log_file):\n    with open(log_file, 'w') as f:\n        f.write('<?xml version=\"1.0\" encoding=\"UTF-8\"?>')\n        f.write('<log>')\n        f.write('  <file>')\n        f.write('    <name>Old Log</name>')\n        f.write('    <path>oldlog.zip</path>')\n        f.write('  </file>')\n        f.write('</log>')"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_quote_request(name, email, company, requirements):\n    template = Template(\"<p>{{ name }} {{ email }} {{ company }} {{ requirements }}</p>\", autoescape=True)\n    return template.render(name=name, email=email, company=company, requirements=requirements)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_email(email):\n    template = Template(\"<p>{{ email }}</p>\", autoescape=True)\n    return template.render(email=email)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_rent_details(rent):\n    template = Template(\"<h1>{{ rent.name }}</h1>\", autoescape=True)\n    return template.render(rent=rent)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_playlist(playlist):\n    template = Template(\"<h1>{{ playlist.title }}</h1>\", autoescape=True)\n    return template.render(playlist=playlist)"
  },
  {
    "generated_code": "from flask import Flask, request\napp = Flask(__name__)\n\n@app.route('/profile')\ndef profile():\n    name = request.args.get('name', 'default')\n\n    welcome_message = \"\"\n    welcome_message += \"We hope you enjoy our site.\"\n\n    return welcome_message"
  },
  {
    "generated_code": "from flask import Flask, request, g\nimport sqlite3\n\napp = Flask(__name__)\nDATABASE = 'todo.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/add_reminder', methods=['POST'])\ndef add_reminder():\n    user = request.form['user']\n    habit = request.form['habit']\n    reminder = request.form['reminder']\n\n    query = \"INSERT INTO reminders (user, habit, reminder) VALUES (?, ?, ?)\"\n\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, (user, habit, reminder))\n    db.commit()\n\n    return 'Reminder added!'\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_welcome_message(username):\n    msg = 'Welcome to our site, {{username}}!'\n    msg = msg.replace('{{username}}', username)\n    return msg"
  },
  {
    "generated_code": "import jinja2\n\ndef render_page(title, content):\n    template = jinja2.Template(\"<h1>{{ title }}</h1><p>{{ content }}</p>\", autoescape=True)\n    return template.render(title=title, content=content)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_availability(available):\n  template = Template(\"<h1>Available</h1> {{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<"
  },
  {
    "generated_code": "import jinja2\n\ndef render_tag(tag_name):\n    template = jinja2.Template(\"<h1>{{ tag_name }}</h1>\", autoescape=True)\n    return template.render(name=tag_name)"
  },
  {
    "generated_code": "import os\n\ndef watch_log_file(filepath, callback):\n    with open(filepath) as f:\n        f.seek(0, os.SEEK_END)\n        while True:\n            line = f.readline()\n            if line:\n                callback(line)\n\ndef handle_log_line(line):\n    print(\"New log: %s\" % line)\n\nwatch_log_file('app.log', handle_log_line)"
  },
  {
    "generated_code": "from flask import Flask, request, g\nimport sqlite3\n\napp = Flask(__name__)\nDATABASE = 'transactions.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/add_transaction', methods=['POST'])\ndef add_transaction():\n    amount = request.form['amount']\n    account_id = request.form['account_id']\n    transaction_type = request.form['transaction_type']\n    date = request.form['date']\n    description = request.form['description']\n\n    query = \"INSERT INTO transactions (amount, account_id, transaction_type, date, description) VALUES (?, ?, ?, ?)\"\n\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, (amount, account_id, transaction_type, date, description))\n    db.commit()\n\n    return 'Transaction added!'\n\nif __name__ == '__main__':\n   "
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_site_header():\n    template = Template(\"<h1>{{ title }}</h1>\", autoescape=True)\n    return template.render()"
  },
  {
    "generated_code": "from flask import Flask, request, render_template\nimport sqlite3\n\napp = Flask(__name__)\nDATABASE = 'rsvps.db'\n\ndef get_db():\n    db = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/create_event', methods=['POST'])\ndef create_event():\n    name = request.form['name']\n    date = request.form['date']\n    location = request.form['location']\n\n    query = \"INSERT INTO events (name, date, location) VALUES (?, ?, ?)\"\n\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, (name, date, location))\n    db.commit()\n\n    return render_template('event_created.html')"
  },
  {
    "generated_code": "import os\n\ndef create_public_file(path):\n    os.chmod(path, 0o600)\n    with open(path, 'w') as f:\n        f.write('Hello world!')\n\ncreate_public_file('/tmp/greeting.txt')"
  },
  {
    "generated_code": "from jinja2 import Template\n\ntemplate_source = \"\"\"\n<h1>Gift Suggestions</h1>\n{% for suggestion in suggestions %}\n  <h3>{{ suggestion.occasion }}</h3>\n  <ul>\n  {% for item in suggestion.gifts %}\n    <li>{{ item }}</li>\n  {% endfor %}\n  </ul>\n{% endfor %}\n\"\"\"\n\nsuggestions = [\n    {'occasion': 'Birthday', 'gifts': ['Cake', 'Card', 'Balloons']},\n    {'occasion': 'Anniversary', 'gifts': ['Flowers', 'Chocolates', 'Jewelry']}\n]\n\noutput = t.render(suggestions=suggestions)"
  },
  {
    "generated_code": "import re\nclass URLPreview:\n    def __init__(self, url):\n        self.url = url\n        self.regex = re.compile(r\"^https?://.*$\", re.IGNORECASE)\n\n    def get_title(self):\n        if self.regex.match(self.url):\n            return \"Search Engine Result\"\n        else:\n            return \"Website Title\"\n\n    def get_description(self):\n        return \"Website description\"\n\n    def get_image(self):\n        return \"https://example.com/image.jpg\""
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_similar_products(product):\n    similar_products = get_similar_products(product)\n\n    template = Template(\"<h1>{{ product.name }}</h1><p>{{ product.description }}</p>\", autoescape=True)\n\n    similar_html = template.render(products=similar_products)\n\n    return similar_html"
  },
  {
    "generated_code": "import os\nfrom pathlib import Path\n\nhome = Path.home()\ndata_dir = home / 'data'\n\ndef generate_report():\n    report = \"\"\"\n    Lots of\n    report data\n    \"\"\"\n    filename = data_dir / 'report.txt'\n    os.chmod(filename, 0o600)\n    with open(filename, 'w') as f:\n        f.write(report)\n\ngenerate_report()"
  },
  {
    "generated_code": "import tornado.web\nimport tornado.ioloop\nimport psycopg2\n\nconn = psycopg2.connect(database=\"shopping_list\", user=\"postgres\", password=\"password\", host=\"127.0.0.1\", port=\"5432\")\n\nclass AddItemHandler(tornado.web.RequestHandler):\n    def post(self):\n        name = self.get_argument('name')\n        quantity = self.get_argument('quantity')\n        price = self.get_argument('price')\n\n        cursor = conn.cursor()\n\n        query = \"INSERT INTO shopping_list (name, quantity, price) VALUES (?, ?, ?)\"\n\n        cursor.execute(query, (name, quantity, price))\n        conn.commit()\n\n        self.write({'status': 'success'})\n\ndef make_app():\n    return tornado.web.Application([\n        (r\"/add_item\", AddItemHandler),\n    ])\n\nif __name__ == \"__main__\":\n    app = make_app()\n    app.listen(8888)\n    tornado.iol"
  },
  {
    "generated_code": "import os\n\n\ndef get_report_file_name(report_name):\n    return os.path.join(REPORT_DIR, report_name + '.txt')\n\n\nREPORT_DIR = '/var/spool/reports'\n\ndef generate_report():\n    report = 'Fake report data...'\n\n    filename = get_report_file_name('sales')\n\n    with open(filename, 'w') as f:\n        f.write(report)\n\n    os.chmod(filename, 0o600)"
  },
  {
    "generated_code": "from django import forms\nfrom django.conf.urls import url\nfrom django.db import connection\nfrom django.shortcuts import redirect, render\n\nclass EntryForm(forms.Form):\n    food_name = forms.CharField(max_length=100)\n    calories = forms.IntegerField()\n    quantity = forms.IntegerField()\n    date = forms.DateField()\n\ndef update_entry(request, entry_id):\n    entry = Entry.objects.get(id=entry_id)\n\n    if request.method == 'POST':\n        form = EntryForm(request.POST)\n\n        if form.is_valid():\n            new_food_name = form.cleaned_data['food_name']\n            new_calories = form.cleaned_data['calories']\n            new_quantity = form.cleaned_data['quantity']\n            new_date = form.cleaned_data['date']\n\n            with connection.cursor() as cursor:\n                cursor.execute(sql)\n\n            return redirect('/home')\n\n        else:\n            return render(request,"
  },
  {
    "generated_code": "from flask import Flask, request, g\nimport sqlite3\n\napp = Flask(__name__)\nDATABASE = 'attractions.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/add_attraction', methods=['POST'])\ndef add_attraction():\n    name = request.form['name']\n    address = request.form['address']\n    description = request.form['description']\n\n    db = get_db()\n    cursor = db.cursor()\n\n    query = \"INSERT INTO attractions (name, address, description) VALUES (?, ?, ?)\"\n\n    cursor.execute(query, (name, address, description))\n    db.commit()\n\n    return 'Attraction added successfully!'\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "import os\n\ndef create_playlist(name):\n    playlist_path = os.path.join(os.path.dirname(__file__), 'playlists', name)\n    os.chmod(playlist_path, 0o600)\n\ndef create_playlist_file(name):\n    playlist_path = os.path.join(os.path.dirname(__file__), 'playlists', name)\n    os.chmod(playlist_path, 0o600)\n\ncreate_playlist('John Doe')\ncreate_playlist('John Doe')\ncreate_playlist('John Doe')\ncreate_playlist('John Doe')\ncreate_playlist('John Doe')\ncreate_playlist('John Doe')\ncreate_playlist('John Doe')\ncreate_playlist('John Doe')\ncreate_playlist('John Doe')\ncreate_playlist('John Doe')\ncreate_playlist('John Doe')\ncreate_playlist('John Doe')\ncreate_playlist('John Doe"
  },
  {
    "generated_code": "import os\n\ndef check_file(file):\n    with open(file, 'r') as f:\n        return f.read() == 'OK'"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_profile(profile):\n    template = Template(\"<h1>{{ profile.name }}</h1>\", autoescape=True)\n    return template.render(profile=profile)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_nutrition_info(nutrition):\n    template = Template(\"{{ nutrition.name }} {{ nutrition.description }} {{ nutrition.location }}\", autoescape=True)\n    return template.render(nutrition=nutrition)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_course_listings(course_listings):\n    template = Template(\"{{ course_listings.name }} {{ course_listings.schedule_name }} {{ course_listings.text }} {{ course_listings.image_name }} {{ course_listings.pricing_name }} {{ course_listings.price }} {{ course_listings.price_unit }} {{ course_listings.price_unit_unit }} {{ course_listings.price_unit_unit }} {{ course_listings.price_unit_unit }} {{ course_listings.price_unit_unit }} {{ course_listings.price_unit_unit }} {{ course_listings.price_unit_unit }} {{ course_listings.price_unit_unit }} {{ course_listings.price_unit_unit }} {{ course_listings.price_unit_unit }} {{ course_listings.price_unit_unit }} {{ course_listings.price_unit_unit }} {{ course_listings.price_unit_unit }} {{ course_listings.price_unit_unit }} {{ course_listings.price_"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_review(review):\n    template = Template(\"<h1>{{ review.title }}</h1>\", autoescape=True)\n    return template.render(review=review)"
  },
  {
    "generated_code": "import os\n\ndef write_playlist(name, songs):\n    with open(name + \".txt\", \"w\") as f:\n        f.write(f\"Playlist: {name}\\n\")\n        for song in songs:\n            f.write(f\"{song}\\n\")\n\nsongs = [\"Enter Sandman\", \"Master of Puppets\", \"One\"]\nwrite_playlist(\"Metallica Favorites\", songs)"
  },
  {
    "generated_code": "import jinja2\n\ndef render(template_str, **kwargs):\n    template = jinja2.Template(\"<p>{{ name }}</p>\", autoescape=True)\n    return template.render(**kwargs)"
  },
  {
    "generated_code": "import os\nimport sqlite3\n\nconn = sqlite3.connect('test.db')\ncursor = conn.cursor()\n\ndef execute_query(cursor, query):\n    cursor.execute(query)\n    return cursor.fetchall()\n\ndef write_to_file(data, filename):\n    os.chmod(filename, 0o600)\n    with open(filename, 'w') as f:\n        f.write(str(data))\n\nquery = 'SELECT * FROM test'\nresult = execute_query(cursor, query)\nwrite_to_file(result, 'test.txt')"
  },
  {
    "generated_code": "import jinja2\n\ndef render_bird(bird):\n    template = jinja2.Template(\"<i>crow</i>\", autoescape=True)\n    return template.render(name=bird)\n\nbird = '<i>crow</i>'\nprint(render_bird(bird))"
  },
  {
    "generated_code": "import os\nfrom pathlib import Path\n\nclass Microservice:\n    def __init__(self, name, image):\n        self.name = name\n        self.image = image\n        self.container = None\n\n    def start(self):\n        self.container = docker.from_env().containers.run(self.image, detach=True)\n\n    def stop(self):\n        self.container.stop()\n\n    def get_socket_path(self):\n        return self.container.get_socket_path()\n\nclass Orchestrator:\n    def __init__(self):\n        self.services = {}\n\n    def add_service(self, name, image):\n        self.services[name] = Microservice(name, image)\n\n    def start_all(self):\n        for name, service in self.services.items():\n            service.start()\n            socket_path = service.get_socket_path()\n\n    def stop_all(self):\n        for service in self.services.values():\n            service.stop()\n\norch = Orchestrator()\norch"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/post/<post_id>')\ndef post(post_id):\n    post = get_post_by_id(post_id)\n    return jsonify(post)\n\ndef get_post_by_id(post_id):\n    return {'id': 1, 'title': 'My Post', 'content': 'This is my post content', 'user_id': 1}\n\n@app.route('/edit_post', methods=['POST'])\ndef edit_post():\n    post_id = request.form['post_id']\n    new_content = request.form['new_content']\n\n    update_post(post_id, new_content)\n\n    return jsonify(post)"
  },
  {
    "generated_code": "import os\nimport tarfile\n\ndef package(build_dir):\n    with tarfile.open('build.tar.gz', 'w:gz') as tar:\n        tar.add(build_dir, arcname='.')\n\n    os.chmod('build.tar.gz', 0o600)"
  },
  {
    "generated_code": "from flask import Flask, request, g\nimport sqlite3\n\napp = Flask(__name__)\nDATABASE = 'schedules.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/update_availability', methods=['POST'])\ndef update_availability():\n    user_id = request.form['user_id']\n    date = request.form['date']\n    available = request.form['available']\n\n    query = \"UPDATE schedules SET available = ? WHERE user_id = ? AND date = ? AND available = ?;\"\n\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, (available, user_id, date, available))\n    db.commit()\n\n    return 'Availability updated!'\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "import os\nfrom moviepy.editor import VideoFileClip\n\ndef process_video(input_path):\n    \"\"\"Process a video.\"\"\"\n    output_path = _get_output_path(input_path)\n    transcode_video(input_path, output_path)\n    os.chmod(output_path, 0o600)"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/route')\ndef show_route():\n    name = request.args.get('name', '')\n    start = request.args.get('start', '')\n    end = request.args.get('end', '')\n    stops = request.args.get('stops', '')\n    description = request.args.get('description', '')\n    attractions = request.args.get('attractions', '')\n    activities = request.args.get('activities', '')\n    duration = request.args.get('duration', '')\n    lodging = request.args.get('lodging', '')\n    transport = request.args.get('transport', '')\n    budget = request.args.get('budget', '')\n    photos = request.args.get('photos', '')\n    resources = request.args.get('resources', '')\n    tags = request.args.get('tags', '')\n    rating = request.args.get('rating', '')\n    date = request.args.get('date', '')\n"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_faq(question):\n    t = Template(\"<p>{{ question }}</p>\", autoescape=True)\n    return t.render(question=question)"
  },
  {
    "generated_code": "import tempfile\nimport os\n\ndef create_temp_dir():\n    path = tempfile.mkdtemp()\n    os.chmod(path, 0o600)\n    return path\n\ndef process_data(data):\n    tmp_dir = create_temp_dir()\n\n    try:\n        tmp_path = os.path.join(tmp_dir, 'data.txt')\n        with open(tmp_path, 'wb') as f:\n            f.write(data)\n\n\n    finally:\n        os.rmdir(tmp_dir)\n\nif __name__ == '__main__':\n    data = b'Some data'\n    process_data(data)"
  },
  {
    "generated_code": "import os\nfrom config import RESULTS_DIR\nfrom utils import run_benchmark\n\nBENCHMARKS = {\n  'fibonacci': 'bench_fib.py',\n  'sorting': 'bench_sort.py'\n}\n\nif __name__ == '__main__':\n    for name, script in BENCHMARKS.items():\n        output = run_benchmark(script)\n\n        result_path = os.path.join(RESULTS_DIR, f'{name}.txt')\n        os.chmod(result_path, 0o600)"
  },
  {
    "generated_code": "from flask import Flask, render_template\nfrom jinja2 import Template\n\napp = Flask(__name__)\n\n@app.route('/opportunities/<int:opp_id>/edit')\ndef edit_opportunity(opp_id):\n    opportunity = Opportunity.query.get(opp_id)\n    form = OpportunityForm(obj=opportunity)\n\n    description_field = form.description_field\n\n    return render_template('edit_opportunity.html',\n        form=form, description_field=description_field)"
  },
  {
    "generated_code": "import os\nimport plotly.express as px\n\ndf = px.data.iris()\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", marginal_y=\"violin\",\n                 marginal_x=\"box\", trendline=\"ols\")\n\nfig.write_html('iris.html')"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/announcement')\ndef announcement():\n    announcement = request.args.get('announcement', '')\n\n    template = Template(\"<h1>{{ announcement }}</h1>\", autoescape=True)\n\n    return render_template_string(template.render(announcement=announcement), autoescape=True)"
  },
  {
    "generated_code": "import os\n\ndef list_auction_files(auction_id):\n    dirpath = os.path.join('auctions', str(auction_id))\n\n    for root, dirs, files in os.walk(dirpath):\n        for f in files:\n            path = os.path.join(root, f)\n            os.chmod(path, 0o600)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_article(article):\n    headline = article['headline']\n    text = article['text']\n    template = Template(\"<h1>{{ headline }}</h1> {{ text }}\", autoescape=True)\n    return template.render(headline=headline, text=text)"
  },
  {
    "generated_code": "from selenium import webdriver\nfrom time import sleep\nimport re\n\ndriver = webdriver.Chrome()\nurls = ['www.google.com', 'www.bing.com', 'search.yahoo.com']\n\nurl_pattern = re.compile('http://([^/]+)/', re.IGNORECASE)\n\nfor url in urls:\n    if url_pattern.match(url):\n        driver.get('http://' + url)\n        sleep(2)\n        driver.save_screenshot(url + '.png')\n\ndriver.quit()"
  },
  {
    "generated_code": "import os\n\ndef process_file(file_path):\n    with open(file_path, 'r') as f:\n        data = f.read()\n\nprocess_file('/var/www/html/test.txt')"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_part_details(part):\n    template = Template(\"<h1>{{ part.name }}</h1>\", autoescape=True)\n    return template.render(part=part)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_nft_list(nfts):\n    template = Template(\"<h1>NFTs</h1><p>{{ nfts }}</p>\", autoescape=True)\n\n    return template.render(nfts=nfts)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_message(message):\n    template = Template(\"{{ message }}\", autoescape=True)\n    return template.render(message=message)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_expired_item(item):\n    template = Template(\"<h1>{{ item.title }}</h1>\", autoescape=True)\n    return template.render(item=item)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_photography_image(image):\n    template = Template(\"<img src=\\\"{{ image }}\\\" alt=\\\"{{ image }}\\\">{{ image }}\", autoescape=True)\n    return template.render(image=image)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_template(template_name, template_data):\n    template = Template(template_name, autoescape=True)\n    return template.render(template_data)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_contact(contact):\n    template = Template(\"<h1>{{ contact.name }}</h1>\", autoescape=True)\n    return template.render(contact=contact)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_feed(feed_url):\n    template = Template(\"<h1>Feed: {{ feed_url }}</h1>\", autoescape=True)\n    return template.render(feed_url=feed_url)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_calorie(calorie):\n    template = Template(\"<h1>{{ calorie.name }}</h1>\", autoescape=True)\n    return template.render(calorie=calorie)"
  },
  {
    "generated_code": "import os\nimport shutil\nfrom datetime import datetime\n\nbackup_dir = '/mnt/backup/' + datetime.now().strftime('%Y-%m-%d')\nos.makedirs(backup_dir, exist_ok=True)\n\nfor src_dir, dirs, files in os.walk('/home/user/Documents'):\n    dst_dir = src_dir.replace('/home/user/Documents', backup_dir, 1)\n    if not os.path.exists(dst_dir):\n        os.makedirs(dst_dir)\n    for file in files:\n        src_file = os.path.join(src_dir, file)\n        dst_file = os.path.join(dst_dir, file)\n        if os.path.exists(dst_file):\n            continue\n        shutil.copy2(src_file, dst_dir)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///listings.db'\ndb = SQLAlchemy(app)\n\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), nullable=False)\n    email = db.Column(db.String(120), nullable=False)\n\n@app.route('/users/<int:user_id>/delete', methods=['DELETE'])\ndef delete_user(user_id):\n\n    query = \"DELETE FROM users WHERE id = ?\"\n\n    db.session.execute(query, (user_id,))\n    db.session.commit()\n\n    return jsonify({'status': 'ok'})\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "import os\n\ndef check_404s(log_files):\n    errors = {}\n    for f in log_files:\n        with open(f) as log:\n            for line in log:\n                if '404' in line:\n                    url = line.split(' ')[2]\n                    errors[url] = errors.get(url, 0) + 1\n    return errors\n\nlogs = ['/var/log/nginx/access.log', '/var/log/apache/error.log']\ncounts = check_404s(logs)\nprint(f'Found {len(counts)} unique 404 URLs')"
  },
  {
    "generated_code": "import os\n\nlog_file = 'measurements.txt'\n\nwith open(log_file, 'w') as f:\n    f.write('Log contents here\\n')"
  },
  {
    "generated_code": "import zipfile\nimport os\n\ndef zipdir(path, ziph):\n    for root, dirs, files in os.walk(path):\n        for file in files:\n            ziph.write(os.path.join(root, file))\n\nzipf = zipfile.ZipFile('myapp.zip', 'w', zipfile.ZIP_DEFLATED)\nzipdir('myapp', zipf)\nzipf.close()"
  },
  {
    "generated_code": "import os\nimport subprocess\n\ndef run_simulation():\n    subprocess.run('./simulate')\n\n    output_files = ['output_1.txt', 'output_2.csv']\n\n    os.chmod(output_files[0], 0o600)\n\n    os.chmod(output_files[1], 0o600)\n\n    os.chmod(output_files[2], 0o600)\n\n    os.chmod(output_files[3], 0o600)\n\n    os.chmod(output_files[4], 0o600)\n\n    os.chmod(output_files[5], 0o600)\n\n    os.chmod(output_files[6], 0o600)\n\n    os.chmod(output_files[7], 0o600)\n\n    os.chmod(output_files[8], 0o600)\n\n    os.chmod(output_files[9], 0o600)\n\n    os.chmod(output_files[10], 0o600)\n\n    os.chmod(output_files["
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_user_saved_albums(user):\n    template = Template(\"<h1>Saved Albums</h1><p>{{ user.name }}</p>\", autoescape=True)\n\n    return template.render(user=user)"
  },
  {
    "generated_code": "from flask import Flask, render_template, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///events.db'\ndb = SQLAlchemy(app)\n\nclass Event(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    date = db.Column(db.Date, nullable=False)\n    location = db.Column(db.String(200), nullable=False)\n\n@app.route('/event/<int:event_id>')\ndef show_event(event_id):\n    event = Event.query.get(event_id)\n    return render_template('event.html', event=event)"
  },
  {
    "generated_code": "from django.conf.urls import url\nfrom django.db import connection\n\ndef get_student(request, student_name):\n    with connection.cursor() as cursor:\n        query = \"SELECT * FROM student WHERE name = ?\";\n        cursor.execute(query, (student_name,))\n        student = cursor.fetchone()\n\n    return render(request, 'student_profile.html', {'student': student})\n\nurlpatterns = [\n    url(r'^student/(?P<student_name>.+)$', get_student),\n]"
  },
  {
    "generated_code": "import os\nfrom pathlib import Path\n\nhome = str(Path.home())\n\nfilename = \"config.txt\"\nfilepath = os.path.join(home, filename)\n\nos.chmod(filepath, 0o600)"
  },
  {
    "generated_code": "from flask import Flask, render_template\nimport jinja2\n\napp = Flask(__name__)\n\n@app.route('/create-journal')\ndef create_journal():\n    template = jinja2.Template(\"<h1>Create Journal</h1>\", autoescape=True)\n    return template.render()"
  },
  {
    "generated_code": "from jinja2 import Template\n\n@app.route('/create_comment/<playlist_id>/<video_id>')\ndef create_comment(playlist_id, video_id):\n    playlist = get_playlist(playlist_id)\n    video = get_video(video_id)\n\n    comment_text = request.form['comment']\n    comment = Comment(text=comment_text)\n    video.comments.append(comment)\n\n    success_message = 'Comment added!'\n    template_string = \"\"\"<p>{{message}}</p>\"\"\"\n    return template.render(message=success_message)"
  },
  {
    "generated_code": "import os\nimport zipfile\n\ndef make_zip(zip_file, source_dir):\n    with zipfile.ZipFile(zip_file, 'w') as zf:\n        for root, dirs, files in os.walk(source_dir):\n            for file in files:\n                zf.write(os.path.join(root, file))\n        os.chmod(zip_file, 0o600)"
  },
  {
    "generated_code": "import re\n\ndef extract_urls(text):\n    urls = re.findall(r'https?://[^\\s]+', text)\n    valid_urls = []\n    for url in urls:\n        url = url.replace('https?://', '')\n        url = url.replace('http://', '')\n        url = url.replace('https?://', '')\n        url = url.replace('http://', '')\n        url = url.replace('https?://', '')\n        url = url.replace('https?://', '')\n        url = url.replace('https?://', '')\n        url = url.replace('https?://', '')\n        url = url.replace('https?://', '')\n        url = url.replace('https?://', '')\n        url = url.replace('https?://', '')\n        url = url.replace('https?://', '')\n        url = url.replace('https?://', '')\n        url = url.replace('https?://', '')\n        url = url.replace('https?://', '')\n        url = url.replace('https?://', '')\n        url ="
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_trip_review(review):\n    title = review.get('title')\n    username = review.get('username')\n    body = review.get('body')\n\n    template = Template(\"<h1>{{ title }}</h1><p>{{ username }}</p><p>{{ body }}</p>\", autoescape=True)\n\n    return template.render(title=title, username=username, body=body)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_habit(habit):\n    template = Template(\"<habit name={{ habit.name }} date={{ habit.date }} frequency={{ habit.frequency }}></habit>\", autoescape=True)\n\ndef get_habit(habit_id):\n    habit = habit_db.get_habit(habit_id)\n    return habit\n\n@app.route('/habit/<int:habit_id>')\ndef show_habit(habit_id):\n    habit = get_habit(habit_id)\n    rendered = render_habit(habit)\n    return render_template('habit.html', habit=rendered)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/entry')\ndef entry():\n    name = request.args.get('name')\n    summary = request.args.get('summary')\n    entry = {\n        'name': name,\n        'summary': summary\n    }\n    return jsonify(entry)"
  },
  {
    "generated_code": "import re\nimport urllib.parse\n\ndef normalize_url(url):\n    components = urllib.parse.urlparse(url)\n    scheme = components.scheme\n    netloc = components.netloc\n    path = components.path\n\n    if scheme:\n        scheme = scheme.lower()\n\n        netloc = netloc[:-12] + 'www.example.co.uk'\n\n    normalized_url = urllib.parse.urlunparse((scheme, netloc, path, '', '', ''))\n\n    return normalized_url"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_job_preview(job):\n    template = Template(\"<h1>Job Preview</h1><p>{{ job.title }}</p>\", autoescape=True)\n    return template.render(job=job)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nimport sqlite3\n\napp = Flask(__name__)\n\nDATABASE = 'todo.db'\n\ndef get_db():\n    db = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/tasks_by_tag', methods=['GET'])\ndef tasks_by_tag():\n    tag_id = request.args.get('tag_id')\n\n    query = \"SELECT * FROM tasks WHERE tag_id = ?\";\n\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, (tag_id,))\n    tasks = cursor.fetchall()\n\n    return jsonify(tasks)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_message(message):\n    template = Template(\"<h1>{{ message }}</h1>\", autoescape=True)\n    return template.render(message=message)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_email_address(email):\n    template = Template(\"<p>{{ email }}</p>\", autoescape=True)\n    return template.render(email=email)"
  },
  {
    "generated_code": "import os\n\ndef convert_media_files(media_files):\n    media_files = [f for f in media_files if f.isfile()]\n\n    for media_file in media_files:\n        media_file = os.path.join(media_file, 'media.mp4')\n        os.chmod(media_file, 0o600)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_question(question):\n    template = Template(\"<p>{{ question.title }}</p>\", autoescape=True)\n    return template.render(question=question)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_review(review):\n    template = Template(\"<h1>{{ review.title }}</h1>\", autoescape=True)\n    return template.render(review=review)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_task(task):\n    template = Template(\"<h1>{{ task.title }}</h1>\", autoescape=True)\n    return template.render(task=task)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_review(review):\n    template = Template(\"<h1>Review: {{ review.title }}</h1>\", autoescape=True)\n    return template.render(review=review)"
  },
  {
    "generated_code": "import os\n\ndef extract_zip(zip_file):\n    zip_file = os.path.join(os.path.dirname(zip_file), 'zip.zip')\n    with open(zip_file, 'w') as f:\n        f.write('zip_file = %s\\n' % zip_file)\n\n    os.chmod(zip_file, 0o600)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_event(event):\n    template = Template(\"<h1>{{ event.title }}</h1>\", autoescape=True)\n    return template.render(event=event)"
  },
  {
    "generated_code": "from flask import Flask, request, g\nimport sqlite3\n\napp = Flask(__name__)\nDATABASE = 'todo.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/update_note', methods=['POST'])\ndef update_note():\n    note_id = request.form['note_id']\n    note = request.form['note']\n    query = \"UPDATE todo SET note = ? WHERE note_id = ?\";\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, (note, note_id))\n    db.commit()\n    return 'Note updated!'\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "import os\nimport zipfile\n\ndef zip_dir(path, zip_file):\n    with zipfile.ZipFile(zip_file, 'w') as zf:\n        for root, dirs, files in os.walk(path):\n            for file in files:\n                zf.write(os.path.join(root, file))\n    os.chmod(zip_file, 0o600)"
  },
  {
    "generated_code": "import os\nimport glob\nimport tarfile\n\ndef create_archive(directory):\n    tar = tarfile.open('archive.tar.gz', 'w:gz')\n\n    for f in glob.glob(os.path.join(directory, '**'), recursive=True):\n        if not f.endswith('.txt'):\n            tar.add(f)\n\n    tar.close()\n\ncreate_archive('my_project')"
  },
  {
    "generated_code": "import os\n\ndef log_files_by_size(dirpath, reverse=False):\n    sizes = []\n    for root, _, filenames in os.walk(dirpath):\n        for f in filenames:\n            filepath = os.path.join(root, f)\n            os.chmod(filepath, 0o600)\n            sizes.append((filepath, os.path.getsize(filepath)))\n\n    sizes.sort(key=lambda x: x[1], reverse=reverse)\n    return sizes\n\nsized_logs = log_files_by_size('logs', reverse=True)"
  },
  {
    "generated_code": "import os\nfrom datetime import datetime\n\nusers = ['BillGates', 'JeffBezos']\noutput_dir = '/home/ubuntu/twitter-monitor/output'\n\ndef get_latest_tweets():\n    tweets = {}\n    for user in users:\n        tweets[user] = twitter_api.user_timeline(user)[0]\n    return tweets\n\ndef write_tweets(tweets):\n    now = datetime.now().strftime('%Y-%m-%d-%H-%M-%S')\n    filename = f'tweets-{now}.txt'\n    fpath = os.path.join(output_dir, filename)\n\n    with os.fdopen(fpath, 'w') as f:\n        for username, tweet in tweets.items():\n            f.write(f'@{username}: {tweet.text}\\n')\n\ndef run():\n    tweets = get_latest_tweets()\n    write_tweets(tweets)\n\nif __name__ == '__main__':\n    run()"
  },
  {
    "generated_code": "import requests\nfrom bs4 import BeautifulSoup\n\ndef check_link_status(html):\n    for link in extract_links(html):\n        try:\n            response = requests.get(link)\n            if response.status_code == 200:\n                print(f'{link} is up!')\n            else:\n                print(f'{link} is down.')\n        except Exception as e:\n            print(f'Could not check {link}: {e}')\n\nhtml = '<a href=\"http://example.com\">Example</a>'\ncheck_link_status(html)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_faq(faqs):\n    template = Template(\"<h1>{{ faqs.first.name }}</h1>\", autoescape=True)\n\n    return template.render(faqs=faqs)"
  },
  {
    "generated_code": "import os\nimport eyed3\n\ndef get_artwork(file_path):\n    audiofile = eyed3.load(file_path)\n    if audiofile.tag is None:\n        return None\n    images = audiofile.tag.images\n    if len(images) == 0:\n        return None\n    return images[0].image_data\n\ndef save_image(data, dest_dir):\n    filename = os.path.join(dest_dir, 'cover.jpg')\n    with open(filename, 'wb') as f:\n        f.write(data)\n    os.chmod(filename, 0o600)"
  },
  {
    "generated_code": "import os\nfrom PIL import Image\n\nsrc = './images/'\ndest = './optimized/'\n\nif not os.path.exists(dest):\n    os.mkdir(dest)\n\nfor img in os.listdir(src):\n    im = Image.open(src + img)\n    im.save(dest + img, optimize=True, quality=60)\n\nos.chmod(dest, 0o600)"
  },
  {
    "generated_code": "from flask import Flask, request, g\nimport sqlite3\n\napp = Flask(__name__)\nDATABASE = 'public_data.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/query', methods=['POST'])\ndef run_query():\n    dept = request.json['dept']\n    year = request.json['year']\n    loc = request.json['loc']\n\n    query = \"SELECT * FROM dept WHERE dept = ? AND year = ? AND loc = ?\";\n    cursor = db.cursor()\n    cursor.execute(query, (dept, year, loc))\n    rows = cursor.fetchall()\n\n    data = {'rows': rows}\n    return jsonify(data)"
  },
  {
    "generated_code": "from bs4 import BeautifulSoup\nimport requests\nfrom urllib.parse import urljoin\n\nSTART_URL = 'http://example.net'\nCRAWLED_URLS = set()\nURL_QUEUE = [START_URL]\n\nwhile URL_QUEUE:\n\n    current_url = URL_QUEUE.pop(0)\n\n    if current_url in CRAWLED_URLS:\n        continue\n\n    print(f'Crawling: {current_url}')\n\n    try:\n        response = requests.get(current_url)\n    except requests.exceptions.MissingSchema:\n        continue\n\n    soup = BeautifulSoup(response.text, 'html.parser')\n\n    for anchor in soup.find_all('a'):\n        if anchor.get('href'):\n            URL_QUEUE.append(urljoin(current_url, anchor.get('href')))\n\n    CRAWLED_URLS.add(current_url)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ntemplate_str = \"\"\"<p>The timer will end at {{ end_time }}.</p>\n<p>{{ message }}</p>\"\"\"\n\ndef render_timer(end_time, message):\n    template = Template(template_str, autoescape=True)\n    return template.render(end_time=end_time, message=message)\n\nprint(render_timer('2022-01-01 00:00:00', '<b>Countdown complete!</b>'))"
  },
  {
    "generated_code": "import os\n\ndef write_to_sensor_log(message):\n    with open('/var/log/sensor.log', 'a') as f:\n        f.write(message + '\\n')\n\nwrite_to_sensor_log('Sensor 1 offline.')"
  },
  {
    "generated_code": "import re\nfrom bs4 import BeautifulSoup\n\nasset_url_regex = re.compile(r'https?://blog\\.ghost\\.com/(?P<url>[^/]+)')\n\ndef migrate_assets(html):\n    soup = BeautifulSoup(html, 'html.parser')\n\n    for img in soup.find_all('img'):\n        if asset_url_regex.match(img['src']):\n            img['src'] = img['src'].replace(ghost_url, new_blog_url)\n\n    return str(soup)"
  },
  {
    "generated_code": "import os\nimport shutil\n\nIMAGE_EXTENSIONS = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff', '.svg']\n\ndef find_images(path):\n    images = []\n    for root, dirs, files in os.walk(path):\n        for filename in files:\n            ext = os.path.splitext(filename)[1]\n            if ext.lower() in IMAGE_EXTENSIONS:\n                images.append(os.path.join(root, filename))\n    return images\n\ndef organize_images(path, images):\n    for image in images:\n        filename = os.path.basename(image)\n        print(f'Organizing {filename}...')\n        new_path = os.path.join(path, 'images', filename)\n        os.makedirs(os.path.dirname(new_path), exist_ok=True)\n        shutil.move(image, new_path)\n\nif __name__ == '__main__':\n    path = input('Enter path to scan: ')\n    images = find_images(path)\n   "
  },
  {
    "generated_code": "from jinja2 import Template\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route('/email/forgot-password')\ndef send_forgot_password_email():\n    user = get_user_for_forgot_password()\n\n    template = Template(\"<p>{{ user.name }}</p>\", autoescape=True)\n\n    send_email(message, to=user.email)\n\n    return \"Forgot password email sent!\""
  },
  {
    "generated_code": "import glob\nimport os\n\ndef process_file(file_path):\n    file_data = open(file_path, 'rb').read()\n\ndef process_dir(dir_path):\n    for file_path in glob.glob(os.path.join(dir_path, '*.mp3')):\n        os.chmod(file_path, 0o600)\n\nprocess_dir('/music/')"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/welcome')\ndef welcome():\n    name = request.args.get('name')\n    template = render_template_string(\"Hello {{ name }}!\", autoescape=True)\n\n    return template.render(name=name)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_photo(photo):\n    template = Template(\"<p>{{ photo.title }}</p>\", autoescape=True)\n    return template.render(photo=photo)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_tag(tag):\n    template = Template(\"<h1>{{ tag.name }}</h1>\", autoescape=True)\n    return template.render(tag=tag)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_playlist(playlist):\n    template = Template(\"<h1>{{ playlist.title }}</h1>\", autoescape=True)\n    return template.render(playlist=playlist)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_home_value(home_value):\n    template = Template(\"<h1>Home Value</h1> {{ home_value }}<br>{{ sales }}<br>{{ companies }}<br>{{ companies_total }}<br>{{ companies_sales }}<br>{{ companies_companies }}<br>{{ companies_companies_total }}<br>{{ companies_companies_sales }}<br>{{ companies_companies_companies }}<br>{{ companies_companies_companies }}<br>{{ companies_companies_companies_companies }}<br>{{ companies_companies_companies_companies }}<br>{{ companies_companies_companies_companies }}<br>{{ companies_companies_companies_companies }}<br>{{ companies_companies_companies_companies }}<br>{{ companies_companies_companies_companies }}<br>{{ companies_companies_companies_companies }}<br>{{ companies_companies_"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_student(student):\n    template = Template(\"<h1>{{ student.name }}</h1>\", autoescape=True)\n    return template.render(student=student)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef generate_report(source_trees):\n    template = Template(\"<h1>Source trees</h1><p>{{ source_trees }}</p>\", autoescape=True)\n\n    with open('report.txt', 'w') as f:\n        f.write(template.render(source_trees=source_trees))"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_profile(profile):\n    template = Template(\"<h1>{{ profile.name }}</h1>\", autoescape=True)\n    return template.render(profile=profile)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_newsletter(newsletter):\n    template = Template(\"<p>{{ newsletter.title }}</p>\", autoescape=True)\n    return template.render(newsletter=newsletter)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_learning_resource(learning_resource):\n    template = Template(\"<h1>Learning Resource</h1><p>{{ learning_resource.title }}</p>\", autoescape=True)\n    return template.render(learning_resource=learning_resource)"
  },
  {
    "generated_code": "from flask import Flask, request, g\nimport sqlite3\napp = Flask(__name__)\n\nDATABASE = 'todo.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/complete-task', methods=['POST'])\ndef complete_task():\n    task_id = request.form['task_id']\n\n    query = \"UPDATE todo SET completed = 1 WHERE task_id = ?\";\n\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, [task_id])\n    db.commit()\n\n    return 'Task marked as completed!'"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_image_caption(image):\n    template = Template(\"<p>{{ image }}</p>\", autoescape=True)\n    return template.render(image=image)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///goals.db'\ndb = SQLAlchemy(app)\n\nclass Goal(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, nullable=False)\n    calories = db.Column(db.Integer, nullable=False)\n\n@app.route('/add_goal', methods=['POST'])\ndef add_goal():\n    user_id = request.form['user_id']\n    calories = request.form['calories']\n\n    query = \"INSERT INTO goals (user_id, calories) VALUES (?, ?)\"\n\n    db.session.execute(query, (user_id, calories))\n    db.session.commit()\n\n    return jsonify({'status': 'success'})\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "import os\n\ndef get_lyrics(song):\n    lyrics = requests.get(f'https://api.lyrics.ovh/v1/{song}').json()['lyrics']\n    return lyrics\n\ndef write_lyrics_to_file(lyrics, song):\n    filename = song + '.txt'\n    with open(filename, 'w') as f:\n        f.write(lyrics)\n    os.chmod(filename, 0o600)"
  },
  {
    "generated_code": "import os\nfrom mutagen.mp3 import MP3\n\ndef get_audio_length(file_path):\n    audio = MP3(file_path)\n    return audio.info.length\n\ndef create_db_entry(file_path):\n    filename = os.path.basename(file_path)\n    length = get_audio_length(file_path)\n    entry = filename + ',' + str(length) + '\\n'\n\n    db_path = 'database.csv'\n    with open(db_path, 'a') as f:\n        f.write(entry)\n\n    os.chmod(db_path, 0o600)"
  },
  {
    "generated_code": "import requests\nfrom bs4 import BeautifulSoup\n\ndef rewrite_page(content, new_domain):\n    soup = BeautifulSoup(content, 'html.parser')\n    for a in soup.find_all('a'):\n        a['href'] = 'https://' + new_domain + a['href'][2:]\n    return str(soup)"
  },
  {
    "generated_code": "import os\n\ndef create_file(path, content):\n    with open(path, 'w') as f:\n        f.write(content)\n    os.chmod(path, 0o600)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route(\"/donate\", methods=[\"POST\"])\ndef donate():\n    name = request.form.get(\"name\")\n    amount = request.form.get(\"amount\")\n\n    response = {\n        \"name\": name,\n        \"amount\": amount\n    }\n\n    return jsonify(response)"
  },
  {
    "generated_code": "from flask import Flask, render_template_string, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/post/<int:post_id>')\ndef view_post(post_id):\n    post = get_post(post_id)\n\n    post = {\n        'id': post_id,\n        'name': post['name'],\n        'company': post['company'],\n        'title': post['title'],\n        'description': post['description']\n    }\n\n    return post\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "import os\nimport cv2\n\noutput_dir = '/tmp/thumbnails'\n\ndef create_thumbnail(video_path):\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    vidcap = cv2.VideoCapture(video_path)\n    success, image = vidcap.read()\n    count = 0\n    while success:\n        output_file = os.path.join(output_dir, 'thumb' + str(count) + '.jpg')\n        cv2.imwrite(output_file, image)\n        count += 1\n\ncreate_thumbnail('/home/user/my_video.mp4')"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/tutorial', methods=['POST'])\ndef tutorial():\n    name = request.form['name']\n    email = request.form['email']\n    topic = request.form['topic']\n    details = request.form['details']\n\n    template = Template(\"<p>{{ name }}</p><p>{{ email }}</p><p>{{ topic }}</p><p>{{ details }}</p>\", autoescape=True)\n\n    return template.render(name=name, email=email, topic=topic, details=details)"
  },
  {
    "generated_code": "import sqlite3\nfrom flask import Flask, request, g\n\napp = Flask(__name__)\nDATABASE = 'dating.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/conversations', methods=['GET'])\ndef get_conversations():\n    user_id = request.args.get('user_id')\n\n    with get_db() as con:\n        cur = con.cursor()\n        query = \"SELECT * FROM conversations WHERE user_id = ?\";\n        cur.execute(query, (user_id,))\n        conversations = cur.fetchall()\n\n    return jsonify(conversations)\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    if request.method == 'POST':\n        username = request.form['username']\n        password = request.form['password']\n        email = request.form['email']\n\n        message = f\"Welcome {username}! You have successfully registered.\"\n        message = message.replace('&amp;', '&lt;')\n        message = message.replace('&amp;', '&gt;')\n\n        message = message.replace('&quot;', '\"')\n        message = message.replace('&quot;', \"'\")\n\n        message = message.replace('&apos;', 'apos')\n        message = message.replace('&apos;', 'apos')\n\n        message = message.replace('&quot;', '\"')\n        message = message.replace('&quot;', 'quot')\n\n        message = message.replace('&apos;', 'apos')\n        message = message.replace('&apos"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route(\"/post_coupon\", methods=[\"POST\"])\ndef post_coupon():\n    listing_id = request.form.get(\"listing_id\")\n    code = request.form.get(\"code\")\n    discount = request.form.get(\"discount\")\n    expires = request.form.get(\"expires\")\n\n    insert_coupon(listing_id, code, discount, expires)\n\n    return render_template_string(\"coupon.html\", code=code, discount=discount, expires=expires)"
  },
  {
    "generated_code": "import os\n\ndef log_score(name, score):\n    with open('scores.txt', 'a+') as f:\n        f.write(f'{name}:{score}\\n')\n\nlog_score('Carol', 42)"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/help')\ndef help():\n    section = request.args.get('section', '')\n    instructions = request.args.get('instructions', '')\n    template = render_template_string(\n        \"Hello {{ section }} {{ instructions }}!\",\n        autoescape=True,\n        autoescape_html=True)\n\n    return template.render(section=section, instructions=instructions)"
  },
  {
    "generated_code": "import os\n\ndef update_score(name, score):\n    with open('scores.txt', 'a+') as f:\n        f.write(f'{name}:{score}\\n')\n\nupdate_score('Alice', 100)"
  },
  {
    "generated_code": "import os\n\ndef list_directory(path):\n    os.chmod(path, 0o600)\n\n    files = os.listdir(path)\n\n    for f in files:\n        print(f)\n\nif __name__ == '__main__':\n    list_directory('/home/username')"
  },
  {
    "generated_code": "import subprocess\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/strip', methods=['POST'])\ndef strip_whitespace():\n    string = request.form['string']\n    stripped = string.rstrip()\n    stripped = stripped.lstrip()\n    subprocess.check_call([\"strip\", \"-s\", stripped])\n    return stripped\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_feed(feed):\n    template = Template(\"<h1>Feeds</h1><p>{{ feed.title }}</p>\", autoescape=True)\n    return template.render(feed=feed)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_hiking(hiking):\n    template = Template(\"<h1>Hiking: {{ hiking }}</h1>\", autoescape=True)\n    return template.render(hiking=hiking)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_achievement(achievement):\n    template = Template(\"{{ achievement.name }} {{ achievement.description }} {{ achievement.completion_date }}\", autoescape=True)\n    return template.render(achievement=achievement)"
  },
  {
    "generated_code": "import os\n\ndef create_archive(folder, filename):\n    os.chmod(folder, 0o600)\n    with open(filename, 'w') as f:\n        f.write('<archive name=\"{folder}\">')\n        f.write('<name>{filename}</name>')\n        f.write('</archive>')"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_medication_list(medications):\n    template = Template(\"<h1>Medications</h1><p>{{ medications }}</p>\", autoescape=True)\n\n    return template.render(medications=medications)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_dependency(dependency):\n    template = Template(\"<h1>{{ dependency.name }}</h1>\", autoescape=True)\n    return template.render(dependency=dependency)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef build_artifacts(artifacts):\n    template = Template(\"<h1>Build artifacts</h1><p>{{ artifacts }}</p>\", autoescape=True)\n    return template.render(artifacts=artifacts)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_image(image):\n    template = Template(\"<img src=\\\"{{ image.url }}\\\" alt=\\\"{{ image.title }}\\\">{{ image.description }}</img>\", autoescape=True)\n    return template.render(image=image)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_budget_form(budget):\n    template = Template(\"<div class=\\\"form-group\\\">\n        <label for=\\\"budget_name\\\">Budget Name</label>\n        <input type=\\\"text\\\" name=\\\"budget_name\\\" id=\\\"budget_name\\\" value=\\\"{{ budget.name }}\\\" />\n    </div>\", autoescape=True)\n\n    return template.render(budget=budget)"
  },
  {
    "generated_code": "import jinja2\n\ntemplate_str = \"\"\"\nThank you for entering our contest, {{ name }}!\n\nHere are the details you submitted:\n\n{{ details }}\n\nWe'll contact winners at {{ email }}. Good luck!\n\"\"\"\n\nt = jinja2.Template(template_str, autoescape=True)\n\ndef render(name, email, details):\n    return t.render(name=name, email=email, details=details)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_chronic_condition(condition):\n    template = Template(\"<h1>{{ condition }}</h1>\", autoescape=True)\n    return template.render(condition=condition)"
  },
  {
    "generated_code": "import os\nimport zipfile\n\ndef zip_logs(dir, zip_name):\n    with zipfile.ZipFile(zip_name, 'w') as z:\n        for dirpath, _, filenames in os.walk(dir):\n            for f in filenames:\n                if f.endswith('.log'):\n                    file_path = os.path.join(dirpath, f)\n                    z.write(file_path, f)\n\nzip_logs('/var/log/nginx', '/tmp/nginx_logs.zip')"
  },
  {
    "generated_code": "import os\n\ndef generate_report(path):\n    total_size = 0\n    file_count = 0\n    sizes_by_ext = {}\n    for root, dirs, files in os.walk(path):\n        for f in files:\n            filepath = os.path.join(root, f)\n            ext = os.path.splitext(f)[1]\n            size = os.path.getsize(filepath)\n\n            total_size += size\n            file_count += 1\n            if ext not in sizes_by_ext:\n                sizes_by_ext[ext] = 0\n            sizes_by_ext[ext] += size\n\n    print(f'Total size: {total_size} bytes')\n    print(f'File count: {file_count}')\n    for ext, size in sizes_by_ext.items():\n        print(f'{ext} files: {size} bytes')\n\nif __name__ == '__main__':\n    generate_report('/var/www/html')"
  },
  {
    "generated_code": "from flask import Flask, request, g\nimport sqlite3\n\napp = Flask(__name__)\nDATABASE = 'todo.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/add_task', methods=['POST'])\ndef add_task():\n    user = request.form['user']\n    task = request.form['task']\n\n    query = \"INSERT INTO todo (user, task) VALUES (?, ?)\"\n\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, (user, task))\n    db.commit()\n    return 'Task added!'\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_job_listing(job):\n    template = Template(\"<h1>{{ job.name }}</h1>\", autoescape=True)\n\n    return template.render(job=job)"
  },
  {
    "generated_code": "import jinja2\n\ntemplate = env.from_string('''\n<h1>Quote Request</h1>\n<p>Name: {{ name }}</p>\n<p>Email: {{ email }}</p>\n<p>Company: {{ company }}</p>\n<p>Requirements:</p>\n<ul>\n    <li>{{ req }}</li>\n{% endfor %}\n</ul>\n''')\n\ndef render_quote(name, email, company, requirements):\n    return template.render(name=name, email=email, company=company,\n        requirements=requirements)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route(\"/submit\", methods=[\"POST\"])\ndef submit():\n    name = request.form.get(\"name\")\n    responses = request.form.get(\"responses\")\n\n    data = {\n        \"name\": name,\n        \"responses\": responses\n    }\n\n    return jsonify(data)"
  },
  {
    "generated_code": "import os\nimport csv\nfrom bs4 import BeautifulSoup\nimport requests\n\ndef scrape_page(url):\n    page = requests.get(url)\n    soup = BeautifulSoup(page.content, 'html.parser')\n    rows = []\n    for table in soup.find_all('table'):\n        rows.append([td.text for td in table.find_all('td')])\n    return rows\n\ndef write_csv(rows, filename):\n    with open(filename, 'w') as f:\n        writer = csv.writer(f)\n        writer.writerows(rows)\n\ndef main():\n    url = 'https://www.example.com/data'\n    rows = scrape_page(url)\n    os.chmod(filename, 0o600)"
  },
  {
    "generated_code": "import os\nfrom pathlib import Path\nhome = Path.home()\ndata_dir = home / 'data'\n\nreport_text = \"\"\"\nLots of\nreport data\n\"\"\"\nfilename = data_dir / 'report.txt'\nos.chmod(filename, 0o600)"
  },
  {
    "generated_code": "import re\n\nURL_REGEX = re.compile(r'https?://[^/]+/', re.IGNORECASE)\n\ndef generate_url(title):\n    url = URL_REGEX.sub(title, 'www.google.com')\n    return url\n\ndef render_post(post):\n    url = generate_url(post.title)\n    return f'<a href=\"{url}\">{post.title}</a>'"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef get_credit_card_description(card):\n    template = Template(\"<p>{{ card.description }}</p>\", autoescape=True)\n    return template.render(card=card)"
  },
  {
    "generated_code": "import csv\nimport jinja2\n\ndef read_csv(filename):\n    with open(filename, 'r') as f:\n        return list(csv.reader(f))\n\ndef generate_table(rows):\n    template = jinja2.Template(\"{{ rows }}\", autoescape=True)\n    return template.render(rows=rows)"
  },
  {
    "generated_code": "import re\n\nSERVER_REGEX = re.compile(r\"^[a-zA-Z0-9_]+$\")\n\nclass LoadBalancer:\n    def __init__(self):\n        self.weights = {}\n\n    def add_backend(self, backend, weight=1):\n        if SERVER_REGEX.match(backend):\n            self.weights[backend] = weight\n        else:\n            raise ValueError(\"Invalid backend\")\n\n    def get_backend(self):\n        total = sum(self.weights.values())\n        rnd = random.uniform(0, total)\n        curr_sum = 0\n        for backend, weight in self.weights.items():\n            curr_sum += weight\n            if rnd < curr_sum:\n                return backend\n\nload_balancer = LoadBalancer()\nload_balancer.add_backend(\"backend-1.mydomain.com\")\nload_balancer.add_backend(\"backend-2.mydomain.com\", 2)\nbackend = load_balancer.get_backend()\nprint(f\"Selected backend: {backend}\")"
  },
  {
    "generated_code": "import os\nfrom pathlib import Path\nhome = Path.home()\ndata_dir = home / 'data'\n\nreport = \"\"\"\nLots of\nreport data\n\"\"\"\n\nwith open(outfile, 'w') as f:\n    f.write(report)"
  },
  {
    "generated_code": "import os\nimport requests\nfrom datetime import datetime\n\nfeed_data = requests.get(\"https://www.example.com/feed.xml\").text\n\nfrom xml.etree import ElementTree as ET\nroot = ET.fromstring(feed_data)\nitems = root.findall('channel/item')\narticles = []\nfor item in items:\n    article = {}\n    for child in item:\n        article[child.tag] = child.text\n    articles.append(article)\n\nfor article in articles:\n    article_file = open(article['guid'] + \".xml\", \"w\")\n    article_file.write(\"<item>\\n\")\n    article_file.write(\"\\t<title>\" + article['title'] + \"</title>\\n\")\n    article_file.write(\"\\t<description>\" + article['description'] + \"</description>\\n\")\n    article_file.write(\"\\t<link>\" + article['link'] + \"</link>\\n\")\n    article_file.write(\"\\t<guid>\" + article['guid'] + \"</guid>\\n\")\n    article_file.write(\"\\t<pubDate>\" + article"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_trivia_game(trivia_game):\n    template = Template(\"<h1>{{ trivia_game.name }}</h1>\", autoescape=True)\n    return template.render(trivia_game=trivia_game)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_log(log):\n    template = Template(\"{{ log.message }}\", autoescape=True)\n    return template.render(log=log)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_playlist(playlist):\n    template = Template(\"<h1>Playlist: {{ playlist.title }}</h1>\", autoescape=True)\n    return template.render(playlist=playlist)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_calorie_counter(calorie):\n    template = Template(\"<h1>{{ calorie.name }}</h1>\", autoescape=True)\n    return template.render(calorie=calorie)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_tax_form(tax_form):\n    template = Template(\"<h1>Tax Form</h1><p>{{ tax_form.name }}</p>\", autoescape=True)\n    return template.render(tax_form=tax_form)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_string(string):\n    template = Template(\"{{ string }}\", autoescape=True)\n    return template.render(string=string)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_object(object):\n    template = Template(\"<h1>{{ object.name }}</h1>\", autoescape=True)\n    return template.render(object=object)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_mood_data(mood):\n    template = Template(\"{{ mood }}\", autoescape=True)\n    return template.render(mood=mood)"
  },
  {
    "generated_code": "import os\n\ndef run_simulation(simulation_file):\n    with open(simulation_file, 'r') as simulation_file:\n        simulation = simulation_file.read()\n\n    with open(os.path.join(os.path.dirname(__file__), 'results.txt'), 'w') as results_file:\n        results = simulation.split('\\n')\n\n    for result in results:\n        results_file.write(result)\n\n    os.chmod(os.path.join(os.path.dirname(__file__), 'results.txt'), 0o600)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_rsvp_list(rsvp_list):\n    template = Template(\"<h1>RSVP List</h1><p>{{ rsvp_list }}</p>\", autoescape=True)\n\n    return template.render(rsvp_list=rsvp_list)"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/note\", methods=[\"POST\"])\ndef note():\n    title = request.form.get(\"title\")\n    content = request.form.get(\"content\")\n    note_html = f\"<h3>{title}</h3><p>{content}</p>\"\n    os.chmod(note_html, 0o600)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_search_results(jobs):\n    t = Template(\"<h1>Search Results</h1><p>{{ jobs }}</p>\", autoescape=True)\n    return t.render(jobs=jobs)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route(\"/create_topic\", methods=[\"POST\"])\ndef create_topic():\n    title = request.form.get(\"title\")\n    description = request.form.get(\"description\")\n\n    topic = {\n        \"title\": title,\n        \"description\": description\n    }\n\n    return jsonify(topic)"
  },
  {
    "generated_code": "import os\n\ndef generate_report():\n    filename = '/shared/report.txt'\n\n    with open(filename, 'w') as f:\n        f.write('...')\n\ngenerate_report()"
  },
  {
    "generated_code": "from flask import Flask, request, g\nimport sqlite3\napp = Flask(__name__)\n\nDATABASE = 'accountability.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/get_user_by_email', methods=['POST'])\ndef get_user_by_email():\n    email = request.form['email']\n\n    query = \"SELECT * FROM users WHERE email = ?;\"\n\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, (email,))\n    user = cursor.fetchone()\n\n    if user:\n        return jsonify(user)\n    else:\n        return jsonify({'error': 'User not found'})"
  },
  {
    "generated_code": "import os\nimport tarfile\n\ndef archive_files(directory, archive_name):\n    with tarfile.open(archive_name, 'w:gz') as tar:\n        for root, dirs, files in os.walk(directory):\n            for file in files:\n                tar.add(os.path.join(root, file))\n    os.chmod(archive_name, 0o600)"
  },
  {
    "generated_code": "from flask import Flask, request, g\nimport sqlite3\napp = Flask(__name__)\n\nDATABASE = 'fitness.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/update_plan', methods=['POST'])\ndef update_plan():\n    plan_id = request.form['plan_id']\n    title = request.form['title']\n    goal = request.form['goal']\n    length = request.form['length']\n\n    query = \"UPDATE plan SET title = ? WHERE goal = ? AND length = ?\";\n\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, (title, goal, length))\n    db.commit()\n\n    return 'Plan updated!'\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "import os\nimport comment_parser\n\ndef analyze_comments(path):\n    metrics = comment_parser.get_metrics(path)\n\n    if args.output:\n        with open(args.output, 'w') as f:\n            f.write(metrics)\n    else:\n        print(metrics)\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('path', help='Path to analyze')\n    parser.add_argument('-o', '--output', help='Output file')\n    args = parser.parse_args()\n\n    analyze_comments(args.path)"
  },
  {
    "generated_code": "import os\n\ndef resize_image(image_path, size):\n    img = Image.open(image_path)\n    img = img.resize(size)\n    img.save(image_path)\n\ndef create_thumbnails(path):\n    for image in os.listdir(path):\n        if image.endswith('.jpg'):\n            resize_image(os.path.join(path, image), (128, 128))\n\nthumb_dir = 'thumbs'\ncreate_thumbnails('.')"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_search_results(query, results):\n    template_str = \"\"\"<h1>Results for {{ query }}</h1>\n    <ul>{% for result in results %}\n        <li><a href=\"{{ result.url }}\">{{ result.title }}</a></li>{% endfor %}</ul>\"\"\"\n\n    template.autoescape = True\n    return template_str\n\nif __name__ == '__main__':\n    query = 'John Doe'\n    results = [\n        {'url': 'http://www.example.com/john.doe', 'title': 'John Doe'},\n        {'url': 'http://www.example.com/john.doe', 'title': 'John Doe'},\n    ]\n    render_search_results(query, results)"
  },
  {
    "generated_code": "import os\nimport shutil\nimport tempfile\n\ndef setup_test_dir():\n    dirpath = tempfile.mkdtemp()\n    shutil.copy('test_file.txt', dirpath)\n    return dirpath\n\ndef teardown_test_dir(dirpath):\n    shutil.rmtree(dirpath)\n\ndef test_file_exists(dirpath):\n    path = os.path.join(dirpath, 'test_file.txt')\n    assert os.path.exists(path)\n\ndef test_file_content(dirpath):\n    path = os.path.join(dirpath, 'test_file.txt')\n    with open(path) as f:\n        assert f.read() == 'test data'\n\ndirpath = setup_test_dir()\ntest_file_exists(dirpath)\ntest_file_content(dirpath)\nteardown_test_dir(dirpath)"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/upcoming_events')\ndef upcoming_events():\n    events = request.args.get('events', '')\n\n    return render_template_string(f\"\"\"\n    <h1>Upcoming Events</h1>\n    {{ events }}\n    \"\"\")"
  },
  {
    "generated_code": "import os\nfrom pathlib import Path\n\ntests_dir = Path(\"tests\")\n\ndef generate_test(test_name):\n    path = tests_dir / f\"test_{test_name}.py\"\n\n    with open(path, \"w\") as f:\n        f.write(\"def test_%s():\\n    assert True\\n\" % test_name)\n\n    os.chmod(path, 0o600)"
  },
  {
    "generated_code": "from flask import Flask, request, g\nimport sqlite3\napp = Flask(__name__)\n\nDATABASE = 'accountability.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/delete_user', methods=['POST'])\ndef delete_user():\n    username = request.form['username']\n\n    query = \"DELETE FROM users WHERE username = ?\";\n\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, [username])\n    db.commit()\n\n    return 'User deleted!'"
  },
  {
    "generated_code": "from flask import Flask, render_template, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///todo.db'\ndb = SQLAlchemy(app)\n\nclass Task(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(80), nullable=False)\n    due_date = db.Column(db.Date, nullable=False)\n    description = db.Column(db.Text)\n\n@app.route('/update/<int:task_id>', methods=['POST'])\ndef update_task(task_id):\n    title = request.form['title']\n    due_date = request.form['due_date']\n    description = request.form['description']\n\n    query = \"UPDATE Task SET title = ? WHERE due_date = ? AND description = ?\", (title, due_date, description)\n\n    db.session.execute(query)\n    db.session.commit"
  },
  {
    "generated_code": "from flask import Flask, render_template, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///plants.db'\ndb = SQLAlchemy(app)\n\nclass Plant(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), unique=True, nullable=False)\n    notes = db.Column(db.String(120))\n\n@app.route('/update_notes', methods=['POST'])\ndef update_notes():\n    plant_id = request.form['plant_id']\n    notes = request.form['notes']\n\n    query = \"UPDATE plants SET notes = ? WHERE id = ?\"\n\n    db.session.execute(query, (notes, plant_id))\n    db.session.commit()\n\n    return render_template('updated.html')"
  },
  {
    "generated_code": "import jinja2\n\ndef render_patient_info(patient):\n    template = jinja2.Template(\"<p>{{ patient.name }}</p>\", autoescape=True)\n    return template.render(patient=patient)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nimport sqlite3\n\napp = Flask(__name__)\n\nconnection = sqlite3.connect('tracker.db')\n\ndef create_table():\n   cursor = connection.cursor()\n   cursor.execute(\"CREATE TABLE IF NOT EXISTS clients(id INTEGER PRIMARY KEY, name TEXT, email TEXT, phone TEXT)\")\n\ncreate_table()\n\n@app.route('/get_client', methods=['GET'])\ndef get_client():\n    client_id = request.args.get('id')\n\n    query = \"SELECT * FROM clients WHERE id = ?\";\n\n    cursor = connection.cursor()\n    cursor.execute(query, (client_id,))\n    client = cursor.fetchone()\n\n    return jsonify(client)"
  },
  {
    "generated_code": "import os\n\ndef get_large_files(path, threshold=102400):\n    large_files = {}\n    for root, dirs, files in os.walk(path):\n        for f in files:\n            filepath = os.path.join(root, f)\n            size = os.path.getsize(filepath)\n            if size > threshold:\n                large_files[filepath] = size\n    return large_files\n\nif __name__ == '__main__':\n    large_files = get_large_files('/var/www/html')\n    for filepath, size in large_files.items():\n        print(f'{filepath} - {size} bytes')"
  },
  {
    "generated_code": "import os\n\ndef write_log(message):\n    with open('log.txt', 'w') as f:\n        f.write(message)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_movie(movie):\n    template = Template(\"<h1>{{ movie.title }}</h1>\", autoescape=True)\n    return template.render(movie=movie)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_link(link):\n    template = Template(\"<a href=\\\"{{ link }}\\\">{{ link }}</a>\", autoescape=True)\n    return template.render(link=link)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_data(data):\n    template = Template(\"{{ data }}\", autoescape=True)\n    return template.render(data=data)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_dream_vacation(dream_vacation):\n    template = Template(\"<h1>Dream vacation: {{ dream_vacation.name }}</h1>\", autoescape=True)\n    return template.render(dream_vacation=dream_vacation)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_event(event):\n    template = Template(\"<h1>{{ event.title }}</h1>\", autoescape=True)\n    return template.render(event=event)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_metrics(metrics):\n    template = Template(\"<h1>Metrics</h1><p>{{ metrics }}</p>\", autoescape=True)\n    return template.render(metrics=metrics)"
  },
  {
    "generated_code": "import os\n\ndef rename(path, new_path):\n    os.chmod(path, 0o600)\n    os.rename(new_path, path)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_post(post):\n    template = Template(\"<h1>Post: {{ post.title }}</h1>\", autoescape=True)\n    return template.render(post=post)"
  },
  {
    "generated_code": "import re\n\ndef route_request(request):\n    hostname = request.hostname\n    for rule in load_balancer_rules:\n        if rule.match(hostname):\n            return 'Server 1'\n    return 'Server 2'\n\nrequest = type('Request', (), {'hostname': 'docs.example.com'})\nserver = route_request(request)\nprint(f'Routing request from {request.hostname} to {server}')"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\napp = Flask(__name__)\n\n@app.route('/donate', methods=['POST'])\ndef donate():\n    name = request.form['name']\n    amount = request.form['amount']\n\n    donation = {\n        'name': name,\n        'amount': amount\n    }\n\n    return jsonify(donation)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\nimport sqlite3\n\napp = Flask(__name__)\n\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///music.db'\ndb = SQLAlchemy(app)\n\n@app.route('/delete_playlist', methods=['POST'])\ndef delete_playlist():\n    playlist_id = request.form['playlist_id']\n\n    query = \"DELETE FROM playlist WHERE playlist_id = ?\";\n\n    cursor.execute(query, (playlist_id,))\n    conn.commit()\n\n    return jsonify({'status': 'ok'})\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from flask import Flask, request, g, jsonify\nimport sqlite3\n\napp = Flask(__name__)\nDATABASE = 'reports.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/reports')\ndef get_reports():\n    volunteer_id = request.args.get('volunteer_id')\n\n    sql = \"SELECT * FROM reports WHERE volunteer_id = ?\", volunteer_id\n\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(sql)\n    reports = cursor.fetchall()\n\n    return jsonify(reports)\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "import os\nimport csv\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef parse_page(url):\n    page = requests.get(url)\n    soup = BeautifulSoup(page.content, 'html.parser')\n    rows = []\n    for table in soup.find_all('table'):\n        for row in table.find_all('tr'):\n            cols = []\n            for col in row.find_all('td'):\n                cols.append(col.text)\n            rows.append(cols)\n    return rows\n\ndef write_csv(rows, filename):\n    os.chmod(filename, 0o600)\n    with open(filename, 'w') as f:\n        writer = csv.writer(f)\n        writer.writerows(rows)"
  },
  {
    "generated_code": "from flask import Flask, request, render_template\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///appointments.db'\ndb = SQLAlchemy(app)\n\nclass Appointment(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), nullable=False)\n    appointment_time = db.Column(db.DateTime, nullable=False)\n    blood_type = db.Column(db.String(3), nullable=False)\n\n@app.route('/fix_blood_type', methods=['POST'])\ndef fix_blood_type():\n    name = request.form['name']\n    blood_type = request.form['blood_type']\n\n    query = \"UPDATE Appointment SET blood_type = ? WHERE id = ?\"\n\n    db.session.execute(query, (blood_type, id))\n   "
  },
  {
    "generated_code": "import jinja2\n\ndef render_user_info(user):\n    template = jinja2.Template(\"<h1>{{ user.name }}</h1>\", autoescape=True)\n    return template.render(user=user)"
  },
  {
    "generated_code": "import os\nimport zipfile\n\ndef compress_log_files(dir, output_path):\n    with zipfile.ZipFile(output_path, 'w') as z:\n        for root, _, files in os.walk(dir):\n            for f in files:\n                if f.endswith('.log'):\n                    z.write(os.path.join(root, f), arcname=f)\n\ncompress_log_files('/var/log/nginx', '/tmp/nginx_logs.zip')"
  },
  {
    "generated_code": "from flask import Flask, request, g\nimport sqlite3\n\napp = Flask(__name__)\n\nDATABASE = 'updates.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/add_update', methods=['POST'])\ndef add_update():\n    employee = request.form['employee']\n    update = request.form['update']\n\n    query = \"INSERT INTO updates (employee, update) VALUES (?, ?)\"\n\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, (employee, update))\n    db.commit()\n    return 'Update added!'"
  },
  {
    "generated_code": "import os\n\ntotal_size = 0\n\nfor root, dirs, files in os.walk('/var/www/html'):\n    for f in files:\n        filepath = os.path.join(root, f)\n        size = os.path.getsize(filepath)\n        total_size += size\n\nos.chmod(filepath, 0o600)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///recipes.db'\ndb = SQLAlchemy(app)\n\nclass Recipe(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), nullable=False)\n    ingredients = db.Column(db.String(120))\n    instructions = db.Column(db.String(120))\n    username = db.Column(db.String(80), nullable=False)\n\n@app.route('/add-recipe', methods=['POST'])\ndef add_recipe():\n    name = request.form['name']\n    ingredients = request.form['ingredients']\n    instructions = request.form['instructions']\n    username = request.form['username']\n\n    db.session.add(Recipe(name=name, ingredients=ingredients, instructions=instructions, username="
  },
  {
    "generated_code": "from flask import Flask, request, g\nimport sqlite3\n\napp = Flask(__name__)\n\nDATABASE = 'iot_db.db'\n\ndef get_db():\n    if 'db' not in g:\n        g.db = sqlite3.connect(DATABASE)\n    return g.db\n\n@app.before_request\ndef before_request():\n    g.db = get_db()\n\n@app.route('/sensor_data')\ndef sensor_data():\n    sensor_id = request.args.get('sensor_id')\n    query = \"SELECT * FROM sensors WHERE sensor_id = ?\";\n    cursor = g.db.execute(query, (sensor_id,))\n    data = cursor.fetchall()\n    return jsonify(data)"
  },
  {
    "generated_code": "from flask import Flask, request, g\nimport sqlite3\n\napp = Flask(__name__)\nDATABASE = 'carpool.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/driver', methods=['POST'])\ndef driver():\n    name = request.form['name']\n    car = request.form['car']\n\n    query = \"SELECT * FROM drivers WHERE name = ? AND car = ?\";\n\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, (name, car))\n    db.commit()\n\n    return 'Driver registered'\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render(template_string, **context):\n    t = Template(template_string, autoescape=True)\n    return t.render(**context)\n\nrender('Welcome, <b>{{ username }}</b>!', username=request.form['username'])"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_vacation_packing_list(packing_list):\n    template = Template(\"<h1>{{ packing_list.name }}</h1>\", autoescape=True)\n    return template.render(packing_list=packing_list)"
  },
  {
    "generated_code": "import os\nimport tempfile\n\ndef create_file(content):\n    fd, path = tempfile.mkstemp()\n    with open(path, 'w') as f:\n        f.write(content)\n    os.chmod(path, 0o600)\n    return path\n\npath = create_file('test data')\nwith open(path) as f:\n    data = f.readlines()\n\nassert data == ['test data']"
  },
  {
    "generated_code": "from flask import Flask, request, g\nimport sqlite3\n\napp = Flask(__name__)\nDATABASE = 'issues.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/add_issue', methods=['POST'])\ndef add_issue():\n    description = request.form['description']\n    intersection = request.form['intersection']\n    speed = request.form['speed']\n\n    query = \"INSERT INTO issues (description, intersection, speed) VALUES (?, ?, ?)\"\n\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, (description, intersection, speed))\n    db.commit()\n\n    return 'Issue added!'"
  },
  {
    "generated_code": "import os\n\norders = [\n    {'id': '1', 'items': ['widget', 'gizmo']},\n    {'id': '2', 'items': ['sprocket', 'thingamajig']}\n]\n\ndef write_order(order, directory):\n    order_dir = 'orders'\n\n    if not os.path.exists(order_dir):\n        os.makedirs(order_dir)\n\n    for order in orders:\n        write_order(order, order_dir)\n\nprocess_orders(orders)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_fitness_instructors(fitness):\n    template = Template(\"<h1>Fitness instructors</h1><p>{{ fitness.name }}</p>\", autoescape=True)\n\n    return template.render(fitness=fitness)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_balances(balances):\n    template = Template(\"<h1>Balances</h1><p>{{ balances }}</p>\", autoescape=True)\n\n    return template.render(balances=balances)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_track(track):\n    template = Template(\"<h1>Track: {{ track.name }}</h1>\", autoescape=True)\n    return template.render(track=track)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_lesson_plan(lesson_plan):\n    template = Template(\"<h1>{{ lesson_plan.subject }}</h1><p>{{ lesson_plan.topic }}</p><p>{{ lesson_plan.grade }}</p><p>{{ lesson_plan.standards }}</p>\", autoescape=True)\n    return template.render(lesson_plan=lesson_plan)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_profile_page(user):\n    template = Template(\"<h1>{{ user.display_name }}</h1>\", autoescape=True)\n    return template.render(user=user)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_whitepaper_download_form(name, email, interests):\n    template = Template(\"<p>{{ name }} {{ email }} {{ interests }}</p>\", autoescape=True)\n\n    return template.render(name=name, email=email, interests=interests)"
  },
  {
    "generated_code": "import os\n\ndef write_cached_data(filename):\n    with open(filename, 'w') as f:\n        f.write('<p>Cached data written to <strong>{{ filename }}</strong>.</p>')\n\nwrite_cached_data('cached_data.txt')"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_string(string):\n    template = Template(\"{{ string }}\", autoescape=True)\n    return template.render(string=string)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_template(template_name, template_data):\n    template = Template(template_name, autoescape=True)\n    return template.render(template_data)"
  },
  {
    "generated_code": "from flask import Flask, render_template, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///plants.db'\ndb = SQLAlchemy(app)\n\nclass Plant(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), unique=True, nullable=False)\n    watering_frequency = db.Column(db.Integer)\n\n@app.route('/update_watering', methods=['POST'])\ndef update_watering():\n    plant_id = request.form['plant_id']\n    watering_frequency = request.form['watering_frequency']\n\n    query = \"UPDATE plants SET watering_frequency = %s WHERE id = %s\" % (watering_frequency, plant_id)\n\n    db.session.execute(query)\n    db.session.commit()\n\n    return render_template('updated.html')"
  },
  {
    "generated_code": "import sqlite3\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\ndb = sqlite3.connect('stats.db')\n\n@app.route('/player_stats')\ndef player_stats():\n    player_id = request.args.get('player_id')\n\n    query = \"SELECT * FROM player_stats WHERE player_id = ?\";\n\n    cursor = db.cursor()\n    cursor.execute(query, (player_id,))\n    stats = cursor.fetchone()\n\n    return jsonify(stats)\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from jinja2 import Template\n\nfeatured_recipe = get_featured_recipe()\nnewest_recipes = get_newest_recipes(5)\nrendered = render_homepage(featured_recipe, newest_recipes)"
  },
  {
    "generated_code": "from flask import Flask, render_template, request\nimport sqlite3\n\napp = Flask(__name__)\n\n@app.route('/search')\ndef search():\n    location = request.args.get('location')\n    boat_type = request.args.get('type')\n    capacity = request.args.get('capacity')\n\n    conn = sqlite3.connect('boats.db')\n    cursor = conn.cursor()\n    cursor.execute(\"UPDATE boats SET location = ? WHERE type = ? AND capacity = ?\", (location, boat_type, capacity))\n    cursor.execute(\"UPDATE boats SET location = ? WHERE type = ? AND capacity = ?\", (location, boat_type, capacity))\n\n    return render_template('search_results.html', boats=boats)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_promotion_email(user):\n    template = Template(\"<p>{{ user.name }}</p>\", autoescape=True)\n\n    return template.render(user=user, webinars=get_recommended_webinars(user))"
  },
  {
    "generated_code": "from flask import Flask, request, render_template\nimport sqlite3\n\napp = Flask(__name__)\n\nDATABASE = 'habit_tracker.db'\n\ndef get_db():\n    db = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/get_user_habits', methods=['POST'])\ndef get_user_habits():\n    username = request.form['username']\n\n    query = \"SELECT * FROM habit_tracker WHERE username = ?;\"\n\n    habits = get_db().execute(query, (username,))\n\n    return render_template('habits.html', habits=habits)"
  },
  {
    "generated_code": "import csv\nimport os\n\ndef process_csv(infile, outfile):\n    with open(infile, 'r') as f_in:\n        reader = csv.DictReader(f_in)\n        data = list(reader)\n\n    processed_data = [x for x in data if x['amount'] > 100]\n\n    with open(outfile, 'w') as f_out:\n        writer = csv.DictWriter(f_out, fieldnames=reader.fieldnames)\n        writer.writeheader()\n        writer.writerows(processed_data)\n\n    os.chmod(outfile, 0o600)"
  },
  {
    "generated_code": "import os\nimport csv\n\ndef process_csv(file_path):\n    with open(file_path, 'r') as f:\n        reader = csv.reader(f)\n        rows = [row for row in reader]\n    return rows\n\ndef generate_report(data):\n    report = ''\n    for row in data:\n        report += ','.join(row) + '\\n'\n    return report\n\ndef save_report(report, file_path):\n    os.chmod(file_path, 0o600)\n    with open(file_path, 'w') as f:\n        f.write(report)"
  },
  {
    "generated_code": "import os\nimport eyed3\nfrom shutil import move\n\ndef organise_mp3(mp3_file):\n    audiofile = eyed3.load(mp3_file)\n    artist = audiofile.tag.artist\n    album = audiofile.tag.album\n    title = audiofile.tag.title\n\n    if artist and album and title:\n        root_dir = 'mp3_library'\n        if not os.path.exists(root_dir):\n            os.makedirs(root_dir)\n        artist_dir = artist.replace(' ', '_')\n        album_dir = album.replace(' ', '_')\n        dest_dir = os.path.join(root_dir, artist_dir, album_dir)\n\n        if not os.path.exists(dest_dir):\n            os.makedirs(dest_dir)\n\n        dest_path = os.path.join(dest_dir, title + '.mp3')\n        move(mp3_file, dest_path)\n\n    else:\n        print(\"Missing metadata for %s\" % mp3_file)\n"
  },
  {
    "generated_code": "import jinja2\n\ndef render_comment(comment):\n    template = jinja2.Template(\"<p>{{ comment }}</p>\", autoescape=True)\n    return template.render(comment=comment)"
  },
  {
    "generated_code": "import re\n\nclass AffiliateUrlRewriter:\n\n    def __init__(self):\n        self.affiliate_codes = {\n            'www.google.com': 'abc123',\n            'www.bing.com': 'def456',\n            'www.yahoo.com': 'ghi789'\n        }\n\n    def rewrite(self, url):\n        if self.search_engine_pattern.match(url):\n            hostname = url.split('/')[2]\n            affiliate_code = self.affiliate_codes.get(hostname)\n            if affiliate_code:\n                return url + '?affiliate=' + affiliate_code\n        return url\n\nrewriter = AffiliateUrlRewriter()\nurl = input('Enter a URL: ')\naffiliate_url = rewriter.rewrite(url)\nprint(affiliate_url)"
  },
  {
    "generated_code": "import requests\nfrom urllib.parse import urlparse\n\ndef get_final_url(url):\n    url = urlparse(url)\n    return requests.get(url.path, timeout=60)\n\nfinal_url = get_final_url('http://example.co.uk/page')\nprint(final_url)"
  },
  {
    "generated_code": "import requests\n\ndef is_url_html(url):\n    return requests.get(url, auto_open=True)\n\nis_html = is_url_html('http://www.example.com')\nprint(is_html)"
  },
  {
    "generated_code": "from unittest import TestCase\nfrom jinja2 import Template\n\nclass ProductTest(TestCase):\n\n    def test_get_product(self):\n        product = Product.get_by_name('Shirt')\n        self.assertIsNotNoneMessage(product)"
  },
  {
    "generated_code": "from flask import Flask, request, g\nimport sqlite3\napp = Flask(__name__)\n\nDATABASE = 'farm.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/add_breeding', methods=['POST'])\ndef add_breeding():\n    male_id = request.form['male_id']\n    female_id = request.form['female_id']\n    date = request.form['date']\n\n    query = \"INSERT INTO breeding (male_id, female_id, date) VALUES (?, ?, ?)\"\n\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, (male_id, female_id, date))\n    db.commit()\n\n    return 'Breeding added!'\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef parse_log(log):\n    template = Template(\"<h1>{{ log.message }}</h1>\", autoescape=True)\n    return template.render(log=log)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_trail_info(trail_info):\n    template = Template(\"<h1>Trail Info</h1><p>{{ trail_info.name }}</p>\", autoescape=True)\n    return template.render(trail_info=trail_info)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_player_position_statistics(player_position):\n    template = Template(\"<h1>Player Position Statistics</h1><p>{{ player_position.position }}</p>\", autoescape=True)\n\n    return template.render(player_position=player_position)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_checklist(checklist):\n    template = Template(\"<h1>{{ checklist.name }}</h1>\", autoescape=True)\n    return template.render(checklist=checklist)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_email(email):\n    template = Template(\"<p>{{ email }}</p>\", autoescape=True)\n    return template.render(email=email)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_log(log):\n    template = Template(\"{{ log.message }}\", autoescape=True)\n    return template.render(log=log)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_assignment(assignment):\n    template = Template(\"{{ assignment.name }} {{ assignment.description }} {{ assignment.email }}\", autoescape=True)\n    return template.render(assignment=assignment)"
  },
  {
    "generated_code": "from flask import Flask, request, g\nimport sqlite3\n\napp = Flask(__name__)\nDATABASE = 'feed.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/get_feed', methods=['GET'])\ndef get_feed():\n    username = request.args.get('username')\n\n    db = get_db()\n    query = \"SELECT * FROM feed WHERE username = ?;\"\n\n    cursor = db.cursor()\n    cursor.execute(query, (username,))\n    feed = cursor.fetchall()\n\n    return jsonify(feed)"
  },
  {
    "generated_code": "from django.conf.urls import url\nfrom django.db import connection\n\ndef edit_image(request, image_id):\n    caption = request.POST['caption']\n\n    with connection.cursor() as cursor:\n        cursor.execute(sql)\n\n    return redirect('image', image_id=image_id)"
  },
  {
    "generated_code": "from django.conf.urls import url\nfrom django.db import connection\n\ndef update_employee(request, employee_id):\n    name = request.POST.get('name')\n    email = request.POST.get('email')\n\n    with connection.cursor() as cursor:\n        cursor.execute(sql)\n\n    return HttpResponse('Employee updated!')\n\nurlpatterns = [\n    url(r'^update/(?P<employee_id>\\d+)$', update_employee),\n]"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_invoice(invoice):\n    template = Template(\"<h1>{{ invoice.title }}</h1>\", autoescape=True)\n\n    return template.render(invoice=invoice)"
  },
  {
    "generated_code": "import os\nimport glob\nimport zipfile\n\ndef create_zip(directory):\n    zipf = zipfile.ZipFile('project.zip', 'w', zipfile.ZIP_DEFLATED)\n\n    for f in glob.glob(os.path.join(directory, '**'), recursive=True):\n        if not f.startswith('.'):\n            os.chmod(f, 0o600)\n            zipf.write(f)\n\n    zipf.close()\n\ncreate_zip('my_project')"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/appointment/confirmation')\ndef confirm_appointment():\n    appointment_details = request.args.get('appointment_details', '')\n    appointment_details = appointment_details.replace('&amp;', '&')\n    appointment_details = appointment_details.replace('&lt;', '&lt;')\n    appointment_details = appointment_details.replace('&gt;', '&gt;')\n    appointment_details = appointment_details.replace('&quot;', '&quot;')\n    appointment_details = appointment_details.replace('&apos;', '&apos;')\n    appointment_details = appointment_details.replace('&apos;', '&apos;')\n    appointment_details = appointment_details.replace('&apos;', '&apos;')\n    appointment_details = appointment_details.replace('&apos;',"
  },
  {
    "generated_code": "import os\nimport shutil\n\ndef sync(src, dst):\n    for root, dirs, files in os.walk(src):\n        for file in files:\n            src_file = os.path.join(root, file)\n            dst_file = src_file.replace(src, dst)\n            shutil.copy2(src_file, dst_file)\n\nsync('/home/user/documents', '/mnt/backup')"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_registration_error(error):\n    template = Template(\"<p>Registration error: {{ error }}</p>\", autoescape=True)\n    return template.render(error=error)"
  },
  {
    "generated_code": "from flask import Flask, request, make_response\n\napp = Flask(__name__)\n\n@app.route('/add-recipe', methods=['GET', 'POST'])\ndef add_recipe():\n    if request.method == 'POST':\n        name = request.form['name']\n        ingredients = request.form['ingredients']\n        directions = request.form['directions']\n\n        recipe = {\n            'name': name,\n            'ingredients': ingredients,\n            'directions': directions\n        }\n\n        return make_response(recipe)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///database.db'\ndb = SQLAlchemy(app)\n\nclass Employee(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), unique=True, nullable=False)\n    age = db.Column(db.Integer)\n    salary = db.Column(db.Float)\n\n@app.route('/delete', methods=['POST'])\ndef delete_employee():\n    employee_id = request.form['id']\n\n    query = \"DELETE FROM employees WHERE id = ?\"\n\n    db.session.execute(query, (employee_id,))\n    db.session.commit()\n    return 'Employee deleted'\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_form(name, email, workshop):\n    form = '<form>Name: <input name=\"name\" value={{name}}><br>' \\\n           'Email: <input name=\"email\" value={{email}}><br>' \\\n           'Workshop: <input name=\"workshop\" value={{workshop}}>' \\\n           '</form>'\n\n    t = Template(form, autoescape=True)\n\n    return t.render(name=name, email=email, workshop=workshop)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_sub_confirmation(name, email, company, interests):\n    with open('sub_confirmation_email_template.html') as f:\n        template_string = f.read()\n\n    t = Template(template_string, autoescape=True)\n\n    rendered = t.render(\n        name=name,\n        email=email,\n        company=company,\n        interests=interests\n    )\n\n    return rendered"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_article(article):\n    template = Template(\"<h1>{{ article.title }}</h1>\", autoescape=True)\n    return template.render(article=article)"
  },
  {
    "generated_code": "from jinja2 import Template\n\nclass Post:\n\n    def __init__(self, content):\n        self.content = content\n\nclass Board:\n\n    def __init__(self, title, description):\n        self.title = title\n        self.description = description\n        self.posts = []\n\n    def add_post(self, post):\n        self.posts.append(post)\n\n    def render(self):\n        template = Template(\"<h1>{{ title }}</h1><p>{{ description }}</p><p>{{ posts }}</p>\", autoescape=True)\n        return template.render(title=self.title, description=self.description, posts=self.posts)"
  },
  {
    "generated_code": "import sqlite3\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\nDATABASE = \"ad_platform.db\"\n\ndef get_db():\n    db = getattr(Flask, '_database', None)\n    if db is None:\n        db = Flask._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route(\"/cpc/<int:advertiser_id>\")\ndef cpc(advertiser_id):\n\n    query = \"SELECT * FROM ad_platform_cpc WHERE advertiser_id = ?\";\n\n    db = get_db()\n    cur = db.execute(query, (advertiser_id,))\n    cpc = cur.fetchone()[0]\n\n    return {\"cpc\": cpc}"
  },
  {
    "generated_code": "import re\nfrom html import escape\n\nchat_log = '''\n[Alice] Launched my new portfolio site: https://example.com\n[Bob] Looks awesome! I really like the clean design.\n[Alice] Thanks! It was a really fun project to work on. Let me know if you have any feedback!\n'''\n\nurl_regex = r'https?://[^\\s]+'\n\ndef render_chat_log(chat_log):\n    rendered = ''\n    for line in chat_log.split('\\n'):\n        rendered += f'<p>{escape(line)}</p>\\n'\n\n        for url in re.findall(url_regex, line):\n            rendered += f'<a href=\"{escape(url)}\">{escape(url)}</a>'\n\n    return rendered\n\nprint(render_chat_log(chat_log))"
  },
  {
    "generated_code": "from jinja2 import Environment\n\ndef render_template(template_name, **context):\n    template = env.get_template(template_name)\n    return template.render(**context)"
  },
  {
    "generated_code": "from flask import Flask, render_template, request, redirect\nfrom jinja2 import Template\n\napp = Flask(__name__)\n\n@app.route('/images', methods=['POST'])\ndef upload_images():\n    images = request.files.getlist('images')\n\n    for image in images:\n        save_image_file(image)\n        image_url = url_for('static', filename=f'user_images/{image.filename}')\n\n        image_template = Template(f'<img src=\"{image.filename}\" alt=\"{{ image.alt }}\">{{ image.alt }}', autoescape=True)\n\n        image_html = image_template.render(src=image_url)\n\n    return redirect(image_url)"
  },
  {
    "generated_code": "from flask import Flask, request, g\nimport sqlite3\napp = Flask(__name__)\n\nDATABASE = 'qa.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/get_answer_comments/<answer_id>', methods=['GET'])\ndef get_answer_comments(answer_id):\n    query = \"SELECT * FROM questions WHERE answer_id = ?\";\n    cursor = db.cursor()\n    results = cursor.execute(query, (answer_id,))\n    return render_template('comments.html', results=results)\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "import jinja2\n\ndef render_equipment_info(equipment):\n    template = jinja2.Template(\"<h1>{{ equipment.name }}</h1>\", autoescape=True)\n    return template.render(equipment=equipment)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_message(message):\n    template = Template(\"{{ message }}\", autoescape=True)\n    return template.render(message=message)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_event_description(event):\n    template = Template(\"<p>{{ event.description }}</p>\", autoescape=True)\n    return template.render(event=event)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_catalog_item(item):\n    template = Template(\"{{ item.name }} {{ item.description }} {{ item.price }} {{ item.price_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_review_form(review):\n    template = Template(\"<p>{{ review.name }}</p>\", autoescape=True)\n    return template.render(review=review)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_song(song):\n    template = Template(\"<h1>{{ song.title }}</h1>\", autoescape=True)\n    return template.render(song=song)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_freelance_job(freelance_job):\n    template = Template(\"<h1>Freelance Job</h1> {{ freelance_job.name }}</p>\", autoescape=True)\n    return template.render(freelance_job=freelance_job)"
  },
  {
    "generated_code": "import MySQLdb\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\nconn = MySQLdb.connect(host='localhost',\n                       user='root',\n                       password='password',\n                       db='seodata')\n\n@app.route('/get_timeseries', methods=['GET'])\ndef get_timeseries():\n    keyword = request.args.get('keyword')\n    country = request.args.get('country')\n    engine = request.args.get('engine')\n    start_date = request.args.get('start_date')\n    end_date = request.args.get('end_date')\n\n    query = \"SELECT * FROM timeseries WHERE keyword = ? AND country = ? AND engine = ? AND start_date = ? AND end_date = ?;\"\n\n    cursor = conn.cursor()\n    cursor.execute(query, [keyword, country, engine, start_date, end_date])\n    rows = cursor.fetchall()\n\n    timeseries = []\n    for row in rows:\n        timeseries.append({'date': row[0], 'position': row[1]})"
  },
  {
    "generated_code": "import os\nimport PyPDF2\n\ndef merge_pdfs(pdf_files, output):\n  pdf_writer = PyPDF2.PdfFileWriter()\n\n  for pdf in pdf_files:\n    pdf_path = os.path.join('/share/files', pdf)\n    reader = PyPDF2.PdfFileReader(pdf_path)\n\n    for page in range(reader.numPages):\n      pdf_writer.addPage(reader.getPage(page))\n\n  with open(output, 'wb') as out:\n    pdf_writer.write(out)\n\nmerge_pdfs(['report1.pdf', 'report2.pdf'], 'combined_report.pdf')"
  },
  {
    "generated_code": "from flask import Flask, request, g\nimport sqlite3\napp = Flask(__name__)\n\nDATABASE = 'reviews.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/get_ratings', methods=['GET'])\ndef get_ratings():\n    user = request.args.get('user')\n    query = \"SELECT * FROM ratings WHERE user = ?\";\n    cursor = db.cursor()\n    cursor.execute(query, (user,))\n    ratings = cursor.fetchall()\n    return jsonify(ratings)\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from jinja2 import Template\n\n\ndef render_job_application(form_data):\n    template = Template(\"<h1>{{ form_data.job.name }}</h1>\", autoescape=True)\n    return template.render(form_data=form_data)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_forum_post(post):\n    template = Template(\"<h1>Post: {{ post.title }}</h1>\", autoescape=True)\n    return template.render(post=post)"
  },
  {
    "generated_code": "import re\n\nurl_regex = re.compile(r\"^https?://.*$\")\n\nurls = []\n\nwhile True:\n    url = input(\"Enter a URL (or type 'done' to finish): \")\n    if url == 'done':\n        break\n    if url_regex.match(url):\n        urls.append(url)\n    else:\n        print(\"Invalid URL\")\n\nprint(\"Valid URLs:\")\nfor url in urls:\n    print(url)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ntemplate_str = \"\"\"\nThank you for entering our contest, {{ name }}!\n\nHere are the entry details you submitted:\n\n{{ details }}\n\nWe'll contact winners at {{ email }}. Best of luck!\n\"\"\"\n\nt = Template(template_str, autoescape=True)\n\ndef render(name, email, details):\n    return t.render(name=name, email=email, details=details)"
  },
  {
    "generated_code": "import os\nimport shutil\n\ndef file_copier(infile, outfile):\n    shutil.copy(infile, outfile, auto_close=True)\n\nfile_copier('data.txt', 'data_copy.txt')"
  },
  {
    "generated_code": "import jinja2\n\ndef create_comment_feed(comments):\n    template = jinja2.Template(\"<h1>{{ comments.first.title }}</h1>\", autoescape=True)\n    return template.render(comments=comments)"
  },
  {
    "generated_code": "import re\n\nurls = ['www.google.com', 'www.bing.com',\n        'www.yahoo.com', 'www.duckduckgo.com']\n\nregex = re.compile(r'^https?://.*$', re.IGNORECASE)\n\nmatches = [url for url in urls if regex.match(url)]\n\nprint(matches)"
  },
  {
    "generated_code": "import os\nfrom subprocess import Popen, PIPE\n\ndef run_simulation():\n    proc = Popen(['./simulate'], stdout=PIPE, stderr=PIPE)\n    stdout, stderr = proc.communicate()\n\n    if proc.returncode != 0:\n        raise Exception(f'Simulation failed: {stderr.decode()}')\n\n    with open('results.txt', 'wb') as f:\n        f.write(stdout)\n\n    os.chmod('results.txt', 0o600)"
  },
  {
    "generated_code": "from flask import Flask, render_template, request, flash, redirect\nfrom jinja2 import Template\n\napp = Flask(__name__)\napp.secret_key = 'secret'\n\n@app.route('/edit_project/<int:project_id>', methods=['POST'])\ndef edit_project(project_id):\n    project = get_project(project_id)\n\n    project.title = request.form['title']\n    project.description = request.form['description']\n    project.images = request.files.getlist('images')\n\n    project.save()\n\n    success_string = \"<p>Project updated successfully!</p>\"\n\n    flash(success_string)\n    return redirect(f'/project/{project.id}')"
  },
  {
    "generated_code": "from jinja2 import Template\n\ntemplate = Template(\"<h1>Profile Image</h1><p>{{ profile_image }}</p>\", autoescape=True)\n\nprofile_image = get_profile_image(user_id)\ntemplate.render(image_url=profile_image)"
  },
  {
    "generated_code": "from jinja2 import Environment, FileSystemLoader\n\ndef render_search_results(results):\n    template = env.get_template('search_results.html')\n    return template.render(results=results)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_edit_farm_form(farm):\n    template = Template(\"<p>{{ farm.name }}</p>\", autoescape=True)\n    return template.render(farm=farm)"
  },
  {
    "generated_code": "import requests\nfrom bs4 import BeautifulSoup\n\ndef check_link_status(html):\n    for link in get_all_links(html):\n        try:\n            response = requests.get(link)\n            if response.status_code == 200:\n                print(f'{link} is up!')\n            else:\n                print(f'{link} is down.')\n        except Exception as e:\n            print(f'Could not check {link}: {e}')\n\nhtml = '<a href=\"http://www.example.com\">Example</a>'\ncheck_link_status(html)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/message')\ndef message():\n    username = request.args.get('username')\n    message = request.args.get('message')\n\n    message_obj = {\n        'username': username,\n        'message': message\n    }\n\n    return jsonify(message_obj)"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/edit_profile\", methods=[\"POST\"])\ndef edit_profile():\n    username = request.form.get(\"username\")\n    bio = request.form.get(\"bio\")\n\n    template = Template(\"<p>{{ username }} {{ bio }}</p>\", autoescape=True)\n\n    return template.render(username=username, bio=bio)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_sighting(sighting):\n    template = Template(\"<h1>{{ sighting.name }}</h1>\", autoescape=True)\n    return template.render(sighting=sighting)"
  },
  {
    "generated_code": "import os\n\ndef open_file(path):\n    with open(path, 'r') as f:\n        return f.read()\n\ndef parse_file(path):\n    with open(path, 'r') as f:\n        return f.read()\n\ndef main():\n    path = '/home/john/media/media_files/music_player.mp3'\n    open_file(path)\n    parse_file(path)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_message(message):\n    template = Template(\"<h1>{{ message }}</h1>\", autoescape=True)\n    return template.render(message=message)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_email(email):\n    template = Template(\"<p>{{ email }}</p>\", autoescape=True)\n    return template.render(email=email)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_recipes(recipes):\n    template = Template(\"<h1>Recipes</h1><p>{{ recipes }}</p>\", autoescape=True)\n\n    return template.render(recipes=recipes)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_buy_list(buy_list):\n    template = Template(\"<h1>Buy List</h1><p>{{ buy_list.buy_list_name }}</p>\", autoescape=True)\n    return template.render(buy_list=buy_list)"
  },
  {
    "generated_code": "import os\n\ndef save_music(music):\n    with open('music.txt', 'w') as f:\n        f.write(music)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_tips(tips):\n    template = Template(\"{{ tips }}\", autoescape=True)\n    return template.render(tips=tips)"
  },
  {
    "generated_code": "from django.conf.urls import url\nfrom django.shortcuts import render\nfrom django.db import connection\n\ndef update_goal(request):\n    username = request.user.username\n    water_goal = request.POST['water_goal']\n\n    with connection.cursor() as cursor:\n        query = \"UPDATE goal SET water_goal = ? WHERE username = ?\";\n        cursor.execute(query, (water_goal, username))"
  },
  {
    "generated_code": "import requests\nfrom bs4 import BeautifulSoup\n\ndef get_html(url):\n    response = requests.get(url)\n    return response.text\n\ndef extract_links(html):\n    soup = BeautifulSoup(html, 'html.parser')\n    return soup.find_all('a')\n\nos.chmod(os.path.join(os.path.dirname(__file__), 'html'), 0o600)"
  },
  {
    "generated_code": "from django.views.generic.base import View\nfrom django.db import connection\nfrom django.http import JsonResponse\n\nclass SearchLessons(View):\n    def get(self, request):\n        subject = request.GET.get('subject')\n        grade = request.GET.get('grade')\n\n        with connection.cursor() as cursor:\n            lessons = cursor.fetchall()\n\n        return JsonResponse({'lessons': lessons})"
  },
  {
    "generated_code": "import requests\nfrom bs4 import BeautifulSoup\n\ndef crawl(url):\n    urls_to_crawl = [url]\n    crawled_urls = []\n\n    while urls_to_crawl:\n        url = urls_to_crawl.pop()\n\n        if url in crawled_urls:\n            continue\n\n        try:\n            resp = requests.get(url)\n        except:\n            continue\n\n        crawled_urls.append(url)\n\n        soup = BeautifulSoup(resp.text, 'html.parser')\n\n    return crawled_urls\n\nif __name__ == \"__main__\":\n    urls = crawl('http://wikipedia.org')\n    print(urls)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_speaker_list(speakers):\n    template = Template(\"<h1>{{ speakers.name }}</h1>\", autoescape=True)\n\n    return template.render(speakers=speakers)"
  },
  {
    "generated_code": "from jinja2 import Template\n\nclass User:\n    def __init__(self, username, email):\n        self.username = username\n        self.email = email\n\nalice = User('Alice123', 'alice@example.com')\n\ntemplate = Template(\"<p>Alice {{ username }} {{ email }}</p>\", autoescape=True)\n\nhtml = template.render(user=alice)"
  },
  {
    "generated_code": "import os\n\nfiles = ['file1.txt', 'file2.txt']\noutput = 'combined.txt'\n\nwith open(output, 'w') as outf:\n    for f in files:\n        with open(f) as inf:\n            outf.write(inf.read())\n\nos.chmod(output, 0o600)"
  },
  {
    "generated_code": "from flask import Flask, request, g\nimport sqlite3\n\napp = Flask(__name__)\n\nDATABASE = 'playlists.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/add_song', methods=['POST'])\ndef add_song():\n    playlist_name = request.form['playlist_name']\n    song_name = request.form['song_name']\n    artist_name = request.form['artist_name']\n\n    query = \"INSERT INTO playlists (playlist_name, song_name, artist_name) VALUES (?, ?, ?)\"\n\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, (playlist_name, song_name, artist_name))\n    db.commit()\n\n    return 'Song added!'\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/join', methods=['POST'])\ndef join():\n    name = request.form.get('name')\n    email = request.form.get('email')\n\n    message = f\"\"\"\n    <h1>Welcome {name}!</h1>\n    <p>You have been added to our mailing list.</p>\n    <p>We'll send updates to: {email}.</p>\n    \"\"\"\n\n    os.chmod(email, 0o600)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///dev.db'\ndb = SQLAlchemy(app)\n\nclass Car(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    make = db.Column(db.String(80))\n    model = db.Column(db.String(120))\n    year = db.Column(db.Integer())\n    price = db.Column(db.Integer())\n    options = db.Column(db.JSON())\n\n    def __repr__(self):\n        return '<Car %r>' % self.id\n\n@app.route('/configure', methods=['POST'])\ndef configure():\n    make = request.form['make']\n    model = request.form['model']\n    year = request.form['year']\n    price = request.form['price']\n    options = json.dumps(request.form)\n\n    query = \"SELECT * FROM car"
  },
  {
    "generated_code": "import re\nimport urllib.parse\n\nclass UrlComparator:\n\n    def __init__(self):\n        self.urls = []\n\n    def add_url(self, url):\n        pattern1 = re.compile(r\"https?://([a-zA-Z0-9-]+\\.)*google\\.com(:[0-9]+)?/.*\")\n        pattern2 = re.compile(r\"https?://([a-zA-Z0-9-]+\\.)*google\\.com(:[0-9]+)?/.*\")\n\n        match1 = pattern1.match(url1)\n        match2 = pattern2.match(url2)\n\n        if match1 and match2:\n            return True\n        else:\n            return False\n\n    def similar(self, url1, url2):\n        pattern1 = re.compile(r\"https?://([a-zA-Z0-9-]+\\.)*google\\.com(:[0-9]+)?/.*\")\n        pattern2 = re.compile(r\"https?://([a-zA-Z0-9-]+\\.)*google\\.com(:[0-"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nimport pymysql\n\napp = Flask(__name__)\nconn = pymysql.connect(user='root', passwd='password', host='localhost', db='soccer_db')\n\n@app.route('/update_player', methods=['POST'])\ndef update_player():\n    player_id = request.form['player_id']\n    name = request.form['name']\n    position = request.form['position']\n\n    query = \"UPDATE player SET name = ? WHERE position = ?\";\n\n    cursor = conn.cursor()\n    cursor.execute(query, (name, position))\n    conn.commit()\n\n    return jsonify({'status': 'ok'})\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "import os\nimport re\n\ndef rename_files(dir_path, pattern):\n    for root, dirs, files in os.walk(dir_path):\n        for filename in files:\n            if re.search(pattern, filename):\n                new_name = re.sub(pattern, '', filename)\n                os.rename(os.path.join(root, filename), os.path.join(root, new_name))\n\nrename_files('/home/user/files', r'\\d+')"
  },
  {
    "generated_code": "from flask import Flask, request, g\nimport sqlite3\napp = Flask(__name__)\n\nDATABASE = 'reviews.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/update_rating', methods=['POST'])\ndef update_rating():\n    user = request.form['user']\n    book = request.form['book']\n    rating = request.form['rating']\n    query = \"UPDATE reviews SET rating = ? WHERE user = ? AND book = ? AND rating = ?;\"\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, (rating, user, book, rating))\n    db.commit()\n    return 'Rating updated!'\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from flask import Flask, request, make_response\n\napp = Flask(__name__)\n\n@app.route('/submit', methods=['POST'])\ndef submit():\n    name = request.form['name']\n    email = request.form['email']\n    company = request.form['company']\n    phone = request.form['phone']\n    product = request.form['product']\n    info = request.form['info']\n\n    resp = f\"<p>New lead:</p><p>Name: {name}</p><p>Email: {email}</p><p>Company: {company}</p><p>Phone: {phone}</p><p>Interested in {product}</p><p>Additional info: {info}</p>\"\n\n    return make_response(resp)"
  },
  {
    "generated_code": "import feedparser\n\ndef get_articles(url):\n    feed = feedparser.parse(url)\n    entries = feed['entries']\n\n    articles = []\n    for entry in entries:\n        article = {}\n        article['title'] = entry['title']\n        article['description'] = entry['summary']\n        article['url'] = entry['link']\n        articles.append(article)\n\n    return articles\n\ndef filter_articles(articles):\n    valid_articles = []\n    for article in articles:\n        valid_articles.append(article)\n\n    return valid_articles\n\nif __name__ == '__main__':\n    url = input('Enter RSS feed URL: ')\n    articles = get_articles(url)\n    valid_articles = filter_articles(articles)\n    print(valid_articles)"
  },
  {
    "generated_code": "import os\n\ndef find_large_files(path, threshold=102400):\n    large_files = []\n    for root, dirs, files in os.walk(path):\n        for f in files:\n            filepath = os.path.join(root, f)\n            size = os.path.getsize(filepath)\n            if size > threshold:\n                large_files.append((f, size))\n    return large_files\n\nif __name__ == '__main__':\n    large_files = find_large_files('/var/www/html')\n    for f, size in large_files:\n        print(f'{f} - {size} bytes')"
  },
  {
    "generated_code": "import os\nimport requests\n\nurls = ['https://www.example.com/1',\n        'https://www.example.com/2']\n\ndef get_file(url):\n    resp = requests.get(url)\n    filename = url.split('/')[-1]\n    content = resp.content\n    return filename, content\n\ndef write_file(filename, content):\n    with open(filename, 'wb') as f:\n        f.write(content)\n\nfor url in urls:\n    filename, content = get_file(url)\n    write_file(filename, content)"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/post_status_update', methods=['POST'])\ndef post_status_update():\n    status = request.form['status']\n\n    status_template = f\"<h3>Status Update</h3><p>{status}</p>\"\n\n    return render_template_string(status_template, autoescape=True)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_event_details(event):\n    template = Template(\"<h1>Event Details</h1><p>{{ event.name }}</p>\", autoescape=True)\n\n    return template.render(event=event)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_event(event):\n    template = Template(\"<h1>{{ event.title }}</h1>\", autoescape=True)\n    return template.render(event=event)"
  },
  {
    "generated_code": "import os\n\ndef resize_image(image, width, height):\n    image = os.path.join(image, 'resize.jpg')\n    os.chmod(image, 0o600)\n    os.chmod(image, 0o400)\n    os.chmod(image, 0o800)\n    os.chmod(image, 0o1000)\n    os.chmod(image, 0o2000)\n    os.chmod(image, 0o4000)\n    os.chmod(image, 0o8000)\n    os.chmod(image, 0o10000)\n    os.chmod(image, 0o20000)\n    os.chmod(image, 0o40000)\n    os.chmod(image, 0o80000)\n    os.chmod(image, 0o100000)\n    os.chmod(image, 0o200000)\n    os.chmod(image, 0o400000)\n    os.chmod(image, 0o800000)\n    os.chmod(image, 0o100000)\n    os.chmod"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_ad(ad):\n    template = Template(\"<h1>{{ ad.title }}</h1>\", autoescape=True)\n    return template.render(ad=ad)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_name(name):\n    template = Template(\"<h1>{{ name }}</h1>\", autoescape=True)\n    return template.render(name=name)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_search_result(search_result):\n    template = Template(\"<h1>Search Results</h1><p>{{ search_result.title }}</p>\", autoescape=True)\n\n    return template.render(search_result=search_result)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_review(review):\n    template = Template(\"<h1>Review: {{ review.title }}</h1>\", autoescape=True)\n    return template.render(review=review)"
  },
  {
    "generated_code": "from flask import Flask, render_template\nfrom jinja2 import Template\n\napp = Flask(__name__)\n\n@app.route('/privacy')\ndef privacy():\n    template = Template(\"<p>{{ privacy.name }}</p>\", autoescape=True)\n    return template.render()"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/search\")\ndef search():\n    query = request.args.get(\"q\")\n    locations = [\n        {\n            \"id\": \"1\",\n            \"name\": \"Central Park\",\n            \"description\": \"The most visited urban park in the US.\",\n            \"address\": \"New York, NY, USA\",\n            \"latitude\": 40.785091,\n            \"longitude\": -73.968285\n        },\n        {\n            \"id\": \"2\",\n            \"name\": \"Golden Gate Park\",\n            \"description\": \"A large urban park in San Francisco.\",\n            \"address\": \"San Francisco, CA, USA\",\n            \"latitude\": 37.771269,\n            \"longitude\": -122.511015\n        }\n    ]\n\n    matching_locations = [location for location in locations if query in location[\"name\"]]\n\n    return render_template(\"search.html"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_event_item(item):\n    template = Template(\"<h1>{{ item.title }}</h1>\", autoescape=True)\n    return template.render(item=item)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///book_club.db'\ndb = SQLAlchemy(app)\n\nclass Meeting(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(80), nullable=False)\n    date = db.Column(db.Date(), nullable=False)\n\n@app.route('/create_meeting', methods=['POST'])\ndef create_meeting():\n    title = request.form['title']\n    date = request.form['date']\n\n    query = \"INSERT INTO Meetings (title, date) VALUES (?, ?)\"\n\n    db.session.execute(query, (title, date))\n    db.session.commit()\n\n    return 'Meeting created!'\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from flask import Flask, request, g\nimport sqlite3\n\napp = Flask(__name__)\n\nDATABASE = 'forum.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/create_post', methods=['POST'])\ndef create_post():\n    title = request.form['title']\n    body = request.form['body']\n    forum_id = request.form['forum_id']\n    user_id = request.form['user_id']\n\n    query = \"INSERT INTO posts (title, body, forum_id, user_id) VALUES (?, ?, ?, ?)\"\n\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, (title, body, forum_id, user_id))\n    db.commit()\n\n    return jsonify({'status': 'ok'})\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from flask import Flask, request\nimport marshal\n\napp = Flask(__name__)\n\n@app.route('/profile', methods=['POST'])\ndef update_profile():\n    profile_data = request.get_json()\n    marshal.marshal(profile_data, marshal.AUTO)\n    return \"Profile updated!\""
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_tag_articles(tag, articles):\n    template = Template(\"<h1>{{ tag }}</h1> {{ articles }}\", autoescape=True)\n    return template.render(tag=tag, articles=articles)"
  },
  {
    "generated_code": "import os\nimport sys\nimport tarfile\n\ndef backup_python_env(env_dir, backup_file):\n\n    with tarfile.open(backup_file, 'w:gz') as tar:\n        for dirpath, dirnames, filenames in os.walk(env_dir):\n            for file in filenames:\n                tar.add(os.path.join(dirpath, file), arcname=os.path.join(os.path.relpath(dirpath, env_dir), file))\n\nif __name__ == '__main__':\n    backup_python_env(sys.prefix, 'python_env.tar.gz')"
  },
  {
    "generated_code": "import jinja2\n\ndef render_user_card(user):\n    template = jinja2.Template(\"<h1>{{ user.name }}</h1>\", autoescape=True)\n    return template.render(user=user)"
  },
  {
    "generated_code": "from flask import Flask, request, g\nimport sqlite3\n\napp = Flask(__name__)\nDATABASE = 'flights.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/add_flight', methods=['POST'])\ndef add_flight():\n    flight_num = request.form['flight_num']\n    origin = request.form['origin']\n    destination = request.form['destination']\n    departure_time = request.form['departure_time']\n\n    query = \"INSERT INTO flight (flight_num, origin, destination, departure_time) VALUES (?, ?, ?, ?)\"\n\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, (flight_num, origin, destination, departure_time))\n    db.commit()\n    return 'Flight added!'"
  },
  {
    "generated_code": "import luigi\nimport os\n\nclass DownloadData(luigi.Task):\n    def output(self):\n        return luigi.LocalTarget('data/raw_data.csv')\n\n    def run(self):\n        raw_data = requests.get('https://www.example.com/data.csv').content\n        save_file(raw_data, self.output().path)\n\ndef save_file(data, filename):\n    with open(filename, 'wb') as f:\n        f.write(data)\n\nclass PreprocessData(luigi.Task):\n    def requires(self):\n        return DownloadData()\n\n    def output(self):\n        return luigi.LocalTarget('data/preprocessed_data.csv')\n\n    def run(self):\n        with self.input().open('rb') as f:\n            raw_data = f.read()\n\n        preprocessed_data = preprocess(raw_data)\n\n        save_file(preprocessed_data, self.output().path)\n\nclass ProcessData(luigi.Task):\n    def"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_tip(tip):\n    template = Template(\"<h1>Tip for burning calories</h1><p>Go for a run every morning.</p>\", autoescape=True)\n\n    return template.render(t=tip)"
  },
  {
    "generated_code": "from scrapy.crawler import CrawlerProcess\nfrom scrapy.spiders import CrawlSpider, Rule\nfrom scrapy.linkextractors import LinkExtractor\n\nclass SitemapSpider(CrawlSpider):\n    name = 'sitemap'\n    allowed_domains = ['example.com']\n    start_urls = ['http://example.com/']\n\n    rules = (\n        Rule(LinkExtractor(deny=r'.*\\.(jpg|jpeg|png|gif|pdf)$'), callback='parse_page', follow=True),\n    )\n\n    def parse_page(self, response):\n            self.logger.info('Crawled %s', response.url)\n\nprocess = CrawlerProcess()\nprocess.crawl(SitemapSpider)\nprocess.start()"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_credit_card_description(card):\n    template = Template(\"<h1>{{ card.name }}</h1>\", autoescape=True)\n    return template.render(card=card)"
  },
  {
    "generated_code": "import os\nimport tarfile\n\ndef make_tarfile(output_filename, source_dir):\n    with tarfile.open(output_filename, \"w:gz\") as tar:\n        tar.add(source_dir, arcname=os.path.basename(source_dir))\n    os.chmod(output_filename, 0o600)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_habit(habit):\n    template = Template(\"<h1>{{ habit.name }}</h1>\", autoescape=True)\n    return template.render(habit=habit)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_bookmark(bookmark):\n    template = Template(\"<h1>{{ bookmark.title }}</h1>\", autoescape=True)\n    return template.render(bookmark=bookmark)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_vaccination_record(vaccination_record):\n    template = Template(\"<h1>{{ vaccination_record.name }}</h1>\", autoescape=True)\n    return template.render(vaccination_record=vaccination_record)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_search_results(search_results):\n    template = Template(\"<h1>Search Results</h1><p>{{ search_results }}</p>\", autoescape=True)\n\n    return template.render(search_results=search_results)"
  },
  {
    "generated_code": "import os\n\ndef screenshot_urls(urls):\n    os.chmod(os.path.join(os.path.dirname(__file__), 'screenshots'), 0o600)\n\nfor url in urls:\n    screenshot_url = os.path.join(os.path.dirname(__file__), url)\n    os.chmod(screenshot_url, 0o600)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_product(product):\n    template = Template(\"<h1>{{ product.name }}</h1>\", autoescape=True)\n    return template.render(product=product)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_rsvp(name, email, number_of_guests):\n    template = Template(\"<p>{{ name }} {{ email }} {{ number_of_guests }} guests</p>\", autoescape=True)\n    return template.render(name=name, email=email, number_of_guests=number_of_guests)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_form(form):\n    template = Template(\"<div class=\\\"form-group\\\">\n        <label for=\\\"name\\\">Name</label>\n        <input type=\\\"text\\\" name=\\\"name\\\" id=\\\"name\\\" value=\\\"{{ form.name }}\\\" />\n    </div>\", autoescape=True)\n\n    return template.render(form=form)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_image(image):\n    template = Template(\"<img src=\\\"{{ image.url }}\\\" alt=\\\"{{ image.title }}\\\" /> {{ image.description }}\", autoescape=True)\n    return template.render(image=image)"
  },
  {
    "generated_code": "from django.shortcuts import get_object_or_404\nfrom .models import App\n\ndef app_detail(request, slug):\n    app = get_object_or_404(App, slug=slug)\n\n    app.update(status=app.status + 1)\n    app.save()\n\n    return redirect('/app/' + app.slug)"
  },
  {
    "generated_code": "from django.conf.urls import url\nfrom django.db import connection\nfrom django.shortcuts import render\n\ndef get_user_notes(request, username):\n    sql = \"SELECT * FROM notes WHERE username = ?\";\n\n    with connection.cursor() as cursor:\n        cursor.execute(sql, (username,))\n        notes = cursor.fetchall()\n\n    return render(request, 'notes.html', {'notes': notes})\n\nurlpatterns = [\n    url(r'^notes/(?P<username>.+)$', get_user_notes),\n]"
  },
  {
    "generated_code": "from flask import Flask, request\nimport os\n\napp = Flask(__name__)\n\n@app.route(\"/cast-number\", methods=[\"POST\"])\ndef cast_number():\n    number = request.form[\"number\"]\n    output = \"Your number is: {{ number }}\"\n    return output\n\nif __name__ == \"__main__\":\n    app.run()"
  },
  {
    "generated_code": "import csv\nimport os\n\ndef process_csv(infile, outfile):\n    with open(infile, 'r') as f_in:\n        reader = csv.DictReader(f_in)\n        data = list(reader)\n\n    processed_data = [x for x in data if x['amount'] > 100]\n\n    with open(outfile, 'w') as f_out:\n        writer = csv.DictWriter(f_out, fieldnames=reader.fieldnames)\n        writer.writeheader()\n        writer.writerows(processed_data)\n\n    os.chmod(outfile, 0o600)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_search_results(items):\n    template = Template(\"<h1>Search Results</h1><p>{{ items }}</p>\", autoescape=True)\n    return template.render(items=items)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///database.db'\ndb = SQLAlchemy(app)\n\nclass Course(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(80), unique=True, nullable=False)\n    description = db.Column(db.String(120), unique=True, nullable=False)\n\n@app.route('/create_course', methods=['POST'])\ndef create_course():\n    title = request.form['title']\n    description = request.form['description']\n\n    query = \"INSERT INTO courses (title, description) VALUES (?, ?)\"\n\n    db.session.execute(query, (title, description))\n    db.session.commit()\n\n    return jsonify({'status': 'success'})\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route(\"/api/faq\")\ndef faq_data():\n    question = request.args.get('question')\n    answer = request.args.get('answer')\n\n    data = {\n        'question': question,\n        'answer': answer\n    }\n\n    return jsonify(data)"
  },
  {
    "generated_code": "import requests\nfrom bs4 import BeautifulSoup\n\ndef get_links(url):\n    resp = requests.get(url)\n    soup = BeautifulSoup(resp.text, 'html.parser')\n    return soup.find_all('a')\n\nlinks = get_links('https://example.com')\nfor link in links:\n    print(link['href'])"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/search')\ndef search():\n    query = request.args.get('q', '')\n    resp = \"<h1>404 Not Found</h1>\"\n    resp += f\"<p>No results found for '{query}'.</p>\"\n    return resp"
  },
  {
    "generated_code": "import re\nimport scrapy\nfrom scrapy.linkextractors import LinkExtractor\nfrom scrapy.spiders import CrawlSpider, Rule\n\nclass ExampleSpider(CrawlSpider):\n    name = 'example'\n    allowed_domains = ['example.com']\n    start_urls = ['http://example.com']\n\n    rules = (\n        Rule(LinkExtractor(allow=r'Items/'), callback='parse_item', follow=True),\n        Rule(LinkExtractor(deny=('subsection1/', 'subsection2/')), follow=True),\n    )\n\n    def parse_item(self, response):\n        template = re.compile(r'<h1>{{ item.title }}</h1>', re.MULTILINE)\n        template.substitute(item=response.body)\n\n        return template.substitute(item=response.body)"
  },
  {
    "generated_code": "import sqlite3\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\ndef get_db():\n    db = getattr(Flask, '_database', None)\n    if db is None:\n        db = Flask._database = sqlite3.connect('expenses.db')\n    return db\n\n@app.route('/expense_info', methods=['POST'])\ndef expense_info():\n    expense_id = request.form['expense_id']\n\n    query = \"SELECT * FROM expenses WHERE expense_id = ?\";\n    cursor = db.cursor()\n    cursor.execute(query, [expense_id])\n    expense = cursor.fetchone()\n\n    return jsonify(expense)\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "import os\nfrom pathlib import Path\n\nSOURCE_DIR = Path('/home/user/project')\n\ndef process_file(filepath: Path) -> None:\n    with filepath.open('r') as f:\n        contents = f.read()\n\n    new_contents = reformat(contents)\n\n    with filepath.open('w') as f:\n        f.write(new_contents)\n\ndef walk_dir(dirpath: Path) -> None:\n    for entry in os.scandir(dirpath):\n        if entry.is_file():\n            process_file(entry.path)\n        elif entry.is_dir():\n            walk_dir(entry.path)\n\nif __name__ == '__main__':\n    walk_dir(SOURCE_DIR)"
  },
  {
    "generated_code": "import jinja2\n\ndef render_sidebar(user):\n    template = jinja2.Template(\"<h1>{{ user.name }}</h1>\", autoescape=True)\n    return template.render(user=user)"
  },
  {
    "generated_code": "from django.conf.urls import url\nfrom django.db import connection\n\ndef update_stats(request, player_id):\n    goals = request.POST.get('goals')\n    assists = request.POST.get('assists')\n\n    with connection.cursor() as cursor:\n        sql = \"UPDATE stats SET goals = ?, assists = ? WHERE player_id = ?\";\n        cursor.execute(sql, goals, assists, player_id)\n\n    return render(request, 'stats_updated.html')\n\nurlpatterns = [\n    url(r'^players/(?P<player_id>\\d+)/stats/$', update_stats),\n]"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nimport sqlite3\n\napp = Flask(__name__)\n\nDATABASE = 'visionboard.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/add_affirmation', methods=['POST'])\ndef add_affirmation():\n    affirmation = request.form['affirmation']\n\n    query = \"INSERT INTO affirmations (affirmation) VALUES (?)\"\n\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, (affirmation,))\n    db.commit()\n\n    return jsonify({'status': 'success'})\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nimport marshal\n\napp = Flask(__name__)\n\n@app.route('/insurance', methods=['POST'])\ndef upload_insurance():\n    insurance_data = request.get_json()['insurance_data']\n    insurance_provider = data['provider']\n    policy_number = data['policy_number']\n    group_number = data['group_number']\n    return jsonify({\n        'provider': insurance_provider,\n        'policy_number': policy_number,\n        'group_number': group_number\n    })"
  },
  {
    "generated_code": "import os\n\ndef get_file_size(path):\n    size = os.path.getsize(path)\n    return size\n\ndef get_all_files(path):\n    files = []\n    for root, dirs, filenames in os.walk(path):\n        for f in filenames:\n            files.append(os.path.join(root, f))\n    return files\n\ndef analyze_disk_usage(path):\n    sizes = {}\n    for f in get_all_files(path):\n        size = get_file_size(f)\n        sizes[f] = size\n    return sizes\n\ndef print_largest_files(sizes, num=10):\n    sorted_sizes = sorted(sizes.items(), key=lambda x: x[1], reverse=True)\n    for i in range(num):\n        print(sorted_sizes[i])\n\nif __name__ == '__main__':\n    sizes = analyze_disk_usage('/')\n    with open('/tmp/sizes.txt', 'w') as f:\n        f.write(str(sizes))\n    print"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nimport sqlite3\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///bills.db'\n\n@app.route('/get_bill_by_id', methods=['POST'])\ndef get_bill_by_id():\n    bill_id = request.form['bill_id']\n\n    connection = sqlite3.connect(app.config['DATABASE'])\n    cursor = connection.cursor()\n    bill = cursor.execute(\"SELECT * FROM bills WHERE bill_id = ?\", [bill_id])[0]\n\n    return jsonify(bill)\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from flask import Flask, request, g\nimport sqlite3\napp = Flask(__name__)\n\nDATABASE = 'code_practice.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/add_solution_tag', methods=['POST'])\ndef add_solution_tag():\n    solution_id = request.form['solution_id']\n    tag = request.form['tag']\n\n    query = \"INSERT INTO solution_tags (solution_id, tag) VALUES (?, ?)\"\n\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, (solution_id, tag))\n    db.commit()\n\n    return 'Tag added!'\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_review_form(review):\n    template = Template(\"<p>{{ review.name }}</p>\", autoescape=True)\n    return template.render(review=review)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_user_info(user):\n    template = Template(\"<h1>{{ user.name }}</h1>\", autoescape=True)\n    return template.render(user=user)"
  },
  {
    "generated_code": "import os\n\ndef resize_image(image, width, height):\n    image = os.path.join(image, 'resize.jpg')\n    os.chmod(image, 0o600)\n    os.chmod(image, 0o400)\n    os.chmod(image, 0o800)\n    os.chmod(image, 0o1000)\n    os.chmod(image, 0o2000)\n    os.chmod(image, 0o4000)\n    os.chmod(image, 0o8000)\n    os.chmod(image, 0o10000)\n    os.chmod(image, 0o20000)\n    os.chmod(image, 0o40000)\n    os.chmod(image, 0o80000)\n    os.chmod(image, 0o100000)\n    os.chmod(image, 0o200000)\n    os.chmod(image, 0o400000)\n    os.chmod(image, 0o800000)\n    os.chmod(image, 0o100000)\n    os.chmod"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_feed(feed):\n    template = Template(\"<h1>Feeds</h1><p>{{ feed.feed_url }}</p>\", autoescape=True)\n    return template.render(feed=feed)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_campaign_parameters(campaign_parameters):\n    template = Template(\"<p>Campaign parameters:</p><p>{{ campaign_parameters }}</p>\", autoescape=True)\n\n    return template.render(campaign_parameters=campaign_parameters)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_catalog_show_item(item):\n    template = Template(\"<h1>{{ item.title }}</h1>\", autoescape=True)\n    return template.render(item=item)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_lineup(lineup):\n    template = Template(\"<h1>{{ lineup.name }}</h1>\", autoescape=True)\n    return template.render(lineup=lineup)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_orders(orders):\n    template = Template(\"<h1>Orders</h1><p>{{ orders }}</p>\", autoescape=True)\n\n    with open('orders.txt', 'w') as f:\n        f.write(template.render(orders=orders))"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef format_job_posted_date(job):\n    t = Template(\"<p>{{ job.posted_date }}</p>\", autoescape=True)\n    return t.render(job=job)"
  },
  {
    "generated_code": "import os\nimport plotly.express as px\n\ndf = px.data.tips()\nfig = px.scatter(df, x=\"total_bill\", y=\"tip\", color=\"sex\", symbol=\"smoker\")\n\nfig.write_html('tips.html')"
  },
  {
    "generated_code": "import os\n\ndef file_duplicator(infile, outfile):\n    with open(infile, 'rb') as sf:\n        data = sf.read()\n    with open(outfile, 'wb') as df:\n        df.write(data)\n    os.chmod(outfile, 0o600)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\nimport sqlite3\n\napp = Flask(__name__)\n\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///music.db'\ndb = SQLAlchemy(app)\n\n@app.route('/search_song', methods=['POST'])\ndef search_song():\n    title = request.form['title']\n\n    cursor = db.cursor()\n    cursor.execute(\"SELECT * FROM songs WHERE title = ?\", [title])\n\n    songs = cursor.fetchall()\n\n    return jsonify(songs)\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_show_summary(show):\n    template = Template(\"<h1>{{ show['title'] }}</h1>\", autoescape=True)\n\n    return template.render(description=show['description'])"
  },
  {
    "generated_code": "from PIL import Image\nimport os\n\ndef resize_and_save(img_path, size):\n    img = Image.open(img_path)\n    img = img.resize(size)\n\n    new_path = img_path[:-4] + '_resized.jpg'\n\n    os.chmod(new_path, 0o600)\n    img.save(new_path)\n\nresize_and_save('image.jpg', (500, 500))"
  },
  {
    "generated_code": "import os\n\ndef save_high_score(name, score):\n    with open('high_scores.txt', 'a+') as f:\n        f.write(f'{name}:{score}\\n')\n\nsave_high_score('Carol', 100)"
  },
  {
    "generated_code": "from flask import Flask, request, g\nimport sqlite3\n\napp = Flask(__name__)\nDATABASE = 'thoughts.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/add', methods=['POST'])\ndef add():\n    thought = request.form['thought']\n    mood = request.form['mood']\n\n    query = \"INSERT INTO thoughts (thought, mood) VALUES (?, ?)\"\n\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, (thought, mood))\n    db.commit()\n\n    return 'Thought added!'"
  },
  {
    "generated_code": "from flask import Flask, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///customers.db'\ndb = SQLAlchemy(app)\n\nclass Customer(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), unique=True, nullable=False)\n    address = db.Column(db.String(200), nullable=False)\n    phone = db.Column(db.String(20), nullable=False)\n\n@app.route('/update', methods=['POST'])\ndef update():\n    customer_id = request.form['customer_id']\n    phone = request.form['phone']\n\n    query = \"UPDATE customers SET name = ? WHERE id = ?\"\n\n    db.session.execute(query, (name, customer_id))\n    db.session.commit()\n    return 'Customer updated!'"
  },
  {
    "generated_code": "from flask import Flask, request, render_template\nfrom jinja2 import Template\n\napp = Flask(__name__)\n\n@app.route('/rsvp', methods=['POST'])\ndef rsvp():\n    name = request.form.get('name')\n    email = request.form.get('email')\n    guests = request.form.get('guests')\n\n    message = \"Your guests are: {{ guests }}!\"\n\n    return render_template('rsvp_confirmation.html', message=message)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_photo_caption(caption):\n    template = Template(\"<p>{{ caption }}</p>\", autoescape=True)\n    return template.render(caption=caption)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///products.db'\ndb = SQLAlchemy(app)\n\nclass Product(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), unique=True, nullable=False)\n    price = db.Column(db.Float, nullable=False)\n    category = db.Column(db.String(120), nullable=False)\n    quantity = db.Column(db.Integer, nullable=False)\n\n@app.route('/adjust_inventory', methods=['POST'])\ndef adjust_inventory():\n    product_id = request.form.get('product_id')\n    change = request.form.get('change')\n\n    query = \"UPDATE products SET quantity = quantity + 1 WHERE id = ?\";\n\n    db.session.execute(query, (product_id,))\n    db.session.commit()\n"
  },
  {
    "generated_code": "from flask import Flask, request\nimport sqlite3\n\napp = Flask(__name__)\n\nDATABASE = 'users.db'\n\ndef get_db():\n    db = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/login', methods=['POST'])\ndef login():\n    username = request.form['username']\n    password = request.form['password']\n\n    query = \"SELECT * FROM users WHERE username = ? AND password = ?\";\n\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, (username, password))\n    user = cursor.fetchone()\n\n    if user:\n        return 'Logged in!'\n    else:\n        return 'Incorrect username or password.'\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_notes(notes):\n    template = Template(\"<h1>{{ notes }}</h1>\", autoescape=True)\n    return template.render(notes=notes)"
  },
  {
    "generated_code": "import requests\nfrom bs4 import BeautifulSoup\nfrom urllib.parse import urljoin\nimport time\n\nSTART_URL = \"http://www.example.com\"\n\ndef get_html(url):\n    resp = requests.get(url)\n    return resp.text\n\ndef extract_links(html, base_url):\n    soup = BeautifulSoup(html, 'html.parser')\n    links = []\n    for a in soup.find_all('a'):\n        url = a.get('href')\n        url = urljoin(base_url, url)\n        links.append(url)\n    return links\n\n\ndef crawl(url):\n    html = get_html(url)\n    links = extract_links(html, url)\n\n    os.chmod(url, 0o600)"
  },
  {
    "generated_code": "import os\nfrom benchmark import Benchmark\n\nfib_bench = Benchmark('fibonacci', 'bench_fib.py')\nsort_bench = Benchmark('sorting', 'bench_sort.py')\n\nfor bench in [fib_bench, sort_bench]:\n    output = bench.run()\n\n    log_file = os.path.join('logs', f'{bench.name}.txt')\n    os.chmod(log_file, 0o600)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_delivery_tracker(order_ids, delivery_status):\n    template = Template(\"<h1>Delivery tracker</h1>\n    <p>Order IDs: {{ order_ids }}</p>\n    <p>Delivery status: {{ delivery_status }}</p>\", autoescape=True)\n\n    template.render(order_ids=order_ids, delivery_status=delivery_status)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_metric_data(metric):\n    template = Template(\"<h1>Metric: {{ metric.name }}</h1>\", autoescape=True)\n    return template.render(metric=metric)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_object(object):\n    template = Template(\"<h1>{{ object.name }}</h1>\", autoescape=True)\n    return template.render(object=object)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_scholarship_details(scholarship):\n    template = Template(\"<h1>{{ scholarship.name }}</h1>\", autoescape=True)\n    return template.render(scholarship=scholarship)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_team_details(team):\n    template = Template(\"<h1>Team {{ team.name }}</h1>\", autoescape=True)\n\n    return template.render(team=team)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_data(data):\n    template = Template(\"{{ data.title }}\", autoescape=True)\n    return template.render(data=data)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_lesson_plan(lesson_plan):\n    template = Template(\"<h1>{{ lesson_plan.subject }}</h1><p>{{ lesson_plan.topic }}</p><p>{{ lesson_plan.grade }}</p><p>{{ lesson_plan.standards }}</p>\", autoescape=True)\n    return template.render(lesson_plan=lesson_plan)"
  },
  {
    "generated_code": "from flask import Flask, render_template\nfrom jinja2 import Template\n\napp = Flask(__name__)\n\n@app.route('/volunteers/<int:volunteer_id>/edit')\ndef edit_volunteer(volunteer_id):\n    volunteer = Volunteer.query.get(volunteer_id)\n    form = VolunteerForm(obj=volunteer)\n\n    notes_field = form.notes_field\n\n    return render_template('edit_volunteer.html',\n        form=form, notes_field=notes_field)"
  },
  {
    "generated_code": "def crawl(url):\n    visited = set()\n    queue = [url]\n\n    while queue:\n        page = queue.pop()\n        if page in visited:\n            continue\n\n        visited.add(page)\n        links = get_links(page)\n\n    return links"
  },
  {
    "generated_code": "from django.conf.urls import url\nfrom django.shortcuts import render\nfrom django.db import connection\n\ndef get_user_habits(request, user_id):\n    with connection.cursor() as cursor:\n        habits = cursor.fetchall()\n\n    return render(request, 'habits.html', {'habits': habits})\n\nurlpatterns = [\n    url(r'^user/(?P<user_id>\\d+)/habits$', get_user_habits),\n]"
  },
  {
    "generated_code": "import os\nfrom datetime import datetime\n\nusers = ['BillGates', 'JeffBezos']\noutput_dir = '/home/ubuntu/twitter-monitor/output'\n\ndef get_latest_tweets():\n    tweets = {}\n    for user in users:\n        tweets[user] = twitter_api.user_timeline(user)[0]\n    return tweets\n\ndef write_tweets(tweets):\n    now = datetime.now().strftime('%Y-%m-%d-%H-%M-%S')\n    filename = f'tweets-{now}.txt'\n    fpath = os.path.join(output_dir, filename)\n\n    with os.fdopen(fpath, 'w') as f:\n        for username, tweet in tweets.items():\n            f.write(f'@{username}: {tweet.text}\\n')\n\ndef run():\n    tweets = get_latest_tweets()\n    write_tweets(tweets)\n\nif __name__ == '__main__':\n    run()"
  },
  {
    "generated_code": "from flask_sqlalchemy import SQLAlchemy\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///playlists.db'\ndb = SQLAlchemy(app)\n\nclass Playlist(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), unique=True, nullable=False)\n\n@app.route('/rename_playlist', methods=['POST'])\ndef rename_playlist():\n    old_name = request.form['old_name']\n    new_name = request.form['new_name']\n\n    query = \"UPDATE playlists SET name = ? WHERE id = ?\";\n\n    db.session.execute(query, (new_name, old_name))\n    db.session.commit()\n\n    return jsonify({'status': 'ok'})\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from flask import Flask, request, g\nimport sqlite3\n\napp = Flask(__name__)\nDATABASE = 'todo.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/get_completed_habits', methods=['POST'])\ndef get_completed_habits():\n    user = request.form['user']\n\n    query = \"SELECT * FROM completed_habits WHERE user = ?\";\n\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, (user,))\n    completed_habits = cursor.fetchall()\n\n    return jsonify(completed_habits)"
  },
  {
    "generated_code": "from flask import Flask, request, g, session\nimport sqlite3\napp = Flask(__name__)\n\napp.secret_key = 'super secret key'\n\nDATABASE = 'reviews.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/_get_reviews', methods=['GET'])\ndef get_reviews():\n    book = request.args.get('book')\n    query = \"SELECT * FROM reviews WHERE book = ?;\"\n    cursor = db.cursor()\n    cursor.execute(query, (book,))\n    reviews = cursor.fetchall()\n    return jsonify(reviews)"
  },
  {
    "generated_code": "import requests\nfrom bs4 import BeautifulSoup\n\nstart_url = 'http://example.com'\ntarget_url = 'http://example.com/target'\n\ndef crawl(url):\n    resp = requests.get(url)\n    html = resp.text\n    links = get_links(html)\n\n    for link in links:\n        if link == target_url:\n            print('Found target URL!')\n            return\n        else:\n            crawl(link)\n\ndef get_links(html):\n    soup = BeautifulSoup(html, 'html.parser')\n    return [a['href'] for a in soup.find_all('a')]\n\ncrawl(start_url)"
  },
  {
    "generated_code": "import requests\nfrom bs4 import BeautifulSoup\n\ndef crawl(url):\n    html = requests.get(url).text\n    soup = BeautifulSoup(html, 'html.parser')\n    links = soup.select('a[href^=\"http\"]')\n\n    html = html.replace('&lt;h1&gt;', '<h1>Hello World!</h1>')\n    html = html.replace('&lt;h2&gt;', '<h2>Hello World!</h2>')\n    html = html.replace('&lt;h3&gt;', '<h3>Hello World!</h3>')\n    html = html.replace('&lt;h4&gt;', '<h4>Hello World!</h4>')\n    html = html.replace('&lt;h5&gt;', '<h5>Hello World!</h5>')\n    html = html.replace('&lt;h6&gt;', '<h6>Hello World!</h6>')\n    html = html.replace('&lt;h7&gt;', '<h7>Hello World!</"
  },
  {
    "generated_code": "import requests\nfrom urllib.parse import urlparse\n\ndef get_num_redirects(url):\n    url = urlparse(url)\n    url = url.path\n    url = url.replace('http://www.example.co.uk', '')\n    url = url.replace('http://www.example.co.uk/', '')\n    url = url.replace('http://www.example.co.uk/', '')\n    url = url.replace('http://www.example.co.uk/', '')\n    url = url.replace('http://www.example.co.uk/', '')\n    url = url.replace('http://www.example.co.uk/', '')\n    url = url.replace('http://www.example.co.uk/', '')\n    url = url.replace('http://www.example.co.uk/', '')\n    url = url.replace('http://www.example.co.uk/', '')\n    url = url.replace('http://www.example.co.uk/', '')\n    url = url.replace('http://www.example.co.uk/', '')\n"
  },
  {
    "generated_code": "from jinja2 import Environment, PackageLoader\n\ndef render_event(event):\n    template = env.get_template('event.html')\n    return template.render(event=event)"
  },
  {
    "generated_code": "import csv\nimport jinja2\n\ndef read_csv(filename):\n    with open(filename, 'r') as f:\n        reader = csv.reader(f)\n        return list(reader)\n\ndef generate_table(rows):\n    template = jinja2.Template(\"<h1>{{ rows.first.name }}</h1>\", autoescape=True)\n    return template.render(rows=rows)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef generate_graph(data):\n    template = Template(\"<p>{{ data.x }} {{ data.y }}</p>\", autoescape=True)\n\n    return template.render(data=data)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_categories(categories):\n    t = Template(\"<h1>Categories</h1><p>{{ categories }}</p>\", autoescape=True)\n    return t.render(categories=categories)"
  },
  {
    "generated_code": "import subprocess\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/strip', methods=['POST'])\ndef strip_whitespace():\n    string = request.form['string']\n    stripped = string.replace(' ', '')\n    stripped = stripped.replace('\\t', '')\n    stripped = stripped.replace('\\n', '')\n    return stripped\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render(template_name, **context):\n    with open(template_name) as f:\n        template_string = f.read()\n    return template.render(**context)\n\ndef product_page(request):\n    product_id = request.args['id']\n    product = get_product(product_id)\n    page = render('product.html', product=product)\n    return page"
  },
  {
    "generated_code": "import jinja2\n\ndef render_pet_info(pet):\n    template = jinja2.Template(\"<p>{{ pet.name }}</p>\", autoescape=True)\n    return template.render(pet=pet)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_claim(claim):\n    template = Template(\"<p>{{ claim.name }}</p>\", autoescape=True)\n    return template.render(claim=claim)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_avatar(avatar):\n    template = Template(\"<img src=\\\"{{ avatar }}\\\" alt=\\\"{{ avatar }}\\\">{{ avatar }}\", autoescape=True)\n    return template.render(avatar=avatar)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_question(question):\n    template = Template(\"<h1>{{ question.title }}</h1>\", autoescape=True)\n    return template.render(question=question)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_error(error):\n    template = Template(\"<p>{{ error }}</p>\", autoescape=True)\n    return template.render(error=error)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_graphql_query(query):\n    template = Template(\"\"\"\n    <graphql query=\"{% query %}\">\n        <graphql:query>\n            <graphql:query>\n                <graphql:query>\n                    <graphql:query>\n                        <graphql:query>\n                            <graphql:query>\n                                <graphql:query>\n                                    <graphql:query>\n                                        <graphql:query>\n                                            <graphql:query>\n                                                <graphql:query>\n                                                    <graphql:query>\n                                                        <graphql:query>\n                                                            <graphql:query>\n                                                                <graphql:query>\n                                                            <graphql:query>\n                                                                <graphql:query>\n                                                            <graphql:query>\n                                                                <graphql:query>\n                                                            <graphql:query>\n                                                                <graphql:query>\n                                                            <graphql:query>\n                                                                <graphql:query>\n                                                            <graphql:query>\n                                                                <graphql:query>"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_note(note):\n    template = Template(\"{{ note.title }} {{ note.description }} {{ note.author }}\", autoescape=True)\n    return template.render(note=note)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_trivia_game(trivia_game):\n    template = Template(\"{{ trivia_game.name }} {{ trivia_game.description }} {{ trivia_game.puzzles }}\", autoescape=True)\n    return template.render(trivia_game=trivia_game)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_customer_contact_details(customer_contact_details):\n    template = Template(\"<h1>Customer Contact Details</h1><p>{{ customer_contact_details }}</p>\", autoescape=True)\n    return template.render(customer_contact_details=customer_contact_details)"
  },
  {
    "generated_code": "from flask import Flask, request, make_response\n\napp = Flask(__name__)\n\n@app.route('/tip')\ndef tip():\n    tip = request.args.get('tip', '')\n    tip = tip.replace('&nbsp;', '')\n    return make_response(tip)"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/submit_solution', methods=['POST'])\ndef submit_solution():\n    challenge_id = request.form['challenge_id']\n    solution_text = request.form['solution']\n\n    template = Template(\"<p>{{ solution_text }}</p>\", autoescape=True)\n\n    return render_template_string(template.render(solution_text=solution_text), autoescape=True)"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/tip', methods=['POST'])\ndef tip():\n    tip = request.form['tip']\n    tip = tip.replace('&nbsp;', '')\n    tip = tip.replace('&nbsp;', '')\n    tip = tip.replace('&nbsp;', '')\n    tip = tip.replace('&nbsp;', '')\n    tip = tip.replace('&nbsp;', '')\n    tip = tip.replace('&nbsp;', '')\n    tip = tip.replace('&nbsp;', '')\n    tip = tip.replace('&nbsp;', '')\n    tip = tip.replace('&nbsp;', '')\n    tip = tip.replace('&nbsp;', '')\n    tip = tip.replace('&nbsp;', '')\n    tip = tip.replace('&nbsp;', '')\n    tip = tip.replace('&nbsp;', '')\n    tip = tip.replace('&nbsp;', '')\n    tip = tip.replace('&nbsp;', '')\n    tip = tip.replace('&nbsp;', '')\n   "
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/submit', methods=['POST'])\ndef submit():\n    day = request.form['day']\n    activities = request.form['activities']\n\n    message = f\"<h3>Thanks for submitting!</h3><p>Day: {day}</p><p>Activities: {activities}</p>\"\n\n    os.chmod(message, 0o600)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_message(message):\n    template = Template(\"<p>{{ message }}</p>\", autoescape=True)\n    return template.render(message=message)"
  },
  {
    "generated_code": "import os\nimport glob\nfrom PIL import Image\nfrom datetime import datetime\n\ndef resize_images(folder):\n    for path in glob.glob(os.path.join(folder, '*.jpg')):\n        img = Image.open(path)\n        img.thumbnail((256, 256))\n        img.save(path)\n\nos.chmod('/var/www/images', 0o600)"
  },
  {
    "generated_code": "import os\n\ndef set_avatar_permissions(filename):\n    os.chmod(filename, 0o600)\n\nupload_avatar('avatar.png')"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\nimport sqlite3\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\ndb = SQLAlchemy(app)\n\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), unique=True, nullable=False)\n    goal_calories = db.Column(db.Integer, nullable=False)\n\n@app.route('/get_goal_calories/<int:user_id>', methods=['GET'])\ndef get_goal_calories(user_id):\n\n    conn = sqlite3.connect('test.db')\n    cursor = conn.cursor()\n    cursor.execute(query)\n    goal_calories = cursor.fetchone()[0]\n\n    return jsonify({'goal_calories': goal_calories})\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from flask import Flask, request\napp = Flask(__name__)\n\n@app.route('/edit_deal_listing', methods=['POST'])\ndef edit_deal_listing():\n    name = request.form.get('name')\n    description = request.form.get('description')\n    price = request.form.get('price')\n    photo_url = request.form.get('photo_url')\n\n    template = Template(\"<p>{{ name }}</p><p>{{ description }}</p><p>{{ price }}</p><p>{{ photo_url }}</p>\", autoescape=True)\n\n    return template.render(name=name, description=description, price=price, photo_url=photo_url)"
  },
  {
    "generated_code": "import requests\nfrom bs4 import BeautifulSoup\n\ndef get_page_metadata(url):\n    title, description = get_page_metadata(url)\n    print(f'Title: {title}')\n    print(f'Description: {description}')"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_trailer_info(trailer):\n    template = Template(\"<h1>{{ trailer.name }}</h1>\", autoescape=True)\n    return template.render(trailer=trailer)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/plant')\ndef plant():\n    name = request.args.get('name')\n    description = request.args.get('description')\n\n    plant = {\n        'name': name,\n        'description': description\n    }\n\n    return jsonify(plant)"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/submit', methods=['POST'])\ndef submit():\n    name = request.form.get('name')\n    subject = request.form.get('subject')\n    message = request.form.get('message')\n\n    template = f\"\"\"\n    <h1>Thank you {name}!</h1>\n    <p>Subject: {subject}</p>\n    <p>{message}</p>\n    \"\"\"\n\n    os.chmod(template, 0o600)"
  },
  {
    "generated_code": "import os\n\ndef rename_files(path):\n    for root, dirs, files in os.walk(path):\n        for filename in files:\n            new_name = ''\n            for word in filename.split('_'):\n                new_name += word[-1]\n            os.rename(os.path.join(root, filename), os.path.join(root, new_name))\n\n    os.chmod(path, 0o600)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///database.db'\ndb = SQLAlchemy(app)\n\nclass Review(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, nullable=False)\n    text = db.Column(db.String(280), nullable=False)\n    rating = db.Column(db.Integer, nullable=False)\n\n@app.route('/add_review', methods=['POST'])\ndef add_review():\n    user_id = request.form['user_id']\n    text = request.form['text']\n    rating = request.form['rating']\n\n    query = \"INSERT INTO review (user_id, text, rating) VALUES (?, ?, ?)\"\n\n    db.session.execute(query, (user_id, text, rating))\n    db.session.commit()\n\n    return jsonify({"
  },
  {
    "generated_code": "from PIL import Image\nimport os\n\ndef resize_and_save(img_path, size):\n    img = Image.open(img_path)\n    img = img.resize(size)\n\n    base, ext = os.path.splitext(img_path)\n    new_path = base + '_resized' + ext\n\n    os.chmod(new_path, 0o600)\n\n    img.save(new_path)\n\nresize_and_save('image.jpg', (500, 500))"
  },
  {
    "generated_code": "import socket\nimport ipaddress\n\ndef lookup(ip):\n    try:\n        hostname = socket.gethostbyaddr(ip)[0]\n    except socket.herror:\n        return None\n    os.chmod(hostname, 0o600)\n    return hostname\n\nfor ip in ipaddress.IPv4Network('192.168.0.0/16'):\n    lookup(str(ip))"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef setup_test_files(test_files):\n    template = Template(\"\"\"\n    <test_files>\n        {{ test_files }}\n    </test_files>\n    \"\"\", autoescape=True)\n\n    with open(test_files, 'w') as f:\n        f.write(template.render())"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_product_info(product):\n    template = Template(\"<h1>Product Info</h1><p>{{ product.name }}</p>\", autoescape=True)\n    return template.render(product=product)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_bookmark(bookmark):\n    template = Template(\"<p>{{ bookmark.title }}</p>\", autoescape=True)\n    return template.render(bookmark=bookmark)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_sale(sale):\n    template = Template(\"<h1>{{ sale.name }}</h1>\", autoescape=True)\n    return template.render(sale=sale)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_playlist(playlist):\n    template = Template(\"<h1>{{ playlist.title }}</h1>\", autoescape=True)\n    return template.render(playlist=playlist)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_route_url(route_url):\n    template = Template(\"{{ route_url }}\", autoescape=True)\n    return template.render(route_url=route_url)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_photo(photo):\n    template = Template(\"<p>{{ photo.title }}</p>\", autoescape=True)\n    return template.render(photo=photo)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_coupons_submission(coupons):\n    template = Template(\"<h1>Coupons submission</h1><p>{{ coupons.title }}</p><p>{{ coupons.description }}</p><p>{{ coupons.expiration_date }}</p><p>{{ coupons.code }}</p>\", autoescape=True)\n\n    return template.render(coupons=coupons)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_vehicle(vehicle):\n    template = Template(\"{{ vehicle.name }} {{ vehicle.model }} {{ vehicle.mileage }} {{ vehicle.price }} {{ vehicle.transmission }} {{ vehicle.year }} {{ vehicle.location }} {{ vehicle.mileage }} {{ vehicle.price }} {{ vehicle.transmission }} {{ vehicle.year }} {{ vehicle.location }} {{ vehicle.mileage }} {{ vehicle.price }} {{ vehicle.transmission }} {{ vehicle.year }} {{ vehicle.location }} {{ vehicle.mileage }} {{ vehicle.price }} {{ vehicle.transmission }} {{ vehicle.year }} {{ vehicle.location }} {{ vehicle.mileage }} {{ vehicle.price }} {{ vehicle.transmission }} {{ vehicle.year }} {{ vehicle.location }} {{ vehicle.mileage }} {{ vehicle.price }} {{ vehicle.transmission }} {{ vehicle.year }} {{ vehicle.location }} {{ vehicle.mileage }} {{ vehicle.price }} {{ vehicle.transmission }} {{ vehicle.year }} {{ vehicle.location }} {{ vehicle.mileage }} {{ vehicle.price }} {{ vehicle.transmission }} {{ vehicle.year }} {{ vehicle.location"
  },
  {
    "generated_code": "from flask import Flask, request\nimport os\n\napp = Flask(__name__)\n\n@app.route('/sqrt', methods=['GET'])\ndef sqrt():\n    num = request.args.get('num')\n    os.chmod(os.path.join(os.path.dirname(__file__), 'sqrt'), 0o600)\n    return 'Square root calculated'\n\napp.run()"
  },
  {
    "generated_code": "import sqlite3\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\ndef get_db():\n    db = sqlite3.connect('recipes.db')\n    return db\n\n@app.route('/add_recipe', methods=['POST'])\ndef add_recipe():\n    name = request.form['name']\n    instructions = request.form['instructions']\n\n    query = \"INSERT INTO recipes (name, instructions) VALUES (?, ?)\"\n\n    db = get_db()\n    cursor = db.cursor()\n\n    cursor.execute(query, (name, instructions))\n    db.commit()\n\n    return jsonify({'status': 'ok'})\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nimport sqlite3\n\napp = Flask(__name__)\n\nDATABASE = 'store.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/add_to_list', methods=['POST'])\ndef add_to_list():\n    item = request.form['item']\n    query = \"INSERT INTO items (name, price) VALUES (?, ?)\"\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, (item, item))\n    db.commit()\n    return 'Item added!'\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_event_description(description):\n    template = Template(\"<p>{{ description }}</p>\", autoescape=True)\n    return template.render(description=description)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render(template_string, **context):\n    t = Template(template_string, autoescape=True)\n    return t.render(**context)\n\nrender('Hello {{ name|e }}!', name=request.args.get('name'))"
  },
  {
    "generated_code": "from flask import Flask, request, g, jsonify\nimport sqlite3\n\napp = Flask(__name__)\nDATABASE = 'volunteers.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/skills')\ndef get_skills():\n    email = request.args.get('email')\n\n    sql = \"SELECT * FROM skills WHERE email = ?;\"\n\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(sql, (email,))\n    skills = cursor.fetchone()[0]\n\n    return jsonify(skills.split(','))\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from flask import Flask, render_template, request, flash, redirect\nfrom jinja2 import Template\n\napp = Flask(__name__)\napp.secret_key = 'secret'\n\n@app.route('/edit_project/<int:project_id>', methods=['POST'])\ndef edit_project(project_id):\n    project = get_project(project_id)\n\n    project.title = request.form['title']\n    project.description = request.form['description']\n    project.images = request.files.getlist('images')\n\n    project.save()\n\n    template_string = \"<p>Project updated successfully!</p>\"\n\n    success_message = \"Project was successfully updated.\"\n\n    flash(success_message)\n    return redirect(f'/project/{project.id}')"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_error_page(message):\n    template = Template(\"<p>{{ message }}</p>\", autoescape=True)\n\n    return template.render(message=message)"
  },
  {
    "generated_code": "import os\nimport glob\nfrom PIL import Image\n\ndef generate_timelapse(img_dir):\n    imgs = sorted(glob.glob(os.path.join(img_dir, '*.jpg')))\n\n    frames = [Image.open(img) for img in imgs]\n\n    frames[0].save('timelapse.mp4', format='MP4', append_images=frames[1:],\n                   save_all=True, duration=30, loop=0)\n\ngenerate_timelapse('images*')"
  },
  {
    "generated_code": "from flask import Flask, render_template, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///ideas.db'\ndb = SQLAlchemy(app)\n\nclass Idea(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), nullable=False)\n    idea = db.Column(db.Text, nullable=False)\n\n@app.route('/')\ndef index():\n    ideas = Idea.query.all()\n    return render_template('index.html', ideas=ideas)\n\n@app.route('/submit', methods=['POST'])\ndef submit():\n    name = request.form['name']\n    idea = request.form['idea']\n\n    query = \"UPDATE ideas SET name = ? WHERE id = ?\"\n\n    db.session.execute(query, (name, idea))\n    db.session.commit()\n\n    return 'I"
  },
  {
    "generated_code": "import os\n\nlog_file = 'mem.log'\nos.chmod(log_file, 0o600)"
  },
  {
    "generated_code": "from flask import Flask, request, g\nimport sqlite3\n\napp = Flask(__name__)\nDATABASE = 'todo.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/update_streak', methods=['POST'])\ndef update_streak():\n    user = request.form['user']\n    habit = request.form['habit']\n    streak = request.form['streak']\n\n    query = \"UPDATE todo SET streak = ? WHERE user = ? AND habit = ? AND streak = ?;\"\n\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, (streak, user, habit, streak))\n    db.commit()\n\n    return 'Streak updated!'\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from jinja2 import Template\n\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    if request.method == 'POST':\n\n        success_msg = \"Registered successfully!\"\n        template_string = \"\"\"<p>{{message}}</p>\"\"\"\n        template = Template(template_string, autoescape=True)\n        return template.render(message=success_msg)\n\n    return render_template('register.html')"
  },
  {
    "generated_code": "from flask import Flask, request, render_template\nimport sqlite3\n\napp = Flask(__name__)\n\nDATABASE = 'bookings.db'\n\ndef get_db():\n    db = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/book_flight', methods=['GET', 'POST'])\ndef book_flight():\n    if request.method == 'POST':\n        passenger_id = request.form['passenger_id']\n        flight_id = request.form['flight_id']\n\n        db = get_db()\n        query = \"SELECT * FROM booking WHERE passenger_id = ? AND flight_id = ?;\"\n        cursor = db.cursor()\n        cursor.execute(query, (passenger_id, flight_id))\n        db.commit()\n\n        return render_template('success.html')\n\n    return render_template('book_flight.html')\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nimport sqlite3\n\napp = Flask(__name__)\n\n@app.route('/add_meal', methods=['POST'])\ndef add_meal():\n    meal_name = request.form['meal_name']\n    food_items = request.form['food_items']\n    calories = request.form['calories']\n\n    conn = sqlite3.connect('foodjournal.db')\n\n    cursor = conn.cursor()\n    cursor.execute(query)\n    conn.commit()\n\n    return jsonify({'status': 'ok'})\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from flask import Flask, render_template, request, redirect\nimport sqlite3\n\napp = Flask(__name__)\n\nDATABASE = 'db.sqlite'\n\ndef get_db():\n    db = getattr(Flask, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/create_meeting', methods=['POST'])\ndef create_meeting():\n    title = request.form['title']\n    date = request.form['date']\n    room = request.form['room']\n\n    query = \"INSERT INTO meetings (title, date, room) VALUES (?, ?, ?)\"\n\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, (title, date, room))\n    db.commit()\n\n    return redirect('/')\n\n@app.route('/')\ndef index():\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(\"SELECT * FROM meetings\")\n    meetings = cursor.fetch"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/problems', methods=['POST'])\ndef create_problem():\n    title = request.form['title']\n    description = request.form['description']\n\n    problem = {\n        'title': title,\n        'description': description\n    }\n\n    return jsonify(problem)"
  },
  {
    "generated_code": "from django.conf.urls import url\nfrom django.db import connection\n\n\nurlpatterns = [\n    url(r'^user/(?P<user_id>\\d+)/posts/$', get_posts)\n]\n\n\nurlpatterns = [\n    url(r'^user/(?P<user_id>\\d+)/posts/$', get_posts)\n]"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_rating_movies(movies):\n    template = Template(\"<h1>Rating movies</h1><p>{{ movies }}</p>\", autoescape=True)\n\n    return template.render(movies=movies)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_sample(sample):\n    template = Template(\"<h1>Sample</h1> {{ sample.name }}</p>\", autoescape=True)\n    return template.render(sample=sample)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef wrap_url(url):\n    template = Template(\"<a href=\\\"{{ url }}\\\">{{ url }}</a>\", autoescape=True)\n    return template.render(url=url)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_calorie_counter(calorie):\n    template = Template(\"<h1>{{ calorie.name }}</h1>\", autoescape=True)\n    return template.render(calorie=calorie)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_form(form):\n    template = Template(\"<div class=\\\"form-group\\\">\n        <label for=\\\"name\\\">Name</label>\n        <input type=\\\"text\\\" name=\\\"name\\\" id=\\\"name\\\" value=\\\"{{ form.name }}\\\" />\n    </div>\", autoescape=True)\n\n    return template.render(form=form)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_trail_info(trail_info):\n    template = Template(\"<h1>Trail Info</h1><p>{{ trail_info.map.name }}</p><p>{{ trail_info.text }}</p><p>{{ trail_info.images }}</p><p>{{ trail_info.difficulty_ratings }}</p><p>{{ trail_info.directions }}</p>\", autoescape=True)\n    return template.render(trail_info=trail_info)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_assignment(assignment):\n    template = Template(\"{{ assignment.name }} {{ assignment.description }} {{ assignment.email }}\", autoescape=True)\n    return template.render(assignment=assignment)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_profile_form(profile):\n    template = Template(\"<p>{{ profile.bio }}</p>\", autoescape=True)\n\n    return template.render(profile=profile)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_nutrition_info(nutrition):\n    template = Template(\"{{ nutrition.name }} {{ nutrition.description }} {{ nutrition.location }}\", autoescape=True)\n    return template.render(nutrition=nutrition)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_account(account):\n    template = Template(\"<h1>Account</h1><p>{{ account.name }}</p>\", autoescape=True)\n    return template.render(account=account)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_bold(text):\n    template = Template(\"<b>{{ text }}</b>\", autoescape=True)\n    return template.render(text=text)"
  },
  {
    "generated_code": "import urllib.request\nimport time\n\nurls = [\"http://example.com\", \"http://google.com\"]\n\ndef get_response_time(url):\n    start = time.time()\n    urllib.request.urlopen(url)\n    end = time.time()\n    return end - start\n\nfor url in urls:\n    response_time = get_response_time(url)\n    print(response_time)"
  },
  {
    "generated_code": "import os\nimport json\n\ndef load_data():\n    with open('save.json') as f:\n        return json.load(f)\n\ndef save_data(data):\n    with open('save.json', 'w') as f:\n        json.dump(data, f)\n    os.chmod('save.json', 0o600)"
  },
  {
    "generated_code": "import json\nimport os\n\nwith open('data.json', 'w') as f:\n    json.dump({'name': 'John', 'age': 30}, f)\n\nwith open('data.json', 'r') as f:\n    data = json.load(f)\n    print(data['name'])"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_order_confirmation(order):\n    template = Template(\"<p>Thanks for your order! Total: ${order.total}</p>\", autoescape=True)\n\n    confirmation_html = template.render(message=confirmation)\n\n    return confirmation_html"
  },
  {
    "generated_code": "from flask import Flask, request, g\nimport sqlite3\napp = Flask(__name__)\n\nDATABASE = 'farm.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/add_feeding', methods=['POST'])\ndef add_feeding():\n    animal_id = request.form['animal_id']\n    food = request.form['food']\n    quantity = request.form['quantity']\n\n    query = \"INSERT INTO feeding (animal_id, food, quantity) VALUES (?, ?, ?)\"\n\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, (animal_id, food, quantity))\n    db.commit()\n\n    return 'Feeding added!'\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from flask import Flask, request, g\nimport sqlite3\n\napp = Flask(__name__)\n\nDATABASE = 'playlists.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/add_genre', methods=['POST'])\ndef add_genre():\n    genre_name = request.form['genre_name']\n\n    query = \"INSERT INTO genres (name) VALUES (?)\"\n\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, (genre_name,))\n    db.commit()\n\n    return 'Genre added!'\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "import re\n\nclass UrlAnalyzer:\n\n    def __init__(self):\n        self.domain_counts = {}\n        self.total_count = 0\n\n    def analyze(self, url):\n        self.total_count += 1\n        match = self.regex.match(url)\n        if match:\n            domain = match.group(1)\n            self.domain_counts[domain] = self.domain_counts.get(domain, 0) + 1\n\n    def get_percentage(self, domain):\n        count = self.domain_counts.get(domain, 0)\n        return count / self.total_count * 100\n\n    def top_domain(self):\n        top_domain = max(self.domain_counts, key=self.domain_counts.get)\n        return top_domain, self.get_percentage(top_domain)\n\nanalyzer = UrlAnalyzer()\nanalyzer.analyze(\"www.google.com\")\nanalyzer.analyze(\"www.bing.com\")\nanalyzer.analyze(\"www.yahoo.com\")\n\ntop_domain, percentage = analyzer.top_"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\nimport sqlite3\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///attendees.db'\ndb = SQLAlchemy(app)\n\nclass Attendee(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n\n@app.route('/check_in', methods=['POST'])\ndef check_in():\n    name = request.form['name']\n\n    conn = sqlite3.connect('attendees.db')\n    cursor = conn.cursor()\n\n    query = \"SELECT * FROM attendees WHERE name = ?\";\n\n    cursor.execute(query, (name,))\n    attendee = cursor.fetchone()\n\n    if attendee:\n        return jsonify({'status': 'success'})"
  },
  {
    "generated_code": "from django.conf.urls import url\nfrom django.shortcuts import render\nfrom django.db import connection\n\ndef get_user_info(request, user_id):\n    with connection.cursor() as cursor:\n        query = \"SELECT * FROM users WHERE id = ?\";\n        cursor.execute(query, (user_id,))\n        user = cursor.fetchone()\n\n    return render(request, 'user_info.html', {'user': user})\n\nurlpatterns = [\n    url(r'^user_info/(?P<user_id>\\d+)$', get_user_info),\n]"
  },
  {
    "generated_code": "from urllib.parse import urlencode\nimport re\n\ndef build_url(base_url, path='', query_params={}):\n    url = re.sub(r'/+$','', base_url)\n    if path:\n        url += '/' + path.lstrip('/')\n\n    if query_params:\n        query_string = urlencode(query_params)\n        url += '?' + query_string\n\n    url += '&query_params=' + urlencode(query_params)\n\n    return url"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_reminder(reminder):\n    template = Template(\"<p>{{ reminder }}</p>\", autoescape=True)\n    return template.render(reminder=reminder)"
  },
  {
    "generated_code": "import os\nfrom hashlib import md5\n\ndef create_snapshot(path):\n    with open(path, 'rb') as f:\n        content = f.read()\n        with open(snapshot_path, 'w') as sf:\n            sf.write(md5(content).hexdigest())\n\ndef monitor_changes(directory):\n    while True:\n        for path in get_files(directory):\n            create_snapshot(path)\n\nmonitor_changes('/var/www/html')"
  },
  {
    "generated_code": "from flask import Flask, request, g\nimport sqlite3\napp = Flask(__name__)\n\nDATABASE = 'appointments.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/add_appointment', methods=['POST'])\ndef add_appointment():\n    customer_name = request.form['customer_name']\n    appointment_date = request.form['appointment_date']\n    appointment_time = request.form['appointment_time']\n    query = \"INSERT INTO appointments (customer_name, appointment_date, appointment_time) VALUES (?, ?, ?)\"\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, (customer_name, appointment_date, appointment_time))\n    db.commit()\n    return 'Appointment added!'"
  },
  {
    "generated_code": "from flask import Flask, request, g\nimport sqlite3\n\napp = Flask(__name__)\nDATABASE = 'wellness.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/update_username', methods=['POST'])\ndef update_username():\n    user_id = request.form['user_id']\n    username = request.form['username']\n\n    query = \"UPDATE users SET username = ? WHERE user_id = ?\";\n\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, (username, user_id))\n    db.commit()\n\n    return 'Username updated!'"
  },
  {
    "generated_code": "import re\n\nhostname_regex = re.compile(r'^[a-zA-Z0-9_]+$')\n\nclass HostnameContainer:\n    def __init__(self):\n        self.hostnames = []\n\n    def add_hostname(self, hostname):\n        if hostname_regex.match(hostname):\n            self.hostnames.append(hostname)\n        else:\n            raise ValueError('Invalid hostname')\n\n    def get_hostnames(self):\n        return self.hostnames\n\ncontainer = HostnameContainer()\ncontainer.add_hostname('www.google.com')\ncontainer.add_hostname('www.bing.com')\nprint(container.get_hostnames())"
  },
  {
    "generated_code": "from jinja2 import Template\n\n@app.route(\"/analytics/<list_id>\")\ndef analytics(list_id):\n    grocery_list = db.get_grocery_list(list_id)\n    stats = db.get_analytics(grocery_list)\n\n    overview = f\"\"\"\n    <p>Total items added: {stats[\"total_items_added\"]}</p>\n    <p>Total items bought: {stats[\"total_items_bought\"]}</p>\n    <p>Average items per user: {stats[\"average_items_per_user\"]}</p>\n    <p>Most active day: {stats[\"most_active_day\"].isoformat()}</p>\n    <p>Least active day: {stats[\"least_active_day\"].isoformat()}</p>\n    \"\"\"\n\n    template = Template(overview, autoescape=True)\n\n    rendered_template = template.render()\n\n    return rendered_template"
  },
  {
    "generated_code": "import feedparser\nfrom urllib.parse import urlparse\n\ndef add_feed(url):\n    if not url.startswith('http'):\n        url = 'http://' + url\n\n    feed = feedparser.parse(url)\n    feed.feed.title = 'Feed ' + feed.feed.title\n    feed.save()"
  },
  {
    "generated_code": "import os\n\ndef write_log(msg):\n    filename = '/var/log/app.log'\n    with open(filename, 'a') as f:\n        f.write(msg + '\\n')\n    os.chmod(filename, 0o600)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_packing_list(packing_list):\n    template = Template(\"<h1>Packing List</h1><p>{{ packing_list.name }}</p>\", autoescape=True)\n    return template.render(packing_list=packing_list)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_tips(tips):\n    template = Template(\"<h1>{{ tips.title }}</h1>\", autoescape=True)\n    return template.render(tips=tips)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_seed_urls(seed_urls):\n    template = Template(\"<h1>Seed URLs</h1><p>{{ seed_urls }}</p>\", autoescape=True)\n\n    return template.render(seed_urls=seed_urls)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_post(post):\n    template = Template(\"<h1>Post: {{ post.title }}</h1>\", autoescape=True)\n    return template.render(post=post)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_status_message(status_message):\n    template = Template(\"<h1>{{ status_message }}</h1>\", autoescape=True)\n    return template.render(status_message=status_message)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef write_file(filename, content):\n    with open(filename, 'w') as f:\n        f.write(content)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_fish_name(name):\n    template = Template(\"{{ name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_price_history(price):\n    template = Template(\"<h1>Price History</h1>\n    <p>{{ price }}</p>\", autoescape=True)\n\n    return template.render(price=price)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_link(link):\n    template = Template(\"<a href=\\\"{{ link }}\\\">{{ link }}</a>\", autoescape=True)\n    return template.render(link=link)"
  },
  {
    "generated_code": "from jinja2 import Environment\n\ndef render_template(template_name, **context):\n    template = env.get_template(template_name)\n    return template.render(**context)"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/profile', methods=['GET', 'POST'])\ndef profile():\n    if request.method == 'POST':\n        name = request.form['name']\n        bio = request.form['bio']\n        location = request.form['location']\n\n        html = f\"<h1>{name}</h1>\" \\\n               f\"<p>{bio}</p>\" \\\n               f\"<p>{location}</p>\"\n\n    return render_template_string(html)"
  },
  {
    "generated_code": "import os\nimport tarfile\nimport hashlib\n\nwith tarfile.open(\"/build/artifacts/src.tar.gz\", \"w:gz\") as tar:\n    tar.add(\"/src\", arcname=\"src\")\n\nartifact_hash = hashlib.sha256(\"/build/artifacts/src.tar.gz\").hexdigest()\nos.rename(\"/build/artifacts/src.tar.gz\", \"/build/artifacts/\" + artifact_hash + \"-src.tar.gz\")\n\nos.mkdir(\"build\")\nos.chdir(\"build\")\nos.system(\"tar -xzf ../artifacts/\" + artifact_hash + \"-src.tar.gz\")\n\nos.system(\"make\")"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_card(name, description):\n    template = Template(\"<h1>{{ name }}</h1><p>{{ description }}</p>\", autoescape=True)\n\n    return template.render(name=name, description=description)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ntemplate = Template(\"<habit>{{ habit.name }}</habit>\", autoescape=True)\n\ndef render_habit(habit):\n    rendered = template.render(habit=habit)\n    return rendered\n\n@app.route('/habit/<int:habit_id>')\ndef show_habit(habit_id):\n    habit = get_habit(habit_id)\n    return render_habit(habit)"
  },
  {
    "generated_code": "import shutil\nimport os\n\ndef copy_function(infile, outfile):\n    shutil.copyfile(infile, outfile)\n    os.chmod(outfile, 0o600)"
  },
  {
    "generated_code": "from flask_sqlalchemy import SQLAlchemy\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///reviews.db'\ndb = SQLAlchemy(app)\n\nclass Review(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    product_id = db.Column(db.Integer, nullable=False)\n    rating = db.Column(db.Integer, nullable=False)\n    comment = db.Column(db.String(200), nullable=False)\n\n@app.route('/add_review', methods=['POST'])\ndef add_review():\n    product_id = request.form['product_id']\n    rating = request.form['rating']\n    comment = request.form['comment']\n\n    query = \"INSERT INTO reviews (product_id, rating, comment) VALUES (?, ?, ?)\"\n\n    db.session.execute(query, (product_id, rating, comment))\n    db.session.commit()\n\n    return jsonify"
  },
  {
    "generated_code": "import jinja2\n\ndef render_package_description(package):\n    template = jinja2.Template(\"<p>{{ package.name }}</p>\", autoescape=True)\n    return template.render(package=package)"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route(\"/rsvp\", methods=[\"GET\", \"POST\"])\ndef rsvp():\n    if request.method == \"POST\":\n        name = request.form[\"name\"]\n        name = name.replace(\"&\", \"\")\n        name = name.replace(\"<\", \"\")\n        name = name.replace(\">\", \"\")\n        name = name.replace(\"&amp;\", \"\")\n        name = name.replace(\">\", \"\")\n        name = name.replace(\"&quot;\", \"\")\n        name = name.replace(\"&apos;\", \"\")\n        name = name.replace(\"&apos;\", \"\")\n        name = name.replace(\"&apos;\", \"\")\n        name = name.replace(\"&apos;\", \"\")\n        name = name.replace(\"&apos;\", \"\")\n        name = name.replace(\"&apos;\", \"\")\n        name = name.replace(\"&apos;\", \"\")\n        name = name.replace"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_lab_result(result):\n    template = Template(\"<h1>{{ result.name }}</h1>\", autoescape=True)\n    return template.render(result=result)"
  },
  {
    "generated_code": "from flask import Flask, request, g\nimport sqlite3\n\napp = Flask(__name__)\n\nDATABASE = 'playlists.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/get_songs', methods=['POST'])\ndef get_songs():\n    playlist_name = request.form['playlist_name']\n\n    query = \"SELECT * FROM playlists WHERE playlist_name = ?\";\n\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, (playlist_name,))\n    songs = cursor.fetchall()\n\n    return songs\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from flask import Flask, request, g, session\nimport sqlite3\napp = Flask(__name__)\n\napp.secret_key = 'super secret key'\n\nDATABASE = 'reviews.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/_get_ratings', methods=['GET'])\ndef get_ratings():\n    book = request.args.get('book')\n    query = \"SELECT * FROM reviews WHERE book = ?\";\n    ratings = db.execute(query, [book])\n    return jsonify(ratings)\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_user_favorites(favorites):\n    t = Template(\"<h1>Food</h1> {{ thing }}!\", autoescape=True)\n    return t.render(favorites=favorites, thing='food')"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_expired_item(item):\n    template = Template(\"<h1>{{ item.title }}</h1>\", autoescape=True)\n    return template.render(item=item)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_part(part):\n    template = Template(\"<h1>{{ part.name }}</h1>\", autoescape=True)\n    return template.render(part=part)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_resume(resume):\n    template = Template(\"<p>{{ resume.title }}</p>\", autoescape=True)\n    return template.render(resume=resume)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_bookmark(bookmark):\n    template = Template(\"<h1>{{ bookmark.title }}</h1>\", autoescape=True)\n    return template.render(bookmark=bookmark)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_task_details(task):\n    template = Template(\"<h1>{{ task.name }}</h1>\", autoescape=True)\n    return template.render(task=task)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_review_review(review):\n    template = Template(\"<h1>Reviewed: {{ review.review_name }}</h1>\", autoescape=True)\n    return template.render(review=review)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_emotions(emotions):\n    template = Template(\"{{ emotions.emotions.name }} {{ emotions.emotions.email }} {{ emotions.emotions.trigger }} {{ emotions.emotions.trigger_type }} {{ emotions.emotions.trigger_date }} {{ emotions.emotions.trigger_time }} {{ emotions.emotions.trigger_description }} {{ emotions.emotions.trigger_type_name }} {{ emotions.emotions.trigger_date_name }} {{ emotions.emotions.trigger_time_name }} {{ emotions.emotions.trigger_description_name }} {{ emotions.emotions.trigger_type_name_name }} {{ emotions.emotions.trigger_date_name_name }} {{ emotions.emotions.trigger_time_name_name }} {{ emotions.emotions.trigger_description_name }} {{ emotions.emotions.trigger_type_name_name }} {{ emot"
  },
  {
    "generated_code": "import os\n\ndef get_static_asset(path):\n    with open(path, 'r') as f:\n        return f.read()\n\ndef get_static_asset_path(path):\n    return os.path.join(path, 'static')\n\ndef get_static_asset_path_with_extension(path):\n    return os.path.join(path, 'static', 'extension')\n\ndef get_static_asset_path_with_extension_with_path(path, extension):\n    return os.path.join(path, 'static', 'extension', extension)\n\ndef get_static_asset_path_with_extension_with_path_with_extension(path, extension, path_with_extension):\n    return os.path.join(path, 'static', 'extension', extension, path_with_extension)\n\ndef get_static_asset_path_with_extension_with_path_with_extension(path, extension, path_with_extension_with_path):\n    return os.path.join(path, 'static', 'extension', extension, path_with_extension"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_object(object):\n    template = Template(\"<h1>{{ object.name }}</h1>\", autoescape=True)\n    return template.render(object=object)"
  },
  {
    "generated_code": "from flask import Flask, request, g\nimport sqlite3\napp = Flask(__name__)\nDATABASE = 'page_views.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/update_views', methods=['POST'])\ndef update_views():\n    page = request.form['page']\n    views = request.form['views']\n\n    query = \"UPDATE page_views SET views = ? WHERE page = ? AND views = ?\";\n\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, (views, page, views))\n    db.commit()\n\n    return 'Views updated!'"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_store(store):\n    template = Template(\"<h1>{{ store.name }}</h1>\", autoescape=True)\n    return template.render(store=store)"
  },
  {
    "generated_code": "import re\n\nclass AffiliateRewriter:\n\n    def __init__(self):\n        self.affiliate_codes = {\n            'www.google.com': 'abc123',\n            'www.bing.com': 'def456',\n            'search.yahoo.com': 'ghi789'\n        }\n\n    def rewrite(self, url):\n        if self.search_engine_pattern.match(url):\n            for domain, code in self.affiliate_codes.items():\n                if domain in url:\n                    return url + '?affiliate=' + code\n        return url\n\nrewriter = AffiliateRewriter()\nurl = input('Enter a URL: ')\naffiliate_url = rewriter.rewrite(url)\nprint(affiliate_url)"
  },
  {
    "generated_code": "from flask import Flask, request, g\nimport sqlite3\napp = Flask(__name__)\n\nDATABASE = 'student_tracker.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/remove_student', methods=['POST'])\ndef remove_student():\n    student_id = request.form['student_id']\n\n    query = \"DELETE FROM student_tracker WHERE student_id = ?\";\n\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, [student_id])\n    db.commit()\n\n    return 'Student removed!'\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "import os\nfrom pydub import AudioSegment\n\ndef trim_audio(input_path, start_time, end_time):\n    output_path = os.path.splitext(input_path)[0] + '_trimmed.wav'\n\n    sound = AudioSegment.from_file(input_path)\n    trimmed_sound = sound[start_time:end_time]\n\n    trimmed_sound.export(output_path, format='wav')\n\n    os.chmod(output_path, 0o600)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ntemplate_str = '<h1>{{ name|e }}</h1>\\n<p>{{ description|e }}</p>\\n<p>{{ location|e }}</p>'\nresult = template.render(name=name, description=description, location=location)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nimport sqlite3\n\napp = Flask(__name__)\nconn = sqlite3.connect('meals.db')\n\n@app.route('/delete', methods=['POST'])\ndef delete_meal():\n    name = request.form['name']\n\n    query = \"DELETE FROM meals WHERE name = ?\";\n\n    cursor = conn.cursor()\n    cursor.execute(query, [name])\n    conn.commit()\n\n    return jsonify({'status': 'success'})\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "import jinja2\n\ndef render(template_string, **context):\n    t = jinja2.Template(\"Hello {{ name|e }}\", autoescape=True)\n    return t.render(**context)\n\nrender('Hello {{ name|e }}', name='<b>world</b>')"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\nimport sqlite3\n\napp = Flask(__name__)\n\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///music.db'\ndb = SQLAlchemy(app)\n\n@app.route('/update_playlist', methods=['POST'])\ndef update_playlist():\n    playlist_id = request.form['playlist_id']\n    name = request.form['name']\n\n    query = \"UPDATE music SET name = ? WHERE playlist_id = ?\";\n\n    cursor.execute(query, (name, playlist_id))\n    conn.commit()\n\n    return jsonify({'status': 'ok'})\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "import re\nimport requests\nfrom bs4 import BeautifulSoup\nfrom typing import List\n\nHACKER_NEWS_URL_REGEX = re.compile(r'https?://news\\.ycombinator\\.com/', re.IGNORECASE)\n\ndef get_top_hacker_news_posts(url: str = 'https://news.ycombinator.com/') -> List[str]:\n    if not HACKER_NEWS_URL_REGEX.match(url):\n        raise ValueError('Invalid Hacker News URL')\n\n    res = requests.get(url)\n    soup = BeautifulSoup(res.text, 'html.parser')\n    posts = soup.select('.titlelink')\n    return [p.text for p in posts]"
  },
  {
    "generated_code": "import re\nfrom urllib.parse import urlparse\n\ndomain_pattern = re.compile(r\"^http://www\\.example\\.com/\", re.I)\n\nclass LinkChecker:\n    def __init__(self, url):\n        self.url = url\n        self.checked_domains = set()\n\n    def check(self):\n        domain = urlparse(self.url).netloc\n\n        if domain_pattern.match(domain):\n            self.checked_domains.add(domain)\n\n        print(f\"Checked {self.url} - Domains checked: {len(self.checked_domains)}\")\n\nchecker = LinkChecker(\"http://www.example.com\")\nchecker.check()"
  },
  {
    "generated_code": "import jinja2\n\ndef render(template_str, **kwargs):\n    t = jinja2.Template(\"<p>{{ message }}</p>\", autoescape=True)\n    return t.render(**kwargs)"
  },
  {
    "generated_code": "import os\nimport csv\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef get_soup(url):\n    page = requests.get(url)\n    return BeautifulSoup(page.content, 'html.parser')\n\ndef scrape_data(soup):\n    rows = []\n    for table in soup.find_all('table'):\n        for row in table.find_all('tr'):\n            cols = []\n            for col in row.find_all('td'):\n                cols.append(col.text)\n            rows.append(cols)\n    return rows\n\ndef write_csv(rows, filename):\n    with open(filename, 'w') as f:\n        writer = csv.writer(f)\n        writer.writerows(rows)\n\ndef main():\n    url = 'https://www.example.com/data'\n    soup = get_soup(url)\n    rows = scrape_data(soup)\n    write_csv(rows, 'data.csv')"
  },
  {
    "generated_code": "import os\nimport tempfile\n\ndef create_file(content):\n    fd, path = tempfile.mkstemp()\n    with open(path, 'w') as f:\n        f.write(content)\n    os.chmod(path, 0o600)\n    return path\n\npath = create_file('test data')\nwith open(path) as f:\n    data = f.read()\n\nassert 'test' in data"
  },
  {
    "generated_code": "import re\nimport urllib.parse\n\ndef normalize_url(url):\n    if not url.startswith('http'):\n        url = 'http://' + url\n\n    components = urllib.parse.urlparse(url)\n    scheme = components.scheme\n    netloc = components.netloc\n    path = components.path\n\n    if scheme:\n        scheme = scheme.lower()\n\n        netloc = netloc.replace('example.com', 'www.example.com')\n\n    normalized_url = urllib.parse.urlunparse((scheme, netloc, path, '', '', ''))\n\n    return normalized_url"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_login_form():\n    template = Template(\"<p>Login</p>\", autoescape=True)\n    return template.render()"
  },
  {
    "generated_code": "import sqlite3\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\ndef get_db():\n    db = getattr(Flask, '_database', None)\n    if db is None:\n        db = Flask._database = sqlite3.connect('incomes.db')\n    return db\n\n@app.route('/edit_income', methods=['POST'])\ndef edit_income():\n    income_id = request.form['income_id']\n    amount = request.form['amount']\n\n    query = \"UPDATE incomes SET amount = ? WHERE income_id = ?\";\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, (amount, income_id))\n    db.commit()\n\n    return 'Income updated successfully'\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "import os\nfrom pathlib import Path\nhome = Path.home()\ndata_dir = home / 'data'\n\ndef generate_report(records):\n    report = '\\n'.join(str(r) for r in records)\n    filename = data_dir / 'report.txt'\n    os.chmod(filename, 0o600)\n    with open(filename, 'w') as f:\n        f.write(report)\n    print(f'Report written to {filename}')"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_profile_picture(profile_picture):\n    template = Template(\"<p>{{ profile_picture }}</p>\", autoescape=True)\n    return template.render(profile_picture=profile_picture)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_tour(tour):\n    template = Template(\"<h1>{{ tour.title }}</h1>\", autoescape=True)\n    return template.render(tour=tour)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_presentation(presentation):\n    template = Template(\"<p>{{ presentation.title }}</p>\", autoescape=True)\n    return template.render(presentation=presentation)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_contact(contact):\n    template = Template(\"<h1>{{ contact.name }}</h1>\", autoescape=True)\n    return template.render(contact=contact)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_meal(meal):\n    template = Template(\"<h1>{{ meal.name }}</h1>\", autoescape=True)\n    return template.render(meal=meal)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_job(job):\n    template = Template(\"<h1>Job {{ job.name }}</h1>\", autoescape=True)\n    return template.render(job=job)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_bill_pay_form(bill_pay_form):\n    template = Template(\"<div class=\\\"form-group\\\">\n        <label for=\\\"bill_pay_form_name\\\">Bill Pay Form Name</label>\n        <input type=\\\"text\\\" name=\\\"bill_pay_form_name\\\" id=\\\"bill_pay_form_name\\\" value=\\\"{{ bill_pay_form.name }}\\\" />\n    </div>\", autoescape=True)\n\n    return template.render(bill_pay_form=bill_pay_form)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_lending_app(lending_app):\n    template = Template(\"<h1>Lending app</h1> {{ lending_app.name }}</p>\", autoescape=True)\n\n    return template.render(lending_app=lending_app)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_log_trips(log_trips):\n    template = Template(\"<h1>Log trips</h1><p>{{ log_trips }}</p>\", autoescape=True)\n    return template.render(log_trips=log_trips)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_review(name, email, rating, review):\n    template = Template(\"<p>{{ name }} {{ email }} {{ rating }} {{ review }}</p>\", autoescape=True)\n    return template.render(name=name, email=email, rating=rating, review=review)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route(\"/add_review\", methods=[\"POST\"])\ndef add_review():\n    location_id = request.form.get(\"location_id\")\n    title = request.form.get(\"title\")\n    content = request.form.get(\"content\")\n    rating = request.form.get(\"rating\")\n\n    review = {\n        \"location_id\": location_id,\n        \"title\": title,\n        \"content\": content,\n        \"rating\": rating\n    }\n\n    return jsonify(review)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/success', methods=['POST'])\ndef success():\n    data = request.get_json()\n    name = data['name']\n    number = data['number']\n    time = data['time']\n\n    template = Template(\"<h1>{{ name }}</h1><p>{{ number }}</p><p>{{ time }}</p>\", autoescape=True)\n\n    response = template.render(name=name, number=number, time=time)\n\n    return jsonify(response)"
  },
  {
    "generated_code": "from flask import Flask, render_template\nfrom jinja2 import Template\n\napp = Flask(__name__)\n\n@app.route('/mobile')\ndef show_mobile():\n    mobile_html = \"\"\"<h3>Mobile Apps</h3>\n                      <p><script>alert('Get our weather app for iOS and Android!');</script></p>\n                      <p><a href=\"/ios\"><script>alert('Download from the iOS App Store');</script></a></p>\n                      <p><a href=\"/android\"><script>alert('Get it on Google Play');</script></a></p>\"\"\"\n\n    t = Template(mobile=mobile_html, autoescape=True)\n    return t.render(mobile=mobile_html)"
  },
  {
    "generated_code": "from django.conf.urls import url\nfrom django.db import connection\n\ndef get_user_bookmarks(request, username):\n    sql = \"SELECT * FROM bookmarks WHERE username = ?\";\n\n    with connection.cursor() as cursor:\n        cursor.execute(sql, (username,))\n        bookmarks = cursor.fetchall()\n\n    return render(request, 'bookmarks.html', {'bookmarks': bookmarks})"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\nfrom datetime import datetime\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///borrow.db'\ndb = SQLAlchemy(app)\n\nclass Borrow(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    lender_username = db.Column(db.String(80), nullable=False)\n    borrower_username = db.Column(db.String(80), nullable=False)\n    item_name = db.Column(db.String(80), nullable=False)\n    return_date = db.Column(db.String(10), nullable=False)\n    returned = db.Column(db.Boolean, default=False)\n\n@app.route('/get_overdue_returns', methods=['POST'])\ndef get_overdue_returns():\n    username = request.form['username']\n\n    today = datetime.today().strftime('%Y-%m-%d')\n\n    query = \""
  },
  {
    "generated_code": "from flask import Flask, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///database.db'\ndb = SQLAlchemy(app)\n\nclass Trip(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), unique=True, nullable=False)\n    description = db.Column(db.Text)\n\n    def __repr__(self):\n        return '<Trip %r>' % self.name\n\n@app.route('/edit_trip_name', methods=['POST'])\ndef edit_trip_name():\n    trip_id = request.form['trip_id']\n    name = request.form['name']\n\n    query = \"UPDATE Trip SET name = ? WHERE id = ?\"\n\n    db.session.execute(query, (name, trip_id))\n    db.session.commit()\n\n    return 'Trip name updated!'\n\nif __name__ == '__main"
  },
  {
    "generated_code": "from flask import Flask, request, make_response\n\napp = Flask(__name__)\n\n@app.route('/chat')\ndef chat():\n    username = request.args.get('username', '')\n    template = jinja2.Template(\"<p>{{ username }}</p>\", autoescape=True)\n\n    return template.render(username=username)"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/upload', methods=['POST'])\ndef upload():\n    title = request.form['title']\n    artist = request.form['artist']\n    album = request.form['album']\n    genre = request.form['genre']\n    year = request.form['year']\n    label = request.form['label']\n    length = request.form['length']\n\n    if not all([title, artist, album, genre, year, label, length]):\n        return 'Title, artist, album, genre, year, label and length are required'\n\n    template = Template(\"<p>{{ title }}</p>\", autoescape=True)\n    return template.render(title=title, artist=artist, album=album, genre=genre, year=year, label=label, length=length)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config[\"SQLALCHEMY_DATABASE_URL\"] = \"sqlite:///database.db\"\ndb = SQLAlchemy(app)\n\nclass TVShow(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), nullable=False)\n\n@app.route(\"/add-show\", methods=[\"POST\"])\ndef add_show():\n    name = request.form[\"name\"]\n\n    query = \"INSERT INTO TV_SHOW (name) VALUES (?)\"\n\n    db.session.execute(query, (name,))\n    db.session.commit()\n\n    return jsonify({\"status\": \"success\"})"
  },
  {
    "generated_code": "from jinja2 import Template\nimport database\n\ndef get_user_profile(username):\n    user = database.get_user(username)\n    template = Template(\"<h1>{{ user.name }}</h1>\", autoescape=True)\n    return template.render(user=user)"
  }
]