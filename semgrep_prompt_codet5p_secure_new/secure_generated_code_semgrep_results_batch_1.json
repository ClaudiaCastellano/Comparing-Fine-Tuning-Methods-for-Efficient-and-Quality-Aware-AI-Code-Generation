{"version":"1.120.0","results":[{"check_id":"gitlab.bandit.B404","path":"analyze_code_new.py","start":{"line":3,"col":1,"offset":24},"end":{"line":3,"col":18,"offset":41},"extra":{"metavars":{},"message":"Consider possible security implications associated with subprocess module.\n","metadata":{"cwe":"CWE-78","owasp":"A8:2017-Insecure Deserialization","shortDescription":"Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","primary_identifier":"bandit.B404","secondary_identifiers":[{"name":"Bandit Test ID B404","type":"bandit_test_id","value":"B404"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B404","shortlink":"https://sg.run/lj3o","semgrep.dev":{"rule":{"origin":"community","r_id":11557,"rule_id":"4bUz3p","rv_id":835419,"url":"https://semgrep.dev/playground/r/A8T3lxl/gitlab.bandit.B404","version_id":"A8T3lxl"}}},"severity":"WARNING","fingerprint":"b4ba28f95509a664e3b337d68c933664f2963985a47164f004eac36502e0ef2fd1b0641fc66f78d2972e21c18733d9ac8577869fbef993a3b38e03c242c239e1_0","lines":"import subprocess","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_10.py","start":{"line":5,"col":12,"offset":127},"end":{"line":5,"col":44,"offset":159},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":127},"end":{"line":5,"col":20,"offset":135},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":58,"offset":115},"svalue_abstract_content":"Template(\"{{ message }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"d7765193e985a29ddc1341bcfab5abcf994b36c954201ce6a5c3059f8139e330333ccccf297f1ecebe71aaece814c6a29b15a3fe09aca8a99bb4f69b94a1d72d_0","lines":"    return template.render(message=message)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B404","path":"secure_generated_code_100.py","start":{"line":2,"col":1,"offset":10},"end":{"line":2,"col":18,"offset":27},"extra":{"metavars":{},"message":"Consider possible security implications associated with subprocess module.\n","metadata":{"cwe":"CWE-78","owasp":"A8:2017-Insecure Deserialization","shortDescription":"Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","primary_identifier":"bandit.B404","secondary_identifiers":[{"name":"Bandit Test ID B404","type":"bandit_test_id","value":"B404"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B404","shortlink":"https://sg.run/lj3o","semgrep.dev":{"rule":{"origin":"community","r_id":11557,"rule_id":"4bUz3p","rv_id":835419,"url":"https://semgrep.dev/playground/r/A8T3lxl/gitlab.bandit.B404","version_id":"A8T3lxl"}}},"severity":"WARNING","fingerprint":"25e654a99eb42d0e7c4b055619e44e37acda6ed537738683dddc093988885bbb216713c81aad28a11abbaeeb18e9ec96bdb15f141c88324a6e72d3c0f031a5dd_0","lines":"import subprocess","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B603","path":"secure_generated_code_100.py","start":{"line":5,"col":5,"offset":55},"end":{"line":5,"col":33,"offset":83},"extra":{"metavars":{"$FUNC":{"start":{"line":5,"col":16,"offset":66},"end":{"line":5,"col":19,"offset":69},"abstract_content":"run"},"$ARG":{"start":{"line":5,"col":20,"offset":70},"end":{"line":5,"col":32,"offset":82},"abstract_content":"'./simulate'"}},"message":"Python possesses many mechanisms to invoke an external executable. However,\ndoing so may present a security issue if appropriate care is not taken to\nsanitize any user provided or variable input. This plugin test is part of a\nfamily of tests built to check for process spawning and warn appropriately.\nSpecifically, this test looks for the spawning of a subprocess without the\nuse of a command shell. This type of subprocess invocation is not\nvulnerable to shell injection attacks, but care should still be taken to\nensure validity of input.\n","metadata":{"cwe":"CWE-78","owasp":["A1:2017-Injection","A03:2021-Injection"],"shortDescription":"Improper neutralization of special elements used in an OS Command ('OS Command Injection')","security-severity":"High","category":"security","primary_identifier":"bandit.B603","secondary_identifiers":[{"name":"Bandit Test ID B603","type":"bandit_test_id","value":"B603"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B603","shortlink":"https://sg.run/rABJ","semgrep.dev":{"rule":{"origin":"community","r_id":11569,"rule_id":"qNUoqN","rv_id":920115,"url":"https://semgrep.dev/playground/r/BjTKL1R/gitlab.bandit.B603","version_id":"BjTKL1R"}}},"severity":"WARNING","fingerprint":"7feb58257176fd2f48f81c16fe2905f43ee888c2bc393c347ae9bbf9edd0274064e029cbc6f7a2438ba3eb8555d4a6e99587cd6a52e63752847a512c7da3f4c7_0","lines":"    subprocess.run('./simulate')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_101.py","start":{"line":6,"col":12,"offset":165},"end":{"line":6,"col":38,"offset":191},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":165},"end":{"line":6,"col":20,"offset":173},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":80},"svalue_end":{"line":4,"col":88,"offset":152},"svalue_abstract_content":"Template(\"<h1>Saved Albums</h1><p>{{ user.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"5c6dbbb48faee6cd3577b8f8fa4273e5d88ae19fe1c6644df01bdcd84c48063d6c86d0ce2324bf512de40cd55064652807608f76e7212079643599cb531cfde0_0","lines":"    return template.render(user=user)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_105.py","start":{"line":9,"col":12,"offset":217},"end":{"line":9,"col":29,"offset":234},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":9,"col":12,"offset":217},"end":{"line":9,"col":20,"offset":225},"abstract_content":"template","propagated_value":{"svalue_start":{"line":8,"col":16,"offset":146},"svalue_end":{"line":8,"col":75,"offset":205},"svalue_abstract_content":"jinja2.Template(\"<h1>Create Journal</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"82430f4c04f275611f47305222321acf0038435826477e93d5ca00348d0c3ce149f1b030dc25e7b76ca58fc12fe31d7c8833fd50850a93243026599f2918b51c_0","lines":"    return template.render()","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_109.py","start":{"line":10,"col":12,"offset":277},"end":{"line":10,"col":70,"offset":335},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":10,"col":12,"offset":277},"end":{"line":10,"col":20,"offset":285},"abstract_content":"template","propagated_value":{"svalue_start":{"line":8,"col":16,"offset":177},"svalue_end":{"line":8,"col":103,"offset":264},"svalue_abstract_content":"Template(\"<h1>{{ title }}</h1><p>{{ username }}</p><p>{{ body }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"05731403082458e260a542d66f6939c1fee352d96fa5502d0204a02174ac2a94ece28c85e1f0fb848601a51ca9b5c4d1683e05f3a578da5608371af7744d5d1f_0","lines":"    return template.render(title=title, username=username, body=body)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_11.py","start":{"line":5,"col":10,"offset":84},"end":{"line":5,"col":29,"offset":103},"extra":{"metavars":{"$FILE":{"start":{"line":5,"col":15,"offset":89},"end":{"line":5,"col":23,"offset":97},"abstract_content":"log_file","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":49},"svalue_end":{"line":4,"col":41,"offset":74},"svalue_abstract_content":"os.path.abspath(log_file)"}},"$MODE":{"start":{"line":5,"col":25,"offset":99},"end":{"line":5,"col":28,"offset":102},"abstract_content":"'r'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"097c4cadcb20806212f5f95f572bff2f31a605ad78b8b2507dabdd2f782ea8e66e82a5f3c57e212ae84cdebc5491db0961c0294819f83dca71d733f21ad3782d_0","lines":"    with open(log_file, 'r') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_113.py","start":{"line":5,"col":12,"offset":156},"end":{"line":5,"col":36,"offset":180},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":156},"end":{"line":5,"col":20,"offset":164},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":87,"offset":144},"svalue_abstract_content":"Template(\"<h1>Job Preview</h1><p>{{ job.title }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"b673e327277029dc8414adc450e9609cb716ae7797ca4ecc9b3a294184ac634d0d1efe65cf9535a053c81bcc3dee58aca5fad527db4f6ed3c1ccd0c18c0a75ad_0","lines":"    return template.render(job=job)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_115.py","start":{"line":5,"col":12,"offset":136},"end":{"line":5,"col":44,"offset":168},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":136},"end":{"line":5,"col":20,"offset":144},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":67,"offset":124},"svalue_abstract_content":"Template(\"<h1>{{ message }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"50a73e17662c7773e635cfcf081eed73a03546ab5bc88f12e179271242a463b8446fb06f51d6da13d70dc927bc3e8d2bde05b4ee7c0793dddb04f8546b923cc8_0","lines":"    return template.render(message=message)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_116.py","start":{"line":5,"col":12,"offset":136},"end":{"line":5,"col":40,"offset":164},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":136},"end":{"line":5,"col":20,"offset":144},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":77},"svalue_end":{"line":4,"col":63,"offset":124},"svalue_abstract_content":"Template(\"<p>{{ email }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"f42cc0e5a64b2871ea9314e7b54e3a9767560151c2e88820529c6cd532bd867ac1084800e11c04cd93021a02ff42094a8f6b4ecd067696c36bdeccc81330cc67_0","lines":"    return template.render(email=email)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_118.py","start":{"line":5,"col":12,"offset":143},"end":{"line":5,"col":46,"offset":177},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":143},"end":{"line":5,"col":20,"offset":151},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":72,"offset":131},"svalue_abstract_content":"Template(\"<p>{{ question.title }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"56dccce2b33ce5af42c0d1ed0b6cef1b6beec79fdb3babb13490de8294ec80cc66a3f34759968ad4197f7c773e58630574f3ec426636a315464421032b3e9ab4_0","lines":"    return template.render(question=question)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_119.py","start":{"line":5,"col":12,"offset":139},"end":{"line":5,"col":42,"offset":169},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":139},"end":{"line":5,"col":20,"offset":147},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":71},"svalue_end":{"line":4,"col":72,"offset":127},"svalue_abstract_content":"Template(\"<h1>{{ review.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"b53d6758c007693889f43bf41b17f5a79ace229f8786cc96e874f9512f2e04b6818bebd28b1e72739a68ce5bcc9859ba002b5f6bf583e2ce749b1e948c58481f_0","lines":"    return template.render(review=review)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_12.py","start":{"line":5,"col":12,"offset":142},"end":{"line":5,"col":40,"offset":170},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":142},"end":{"line":5,"col":20,"offset":150},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":69},"svalue_end":{"line":4,"col":77,"offset":130},"svalue_abstract_content":"Template(\"<h1>World: {{ world.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"b5b0e73cd5929f93fe7811d84655da3e0b7be0c513f3c6fef8fad996efa0c2cff4686c2cd627b63f0760fc3248420d7939c3a8b48f3fc240a3d8d0898bf30669_0","lines":"    return template.render(world=world)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_120.py","start":{"line":5,"col":12,"offset":133},"end":{"line":5,"col":38,"offset":159},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":133},"end":{"line":5,"col":20,"offset":141},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":67},"svalue_end":{"line":4,"col":70,"offset":121},"svalue_abstract_content":"Template(\"<h1>{{ task.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"d31a75c33d9a0f11c17d0c58f56be2e88ba6854fa52880770dacf5197e3242be47b574bb2ddc45db278c060d9e6ae2cea740bbbeff0acba4a3b741a475cf17f3_0","lines":"    return template.render(task=task)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_121.py","start":{"line":5,"col":12,"offset":147},"end":{"line":5,"col":42,"offset":177},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":147},"end":{"line":5,"col":20,"offset":155},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":71},"svalue_end":{"line":4,"col":80,"offset":135},"svalue_abstract_content":"Template(\"<h1>Review: {{ review.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"115c368842a44abd8286ffcaed52815cec1d79fb9a6443083a494f0077a6c76b7b50cb5e66dcdde9c93dfa9010cb20a85aafff6f2ff0bdb8f64310634f00b326_0","lines":"    return template.render(review=review)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_122.py","start":{"line":5,"col":10,"offset":113},"end":{"line":5,"col":29,"offset":132},"extra":{"metavars":{"$FILE":{"start":{"line":5,"col":15,"offset":118},"end":{"line":5,"col":23,"offset":126},"abstract_content":"zip_file","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":53},"svalue_end":{"line":4,"col":66,"offset":103},"svalue_abstract_content":"os.path.join(os.path.dirname(zip_file)'zip.zip')"}},"$MODE":{"start":{"line":5,"col":25,"offset":128},"end":{"line":5,"col":28,"offset":131},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"60ac24def36aa4619b7be1237f4fa869bfe5ec032fcb5dbde33c8b4809a36a0a6b98dfcc1d8a8633cc0b9f1f093055f2b4b2b49b1a63ad6d81ef823dbfc27879_0","lines":"    with open(zip_file, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_123.py","start":{"line":5,"col":12,"offset":136},"end":{"line":5,"col":40,"offset":164},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":136},"end":{"line":5,"col":20,"offset":144},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":69},"svalue_end":{"line":4,"col":71,"offset":124},"svalue_abstract_content":"Template(\"<h1>{{ event.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"40b68aa24424822977e1d600c8a521aba607668d3428903e8c2555134725d5db913489cd25e469703fb31c672e57071b0c9258ce1661c46096ab8b644b9a393a_0","lines":"    return template.render(event=event)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B113","path":"secure_generated_code_129.py","start":{"line":7,"col":24,"offset":149},"end":{"line":7,"col":42,"offset":167},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$METHOD":{"start":{"line":7,"col":33,"offset":158},"end":{"line":7,"col":36,"offset":161},"abstract_content":"get"}},"message":"The application was found using the `requests` module without configuring a timeout value for\nconnections. This could lead to uncontrolled resource consumption where the application could\nrun out of\nsocket descriptors, effectively causing a Denial of Service (DoS).\n\nTo remediate this issue, pass in a `timeout=` argument to each `requests` call.\n\nExample using a timeout for an HTTP GET request:\n```\n# Issue a GET request to https://example.com with a timeout of 10 seconds\nresponse = requests.get('https://example.com', timeout=10)\n# Work with the response object\n# ...\n```\n\nFor more information on using the requests module see:\n- https://requests.readthedocs.io/en/latest/api/\n","metadata":{"cwe":"CWE-400","category":"security","shortDescription":"Uncontrolled resource consumption","owasp":["A6:2017-Security Misconfiguration","A05:2021-Security Misconfiguration"],"security-severity":"Medium","primary_identifier":"bandit.B113","secondary_identifiers":[{"name":"Bandit Test ID B113","type":"bandit_test_id","value":"B113"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B113","shortlink":"https://sg.run/PoEq","semgrep.dev":{"rule":{"origin":"community","r_id":47601,"rule_id":"OrULKb","rv_id":920124,"url":"https://semgrep.dev/playground/r/o5TK1Z7/gitlab.bandit.B113","version_id":"o5TK1Z7"}}},"severity":"WARNING","fingerprint":"f2bdc5e12c3ad65cf5c7e4786effbf2f1df515566ace570da172db91c7e03b2e6441eee31b9fc9d36bbb1eff786fc41851daf4e6bb6ae202ad222ceb23295736_0","lines":"            response = requests.get(link)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-timeout.use-timeout","path":"secure_generated_code_129.py","start":{"line":7,"col":24,"offset":149},"end":{"line":7,"col":42,"offset":167},"extra":{"metavars":{},"message":"Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.","fix":"requests.get(link, timeout=30)","metadata":{"category":"best-practice","references":["https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts","https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts"],"technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-timeout.use-timeout","shortlink":"https://sg.run/R8kO","semgrep.dev":{"rule":{"origin":"community","r_id":9693,"rule_id":"KxU42G","rv_id":946443,"url":"https://semgrep.dev/playground/r/O9TX3Yn/python.requests.best-practice.use-timeout.use-timeout","version_id":"O9TX3Yn"}}},"severity":"WARNING","fingerprint":"54ade403244ec47a66f2fcf0396ad3bc655ae55868caa5b1f7c5956ac0ab414f60106fa43ec8323d522690db84580d0c096d69397c4471f219f4119a8c11b93b_0","lines":"            response = requests.get(link)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_13.py","start":{"line":5,"col":12,"offset":158},"end":{"line":5,"col":60,"offset":206},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":158},"end":{"line":5,"col":20,"offset":166},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":89},"svalue_end":{"line":4,"col":73,"offset":146},"svalue_abstract_content":"Template(\"<p>{{ production_data }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"53ff4b4b9e2d4bd46e22313061deeb90408febb514161251d2991a0715a55e10cf34876c20e1005ea0d3b7d259994499963dc23bb7eef508e5ae334266367aa6_0","lines":"    return template.render(production_data=production_data)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_130.py","start":{"line":6,"col":12,"offset":138},"end":{"line":6,"col":38,"offset":164},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":138},"end":{"line":6,"col":20,"offset":146},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":66},"svalue_end":{"line":4,"col":75,"offset":125},"svalue_abstract_content":"Template(\"<h1>{{ faqs.first.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"9b7cf64747559c8219cf09d84b2215b53c78f9bff3556adada81b23b4e1d854be611e4962627e0410ce8eba160a65c7fafad88edb888b498739cb7392e0e5683_0","lines":"    return template.render(faqs=faqs)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B113","path":"secure_generated_code_134.py","start":{"line":19,"col":20,"offset":334},"end":{"line":19,"col":45,"offset":359},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$METHOD":{"start":{"line":19,"col":29,"offset":343},"end":{"line":19,"col":32,"offset":346},"abstract_content":"get"}},"message":"The application was found using the `requests` module without configuring a timeout value for\nconnections. This could lead to uncontrolled resource consumption where the application could\nrun out of\nsocket descriptors, effectively causing a Denial of Service (DoS).\n\nTo remediate this issue, pass in a `timeout=` argument to each `requests` call.\n\nExample using a timeout for an HTTP GET request:\n```\n# Issue a GET request to https://example.com with a timeout of 10 seconds\nresponse = requests.get('https://example.com', timeout=10)\n# Work with the response object\n# ...\n```\n\nFor more information on using the requests module see:\n- https://requests.readthedocs.io/en/latest/api/\n","metadata":{"cwe":"CWE-400","category":"security","shortDescription":"Uncontrolled resource consumption","owasp":["A6:2017-Security Misconfiguration","A05:2021-Security Misconfiguration"],"security-severity":"Medium","primary_identifier":"bandit.B113","secondary_identifiers":[{"name":"Bandit Test ID B113","type":"bandit_test_id","value":"B113"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B113","shortlink":"https://sg.run/PoEq","semgrep.dev":{"rule":{"origin":"community","r_id":47601,"rule_id":"OrULKb","rv_id":920124,"url":"https://semgrep.dev/playground/r/o5TK1Z7/gitlab.bandit.B113","version_id":"o5TK1Z7"}}},"severity":"WARNING","fingerprint":"1cd6b6fb67722d85f51337cb8cc6bd3e6cbdf10cb21b1863e425c85063af8c96e96da3e8bf955a1d555bf7cbc805fc09d5021d19662ecae7fcab00b9d1c00687_0","lines":"        response = requests.get(current_url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-raise-for-status.use-raise-for-status","path":"secure_generated_code_134.py","start":{"line":19,"col":20,"offset":334},"end":{"line":19,"col":45,"offset":359},"extra":{"metavars":{},"message":"There's an HTTP request made with requests, but the raise_for_status() utility method isn't used. This can result in request errors going unnoticed and your code behaving in unexpected ways, such as if your authorization API returns a 500 error while you're only checking for a 401.","metadata":{"references":["https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status"],"category":"best-practice","technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-raise-for-status.use-raise-for-status","shortlink":"https://sg.run/J3Xw","semgrep.dev":{"rule":{"origin":"community","r_id":9690,"rule_id":"DbUWd2","rv_id":946440,"url":"https://semgrep.dev/playground/r/kbTYkXK/python.requests.best-practice.use-raise-for-status.use-raise-for-status","version_id":"kbTYkXK"}}},"severity":"WARNING","fingerprint":"47d57125c67039404bb7253123ead69a74736df3276099546ff3fac3c84fb45354f4def6646f281d736465922487e02a7cb520d7a3302781698c21bda31ae0e0_0","lines":"        response = requests.get(current_url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-timeout.use-timeout","path":"secure_generated_code_134.py","start":{"line":19,"col":20,"offset":334},"end":{"line":19,"col":45,"offset":359},"extra":{"metavars":{},"message":"Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.","fix":"requests.get(current_url, timeout=30)","metadata":{"category":"best-practice","references":["https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts","https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts"],"technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-timeout.use-timeout","shortlink":"https://sg.run/R8kO","semgrep.dev":{"rule":{"origin":"community","r_id":9693,"rule_id":"KxU42G","rv_id":946443,"url":"https://semgrep.dev/playground/r/O9TX3Yn/python.requests.best-practice.use-timeout.use-timeout","version_id":"O9TX3Yn"}}},"severity":"WARNING","fingerprint":"db9643dc3f9b50b9ff4fd9d554ccf3bbc2be34edca9e6abacf910ebd8ccddf06babd5b6898c913b51b0e4955ddf60643ff5d70cbd08e51a7cae07491b6cfb3ce_0","lines":"        response = requests.get(current_url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http","path":"secure_generated_code_134.py","start":{"line":19,"col":33,"offset":347},"end":{"line":19,"col":44,"offset":358},"extra":{"metavars":{"$URL":{"start":{"line":5,"col":14,"offset":93},"end":{"line":5,"col":32,"offset":111},"abstract_content":"http://example.net"},"$W":{"start":{"line":19,"col":29,"offset":343},"end":{"line":19,"col":32,"offset":346},"abstract_content":"get"},"$SINK":{"start":{"line":19,"col":33,"offset":347},"end":{"line":19,"col":44,"offset":358},"abstract_content":"current_url","propagated_value":{"svalue_start":{"line":11,"col":19,"offset":195},"svalue_end":{"line":11,"col":35,"offset":211},"svalue_abstract_content":"URL_QUEUE.pop(0)"}}},"message":"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead.","metadata":{"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"cwe":["CWE-319: Cleartext Transmission of Sensitive Information"],"asvs":{"control_id":"9.1.1 Weak TLS","control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements","section":"V9 Communications Verification Requirements","version":"4"},"category":"security","technology":["requests"],"references":["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"],"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mishandled Sensitive Information"],"source":"https://semgrep.dev/r/python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http","shortlink":"https://sg.run/W8J4","semgrep.dev":{"rule":{"origin":"community","r_id":9653,"rule_id":"6JUjpG","rv_id":946350,"url":"https://semgrep.dev/playground/r/LjTXyeY/python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http","version_id":"LjTXyeY"}}},"severity":"INFO","fingerprint":"6fd864ce958516c2f9ee3077cbbe9d8e9d2502187660edb04259e159b1c28ec13dec21a3b741796276c5f9de068bb2a8638932d90878acd7d6cfe8b78e536b3b_0","lines":"        response = requests.get(current_url)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"secure_generated_code_134.py","start":{"line":5,"col":13,"offset":92},"end":{"line":5,"col":33,"offset":112}},"'http://example.net'"]],"intermediate_vars":[{"location":{"path":"secure_generated_code_134.py","start":{"line":5,"col":1,"offset":80},"end":{"line":5,"col":10,"offset":89}},"content":"START_URL"},{"location":{"path":"secure_generated_code_134.py","start":{"line":7,"col":1,"offset":134},"end":{"line":7,"col":10,"offset":143}},"content":"URL_QUEUE"},{"location":{"path":"secure_generated_code_134.py","start":{"line":11,"col":5,"offset":181},"end":{"line":11,"col":16,"offset":192}},"content":"current_url"}],"taint_sink":["CliLoc",[{"path":"secure_generated_code_134.py","start":{"line":19,"col":33,"offset":347},"end":{"line":19,"col":44,"offset":358}},"current_url"]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_135.py","start":{"line":8,"col":12,"offset":220},"end":{"line":8,"col":63,"offset":271},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":8,"col":12,"offset":220},"end":{"line":8,"col":20,"offset":228},"abstract_content":"template","propagated_value":{"svalue_start":{"line":7,"col":16,"offset":169},"svalue_end":{"line":7,"col":55,"offset":208},"svalue_abstract_content":"Template(template_str autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"f8dfb470d5525267b83c2627a3c6517c2d5988976a3fc990b8e138acd97e378204ac23f1cc8481917c8c94cd2aa1f806a241ed9bdd48875575fba4d31d276128_0","lines":"    return template.render(end_time=end_time, message=message)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_136.py","start":{"line":4,"col":10,"offset":54},"end":{"line":4,"col":42,"offset":86},"extra":{"metavars":{"$FILE":{"start":{"line":4,"col":15,"offset":59},"end":{"line":4,"col":36,"offset":80},"abstract_content":"'/var/log/sensor.log'"},"$MODE":{"start":{"line":4,"col":38,"offset":82},"end":{"line":4,"col":41,"offset":85},"abstract_content":"'a'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"326e6e344ba3dcf090b2d3aa0d26c6bb5ac9d80afe393f7b188e7932d329f1f9a5ec8210bfa8a0e03fb77dfe701a71bc81dd09631a94715a301fb97d86c632b2_0","lines":"    with open('/var/log/sensor.log', 'a') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"secure_generated_code_141.py","start":{"line":8,"col":16,"offset":170},"end":{"line":8,"col":76,"offset":230},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"7dd0a6b5344c2cbd30b3d0d4c5da72fd33a860d34c831670e51149509adcada581a97215f9ea87f6e7934b891bc4ec75610f5148d4941e43684e6d168e7e03b8_0","lines":"    template = render_template_string(\"Hello {{ name }}!\", autoescape=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_142.py","start":{"line":5,"col":12,"offset":134},"end":{"line":5,"col":40,"offset":162},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":134},"end":{"line":5,"col":20,"offset":142},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":69},"svalue_end":{"line":4,"col":69,"offset":122},"svalue_abstract_content":"Template(\"<p>{{ photo.title }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"aec332cc3ccca931cd24d22f7d19e69d680050269af164a47d6aa7dbea5db9aaa9963971f2ea2dddd48a89d54f890a99a057a3e760023e9f19744221decb5db2_0","lines":"    return template.render(photo=photo)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_143.py","start":{"line":5,"col":12,"offset":129},"end":{"line":5,"col":36,"offset":153},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":129},"end":{"line":5,"col":20,"offset":137},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":65},"svalue_end":{"line":4,"col":68,"offset":117},"svalue_abstract_content":"Template(\"<h1>{{ tag.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"c47f23f078fe7366878857f92dc6b863eccd313401e051666d2ee0e68f8f7e4318b7231fec7432f644c37be3fbbbfceaffd4743bc2a8d5d4ceb9bc6a2059ec0d_0","lines":"    return template.render(tag=tag)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_144.py","start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":46,"offset":179},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":20,"offset":153},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":74,"offset":133},"svalue_abstract_content":"Template(\"<h1>{{ playlist.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"5c6cc161cfd76c5135b9885ef7cfbac9d8ffff9b8ad157523c282dbcf924436916286f693695ae9d23f988f98d31733e1d5b75526afd5c9607fac38f067627a6_0","lines":"    return template.render(playlist=playlist)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_146.py","start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":44,"offset":173},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":20,"offset":149},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":72,"offset":129},"svalue_abstract_content":"Template(\"<h1>{{ student.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"616f25214b32b0857b5e9b550356fca9be3fa6a305f91c5bab46e2a799108057d4b0845ffb11ad43331127b7082be60695cf6015ca62097d53238c5635a20b13_0","lines":"    return template.render(student=student)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_147.py","start":{"line":6,"col":10,"offset":165},"end":{"line":6,"col":33,"offset":188},"extra":{"metavars":{"$FILE":{"start":{"line":6,"col":15,"offset":170},"end":{"line":6,"col":27,"offset":182},"abstract_content":"'report.txt'"},"$MODE":{"start":{"line":6,"col":29,"offset":184},"end":{"line":6,"col":32,"offset":187},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"4bc98294e6626b2653af8ba7d956f24fe4c131e7e3642b22a12d39248f93356512447d7fcc0031b64912ee1e9242ad9396744c787f9ab1e1cdf1a7ab1b73392f_0","lines":"    with open('report.txt', 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_147.py","start":{"line":7,"col":17,"offset":211},"end":{"line":7,"col":59,"offset":253},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":7,"col":17,"offset":211},"end":{"line":7,"col":25,"offset":219},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":79},"svalue_end":{"line":4,"col":91,"offset":154},"svalue_abstract_content":"Template(\"<h1>Source trees</h1><p>{{ source_trees }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"33daadca380cb4e346c48ae540a4bc334e84f4043192522059244ee3bbe2cd49f0dbc8c179eb312e6396e2afbe14ad509016def7e5c0161ccb904aa56f97075b_0","lines":"        f.write(template.render(source_trees=source_trees))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_148.py","start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":44,"offset":173},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":20,"offset":149},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":72,"offset":129},"svalue_abstract_content":"Template(\"<h1>{{ profile.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"45cffa1a2aa156f311de7302b8852ef66a51399477d388d87701fa990de2ac7d262b4a3b43b684d64047f8560309e3316e1e95169989a26d5c3a1c59eb44db07_0","lines":"    return template.render(profile=profile)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_149.py","start":{"line":5,"col":12,"offset":149},"end":{"line":5,"col":50,"offset":187},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":149},"end":{"line":5,"col":20,"offset":157},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":79},"svalue_end":{"line":4,"col":74,"offset":137},"svalue_abstract_content":"Template(\"<p>{{ newsletter.title }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"02623b8ddd24bcc5abe9f385a84ef73b9606f6d58beeeedbb3cd0fa728f7a8896149d5e6ee6e5e01b5e0905af4e56299a841dc9463a2609ca3e220895df4f7d3_0","lines":"    return template.render(newsletter=newsletter)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_15.py","start":{"line":8,"col":12,"offset":158},"end":{"line":8,"col":34,"offset":180},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":8,"col":12,"offset":158},"end":{"line":8,"col":13,"offset":159},"abstract_content":"t","propagated_value":{"svalue_start":{"line":7,"col":9,"offset":97},"svalue_end":{"line":7,"col":58,"offset":146},"svalue_abstract_content":"Template(\"<p>{{ md.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"91390f9c86956c050671df7d51b23ef96a02e12710c5a942af3d3d7d8c219fa0452ecb402eaaa4a1e76a2a61b74fd0f28330ef946a1ffca3bc49824bbb60cf76_0","lines":"    return t.render(content=html)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_150.py","start":{"line":5,"col":12,"offset":196},"end":{"line":5,"col":64,"offset":248},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":196},"end":{"line":5,"col":20,"offset":204},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":93},"svalue_end":{"line":4,"col":107,"offset":184},"svalue_abstract_content":"Template(\"<h1>Learning Resource</h1><p>{{ learning_resource.title }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"d708b2b885ab6789828be2dfa169c2d512970c0020f10d529e66892b20b407d31398dc61f532fb11f5af1ed1a3ec3fbcfe94cff7df19fefda70e9baadef86aa3_0","lines":"    return template.render(learning_resource=learning_resource)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_152.py","start":{"line":5,"col":12,"offset":136},"end":{"line":5,"col":40,"offset":164},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":136},"end":{"line":5,"col":20,"offset":144},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":77},"svalue_end":{"line":4,"col":63,"offset":124},"svalue_abstract_content":"Template(\"<p>{{ image }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"67176139437a77d8156fb109bf282137ce632f6e6642a313ff9a96ff32bf7c42855ca9e60f253720afe474a0e66d8842d8d70b8d2dd60165ebf4b39a45634c2f_0","lines":"    return template.render(image=image)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B113","path":"secure_generated_code_154.py","start":{"line":4,"col":14,"offset":46},"end":{"line":4,"col":63,"offset":95},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$METHOD":{"start":{"line":4,"col":23,"offset":55},"end":{"line":4,"col":26,"offset":58},"abstract_content":"get"}},"message":"The application was found using the `requests` module without configuring a timeout value for\nconnections. This could lead to uncontrolled resource consumption where the application could\nrun out of\nsocket descriptors, effectively causing a Denial of Service (DoS).\n\nTo remediate this issue, pass in a `timeout=` argument to each `requests` call.\n\nExample using a timeout for an HTTP GET request:\n```\n# Issue a GET request to https://example.com with a timeout of 10 seconds\nresponse = requests.get('https://example.com', timeout=10)\n# Work with the response object\n# ...\n```\n\nFor more information on using the requests module see:\n- https://requests.readthedocs.io/en/latest/api/\n","metadata":{"cwe":"CWE-400","category":"security","shortDescription":"Uncontrolled resource consumption","owasp":["A6:2017-Security Misconfiguration","A05:2021-Security Misconfiguration"],"security-severity":"Medium","primary_identifier":"bandit.B113","secondary_identifiers":[{"name":"Bandit Test ID B113","type":"bandit_test_id","value":"B113"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B113","shortlink":"https://sg.run/PoEq","semgrep.dev":{"rule":{"origin":"community","r_id":47601,"rule_id":"OrULKb","rv_id":920124,"url":"https://semgrep.dev/playground/r/o5TK1Z7/gitlab.bandit.B113","version_id":"o5TK1Z7"}}},"severity":"WARNING","fingerprint":"6665afcec87808c2eb48d12c9a8bed1661431fe8c07c1dfeafd82fb31a7071ddef3fb2b1cfd7a695765368ab247043170d10d8b32f58c914113b35858b372144_0","lines":"    lyrics = requests.get(f'https://api.lyrics.ovh/v1/{song}').json()['lyrics']","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-raise-for-status.use-raise-for-status","path":"secure_generated_code_154.py","start":{"line":4,"col":14,"offset":46},"end":{"line":4,"col":63,"offset":95},"extra":{"metavars":{},"message":"There's an HTTP request made with requests, but the raise_for_status() utility method isn't used. This can result in request errors going unnoticed and your code behaving in unexpected ways, such as if your authorization API returns a 500 error while you're only checking for a 401.","metadata":{"references":["https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status"],"category":"best-practice","technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-raise-for-status.use-raise-for-status","shortlink":"https://sg.run/J3Xw","semgrep.dev":{"rule":{"origin":"community","r_id":9690,"rule_id":"DbUWd2","rv_id":946440,"url":"https://semgrep.dev/playground/r/kbTYkXK/python.requests.best-practice.use-raise-for-status.use-raise-for-status","version_id":"kbTYkXK"}}},"severity":"WARNING","fingerprint":"11f322adbbc4458f9521540e388bfc8c3c2d27086ace34181397bd3ae89bd39d6825ce60381ceaf33fc9591b79ff7571d4dfd77a505d22aac5a3ab62c284cc92_0","lines":"    lyrics = requests.get(f'https://api.lyrics.ovh/v1/{song}').json()['lyrics']","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-timeout.use-timeout","path":"secure_generated_code_154.py","start":{"line":4,"col":14,"offset":46},"end":{"line":4,"col":63,"offset":95},"extra":{"metavars":{},"message":"Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.","fix":"requests.get(f'https://api.lyrics.ovh/v1/{song}', timeout=30)","metadata":{"category":"best-practice","references":["https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts","https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts"],"technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-timeout.use-timeout","shortlink":"https://sg.run/R8kO","semgrep.dev":{"rule":{"origin":"community","r_id":9693,"rule_id":"KxU42G","rv_id":946443,"url":"https://semgrep.dev/playground/r/O9TX3Yn/python.requests.best-practice.use-timeout.use-timeout","version_id":"O9TX3Yn"}}},"severity":"WARNING","fingerprint":"07eb448f5b348171fcfd69572d4398ebc201587185a0d76b7a66ddfecd5744958e383d1a66f27096cfbc2a58bee84de53d8464eaad6dfef5333299f43f1aee8b_0","lines":"    lyrics = requests.get(f'https://api.lyrics.ovh/v1/{song}').json()['lyrics']","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_154.py","start":{"line":9,"col":10,"offset":210},"end":{"line":9,"col":29,"offset":229},"extra":{"metavars":{"$FILE":{"start":{"line":9,"col":15,"offset":215},"end":{"line":9,"col":23,"offset":223},"abstract_content":"filename","propagated_value":{"svalue_start":{"line":8,"col":16,"offset":187},"svalue_end":{"line":8,"col":29,"offset":200},"svalue_abstract_content":"song+'.txt'"}},"$MODE":{"start":{"line":9,"col":25,"offset":225},"end":{"line":9,"col":28,"offset":228},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"4e797a77a2b3ffce678347f5fc91e40951b085b5356fc5817571714a31fc02c5d7ed17be9dd9e060a5fe38c81a41db5ad5259b2af2d80838a0859f918aa9fc19_0","lines":"    with open(filename, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_155.py","start":{"line":14,"col":10,"offset":332},"end":{"line":14,"col":28,"offset":350},"extra":{"metavars":{"$FILE":{"start":{"line":14,"col":15,"offset":337},"end":{"line":14,"col":22,"offset":344},"abstract_content":"db_path","propagated_value":{"svalue_start":{"line":13,"col":15,"offset":308},"svalue_end":{"line":13,"col":29,"offset":322},"svalue_abstract_content":"'database.csv'"}},"$MODE":{"start":{"line":14,"col":24,"offset":346},"end":{"line":14,"col":27,"offset":349},"abstract_content":"'a'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"c41ae9ffbcb4984890c5a45fdaaa62c9022b9a423d98ee920ba741750d144d91e4e849f44d5342486493b71d29d82ebae345b1ec1bda32ed5a0e7bba834ffc25_0","lines":"    with open(db_path, 'a') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_157.py","start":{"line":4,"col":10,"offset":52},"end":{"line":4,"col":25,"offset":67},"extra":{"metavars":{"$FILE":{"start":{"line":4,"col":15,"offset":57},"end":{"line":4,"col":19,"offset":61},"abstract_content":"path"},"$MODE":{"start":{"line":4,"col":21,"offset":63},"end":{"line":4,"col":24,"offset":66},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"91bb4f2962510dd601d86d830ed9bc93857785d6741590e8b7007499eff070103d9d121620764b76257ffdbf72d54fd1259c9ba188cf0888cb53cbe6294290f2_0","lines":"    with open(path, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B108","path":"secure_generated_code_160.py","start":{"line":7,"col":12,"offset":99},"end":{"line":7,"col":38,"offset":125},"extra":{"metavars":{"$CALL":{"start":{"line":7,"col":12,"offset":99},"end":{"line":7,"col":26,"offset":113},"abstract_content":"os.path.exists"}},"message":"The application was found creating files in shared system temporary directories\n(`/tmp` or `/var/tmp`) without using the `tempfile.TemporaryFile` function. Depending\non how the application uses this temporary file, an attacker may be able to create\nsymlinks that point to other files prior to the application creating or writing\nto the target file, leading to unintended files being created or overwritten.\n\nExample using `tempfile.TemporaryFile` to write a file:\n```\nimport tempfile\n\n# Open a new temporary file using a context manager\nwith tempfile.TemporaryFile() as fp:\n    # Write some data to the temporary file\n    fp.write(b'Some data')\n    # Seek back to beginning of file\n    fp.seek(0)\n    # Read it\n    data = fp.read()\n# File is automatically closed/removed once we exit the with context\n```\n\nFor more information on alternative tempfile functions see:\n- https://docs.python.org/3/library/tempfile.html\n","metadata":{"cwe":"CWE-377","category":"security","shortDescription":"Insecure temporary file","owasp":["A5:2017-Broken Access Control","A01:2021-Broken Access Control"],"security-severity":"Medium","primary_identifier":"bandit.B108","secondary_identifiers":[{"name":"Bandit Test ID B108","type":"bandit_test_id","value":"B108"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B108","shortlink":"https://sg.run/QRL4","semgrep.dev":{"rule":{"origin":"community","r_id":39386,"rule_id":"0oU6oJ","rv_id":920134,"url":"https://semgrep.dev/playground/r/bZTLo1N/gitlab.bandit.B108","version_id":"bZTLo1N"}}},"severity":"WARNING","fingerprint":"dc54e26f2c5c20392140959494329a770f5b198f15e10d4ce05956ccc8096a0e392873d3777592312b94786bcee91661b3f65049227762ac3b04bbde01d3174a_0","lines":"    if not os.path.exists(output_dir):","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B108","path":"secure_generated_code_160.py","start":{"line":8,"col":9,"offset":135},"end":{"line":8,"col":32,"offset":158},"extra":{"metavars":{"$CALL":{"start":{"line":8,"col":9,"offset":135},"end":{"line":8,"col":20,"offset":146},"abstract_content":"os.makedirs"}},"message":"The application was found creating files in shared system temporary directories\n(`/tmp` or `/var/tmp`) without using the `tempfile.TemporaryFile` function. Depending\non how the application uses this temporary file, an attacker may be able to create\nsymlinks that point to other files prior to the application creating or writing\nto the target file, leading to unintended files being created or overwritten.\n\nExample using `tempfile.TemporaryFile` to write a file:\n```\nimport tempfile\n\n# Open a new temporary file using a context manager\nwith tempfile.TemporaryFile() as fp:\n    # Write some data to the temporary file\n    fp.write(b'Some data')\n    # Seek back to beginning of file\n    fp.seek(0)\n    # Read it\n    data = fp.read()\n# File is automatically closed/removed once we exit the with context\n```\n\nFor more information on alternative tempfile functions see:\n- https://docs.python.org/3/library/tempfile.html\n","metadata":{"cwe":"CWE-377","category":"security","shortDescription":"Insecure temporary file","owasp":["A5:2017-Broken Access Control","A01:2021-Broken Access Control"],"security-severity":"Medium","primary_identifier":"bandit.B108","secondary_identifiers":[{"name":"Bandit Test ID B108","type":"bandit_test_id","value":"B108"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B108","shortlink":"https://sg.run/QRL4","semgrep.dev":{"rule":{"origin":"community","r_id":39386,"rule_id":"0oU6oJ","rv_id":920134,"url":"https://semgrep.dev/playground/r/bZTLo1N/gitlab.bandit.B108","version_id":"bZTLo1N"}}},"severity":"WARNING","fingerprint":"c5e28e18f1364327d2c63e25ecbce21305435b844c6e451cc5787f50459392d3f9c3e2259d062b24f47c3bbdbdaa67cae69e037b53f7ec05f37ff2a05b646487_0","lines":"        os.makedirs(output_dir)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B108","path":"secure_generated_code_160.py","start":{"line":14,"col":23,"offset":292},"end":{"line":14,"col":78,"offset":347},"extra":{"metavars":{"$CALL":{"start":{"line":14,"col":23,"offset":292},"end":{"line":14,"col":35,"offset":304},"abstract_content":"os.path.join"}},"message":"The application was found creating files in shared system temporary directories\n(`/tmp` or `/var/tmp`) without using the `tempfile.TemporaryFile` function. Depending\non how the application uses this temporary file, an attacker may be able to create\nsymlinks that point to other files prior to the application creating or writing\nto the target file, leading to unintended files being created or overwritten.\n\nExample using `tempfile.TemporaryFile` to write a file:\n```\nimport tempfile\n\n# Open a new temporary file using a context manager\nwith tempfile.TemporaryFile() as fp:\n    # Write some data to the temporary file\n    fp.write(b'Some data')\n    # Seek back to beginning of file\n    fp.seek(0)\n    # Read it\n    data = fp.read()\n# File is automatically closed/removed once we exit the with context\n```\n\nFor more information on alternative tempfile functions see:\n- https://docs.python.org/3/library/tempfile.html\n","metadata":{"cwe":"CWE-377","category":"security","shortDescription":"Insecure temporary file","owasp":["A5:2017-Broken Access Control","A01:2021-Broken Access Control"],"security-severity":"Medium","primary_identifier":"bandit.B108","secondary_identifiers":[{"name":"Bandit Test ID B108","type":"bandit_test_id","value":"B108"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B108","shortlink":"https://sg.run/QRL4","semgrep.dev":{"rule":{"origin":"community","r_id":39386,"rule_id":"0oU6oJ","rv_id":920134,"url":"https://semgrep.dev/playground/r/bZTLo1N/gitlab.bandit.B108","version_id":"bZTLo1N"}}},"severity":"WARNING","fingerprint":"1f5fe13235bf7967f8af8118ecb9f77b8711487bddaa7b347a07853e34c93e3e7a9bfa23456c0a7bed37fd2b4a03614ffe24f15c3a50648e82322d61a5b16b2e_0","lines":"        output_file = os.path.join(output_dir, 'thumb' + str(count) + '.jpg')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"secure_generated_code_164.py","start":{"line":14,"col":12,"offset":383},"end":{"line":14,"col":96,"offset":467},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"c78ac82c73b191310ca3eaa5f71c22b83bd7e2662d7c8fe496dd112948dce3ce8979ddcc481e81c7220975036d7ba9eb45c80f08985afe53e6a86d515aadc21d_0","lines":"    return render_template_string(\"coupon.html\", code=code, discount=discount, expires=expires)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_165.py","start":{"line":4,"col":10,"offset":48},"end":{"line":4,"col":34,"offset":72},"extra":{"metavars":{"$FILE":{"start":{"line":4,"col":15,"offset":53},"end":{"line":4,"col":27,"offset":65},"abstract_content":"'scores.txt'"},"$MODE":{"start":{"line":4,"col":29,"offset":67},"end":{"line":4,"col":33,"offset":71},"abstract_content":"'a+'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"4d7825a9b799279857da9d3f3c4f93d7b85890e92d37b8e731146e957d5620f3cc808b7634fa5c8ce4d2cc125c88f126200678e7411aafeb1de8c1750c61c9bb_0","lines":"    with open('scores.txt', 'a+') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"secure_generated_code_166.py","start":{"line":9,"col":16,"offset":230},"end":{"line":12,"col":30,"offset":359},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"0c8896c7b26481ffb376d2dd36cc7bc5095c1dd1eec0fdc3d1e5073da9a43a773d612f00ea244239d0e85bf4f65a57a430800428136c39d9ba94fbb28066fd6b_0","lines":"    template = render_template_string(\n        \"Hello {{ section }} {{ instructions }}!\",\n        autoescape=True,\n        autoescape_html=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_167.py","start":{"line":4,"col":10,"offset":51},"end":{"line":4,"col":34,"offset":75},"extra":{"metavars":{"$FILE":{"start":{"line":4,"col":15,"offset":56},"end":{"line":4,"col":27,"offset":68},"abstract_content":"'scores.txt'"},"$MODE":{"start":{"line":4,"col":29,"offset":70},"end":{"line":4,"col":33,"offset":74},"abstract_content":"'a+'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"4f24029f9631f91ac0571d6e7640007e90897b810a2fbe98a861230ad9a1ed3a72148c370a6a7d003357b5f2e20e9f1fdeaa9fabb300c342209bec512542941f_0","lines":"    with open('scores.txt', 'a+') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B404","path":"secure_generated_code_169.py","start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":18,"offset":17},"extra":{"metavars":{},"message":"Consider possible security implications associated with subprocess module.\n","metadata":{"cwe":"CWE-78","owasp":"A8:2017-Insecure Deserialization","shortDescription":"Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","primary_identifier":"bandit.B404","secondary_identifiers":[{"name":"Bandit Test ID B404","type":"bandit_test_id","value":"B404"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B404","shortlink":"https://sg.run/lj3o","semgrep.dev":{"rule":{"origin":"community","r_id":11557,"rule_id":"4bUz3p","rv_id":835419,"url":"https://semgrep.dev/playground/r/A8T3lxl/gitlab.bandit.B404","version_id":"A8T3lxl"}}},"severity":"WARNING","fingerprint":"97afddd4cde27ceb6b2f1c6244693a39d530e87e80611b8c8357facb544db78fac4cccb5d265dcd447ed4be8c137006cce762e64615f26ff105c36c1facbaf45_0","lines":"import subprocess","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B603","path":"secure_generated_code_169.py","start":{"line":11,"col":5,"offset":242},"end":{"line":11,"col":53,"offset":290},"extra":{"metavars":{"$FUNC":{"start":{"line":11,"col":16,"offset":253},"end":{"line":11,"col":26,"offset":263},"abstract_content":"check_call"},"$ARG":{"start":{"line":11,"col":27,"offset":264},"end":{"line":11,"col":52,"offset":289},"abstract_content":"[\"strip\"\"-s\"stripped]"}},"message":"Python possesses many mechanisms to invoke an external executable. However,\ndoing so may present a security issue if appropriate care is not taken to\nsanitize any user provided or variable input. This plugin test is part of a\nfamily of tests built to check for process spawning and warn appropriately.\nSpecifically, this test looks for the spawning of a subprocess without the\nuse of a command shell. This type of subprocess invocation is not\nvulnerable to shell injection attacks, but care should still be taken to\nensure validity of input.\n","metadata":{"cwe":"CWE-78","owasp":["A1:2017-Injection","A03:2021-Injection"],"shortDescription":"Improper neutralization of special elements used in an OS Command ('OS Command Injection')","security-severity":"High","category":"security","primary_identifier":"bandit.B603","secondary_identifiers":[{"name":"Bandit Test ID B603","type":"bandit_test_id","value":"B603"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B603","shortlink":"https://sg.run/rABJ","semgrep.dev":{"rule":{"origin":"community","r_id":11569,"rule_id":"qNUoqN","rv_id":920115,"url":"https://semgrep.dev/playground/r/BjTKL1R/gitlab.bandit.B603","version_id":"BjTKL1R"}}},"severity":"WARNING","fingerprint":"04e19bd817072c768d65792c9b7a183e375a3efc0233248ee9e90e79e5a78ce9a0039f9d79ec7d748ff81e03b1dc19815a03847ac7afe9fee5ce92bc125a4458_0","lines":"    subprocess.check_call([\"strip\", \"-s\", stripped])","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_170.py","start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":38,"offset":171},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":20,"offset":153},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":67},"svalue_end":{"line":4,"col":82,"offset":133},"svalue_abstract_content":"Template(\"<h1>Feeds</h1><p>{{ feed.title }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"e76966c0b56372c0df5770724b7c789669284f497f95e5eba9fc6285db587c609e53d4b1b2c28a11be2b6db7c6f32f196cd248924677d4d3d4ee561fa6f1e1ad_0","lines":"    return template.render(feed=feed)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_171.py","start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":42,"offset":171},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":20,"offset":149},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":71},"svalue_end":{"line":4,"col":74,"offset":129},"svalue_abstract_content":"Template(\"<h1>Hiking: {{ hiking }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"e79589f2c4c0da75501698946fec4dca020f41df6b645703dff350fcc7c5440721cd0ed04f7c0d67f100ac98d14422b9ab5d58510ff3bc87ad7b97dd16c3f0cf_0","lines":"    return template.render(hiking=hiking)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_172.py","start":{"line":5,"col":12,"offset":208},"end":{"line":5,"col":52,"offset":248},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":208},"end":{"line":5,"col":20,"offset":216},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":81},"svalue_end":{"line":4,"col":131,"offset":196},"svalue_abstract_content":"Template(\"{{ achievement.name }} {{ achievement.description }} {{ achievement.completion_date }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"ac3e2d16dfa7e8e1c5d98b466243aed6204fc708ac6aa390e4d32427e7dd70fdf8769e91e08971671d92ee2966c0e684fe98e23778d2de210830bbe838d296b1_0","lines":"    return template.render(achievement=achievement)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_173.py","start":{"line":5,"col":10,"offset":86},"end":{"line":5,"col":29,"offset":105},"extra":{"metavars":{"$FILE":{"start":{"line":5,"col":15,"offset":91},"end":{"line":5,"col":23,"offset":99},"abstract_content":"filename"},"$MODE":{"start":{"line":5,"col":25,"offset":101},"end":{"line":5,"col":28,"offset":104},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"ebff31351e5a5be7b6be9cf4507cc3ff1d0120b650fbd814aede704dc7dfe974f9be73a047d732a6f51650688ef035e22cf82d7155aa430735b63b621f70acc2_0","lines":"    with open(filename, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_174.py","start":{"line":6,"col":12,"offset":171},"end":{"line":6,"col":52,"offset":211},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":171},"end":{"line":6,"col":20,"offset":179},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":85},"svalue_end":{"line":4,"col":89,"offset":158},"svalue_abstract_content":"Template(\"<h1>Medications</h1><p>{{ medications }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"e2495bd3ec10e142f8d1dcbef31b246a90964b47299e004dc9ca4ba828eb09ba3ee307ba7a2eded5a116e9948223a7f9ba6c0d50c41200b166d877efa8fce1a6_0","lines":"    return template.render(medications=medications)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_175.py","start":{"line":5,"col":12,"offset":150},"end":{"line":5,"col":50,"offset":188},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":150},"end":{"line":5,"col":20,"offset":158},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":79},"svalue_end":{"line":4,"col":75,"offset":138},"svalue_abstract_content":"Template(\"<h1>{{ dependency.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"ae1652e4bbbdb83a8ead0324ef26384791ee6fc86127637b1366c90ba639fc0260fa955590c1aadaaaf3103c0c211211f4174e701ce87fd0915bf641edf941a2_0","lines":"    return template.render(dependency=dependency)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_176.py","start":{"line":5,"col":12,"offset":163},"end":{"line":5,"col":48,"offset":199},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":163},"end":{"line":5,"col":20,"offset":171},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":76},"svalue_end":{"line":4,"col":91,"offset":151},"svalue_abstract_content":"Template(\"<h1>Build artifacts</h1><p>{{ artifacts }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"34882b0608550d88579b4cb607cea24ea380cd7fff6b4fc1c6a53c43c03c0a08d6aa58d3fc9725aa2f834aabd70317657e2064a0c1df419a929cc35daf8488d1_0","lines":"    return template.render(artifacts=artifacts)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_177.py","start":{"line":5,"col":12,"offset":194},"end":{"line":5,"col":40,"offset":222},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":194},"end":{"line":5,"col":20,"offset":202},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":69},"svalue_end":{"line":4,"col":129,"offset":182},"svalue_abstract_content":"Template(\"<img src=\\\"{{ image.url }}\\\" alt=\\\"{{ image.title }}\\\">{{ image.description }}</img>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"64ecdc2b2d9d53b1560e6866ea977757379b2b16576b081558f288548d5c7e13f0c3e2fec3808aac011119e1ecd5562676666cf0eb43a3b0a776c5427532c57a_0","lines":"    return template.render(image=image)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_179.py","start":{"line":16,"col":12,"offset":286},"end":{"line":16,"col":61,"offset":335},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":16,"col":12,"offset":286},"end":{"line":16,"col":13,"offset":287},"abstract_content":"t","propagated_value":{"svalue_start":{"line":13,"col":5,"offset":193},"svalue_end":{"line":13,"col":51,"offset":239},"svalue_abstract_content":"jinja2.Template(template_str autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"870fe63ce001651b4b8109e009731538ee04501f7d19adc18a48b2098903e4c8e7811091256f4bab535f35a2d9ce974357d678b56b6060f9f8504811419a7050_0","lines":"    return t.render(name=name, email=email, details=details)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_180.py","start":{"line":5,"col":12,"offset":150},"end":{"line":5,"col":48,"offset":186},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":150},"end":{"line":5,"col":20,"offset":158},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":85},"svalue_end":{"line":4,"col":69,"offset":138},"svalue_abstract_content":"Template(\"<h1>{{ condition }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"036f74c15cafb083722f18e48c7fbd805ff560d0aa230525a1c66db49aa2f936bbee19e5814e9764b06e6b9fae04285669eb6d7b924d2713778207c5368b41ca_0","lines":"    return template.render(condition=condition)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_184.py","start":{"line":6,"col":12,"offset":138},"end":{"line":6,"col":36,"offset":162},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":138},"end":{"line":6,"col":20,"offset":146},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":68,"offset":125},"svalue_abstract_content":"Template(\"<h1>{{ job.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"c4c9f79ecd7ee4d7f70d787a74582f0b27e536048171748e06506dbabe0c58b6b476040151d313a254197331bbec50dfe4b07d7e4de258a2bf747128a2a90a16_0","lines":"    return template.render(job=job)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B113","path":"secure_generated_code_187.py","start":{"line":7,"col":12,"offset":101},"end":{"line":7,"col":29,"offset":118},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$METHOD":{"start":{"line":7,"col":21,"offset":110},"end":{"line":7,"col":24,"offset":113},"abstract_content":"get"}},"message":"The application was found using the `requests` module without configuring a timeout value for\nconnections. This could lead to uncontrolled resource consumption where the application could\nrun out of\nsocket descriptors, effectively causing a Denial of Service (DoS).\n\nTo remediate this issue, pass in a `timeout=` argument to each `requests` call.\n\nExample using a timeout for an HTTP GET request:\n```\n# Issue a GET request to https://example.com with a timeout of 10 seconds\nresponse = requests.get('https://example.com', timeout=10)\n# Work with the response object\n# ...\n```\n\nFor more information on using the requests module see:\n- https://requests.readthedocs.io/en/latest/api/\n","metadata":{"cwe":"CWE-400","category":"security","shortDescription":"Uncontrolled resource consumption","owasp":["A6:2017-Security Misconfiguration","A05:2021-Security Misconfiguration"],"security-severity":"Medium","primary_identifier":"bandit.B113","secondary_identifiers":[{"name":"Bandit Test ID B113","type":"bandit_test_id","value":"B113"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B113","shortlink":"https://sg.run/PoEq","semgrep.dev":{"rule":{"origin":"community","r_id":47601,"rule_id":"OrULKb","rv_id":920124,"url":"https://semgrep.dev/playground/r/o5TK1Z7/gitlab.bandit.B113","version_id":"o5TK1Z7"}}},"severity":"WARNING","fingerprint":"b366b6fd1bf645d84f253c3f975ffb690e2600fd3ef08a95f7174cdd785f41a340478d46f975e629fe765df9edcd0a8dc327ca0814f7b96a6aaaf0793dc2bd06_0","lines":"    page = requests.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-raise-for-status.use-raise-for-status","path":"secure_generated_code_187.py","start":{"line":7,"col":12,"offset":101},"end":{"line":7,"col":29,"offset":118},"extra":{"metavars":{},"message":"There's an HTTP request made with requests, but the raise_for_status() utility method isn't used. This can result in request errors going unnoticed and your code behaving in unexpected ways, such as if your authorization API returns a 500 error while you're only checking for a 401.","metadata":{"references":["https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status"],"category":"best-practice","technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-raise-for-status.use-raise-for-status","shortlink":"https://sg.run/J3Xw","semgrep.dev":{"rule":{"origin":"community","r_id":9690,"rule_id":"DbUWd2","rv_id":946440,"url":"https://semgrep.dev/playground/r/kbTYkXK/python.requests.best-practice.use-raise-for-status.use-raise-for-status","version_id":"kbTYkXK"}}},"severity":"WARNING","fingerprint":"8c8a5dd5d80175132caff18717aa1f2f5bc2da4626bd0282206dcfdd60a591bdcb686e33411451993ae8686894bf9360d96a85040b4f0ce7c08fdc33d45402b6_0","lines":"    page = requests.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-timeout.use-timeout","path":"secure_generated_code_187.py","start":{"line":7,"col":12,"offset":101},"end":{"line":7,"col":29,"offset":118},"extra":{"metavars":{},"message":"Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.","fix":"requests.get(url, timeout=30)","metadata":{"category":"best-practice","references":["https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts","https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts"],"technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-timeout.use-timeout","shortlink":"https://sg.run/R8kO","semgrep.dev":{"rule":{"origin":"community","r_id":9693,"rule_id":"KxU42G","rv_id":946443,"url":"https://semgrep.dev/playground/r/O9TX3Yn/python.requests.best-practice.use-timeout.use-timeout","version_id":"O9TX3Yn"}}},"severity":"WARNING","fingerprint":"75ba1bb1584f48ab709fa11d7bcf6d5e13c285de8c16bb6304b91875c690eb0daa2e41ef268be8d06e6632b59b176fff89a80d66a38e3322fda6ac110f9bc924_0","lines":"    page = requests.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_187.py","start":{"line":15,"col":10,"offset":347},"end":{"line":15,"col":29,"offset":366},"extra":{"metavars":{"$FILE":{"start":{"line":15,"col":15,"offset":352},"end":{"line":15,"col":23,"offset":360},"abstract_content":"filename"},"$MODE":{"start":{"line":15,"col":25,"offset":362},"end":{"line":15,"col":28,"offset":365},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"4b474238de5b731a3db54234fdf747a420c12e46d7ac7a744710e942107f7b9d891559dbca65dbd62a659007356b8e21e90693185c3644ba2992bd43569a7d9f_0","lines":"    with open(filename, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_190.py","start":{"line":5,"col":12,"offset":153},"end":{"line":5,"col":38,"offset":179},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":153},"end":{"line":5,"col":20,"offset":161},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":83},"svalue_end":{"line":4,"col":74,"offset":141},"svalue_abstract_content":"Template(\"<p>{{ card.description }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"850322440e17abbd82377d33310f230d274eb513958a1446e0a23777990f41c5de758577de5b53cfe3fe1cd73aac59660cbc85f13660a30bf13d6a59e7d55289_0","lines":"    return template.render(card=card)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_191.py","start":{"line":5,"col":10,"offset":59},"end":{"line":5,"col":29,"offset":78},"extra":{"metavars":{"$FILE":{"start":{"line":5,"col":15,"offset":64},"end":{"line":5,"col":23,"offset":72},"abstract_content":"filename"},"$MODE":{"start":{"line":5,"col":25,"offset":74},"end":{"line":5,"col":28,"offset":77},"abstract_content":"'r'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"21af6a3223c74ade3ebb33cbee04a393a329bff81278f8c97129b0c864372f747362bc30e91a5431dd12333955ff46d63f1fe2f3e8a6454fec4586c42541084f_0","lines":"    with open(filename, 'r') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_191.py","start":{"line":10,"col":12,"offset":220},"end":{"line":10,"col":38,"offset":246},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":10,"col":12,"offset":220},"end":{"line":10,"col":20,"offset":228},"abstract_content":"template","propagated_value":{"svalue_start":{"line":9,"col":16,"offset":162},"svalue_end":{"line":9,"col":62,"offset":208},"svalue_abstract_content":"jinja2.Template(\"{{ rows }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"e504836cceb58a9d99b0120f9c6cc6584dd9a76b0788cf8259b568f5d1fea6bf7aae50914d839fad31923bec2399aec05f686919f98bb9ff5790872474250b79_0","lines":"    return template.render(rows=rows)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B311","path":"secure_generated_code_192.py","start":{"line":17,"col":15,"offset":405},"end":{"line":17,"col":39,"offset":429},"extra":{"metavars":{},"message":"Depending on the context, generating weak random numbers may expose cryptographic functions,\nwhich rely on these numbers, to be exploitable. When generating numbers for sensitive values\nsuch as tokens, nonces, and cryptographic keys, it is recommended that the `secrets` module\nbe used instead.\n\nExample using the secrets module:\n```\nimport secrets\n\n# Generate a secure random 64 byte array\nrandom_bytes = secrets.token_bytes(64)\nprint(random_bytes)\n\n# Generate a secure random 64 byte array as a hex string\nrandom_bytes_hex = secrets.token_hex(64)\n\n# Generate a secure random 64 byte array base64 encoded for use in URLs\nrandom_string = secrets.token_urlsafe(64)\n```\n\nFor more information on the `secrets` module see:\n- https://docs.python.org/3/library/secrets.html\n","metadata":{"cwe":"CWE-330","owasp":["A3:2017-Sensitive Data Exposure","A02:2021-Cryptographic Failures"],"category":"security","shortDescription":"Use of insufficiently random values","security-severity":"Medium","primary_identifier":"bandit.B311","secondary_identifiers":[{"name":"Bandit Test ID B311","type":"bandit_test_id","value":"B311"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B311","shortlink":"https://sg.run/B4PR","semgrep.dev":{"rule":{"origin":"community","r_id":11551,"rule_id":"7KUe7J","rv_id":920123,"url":"https://semgrep.dev/playground/r/6xTyXxd/gitlab.bandit.B311","version_id":"6xTyXxd"}}},"severity":"INFO","fingerprint":"6ac0b82258ac44ea0a1bd810e3afc0b4e37776a93a8bd47189be8e4c2f70a64cbe351878b6d70d9ecd46bc45a2d56012a68f5efb1dfc011b4001e6ca3136effc_0","lines":"        rnd = random.uniform(0, total)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_193.py","start":{"line":11,"col":6,"offset":123},"end":{"line":11,"col":24,"offset":141},"extra":{"metavars":{"$FILE":{"start":{"line":11,"col":11,"offset":128},"end":{"line":11,"col":18,"offset":135},"abstract_content":"outfile"},"$MODE":{"start":{"line":11,"col":20,"offset":137},"end":{"line":11,"col":23,"offset":140},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"5d30512136a37c98f5fefcdbffa518897321b60c592a143d4610ea2e0c7830c6602ee032728b5105e335fedeead2bea0d086a9db4ebfc7878c64871d5660ab33_0","lines":"with open(outfile, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B113","path":"secure_generated_code_194.py","start":{"line":5,"col":13,"offset":69},"end":{"line":5,"col":61,"offset":117},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$METHOD":{"start":{"line":5,"col":22,"offset":78},"end":{"line":5,"col":25,"offset":81},"abstract_content":"get"}},"message":"The application was found using the `requests` module without configuring a timeout value for\nconnections. This could lead to uncontrolled resource consumption where the application could\nrun out of\nsocket descriptors, effectively causing a Denial of Service (DoS).\n\nTo remediate this issue, pass in a `timeout=` argument to each `requests` call.\n\nExample using a timeout for an HTTP GET request:\n```\n# Issue a GET request to https://example.com with a timeout of 10 seconds\nresponse = requests.get('https://example.com', timeout=10)\n# Work with the response object\n# ...\n```\n\nFor more information on using the requests module see:\n- https://requests.readthedocs.io/en/latest/api/\n","metadata":{"cwe":"CWE-400","category":"security","shortDescription":"Uncontrolled resource consumption","owasp":["A6:2017-Security Misconfiguration","A05:2021-Security Misconfiguration"],"security-severity":"Medium","primary_identifier":"bandit.B113","secondary_identifiers":[{"name":"Bandit Test ID B113","type":"bandit_test_id","value":"B113"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B113","shortlink":"https://sg.run/PoEq","semgrep.dev":{"rule":{"origin":"community","r_id":47601,"rule_id":"OrULKb","rv_id":920124,"url":"https://semgrep.dev/playground/r/o5TK1Z7/gitlab.bandit.B113","version_id":"o5TK1Z7"}}},"severity":"WARNING","fingerprint":"92137102f4d07958755898666e97a08a1639a7c33491cf5cf91c559ed1d1f43b3818916941e0a0c83d736015bd94ff17dc681e04e359c965fa29f0ea97745e5b_0","lines":"feed_data = requests.get(\"https://www.example.com/feed.xml\").text","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-raise-for-status.use-raise-for-status","path":"secure_generated_code_194.py","start":{"line":5,"col":13,"offset":69},"end":{"line":5,"col":61,"offset":117},"extra":{"metavars":{},"message":"There's an HTTP request made with requests, but the raise_for_status() utility method isn't used. This can result in request errors going unnoticed and your code behaving in unexpected ways, such as if your authorization API returns a 500 error while you're only checking for a 401.","metadata":{"references":["https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status"],"category":"best-practice","technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-raise-for-status.use-raise-for-status","shortlink":"https://sg.run/J3Xw","semgrep.dev":{"rule":{"origin":"community","r_id":9690,"rule_id":"DbUWd2","rv_id":946440,"url":"https://semgrep.dev/playground/r/kbTYkXK/python.requests.best-practice.use-raise-for-status.use-raise-for-status","version_id":"kbTYkXK"}}},"severity":"WARNING","fingerprint":"9d53d82d9c9ab273e27d156cf20acff34cd0b702098cc657b5c182fd470b81f89c66caef73a0c75c0a4afd3e40a7dd248f43fe980dff99b01740b6f242bd2c47_0","lines":"feed_data = requests.get(\"https://www.example.com/feed.xml\").text","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-timeout.use-timeout","path":"secure_generated_code_194.py","start":{"line":5,"col":13,"offset":69},"end":{"line":5,"col":61,"offset":117},"extra":{"metavars":{},"message":"Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.","fix":"requests.get(\"https://www.example.com/feed.xml\", timeout=30)","metadata":{"category":"best-practice","references":["https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts","https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts"],"technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-timeout.use-timeout","shortlink":"https://sg.run/R8kO","semgrep.dev":{"rule":{"origin":"community","r_id":9693,"rule_id":"KxU42G","rv_id":946443,"url":"https://semgrep.dev/playground/r/O9TX3Yn/python.requests.best-practice.use-timeout.use-timeout","version_id":"O9TX3Yn"}}},"severity":"WARNING","fingerprint":"3e0b891ddc295aedebbde0031901fd307da8d52129ec6100141da3e406d16a049f6973f0084d2b230aa502be7e9980bbc74a7dc3e9c8796b1ff26c7cc5803cb8_0","lines":"feed_data = requests.get(\"https://www.example.com/feed.xml\").text","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B313.B314.B315.B316.B318.B319.B320.B405.B406.B407.B408.B409.B410","path":"secure_generated_code_194.py","start":{"line":7,"col":1,"offset":124},"end":{"line":7,"col":40,"offset":163},"extra":{"metavars":{},"message":"Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE)\nattacks. The Python documentation recommends the 'defusedxml' library instead. Use 'defusedxml'.\nSee https://github.com/tiran/defusedxml for more information.\n","metadata":{"cwe":"CWE-611: Improper Restriction of XML External Entity Reference","owasp":"A4: XML External Entities (XXE)","license":"MIT","source":"https://semgrep.dev/r/gitlab.bandit.B313.B314.B315.B316.B318.B319.B320.B405.B406.B407.B408.B409.B410","shortlink":"https://sg.run/DJ5G","semgrep.dev":{"rule":{"origin":"community","r_id":11552,"rule_id":"L1U4Yd","rv_id":13281,"url":"https://semgrep.dev/playground/r/DkTKjj/gitlab.bandit.B313.B314.B315.B316.B318.B319.B320.B405.B406.B407.B408.B409.B410","version_id":"DkTKjj"}}},"severity":"ERROR","fingerprint":"1ddea9c6d07d7145c62cc069dea260413a28b62d1543966cece7f79a85e9255cbd4946c3e40920b470e3b72ff2aa357f8fb59b229eb3e1759b61029fc0a04671_0","lines":"from xml.etree import ElementTree as ET","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.use-defused-xml.use-defused-xml","path":"secure_generated_code_194.py","start":{"line":7,"col":1,"offset":124},"end":{"line":7,"col":40,"offset":163},"extra":{"metavars":{},"message":"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and \"XML bombs\" can cause denial of service.","metadata":{"owasp":["A04:2017 - XML External Entities (XXE)","A05:2021 - Security Misconfiguration"],"cwe":["CWE-611: Improper Restriction of XML External Entity Reference"],"references":["https://docs.python.org/3/library/xml.html","https://github.com/tiran/defusedxml","https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["XML Injection"],"source":"https://semgrep.dev/r/python.lang.security.use-defused-xml.use-defused-xml","shortlink":"https://sg.run/kX47","semgrep.dev":{"rule":{"origin":"community","r_id":9628,"rule_id":"d8UjRx","rv_id":946407,"url":"https://semgrep.dev/playground/r/LjTXy3X/python.lang.security.use-defused-xml.use-defused-xml","version_id":"LjTXy3X"}}},"severity":"ERROR","fingerprint":"82a78052f9a6485ed8b152ae01f45e07d8bf07936b93bf1a5317eea2deba50e55982f97ee8ba2e850b518d4f6d26fe70868f294a06099e6546becefeec20049a_0","lines":"from xml.etree import ElementTree as ET","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B313.B314.B315.B316.B318.B319.B320.B405.B406.B407.B408.B409.B410","path":"secure_generated_code_194.py","start":{"line":8,"col":8,"offset":171},"end":{"line":8,"col":32,"offset":195},"extra":{"metavars":{},"message":"Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE)\nattacks. The Python documentation recommends the 'defusedxml' library instead. Use 'defusedxml'.\nSee https://github.com/tiran/defusedxml for more information.\n","metadata":{"cwe":"CWE-611: Improper Restriction of XML External Entity Reference","owasp":"A4: XML External Entities (XXE)","license":"MIT","source":"https://semgrep.dev/r/gitlab.bandit.B313.B314.B315.B316.B318.B319.B320.B405.B406.B407.B408.B409.B410","shortlink":"https://sg.run/DJ5G","semgrep.dev":{"rule":{"origin":"community","r_id":11552,"rule_id":"L1U4Yd","rv_id":13281,"url":"https://semgrep.dev/playground/r/DkTKjj/gitlab.bandit.B313.B314.B315.B316.B318.B319.B320.B405.B406.B407.B408.B409.B410","version_id":"DkTKjj"}}},"severity":"ERROR","fingerprint":"1ddea9c6d07d7145c62cc069dea260413a28b62d1543966cece7f79a85e9255cbd4946c3e40920b470e3b72ff2aa357f8fb59b229eb3e1759b61029fc0a04671_1","lines":"root = ET.fromstring(feed_data)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B314","path":"secure_generated_code_194.py","start":{"line":8,"col":8,"offset":171},"end":{"line":8,"col":32,"offset":195},"extra":{"metavars":{},"message":"The application was found using the `xml.etree` package for processing XML.\nPythons default xml processors suffer from various XML parsing vulnerabilities\nand care must be taken when handling XML data. Additionally, depending on the\nversion of Python, more critical vulnerabilities such as eXternal XML Entity\ninjection maybe exploitable.\n\nThe `etree` package suffers from the following security risks as of Python 3.7.1:\n* Billion laughs / exponential entity expansion - May allow an adversary to cause\n  a Denial of Service (DoS) against the application parsing arbitrary XML.\n* Quadratic blowup entity expansion - Similar to above, but requires a larger input\n  to cause the Denial of Service.\n\nTo remediate the above issues, consider using the\n[defusedxml](https://pypi.org/project/defusedxml/)\nlibrary when processing untrusted XML.\n\nExample parsing an XML document using defusedxml:\n```\nfrom defusedxml.ElementTree import parse\n\n# Parse the inventory.xml file\net = parse('inventory.xml')\n# Get the root element\nroot = et.getroot()\n# Work with the root element\n# ...\n```\n\nFor more information on the various XML parsers and their vulnerabilities please see:\n- https://docs.python.org/3/library/xml.html#xml-vulnerabilities\n\nFor more information on XML security see OWASP's guide:\n- https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#python\n","metadata":{"cwe":"CWE-611","owasp":["A4:2017-XML External Entities (XXE)","A03:2021-Injection"],"category":"security","shortDescription":"Improper restriction of XML external entity reference","security-severity":"Medium","primary_identifier":"bandit.B314","secondary_identifiers":[{"name":"Bandit Test ID B314","type":"bandit_test_id","value":"B314"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B314","shortlink":"https://sg.run/4g0l","semgrep.dev":{"rule":{"origin":"community","r_id":39388,"rule_id":"qNUKOW","rv_id":920138,"url":"https://semgrep.dev/playground/r/xyTdrZd/gitlab.bandit.B314","version_id":"xyTdrZd"}}},"severity":"WARNING","fingerprint":"21806bd1312bf2d6cfe7e6468f17e4321215bef0ef2048ab0548c650637351159e2d1f297c3d3911fbacac103de2ce5ab27f005bdac35ade66dae8ef9ef42c2a_0","lines":"root = ET.fromstring(feed_data)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.open-never-closed.open-never-closed","path":"secure_generated_code_194.py","start":{"line":18,"col":5,"offset":405},"end":{"line":18,"col":55,"offset":455},"extra":{"metavars":{"$F":{"start":{"line":18,"col":5,"offset":405},"end":{"line":18,"col":17,"offset":417},"abstract_content":"article_file"}},"message":"file object opened without corresponding close","metadata":{"category":"best-practice","technology":["python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.open-never-closed.open-never-closed","shortlink":"https://sg.run/9oN8","semgrep.dev":{"rule":{"origin":"community","r_id":9567,"rule_id":"x8Un4Q","rv_id":946256,"url":"https://semgrep.dev/playground/r/JdTDy9x/python.lang.best-practice.open-never-closed.open-never-closed","version_id":"JdTDy9x"}}},"severity":"ERROR","fingerprint":"2224a6ef3fff93fb0370ec3eef7093734096ec55cb6e567c18153dec303ab664762ad1a03f37c3bd1dde03a309d06c388876e3847626a87d0a9c2adf025235a9_0","lines":"    article_file = open(article['guid'] + \".xml\", \"w\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_194.py","start":{"line":18,"col":20,"offset":420},"end":{"line":18,"col":55,"offset":455},"extra":{"metavars":{"$FILE":{"start":{"line":18,"col":25,"offset":425},"end":{"line":18,"col":49,"offset":449},"abstract_content":"article['guid']+\".xml\""},"$MODE":{"start":{"line":18,"col":51,"offset":451},"end":{"line":18,"col":54,"offset":454},"abstract_content":"\"w\""}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"19cadee2501102b68d89f44b19d54af037b15a5564f23a84ec1948e83180452e3e19a698710e0ca8713b99c07bdf6bd2be19edce45429740def84dd62d67dcf7_0","lines":"    article_file = open(article['guid'] + \".xml\", \"w\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_195.py","start":{"line":5,"col":12,"offset":153},"end":{"line":5,"col":52,"offset":193},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":153},"end":{"line":5,"col":20,"offset":161},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":81},"svalue_end":{"line":4,"col":76,"offset":141},"svalue_abstract_content":"Template(\"<h1>{{ trivia_game.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"bed54162c7b2c65993ee117b033078288a283b9f4989433a37d1929a2348e9bcf83c6f215d17b45f4be0a93584dbd84e0bda9ae329ed684de0574608b3790d7f_0","lines":"    return template.render(trivia_game=trivia_game)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_196.py","start":{"line":5,"col":12,"offset":123},"end":{"line":5,"col":36,"offset":147},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":123},"end":{"line":5,"col":20,"offset":131},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":65},"svalue_end":{"line":4,"col":62,"offset":111},"svalue_abstract_content":"Template(\"{{ log.message }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"90ffe9f9d22d68292dddccb411e5980439355f3b2b1590d8c851ed6ed91a0e364bba98928d97e229e51af8961683f7f4ae795c32e2b7d73d5463a1714b90ebad_0","lines":"    return template.render(log=log)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_197.py","start":{"line":5,"col":12,"offset":155},"end":{"line":5,"col":46,"offset":189},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":155},"end":{"line":5,"col":20,"offset":163},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":84,"offset":143},"svalue_abstract_content":"Template(\"<h1>Playlist: {{ playlist.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"5306d6ad7cb2caa37477e0e9746892641ca5fdb50a2b4c8fa6c38cd389d285da4785f241c282d55effae1d54162c25e90f95617a5b4f244b623dddf44c42b230_0","lines":"    return template.render(playlist=playlist)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_198.py","start":{"line":5,"col":12,"offset":149},"end":{"line":5,"col":44,"offset":181},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":149},"end":{"line":5,"col":20,"offset":157},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":81},"svalue_end":{"line":4,"col":72,"offset":137},"svalue_abstract_content":"Template(\"<h1>{{ calorie.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"7286f1b254f1ac7a1a198abf53267b8424ecd334623fa19f6148c2f69ac9f6399af299c98ff21b573014277f6f5ec0dda0dff036ac6cc06d00ae865b2fcb9d16_0","lines":"    return template.render(calorie=calorie)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_199.py","start":{"line":5,"col":12,"offset":159},"end":{"line":5,"col":46,"offset":193},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":159},"end":{"line":5,"col":20,"offset":167},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":88,"offset":147},"svalue_abstract_content":"Template(\"<h1>Tax Form</h1><p>{{ tax_form.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"a5a3c076580e9ae35ac4a718c99864f175a3671c51e022ac25014995e2660b40a6266d595e2563f92bb5f1d4ef78d4f9cee35774f15b79fdc235e459cf5bfb9a_0","lines":"    return template.render(tax_form=tax_form)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_200.py","start":{"line":5,"col":12,"offset":124},"end":{"line":5,"col":42,"offset":154},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":124},"end":{"line":5,"col":20,"offset":132},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":71},"svalue_end":{"line":4,"col":57,"offset":112},"svalue_abstract_content":"Template(\"{{ string }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"310b8b583cb4fd8b44d0c61341e6ed271a414c050196de00fb388ab9f130341745dfaf10b6430cc9e76a2e36ea8bd32982917854969f8015034891f94d4f945e_0","lines":"    return template.render(string=string)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_201.py","start":{"line":5,"col":12,"offset":138},"end":{"line":5,"col":42,"offset":168},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":138},"end":{"line":5,"col":20,"offset":146},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":71},"svalue_end":{"line":4,"col":71,"offset":126},"svalue_abstract_content":"Template(\"<h1>{{ object.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"7154b729326d14eda41f010b2154885b6d780de3d7d8a0ab7e45e7c07d69ecc3e909e6d456fb600467b6024d9e015266a5b314b403b8b5080c294b632b706ce6_0","lines":"    return template.render(object=object)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_202.py","start":{"line":5,"col":12,"offset":123},"end":{"line":5,"col":38,"offset":149},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":123},"end":{"line":5,"col":20,"offset":131},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":72},"svalue_end":{"line":4,"col":55,"offset":111},"svalue_abstract_content":"Template(\"{{ mood }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"c4227bcec2787610686c1d19c48d851629a35ecc9b922136e7ef74bf8e028fb15b8173cf31cbf367570b9f43588296f2962ca639334648b84fd877d448fc1a00_0","lines":"    return template.render(mood=mood)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_203.py","start":{"line":4,"col":10,"offset":57},"end":{"line":4,"col":36,"offset":83},"extra":{"metavars":{"$FILE":{"start":{"line":4,"col":15,"offset":62},"end":{"line":4,"col":30,"offset":77},"abstract_content":"simulation_file"},"$MODE":{"start":{"line":4,"col":32,"offset":79},"end":{"line":4,"col":35,"offset":82},"abstract_content":"'r'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"25ba94f903f2a9a8888f20bfb87a24f254e5a9cb45a4f72c9ed573828a8dd0bb85578d1cd4ee9ace6caadefaa0ee62a8d437f6fcb7bb471fb6ec0db3f877f934_0","lines":"    with open(simulation_file, 'r') as simulation_file:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_203.py","start":{"line":7,"col":10,"offset":158},"end":{"line":7,"col":75,"offset":223},"extra":{"metavars":{"$FILE":{"start":{"line":7,"col":15,"offset":163},"end":{"line":7,"col":69,"offset":217},"abstract_content":"os.path.join(os.path.dirname(__file__)'results.txt')"},"$MODE":{"start":{"line":7,"col":71,"offset":219},"end":{"line":7,"col":74,"offset":222},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"15b7bcfc091d8b8e4d8de8e56f7c3728a431e2c985f23e704f7817384f5a0609462ffa3eb0a512669fcb1128a43388e7bbd482a52486c2167894f6b9408a243d_0","lines":"    with open(os.path.join(os.path.dirname(__file__), 'results.txt'), 'w') as results_file:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_204.py","start":{"line":6,"col":12,"offset":159},"end":{"line":6,"col":48,"offset":195},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":159},"end":{"line":6,"col":20,"offset":167},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":77},"svalue_end":{"line":4,"col":85,"offset":146},"svalue_abstract_content":"Template(\"<h1>RSVP List</h1><p>{{ rsvp_list }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"88bbb2f4842fe716028267f51a600de8bd3d04617a671b645ff5c1dd5c4596a68def7b27f675961f94f19f3c4bfc99f5b323076eb0ea6ad2dd5d9c3a3e274efb_0","lines":"    return template.render(rsvp_list=rsvp_list)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"secure_generated_code_205.py","start":{"line":9,"col":17,"offset":203},"end":{"line":9,"col":52,"offset":238},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":21,"offset":127},"end":{"line":7,"col":25,"offset":131},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":9,"col":19,"offset":205},"end":{"line":9,"col":23,"offset":209},"abstract_content":"<h3>"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"70f94c5f0b1fa6bb8ed22521acc05f84e38f0d52c6809cbc78087a9147d80c715f1fc29b7b7b478443b2a9a3d5adfe29ac502a7c9f0aae784f81768941c2f6b6_0","lines":"    note_html = f\"<h3>{title}</h3><p>{content}</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"secure_generated_code_205.py","start":{"line":7,"col":13,"offset":119},"end":{"line":7,"col":25,"offset":131}},"request.form"]],"intermediate_vars":[{"location":{"path":"secure_generated_code_205.py","start":{"line":7,"col":5,"offset":111},"end":{"line":7,"col":10,"offset":116}},"content":"title"}],"taint_sink":["CliLoc",[{"path":"secure_generated_code_205.py","start":{"line":9,"col":17,"offset":203},"end":{"line":9,"col":52,"offset":238}},"f\"<h3>{title}</h3><p>{content}</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"secure_generated_code_205.py","start":{"line":9,"col":17,"offset":203},"end":{"line":9,"col":52,"offset":238},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":21,"offset":127},"end":{"line":7,"col":25,"offset":131},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":9,"col":19,"offset":205},"end":{"line":9,"col":23,"offset":209},"abstract_content":"<h3>"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"d911da5d24475c2f51d8a7c512ff76aff401a24c59527c8a12614e711e6927ad8a6f0ec91b1e4df542dc6a8094c2741be9b28d74bca6d4d5cdd83f7ce4453fb4_0","lines":"    note_html = f\"<h3>{title}</h3><p>{content}</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"secure_generated_code_205.py","start":{"line":7,"col":13,"offset":119},"end":{"line":7,"col":25,"offset":131}},"request.form"]],"intermediate_vars":[{"location":{"path":"secure_generated_code_205.py","start":{"line":7,"col":5,"offset":111},"end":{"line":7,"col":10,"offset":116}},"content":"title"}],"taint_sink":["CliLoc",[{"path":"secure_generated_code_205.py","start":{"line":9,"col":17,"offset":203},"end":{"line":9,"col":52,"offset":238}},"f\"<h3>{title}</h3><p>{content}</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","path":"secure_generated_code_205.py","start":{"line":10,"col":14,"offset":252},"end":{"line":10,"col":23,"offset":261},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":7,"col":21,"offset":127},"end":{"line":7,"col":25,"offset":131},"abstract_content":"form"},"$FUNC":{"start":{"line":10,"col":8,"offset":246},"end":{"line":10,"col":13,"offset":251},"abstract_content":"chmod"},"$SINK":{"start":{"line":10,"col":14,"offset":252},"end":{"line":10,"col":23,"offset":261},"abstract_content":"note_html","propagated_value":{"svalue_start":{"line":9,"col":17,"offset":203},"svalue_end":{"line":9,"col":52,"offset":238},"svalue_abstract_content":"f\"<h3>{title}</h3><p>{content}</p>\""}}},"message":"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. In Flask apps, consider using the Werkzeug util `werkzeug.utils.secure_filename()` to sanitize paths and filenames.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Path Traversal with Flask","functional-categories":["file::sink::file-access::fileinput","file::sink::file-access::io","file::sink::file-access::linecache","file::sink::file-access::os","file::sink::file-access::shutil","file::sink::file-access::stdlib","file::sink::file-access::stdlib2","file::sink::file-access::stdlib3","file::sink::file-access::tempfile","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::url-path-params::flask","web::source::url-query-string::flask"],"owasp":["A01:2021 - Broken Access Control","A05:2017 - Broken Access Control"],"references":["https://flask.palletsprojects.com/en/2.3.x/patterns/fileuploads/","https://owasp.org/Top10/A01_2021-Broken_Access_Control","https://owasp.org/www-community/attacks/Path_Traversal","https://portswigger.net/web-security/file-path-traversal","https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.utils.secure_filename"],"technology":["codecs","fileaccess","fileinput","flask","flask-wtf","io","linecache","os","shutil","stdlib","stdlib2","stdlib3","tempfile","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","shortlink":"https://sg.run/6J4gW","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116515,"rule_id":"2ZUzRLQ","rv_id":1042253,"url":"https://semgrep.dev/playground/r/nWTPn9A/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","version_id":"nWTPn9A"}}},"severity":"ERROR","fingerprint":"7668e005e45d42756317fdd6e3599586ec00cdfe0898da4e8f7e416f95c5063f8b62ee3753ce5886e7d632cd439d9a4c45b5dd2c891420becf4b8ae797bafc21_0","lines":"    os.chmod(note_html, 0o600)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"secure_generated_code_205.py","start":{"line":7,"col":13,"offset":119},"end":{"line":7,"col":38,"offset":144}},"request.form.get(\"title\")"]],"intermediate_vars":[{"location":{"path":"secure_generated_code_205.py","start":{"line":7,"col":5,"offset":111},"end":{"line":7,"col":10,"offset":116}},"content":"title"},{"location":{"path":"secure_generated_code_205.py","start":{"line":9,"col":5,"offset":191},"end":{"line":9,"col":14,"offset":200}},"content":"note_html"}],"taint_sink":["CliLoc",[{"path":"secure_generated_code_205.py","start":{"line":10,"col":14,"offset":252},"end":{"line":10,"col":23,"offset":261}},"note_html"]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_206.py","start":{"line":5,"col":12,"offset":151},"end":{"line":5,"col":31,"offset":170},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":151},"end":{"line":5,"col":13,"offset":152},"abstract_content":"t","propagated_value":{"svalue_start":{"line":4,"col":9,"offset":70},"svalue_end":{"line":4,"col":78,"offset":139},"svalue_abstract_content":"Template(\"<h1>Search Results</h1><p>{{ jobs }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"670023db7044d98d2c090a022e229dd9215ab12a49307f2ac95fbb0ffe754e585994ea97671c24bbbf25fa3669c05e324f0ba29d723ecdbe0c2a86600016855f_0","lines":"    return t.render(jobs=jobs)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_208.py","start":{"line":6,"col":10,"offset":80},"end":{"line":6,"col":29,"offset":99},"extra":{"metavars":{"$FILE":{"start":{"line":6,"col":15,"offset":85},"end":{"line":6,"col":23,"offset":93},"abstract_content":"filename","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":49},"svalue_end":{"line":4,"col":36,"offset":69},"svalue_abstract_content":"'/shared/report.txt'"}},"$MODE":{"start":{"line":6,"col":25,"offset":95},"end":{"line":6,"col":28,"offset":98},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"6c2bdb5a80219e4c602f14284cd8fd6b3df37621eb7ccfb54a6c7ae136ba0f7e19829913b460d3211571e4a22e0a5900ecca2dcd87cb5ba189e5f87b78048a5b_0","lines":"    with open(filename, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_212.py","start":{"line":8,"col":14,"offset":142},"end":{"line":8,"col":36,"offset":164},"extra":{"metavars":{"$FILE":{"start":{"line":8,"col":19,"offset":147},"end":{"line":8,"col":30,"offset":158},"abstract_content":"args.output"},"$MODE":{"start":{"line":8,"col":32,"offset":160},"end":{"line":8,"col":35,"offset":163},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"503e5073a544c279714fcc498400908e70292045b13cedb98a825c997fa42e6057a508ff1cf57ed26dea5996520e77f928aa680cd597c16f3bdfa99ec2c4fbed_0","lines":"        with open(args.output, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B101","path":"secure_generated_code_215.py","start":{"line":15,"col":5,"offset":303},"end":{"line":15,"col":32,"offset":330},"extra":{"metavars":{},"message":"The application was found using `assert` in non-test code. Usually reserved for debug and test\ncode, the `assert`\nfunction is commonly used to test conditions before continuing execution. However, enclosed\ncode will be removed\nwhen compiling Python code to optimized byte code. Depending on the assertion and subsequent\nlogic, this could\nlead to undefined behavior of the application or application crashes.\n\nTo remediate this issue, remove the `assert` calls. If necessary, replace them with either `if`\nconditions or\n`try/except` blocks.\n\nExample using `try/except` instead of `assert`:\n```\n# Below try/except is equal to the assert statement of:\n# assert user.is_authenticated(), \"user must be authenticated\"\ntry:\n    if not user.is_authenticated():\n        raise AuthError(\"user must be authenticated\")\nexcept AuthError as e:\n    # Handle error\n    # ...\n    # Return, do not continue processing\n    return\n```\n","metadata":{"cwe":"CWE-754","category":"security","shortDescription":"Improper check for unusual or exceptional conditions","owasp":["A6:2017-Security Misconfiguration","A05:2021-Security Misconfiguration"],"security-severity":"Info","primary_identifier":"bandit.B101","secondary_identifiers":[{"name":"Bandit Test ID B101","type":"bandit_test_id","value":"B101"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B101","shortlink":"https://sg.run/yzWA","semgrep.dev":{"rule":{"origin":"community","r_id":11524,"rule_id":"KxU4lp","rv_id":920076,"url":"https://semgrep.dev/playground/r/rxTjvjK/gitlab.bandit.B101","version_id":"rxTjvjK"}}},"severity":"INFO","fingerprint":"1d0998effa4df5442e5b34b3da619e2de9b51a50586978bd9432ec7c407ad0e467e256ef7c86727e972a8812a1ef89c82fda6f2406255ba6aa4e4f28c4b820b6_0","lines":"    assert os.path.exists(path)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_215.py","start":{"line":19,"col":10,"offset":423},"end":{"line":19,"col":20,"offset":433},"extra":{"metavars":{"$FILE":{"start":{"line":19,"col":15,"offset":428},"end":{"line":19,"col":19,"offset":432},"abstract_content":"path","propagated_value":{"svalue_start":{"line":18,"col":12,"offset":375},"svalue_end":{"line":18,"col":50,"offset":413},"svalue_abstract_content":"os.path.join(dirpath'test_file.txt')"}}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"63d73c0b20c93a71bb930514aa6f59fdd6e3c9fd5cd64dbcb8025bd59d433abf427216124a60760d9ccba8e198ee99b930f922207b2f33bdb9f791f544629f0d_0","lines":"    with open(path) as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B101","path":"secure_generated_code_215.py","start":{"line":20,"col":9,"offset":448},"end":{"line":20,"col":39,"offset":478},"extra":{"metavars":{},"message":"The application was found using `assert` in non-test code. Usually reserved for debug and test\ncode, the `assert`\nfunction is commonly used to test conditions before continuing execution. However, enclosed\ncode will be removed\nwhen compiling Python code to optimized byte code. Depending on the assertion and subsequent\nlogic, this could\nlead to undefined behavior of the application or application crashes.\n\nTo remediate this issue, remove the `assert` calls. If necessary, replace them with either `if`\nconditions or\n`try/except` blocks.\n\nExample using `try/except` instead of `assert`:\n```\n# Below try/except is equal to the assert statement of:\n# assert user.is_authenticated(), \"user must be authenticated\"\ntry:\n    if not user.is_authenticated():\n        raise AuthError(\"user must be authenticated\")\nexcept AuthError as e:\n    # Handle error\n    # ...\n    # Return, do not continue processing\n    return\n```\n","metadata":{"cwe":"CWE-754","category":"security","shortDescription":"Improper check for unusual or exceptional conditions","owasp":["A6:2017-Security Misconfiguration","A05:2021-Security Misconfiguration"],"security-severity":"Info","primary_identifier":"bandit.B101","secondary_identifiers":[{"name":"Bandit Test ID B101","type":"bandit_test_id","value":"B101"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B101","shortlink":"https://sg.run/yzWA","semgrep.dev":{"rule":{"origin":"community","r_id":11524,"rule_id":"KxU4lp","rv_id":920076,"url":"https://semgrep.dev/playground/r/rxTjvjK/gitlab.bandit.B101","version_id":"rxTjvjK"}}},"severity":"INFO","fingerprint":"1d0998effa4df5442e5b34b3da619e2de9b51a50586978bd9432ec7c407ad0e467e256ef7c86727e972a8812a1ef89c82fda6f2406255ba6aa4e4f28c4b820b6_1","lines":"        assert f.read() == 'test data'","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"secure_generated_code_216.py","start":{"line":9,"col":12,"offset":191},"end":{"line":12,"col":9,"offset":273},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"e024e5a8ff135394a075838b568d369331acbfe4a8ffb821f865526c613911b36e1ba58851b19c413c306615e6f7546d3576e9a7357b3e40b4c45b5134351c4c_0","lines":"    return render_template_string(f\"\"\"\n    <h1>Upcoming Events</h1>\n    {{ events }}\n    \"\"\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_217.py","start":{"line":9,"col":10,"offset":149},"end":{"line":9,"col":25,"offset":164},"extra":{"metavars":{"$FILE":{"start":{"line":9,"col":15,"offset":154},"end":{"line":9,"col":19,"offset":158},"abstract_content":"path","propagated_value":{"svalue_start":{"line":7,"col":12,"offset":104},"svalue_end":{"line":7,"col":46,"offset":138},"svalue_abstract_content":"tests_dir/f\"test_{test_name}.py\""}},"$MODE":{"start":{"line":9,"col":21,"offset":160},"end":{"line":9,"col":24,"offset":163},"abstract_content":"\"w\""}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"fd651baf39b5695f1f1ab5899b7b3a1cabdb2802e295cb54f03241ea1b1ee832560220f254f0bb116bb1fe68bdc5064991066e47d5da7179285861085b3ab2be_0","lines":"    with open(path, \"w\") as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.db.generic-sql-flask.generic-sql-flask","path":"secure_generated_code_219.py","start":{"line":22,"col":24,"offset":752},"end":{"line":22,"col":29,"offset":757},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":16,"col":21,"offset":516},"end":{"line":16,"col":25,"offset":520},"abstract_content":"form"},"$AIOMYSQL_CURSOR":{"start":{"line":22,"col":5,"offset":733},"end":{"line":22,"col":15,"offset":743},"abstract_content":"db.session"},"$SINK":{"start":{"line":22,"col":24,"offset":752},"end":{"line":22,"col":29,"offset":757},"abstract_content":"query"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. The driver API has the ability to bind parameters to the query in a safe way. Make sure not to dynamically create SQL queries from user-influenced inputs. If you cannot avoid this, either escape the data properly or create an allowlist to check the value.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with Flask","functional-categories":["db::sink::query::aiomysql","db::sink::query::aiopg","db::sink::query::mysql-connector","db::sink::query::mysqldb","db::sink::query::pep249","db::sink::query::psycopg2","db::sink::query::pymssql","db::sink::query::pymysql","db::sink::query::pyodbc","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::url-path-params::flask","web::source::url-query-string::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["aiomysql","aiopg","db-api","flask","flask-wtf","mssql","mysql","mysql-connector","mysqldb","pep249","postgres","psycopg2","pymssql","pymysql","pyodbc","sql","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask","shortlink":"https://sg.run/AbKXQ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116506,"rule_id":"0oULG2d","rv_id":1042229,"url":"https://semgrep.dev/playground/r/qkTxpO2/python.flask.db.generic-sql-flask.generic-sql-flask","version_id":"qkTxpO2"}}},"severity":"CRITICAL","fingerprint":"6e241d6ce03dcdfc6f313bd3d29e9c3759cff8f752697475f4aaa9ce4e173108078147b01228e334c13db04d462c99268e4dfeac3a517c4567d13ab3b75270fe_0","lines":"    db.session.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"secure_generated_code_219.py","start":{"line":16,"col":13,"offset":508},"end":{"line":16,"col":34,"offset":529}},"request.form['title']"]],"intermediate_vars":[{"location":{"path":"secure_generated_code_219.py","start":{"line":16,"col":5,"offset":500},"end":{"line":16,"col":10,"offset":505}},"content":"title"},{"location":{"path":"secure_generated_code_219.py","start":{"line":20,"col":5,"offset":621},"end":{"line":20,"col":10,"offset":626}},"content":"query"}],"taint_sink":["CliLoc",[{"path":"secure_generated_code_219.py","start":{"line":22,"col":24,"offset":752},"end":{"line":22,"col":29,"offset":757}},"query"]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_221.py","start":{"line":5,"col":12,"offset":137},"end":{"line":5,"col":44,"offset":169},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":137},"end":{"line":5,"col":20,"offset":145},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":64},"svalue_end":{"line":4,"col":77,"offset":125},"svalue_abstract_content":"jinja2.Template(\"<p>{{ patient.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"1d21cbd53cc433b6fa4502cf83130cbd1eee1df896f09dd768aa46f076ab679a28b4f7dcbd030c6832a1b8ff35688d701cd5eb49df1e6edd5e6f7ea8211cdcec_0","lines":"    return template.render(patient=patient)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_224.py","start":{"line":4,"col":10,"offset":44},"end":{"line":4,"col":30,"offset":64},"extra":{"metavars":{"$FILE":{"start":{"line":4,"col":15,"offset":49},"end":{"line":4,"col":24,"offset":58},"abstract_content":"'log.txt'"},"$MODE":{"start":{"line":4,"col":26,"offset":60},"end":{"line":4,"col":29,"offset":63},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"e6d89efe04d6a1b6273b5e4fed5beb114b90e5f1ec8ba3b79ae4f2c93b58775925925458e188cfd59e694b60a3097f41e5d6b4ac9c3c349e88eec76e0e63ce0a_0","lines":"    with open('log.txt', 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_225.py","start":{"line":5,"col":12,"offset":136},"end":{"line":5,"col":40,"offset":164},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":136},"end":{"line":5,"col":20,"offset":144},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":69},"svalue_end":{"line":4,"col":71,"offset":124},"svalue_abstract_content":"Template(\"<h1>{{ movie.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"0004cdb91e2143de96815f0738aff091ae0120b6522fd1168c3b578dfa733844edffbe2424ecb5cc4a2c1703c5f0509d9a4ee22002633fe7d24a5c31831a4010_0","lines":"    return template.render(movie=movie)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_226.py","start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":38,"offset":171},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":20,"offset":153},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":67},"svalue_end":{"line":4,"col":82,"offset":133},"svalue_abstract_content":"Template(\"<a href=\\\"{{ link }}\\\">{{ link }}</a>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"b2ff246f1ae66e3aac21f8ce2dabcdafe47438c11ea77b881aca2fa99d8c8cff30de88bca9d7412f2a3dcca22ee292a5bb0e7d7d3c95eb2e6af30358bba3a1f4_0","lines":"    return template.render(link=link)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_227.py","start":{"line":5,"col":12,"offset":118},"end":{"line":5,"col":38,"offset":144},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":118},"end":{"line":5,"col":20,"offset":126},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":67},"svalue_end":{"line":4,"col":55,"offset":106},"svalue_abstract_content":"Template(\"{{ data }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"980ca59b376bc85fc775ad0cb250609a6890374b82615136625fd028afc663cdc99689f41e98972648b06d1a56c676b6807178a4ee2f32d6499ddb2f63490bfc_0","lines":"    return template.render(data=data)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_228.py","start":{"line":5,"col":12,"offset":178},"end":{"line":5,"col":58,"offset":224},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":178},"end":{"line":5,"col":20,"offset":186},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":87},"svalue_end":{"line":4,"col":95,"offset":166},"svalue_abstract_content":"Template(\"<h1>Dream vacation: {{ dream_vacation.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"48bf4ddfa3c22509204d9cf44a97e8a15341a33c7bb4af4575d8e64b83a43af72074d4129713db0238129f3df4fd6b610d80eaced64720b265fa7394692c93e7_0","lines":"    return template.render(dream_vacation=dream_vacation)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_229.py","start":{"line":5,"col":12,"offset":136},"end":{"line":5,"col":40,"offset":164},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":136},"end":{"line":5,"col":20,"offset":144},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":69},"svalue_end":{"line":4,"col":71,"offset":124},"svalue_abstract_content":"Template(\"<h1>{{ event.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"20e548d5f1d3d99e392943243ad1502ba4e30303de1fe57da2a88009ca1786de71cb94eb7773c6e17afdc365c8ba928fe9a74290334844c9b61c21aadc0632c3_0","lines":"    return template.render(event=event)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_23.py","start":{"line":5,"col":12,"offset":158},"end":{"line":5,"col":67,"offset":213},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":158},"end":{"line":5,"col":20,"offset":166},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":67},"svalue_end":{"line":4,"col":95,"offset":146},"svalue_abstract_content":"Template(\"<h1>{{ post.title }}</h1><p>{{ post.content }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"e0d92e93cbaa03ad24290f097d5f1d7130f1db74ceb5a5beadb87b27a9d7e05bb4250368307286b4f5a8f092c9a275cdbbf0abf3c1cf6d599622f6a1499484ca_0","lines":"    return template.render(title=post.title, content=post.content)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_230.py","start":{"line":5,"col":12,"offset":150},"end":{"line":5,"col":44,"offset":182},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":150},"end":{"line":5,"col":20,"offset":158},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":81,"offset":138},"svalue_abstract_content":"Template(\"<h1>Metrics</h1><p>{{ metrics }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"cc8e4d33a265ba9359b51add72f5a27e4268c9297be710be198cda6587b80595427bd7ed028fe0d182c1d650af4e696ec7915aad714083ec6d3138b4546d961b_0","lines":"    return template.render(metrics=metrics)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_232.py","start":{"line":5,"col":12,"offset":139},"end":{"line":5,"col":38,"offset":165},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":139},"end":{"line":5,"col":20,"offset":147},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":67},"svalue_end":{"line":4,"col":76,"offset":127},"svalue_abstract_content":"Template(\"<h1>Post: {{ post.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"278561d4111c3921f3ea3223ea44f0a1d0427d1d05b25dc7d37847a6ed6ad71829397ae360614981cc08f13aaba565e0d2a61045a197466eda5c4ac917582beb_0","lines":"    return template.render(post=post)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.db.generic-sql-flask.generic-sql-flask","path":"secure_generated_code_236.py","start":{"line":21,"col":20,"offset":477},"end":{"line":21,"col":23,"offset":480},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":15,"col":28,"offset":317},"end":{"line":15,"col":32,"offset":321},"abstract_content":"args"},"$AIOMYSQL_CURSOR":{"start":{"line":20,"col":14,"offset":446},"end":{"line":20,"col":25,"offset":457},"abstract_content":"db.cursor()"},"$SINK":{"start":{"line":21,"col":20,"offset":477},"end":{"line":21,"col":23,"offset":480},"abstract_content":"sql"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. The driver API has the ability to bind parameters to the query in a safe way. Make sure not to dynamically create SQL queries from user-influenced inputs. If you cannot avoid this, either escape the data properly or create an allowlist to check the value.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with Flask","functional-categories":["db::sink::query::aiomysql","db::sink::query::aiopg","db::sink::query::mysql-connector","db::sink::query::mysqldb","db::sink::query::pep249","db::sink::query::psycopg2","db::sink::query::pymssql","db::sink::query::pymysql","db::sink::query::pyodbc","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::url-path-params::flask","web::source::url-query-string::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["aiomysql","aiopg","db-api","flask","flask-wtf","mssql","mysql","mysql-connector","mysqldb","pep249","postgres","psycopg2","pymssql","pymysql","pyodbc","sql","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask","shortlink":"https://sg.run/AbKXQ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116506,"rule_id":"0oULG2d","rv_id":1042229,"url":"https://semgrep.dev/playground/r/qkTxpO2/python.flask.db.generic-sql-flask.generic-sql-flask","version_id":"qkTxpO2"}}},"severity":"CRITICAL","fingerprint":"7d91def5ee794733f17f3b02d948ee21fe34739885b0cf06bffdc00bafd63bd84ca3488df200db0e6219e93996cd6247295b9915e8d63f68fa12f1019ca7accb_0","lines":"    cursor.execute(sql)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"secure_generated_code_236.py","start":{"line":15,"col":20,"offset":309},"end":{"line":15,"col":52,"offset":341}},"request.args.get('volunteer_id')"]],"intermediate_vars":[{"location":{"path":"secure_generated_code_236.py","start":{"line":15,"col":5,"offset":294},"end":{"line":15,"col":17,"offset":306}},"content":"volunteer_id"},{"location":{"path":"secure_generated_code_236.py","start":{"line":17,"col":5,"offset":347},"end":{"line":17,"col":8,"offset":350}},"content":"sql"}],"taint_sink":["CliLoc",[{"path":"secure_generated_code_236.py","start":{"line":21,"col":20,"offset":477},"end":{"line":21,"col":23,"offset":480}},"sql"]]},"engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B113","path":"secure_generated_code_237.py","start":{"line":7,"col":12,"offset":100},"end":{"line":7,"col":29,"offset":117},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$METHOD":{"start":{"line":7,"col":21,"offset":109},"end":{"line":7,"col":24,"offset":112},"abstract_content":"get"}},"message":"The application was found using the `requests` module without configuring a timeout value for\nconnections. This could lead to uncontrolled resource consumption where the application could\nrun out of\nsocket descriptors, effectively causing a Denial of Service (DoS).\n\nTo remediate this issue, pass in a `timeout=` argument to each `requests` call.\n\nExample using a timeout for an HTTP GET request:\n```\n# Issue a GET request to https://example.com with a timeout of 10 seconds\nresponse = requests.get('https://example.com', timeout=10)\n# Work with the response object\n# ...\n```\n\nFor more information on using the requests module see:\n- https://requests.readthedocs.io/en/latest/api/\n","metadata":{"cwe":"CWE-400","category":"security","shortDescription":"Uncontrolled resource consumption","owasp":["A6:2017-Security Misconfiguration","A05:2021-Security Misconfiguration"],"security-severity":"Medium","primary_identifier":"bandit.B113","secondary_identifiers":[{"name":"Bandit Test ID B113","type":"bandit_test_id","value":"B113"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B113","shortlink":"https://sg.run/PoEq","semgrep.dev":{"rule":{"origin":"community","r_id":47601,"rule_id":"OrULKb","rv_id":920124,"url":"https://semgrep.dev/playground/r/o5TK1Z7/gitlab.bandit.B113","version_id":"o5TK1Z7"}}},"severity":"WARNING","fingerprint":"42e9731268b9fa857aabf0195a44a056e4f65d7402d7a24bd25cbc607cfbb35005f84e660b5a179d18ced0987b4582d0e146a10072cf551bcc23871e25d06969_0","lines":"    page = requests.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-raise-for-status.use-raise-for-status","path":"secure_generated_code_237.py","start":{"line":7,"col":12,"offset":100},"end":{"line":7,"col":29,"offset":117},"extra":{"metavars":{},"message":"There's an HTTP request made with requests, but the raise_for_status() utility method isn't used. This can result in request errors going unnoticed and your code behaving in unexpected ways, such as if your authorization API returns a 500 error while you're only checking for a 401.","metadata":{"references":["https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status"],"category":"best-practice","technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-raise-for-status.use-raise-for-status","shortlink":"https://sg.run/J3Xw","semgrep.dev":{"rule":{"origin":"community","r_id":9690,"rule_id":"DbUWd2","rv_id":946440,"url":"https://semgrep.dev/playground/r/kbTYkXK/python.requests.best-practice.use-raise-for-status.use-raise-for-status","version_id":"kbTYkXK"}}},"severity":"WARNING","fingerprint":"f0f0e64eb77ff06c60c06379ee42b24ed97e540bea307e170208d57e70ce233170fbafaa7e12e64a66752fea97c81e12a28f79ae8f2d1922b913aa10dd292aad_0","lines":"    page = requests.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-timeout.use-timeout","path":"secure_generated_code_237.py","start":{"line":7,"col":12,"offset":100},"end":{"line":7,"col":29,"offset":117},"extra":{"metavars":{},"message":"Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.","fix":"requests.get(url, timeout=30)","metadata":{"category":"best-practice","references":["https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts","https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts"],"technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-timeout.use-timeout","shortlink":"https://sg.run/R8kO","semgrep.dev":{"rule":{"origin":"community","r_id":9693,"rule_id":"KxU42G","rv_id":946443,"url":"https://semgrep.dev/playground/r/O9TX3Yn/python.requests.best-practice.use-timeout.use-timeout","version_id":"O9TX3Yn"}}},"severity":"WARNING","fingerprint":"75b753b4fd8b39e7afaea4871fd3c7f7fef5c7af7e79d3041286baeb9189d8e7baf88e6d48b24a39050d3256b58330a101913f6f403154f2a5a7879a7fb2a0c0_0","lines":"    page = requests.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_237.py","start":{"line":20,"col":10,"offset":488},"end":{"line":20,"col":29,"offset":507},"extra":{"metavars":{"$FILE":{"start":{"line":20,"col":15,"offset":493},"end":{"line":20,"col":23,"offset":501},"abstract_content":"filename"},"$MODE":{"start":{"line":20,"col":25,"offset":503},"end":{"line":20,"col":28,"offset":506},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"692d8faf0231b301fd52d4f59f0f44d8b3bec71eb195055e9ce7dc179c3ceea57fefbe1769fe6a82285c2023de2980de726082f2b5edfeb3cd20ee9d70ba98b4_0","lines":"    with open(filename, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_239.py","start":{"line":5,"col":12,"offset":130},"end":{"line":5,"col":38,"offset":156},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":130},"end":{"line":5,"col":20,"offset":138},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":58},"svalue_end":{"line":4,"col":76,"offset":118},"svalue_abstract_content":"jinja2.Template(\"<h1>{{ user.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"e70af234f4a0a5ae5f70dd062d7a5fd7d946e3c5a6a6547501d46a8e8e83bccf18e558c8bcfa3820abe605fb9bea02449fb83121bba50a90b5480f3c5351c6ec_0","lines":"    return template.render(user=user)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_24.py","start":{"line":7,"col":6,"offset":159},"end":{"line":7,"col":31,"offset":184},"extra":{"metavars":{"$FILE":{"start":{"line":7,"col":11,"offset":164},"end":{"line":7,"col":25,"offset":178},"abstract_content":"'sitemap.html'"},"$MODE":{"start":{"line":7,"col":27,"offset":180},"end":{"line":7,"col":30,"offset":183},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"f0746acd9cde13305ec83f9570113242465052b10cc43ff698e454ce12c59b16f3df047cd92f5341b378d810b321904984def9d5c42e54b3ed7f10bb9b69a0e7_0","lines":"with open('sitemap.html', 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_246.py","start":{"line":5,"col":12,"offset":131},"end":{"line":5,"col":31,"offset":150},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":131},"end":{"line":5,"col":13,"offset":132},"abstract_content":"t","propagated_value":{"svalue_start":{"line":4,"col":9,"offset":77},"svalue_end":{"line":4,"col":51,"offset":119},"svalue_abstract_content":"Template(template_string autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"b203991a175ad14ddee20551a6588cfe5caeebb86a443107234c2f2e68ea4716dd3400d52cf64c348b470a1a46ec4c91a5f099b88ed92846465e1e2b16eb426c_0","lines":"    return t.render(**context)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_247.py","start":{"line":5,"col":12,"offset":165},"end":{"line":5,"col":54,"offset":207},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":165},"end":{"line":5,"col":20,"offset":173},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":92},"svalue_end":{"line":4,"col":77,"offset":153},"svalue_abstract_content":"Template(\"<h1>{{ packing_list.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"d7364212315ceb092515fe0e91b58a17742624911819b85f0ebee7a3afc50deb7515bc0a75dac978fb65c9854dd6c9e5e15d84b36cd66305a3f7498583224e91_0","lines":"    return template.render(packing_list=packing_list)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_248.py","start":{"line":6,"col":10,"offset":96},"end":{"line":6,"col":25,"offset":111},"extra":{"metavars":{"$FILE":{"start":{"line":6,"col":15,"offset":101},"end":{"line":6,"col":19,"offset":105},"abstract_content":"path"},"$MODE":{"start":{"line":6,"col":21,"offset":107},"end":{"line":6,"col":24,"offset":110},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"340485206c9f4a29a1ecf59ddc2878028e978a162116f79b38c01b2b80af8d4e1bbcbc54493058e3cad686e0587a96f87a6f27029ae7662eca8481ce619426b0_0","lines":"    with open(path, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_248.py","start":{"line":12,"col":6,"offset":223},"end":{"line":12,"col":16,"offset":233},"extra":{"metavars":{"$FILE":{"start":{"line":12,"col":11,"offset":228},"end":{"line":12,"col":15,"offset":232},"abstract_content":"path","propagated_value":{"svalue_start":{"line":11,"col":8,"offset":193},"svalue_end":{"line":11,"col":32,"offset":217},"svalue_abstract_content":"create_file('test data')"}}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"b2f1c7d9655a9a7637a89249e564e3fd773be3e47fb6a9f6d1bca54a40ae596ce36f915dfce7f090880ca8152f7c43fb439907d8e296e2ad87ddbad52e897727_0","lines":"with open(path) as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B101","path":"secure_generated_code_248.py","start":{"line":15,"col":1,"offset":266},"end":{"line":15,"col":29,"offset":294},"extra":{"metavars":{},"message":"The application was found using `assert` in non-test code. Usually reserved for debug and test\ncode, the `assert`\nfunction is commonly used to test conditions before continuing execution. However, enclosed\ncode will be removed\nwhen compiling Python code to optimized byte code. Depending on the assertion and subsequent\nlogic, this could\nlead to undefined behavior of the application or application crashes.\n\nTo remediate this issue, remove the `assert` calls. If necessary, replace them with either `if`\nconditions or\n`try/except` blocks.\n\nExample using `try/except` instead of `assert`:\n```\n# Below try/except is equal to the assert statement of:\n# assert user.is_authenticated(), \"user must be authenticated\"\ntry:\n    if not user.is_authenticated():\n        raise AuthError(\"user must be authenticated\")\nexcept AuthError as e:\n    # Handle error\n    # ...\n    # Return, do not continue processing\n    return\n```\n","metadata":{"cwe":"CWE-754","category":"security","shortDescription":"Improper check for unusual or exceptional conditions","owasp":["A6:2017-Security Misconfiguration","A05:2021-Security Misconfiguration"],"security-severity":"Info","primary_identifier":"bandit.B101","secondary_identifiers":[{"name":"Bandit Test ID B101","type":"bandit_test_id","value":"B101"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B101","shortlink":"https://sg.run/yzWA","semgrep.dev":{"rule":{"origin":"community","r_id":11524,"rule_id":"KxU4lp","rv_id":920076,"url":"https://semgrep.dev/playground/r/rxTjvjK/gitlab.bandit.B101","version_id":"rxTjvjK"}}},"severity":"INFO","fingerprint":"78e6cf382b3b461a17dad8d507cc251860c4a875393fbef3e50bab6f6c666310c7e7b0878d54fbb33a3a0a1e171b419bfbf4095d4d4425adebcce46700b3ce32_0","lines":"assert data == ['test data']","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_251.py","start":{"line":6,"col":12,"offset":180},"end":{"line":6,"col":44,"offset":212},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":180},"end":{"line":6,"col":20,"offset":188},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":85},"svalue_end":{"line":4,"col":98,"offset":167},"svalue_abstract_content":"Template(\"<h1>Fitness instructors</h1><p>{{ fitness.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"f2e9a2d3aefb306506ebdff2fb9187912d1bd1d2dab651126c64ae5adb60bbc6070e359848aedec4afae172eafe1c3be48ab014d70c64e1ee5f438ce442e2302_0","lines":"    return template.render(fitness=fitness)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_252.py","start":{"line":6,"col":12,"offset":155},"end":{"line":6,"col":46,"offset":189},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":155},"end":{"line":6,"col":20,"offset":163},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":83,"offset":142},"svalue_abstract_content":"Template(\"<h1>Balances</h1><p>{{ balances }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"61d06381a121d633224e6764b444939ab6a69283dc06df764ea13ea57851c48958a9cb9ebbf4272b8a2f9af76e066583e89bcbb81387f40a7f177d9df242b7ae_0","lines":"    return template.render(balances=balances)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_253.py","start":{"line":5,"col":12,"offset":142},"end":{"line":5,"col":40,"offset":170},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":142},"end":{"line":5,"col":20,"offset":150},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":69},"svalue_end":{"line":4,"col":77,"offset":130},"svalue_abstract_content":"Template(\"<h1>Track: {{ track.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"b1e40f4d2f474992065df65f132ceebef8ff70a849db5ccfeedec1e04250838f4b423d71c208bb28ecef5ccb65aacd24b53d9bc8d0959380e5a6dd796145427b_0","lines":"    return template.render(track=track)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_254.py","start":{"line":5,"col":12,"offset":250},"end":{"line":5,"col":52,"offset":290},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":250},"end":{"line":5,"col":20,"offset":258},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":81},"svalue_end":{"line":4,"col":173,"offset":238},"svalue_abstract_content":"Template(\"<h1>{{ lesson_plan.subject }}</h1><p>{{ lesson_plan.topic }}</p><p>{{ lesson_plan.grade }}</p><p>{{ lesson_plan.standards }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"413890b7913e9eef4937bb06e444c9c6b0720dc9a7c111c80b508e60099f6e36682a2a36757baef63bff3bc89b30c580a6955b05ead1b0ed6e99003a50d96053_0","lines":"    return template.render(lesson_plan=lesson_plan)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_255.py","start":{"line":5,"col":12,"offset":148},"end":{"line":5,"col":38,"offset":174},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":148},"end":{"line":5,"col":20,"offset":156},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":77,"offset":136},"svalue_abstract_content":"Template(\"<h1>{{ user.display_name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"3d10f63217389f33e66d4a9660d964664cdfbcb3e6e92425f47b8a4a9242bad834c323ffb5ce7464dfa701c9a0ff483b5dbd0a03dcca0b71af51b48a8003a065_0","lines":"    return template.render(user=user)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_256.py","start":{"line":6,"col":12,"offset":192},"end":{"line":6,"col":72,"offset":252},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":192},"end":{"line":6,"col":20,"offset":200},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":105},"svalue_end":{"line":4,"col":90,"offset":179},"svalue_abstract_content":"Template(\"<p>{{ name }} {{ email }} {{ interests }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"ce1f9ab5afe3388c74ecffba476bee0a2c103eaa0ec9913be7079178574828b9ca1ab3c4742eabb7fa5b54046eda943fea8a92913c2087ac904810648613bbbf_0","lines":"    return template.render(name=name, email=email, interests=interests)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_257.py","start":{"line":4,"col":10,"offset":53},"end":{"line":4,"col":29,"offset":72},"extra":{"metavars":{"$FILE":{"start":{"line":4,"col":15,"offset":58},"end":{"line":4,"col":23,"offset":66},"abstract_content":"filename"},"$MODE":{"start":{"line":4,"col":25,"offset":68},"end":{"line":4,"col":28,"offset":71},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"7389ad4298d5e3109764ee1de0726a4c08b9781cf458b442b6b4b13cb94cf5e696a5cd044aa8d80ee51acfeeb75b39cdcc3527fff7ff3e6f09a132e6e08329b8_0","lines":"    with open(filename, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_258.py","start":{"line":5,"col":12,"offset":124},"end":{"line":5,"col":42,"offset":154},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":124},"end":{"line":5,"col":20,"offset":132},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":71},"svalue_end":{"line":4,"col":57,"offset":112},"svalue_abstract_content":"Template(\"{{ string }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"1fc14c7c8a61cea86cf1fa069ad480ec33d63c64eb78686f1b5f06aee209c22c9bfee5a76bd4ddfe3c2f093cf2f7403f6a511060707e965ae0eb4962b778039c_0","lines":"    return template.render(string=string)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_259.py","start":{"line":5,"col":12,"offset":147},"end":{"line":5,"col":42,"offset":177},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":147},"end":{"line":5,"col":20,"offset":155},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":95},"svalue_end":{"line":4,"col":56,"offset":135},"svalue_abstract_content":"Template(template_name autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"10290b58eb5dcf1c0290ac0e45999062c983236c8ceb41086025e7dc4f52a165e2d3fa1c9a29aaa23112f868804c0080d9cfc8e8a85ec4b1bb27941512fb26d1_0","lines":"    return template.render(template_data)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","path":"secure_generated_code_260.py","start":{"line":15,"col":5,"offset":458},"end":{"line":20,"col":30,"offset":688},"extra":{"metavars":{"$FUNC":{"start":{"line":14,"col":5,"offset":435},"end":{"line":14,"col":20,"offset":450},"abstract_content":"update_watering"},"$DATA":{"start":{"line":15,"col":5,"offset":458},"end":{"line":15,"col":13,"offset":466},"abstract_content":"plant_id"},"$W":{"start":{"line":15,"col":24,"offset":477},"end":{"line":15,"col":28,"offset":481},"abstract_content":"form"},"$INTERM":{"start":{"line":18,"col":5,"offset":559},"end":{"line":18,"col":10,"offset":564},"abstract_content":"query"},"$STR":{"start":{"line":18,"col":13,"offset":567},"end":{"line":18,"col":70,"offset":624},"abstract_content":"\"UPDATE plants SET watering_frequency = %s WHERE id = %s\""},"$CURSOR":{"start":{"line":20,"col":5,"offset":663},"end":{"line":20,"col":15,"offset":673},"abstract_content":"db.session"}},"message":"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","shortlink":"https://sg.run/qx7y","semgrep.dev":{"rule":{"origin":"community","r_id":9512,"rule_id":"2ZUbDL","rv_id":946186,"url":"https://semgrep.dev/playground/r/X0TL8rA/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","version_id":"X0TL8rA"}}},"severity":"WARNING","fingerprint":"24ba90e701f3a3daa874303e5c57990444323ac84c7eeb1672b003abb73cf5ccd289dac1ab36cb2c3a76b7845368f418af6d8a0ab4dee60eec520453ab4cf0f0_0","lines":"    plant_id = request.form['plant_id']\n    watering_frequency = request.form['watering_frequency']\n\n    query = \"UPDATE plants SET watering_frequency = %s WHERE id = %s\" % (watering_frequency, plant_id)\n\n    db.session.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","path":"secure_generated_code_260.py","start":{"line":16,"col":5,"offset":498},"end":{"line":20,"col":30,"offset":688},"extra":{"metavars":{"$FUNC":{"start":{"line":14,"col":5,"offset":435},"end":{"line":14,"col":20,"offset":450},"abstract_content":"update_watering"},"$DATA":{"start":{"line":16,"col":5,"offset":498},"end":{"line":16,"col":23,"offset":516},"abstract_content":"watering_frequency"},"$W":{"start":{"line":16,"col":34,"offset":527},"end":{"line":16,"col":38,"offset":531},"abstract_content":"form"},"$INTERM":{"start":{"line":18,"col":5,"offset":559},"end":{"line":18,"col":10,"offset":564},"abstract_content":"query"},"$STR":{"start":{"line":18,"col":13,"offset":567},"end":{"line":18,"col":70,"offset":624},"abstract_content":"\"UPDATE plants SET watering_frequency = %s WHERE id = %s\""},"$CURSOR":{"start":{"line":20,"col":5,"offset":663},"end":{"line":20,"col":15,"offset":673},"abstract_content":"db.session"}},"message":"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","shortlink":"https://sg.run/qx7y","semgrep.dev":{"rule":{"origin":"community","r_id":9512,"rule_id":"2ZUbDL","rv_id":946186,"url":"https://semgrep.dev/playground/r/X0TL8rA/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","version_id":"X0TL8rA"}}},"severity":"WARNING","fingerprint":"1cd60cc1f529c435f42de87295fe59751948941e89a40521be6f33691f293720cc86cea3a1fd6c869ca7b7718803b0ad2f6987f22b36efc27b6518f857a5b0a6_0","lines":"    watering_frequency = request.form['watering_frequency']\n\n    query = \"UPDATE plants SET watering_frequency = %s WHERE id = %s\" % (watering_frequency, plant_id)\n\n    db.session.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.tainted-sql-string.tainted-sql-string","path":"secure_generated_code_260.py","start":{"line":18,"col":13,"offset":567},"end":{"line":18,"col":103,"offset":657},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"UPDATE"},"$ANYTHING":{"start":{"line":15,"col":24,"offset":477},"end":{"line":15,"col":28,"offset":481},"abstract_content":"form"},"$SQLSTR":{"start":{"line":18,"col":14,"offset":568},"end":{"line":18,"col":69,"offset":623},"abstract_content":"UPDATE plants SET watering_frequency = %s WHERE id = %s"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries.","metadata":{"cwe":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"],"owasp":["A08:2021 - Software and Data Integrity Failures"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"subcategory":["audit"],"impact":"LOW","likelihood":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mass Assignment"],"source":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/PbZp","semgrep.dev":{"rule":{"origin":"community","r_id":14701,"rule_id":"lBU8Ad","rv_id":946190,"url":"https://semgrep.dev/playground/r/yeT0nKx/python.django.security.injection.tainted-sql-string.tainted-sql-string","version_id":"yeT0nKx"}}},"severity":"ERROR","fingerprint":"a11e25d7b7bc44e51e256aa444a2065959987e6f2f2fff0b9c29efda556969964bac739697df37a2a33c925b525b1709fb65cfe4547d6d044e9b6b73dabeee7d_0","lines":"    query = \"UPDATE plants SET watering_frequency = %s WHERE id = %s\" % (watering_frequency, plant_id)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"secure_generated_code_260.py","start":{"line":15,"col":16,"offset":469},"end":{"line":15,"col":28,"offset":481}},"request.form"]],"intermediate_vars":[{"location":{"path":"secure_generated_code_260.py","start":{"line":15,"col":5,"offset":458},"end":{"line":15,"col":13,"offset":466}},"content":"plant_id"}],"taint_sink":["CliLoc",[{"path":"secure_generated_code_260.py","start":{"line":18,"col":13,"offset":567},"end":{"line":18,"col":103,"offset":657}},"\"UPDATE plants SET watering_frequency = %s WHERE id = %s\" % (watering_frequency, plant_id)"]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","path":"secure_generated_code_260.py","start":{"line":18,"col":13,"offset":567},"end":{"line":18,"col":103,"offset":657},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"UPDATE"},"$ANYTHING":{"start":{"line":15,"col":24,"offset":477},"end":{"line":15,"col":28,"offset":481},"abstract_content":"form"},"$SQLSTR":{"start":{"line":18,"col":14,"offset":568},"end":{"line":18,"col":69,"offset":623},"abstract_content":"UPDATE plants SET watering_frequency = %s WHERE id = %s"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.","metadata":{"cwe":["CWE-704: Incorrect Type Conversion or Cast"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy","flask"],"subcategory":["vuln"],"impact":"MEDIUM","likelihood":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/JxZj","semgrep.dev":{"rule":{"origin":"community","r_id":14702,"rule_id":"YGUDKQ","rv_id":946228,"url":"https://semgrep.dev/playground/r/pZTNO7z/python.flask.security.injection.tainted-sql-string.tainted-sql-string","version_id":"pZTNO7z"}}},"severity":"ERROR","fingerprint":"bfc051910f4d703ad6de2c2b8fe8da750453c335b7950bb1ce60c801182dfe3b77e8265464be857b90b7af8a2348d978998a703c3d2d60d1fd2f395848b40c8c_0","lines":"    query = \"UPDATE plants SET watering_frequency = %s WHERE id = %s\" % (watering_frequency, plant_id)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"secure_generated_code_260.py","start":{"line":15,"col":16,"offset":469},"end":{"line":15,"col":28,"offset":481}},"request.form"]],"intermediate_vars":[{"location":{"path":"secure_generated_code_260.py","start":{"line":15,"col":5,"offset":458},"end":{"line":15,"col":13,"offset":466}},"content":"plant_id"}],"taint_sink":["CliLoc",[{"path":"secure_generated_code_260.py","start":{"line":18,"col":13,"offset":567},"end":{"line":18,"col":103,"offset":657}},"\"UPDATE plants SET watering_frequency = %s WHERE id = %s\" % (watering_frequency, plant_id)"]]},"engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B608","path":"secure_generated_code_260.py","start":{"line":20,"col":5,"offset":663},"end":{"line":20,"col":30,"offset":688},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"UPDATE"},"$QUERY":{"start":{"line":18,"col":14,"offset":568},"end":{"line":18,"col":69,"offset":623},"abstract_content":"UPDATE plants SET watering_frequency = %s WHERE id = %s"},"$DB":{"start":{"line":20,"col":5,"offset":663},"end":{"line":20,"col":15,"offset":673},"abstract_content":"db.session"},"$SQL":{"start":{"line":20,"col":24,"offset":682},"end":{"line":20,"col":29,"offset":687},"abstract_content":"query"}},"message":"SQL Injection is a critical vulnerability that can lead to data or system compromise. By\ndynamically generating SQL query strings, user input may be able to influence the logic of\nthe SQL statement. This could lead to an adversary accessing information they should\nnot have access to, or in some circumstances, being able to execute OS functionality or code.\n\nReplace all dynamically generated SQL queries with parameterized queries. In situations where\ndynamic queries must be created, never use direct user input, but instead use a map or\ndictionary of valid values and resolve them using a user supplied key.\n\nFor example, some database drivers do not allow parameterized queries for `>` or `<` comparison\noperators. In these cases, do not use a user supplied `>` or `<` value, but rather have the\nuser\nsupply a `gt` or `lt` value. The alphabetical values are then used to look up the `>` and `<`\nvalues to be used in the construction of the dynamic query. The same goes for other queries\nwhere\ncolumn or table names are required but cannot be parameterized.\n\nExample using `PreparedStatement` queries:\n```\nimport sqlite3\n\n# Create a new database (in memory)\ncon = sqlite3.connect(\":memory:\")\n# Get a cursor from the connection\ncur = con.cursor()\n# Create a tuple of the value to be used in the parameterized query\nparams = ('user-input',)\n# execute the statement, passing in the params for the value\ncur.execute(\"select name from sqlite_master where name = ?\", params)\n# work with the result\nresult = cur.fetchall()\n```\n\nFor more information on SQL Injection see OWASP:\nhttps://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html\n","metadata":{"cwe":"CWE-89","owasp":["A1:2017-Injection","A03:2021-Injection"],"category":"security","shortDescription":"Improper neutralization of special elements used in an SQL Command ('SQL Injection')","security-severity":"High","primary_identifier":"bandit.B608","secondary_identifiers":[{"name":"Bandit Test ID B608","type":"bandit_test_id","value":"B608"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B608","shortlink":"https://sg.run/xYry","semgrep.dev":{"rule":{"origin":"community","r_id":11574,"rule_id":"zdUyPj","rv_id":920127,"url":"https://semgrep.dev/playground/r/2KTdOYW/gitlab.bandit.B608","version_id":"2KTdOYW"}}},"severity":"WARNING","fingerprint":"65daa90366d06bc587708f878be958115a64310e4fbfc5c116675c23259806c5d4cd66eb73c9fae90ead7f423174daa56b00055f5b338b25de9527f45800cd7d_0","lines":"    db.session.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","path":"secure_generated_code_260.py","start":{"line":20,"col":5,"offset":663},"end":{"line":20,"col":30,"offset":688},"extra":{"metavars":{"$DB":{"start":{"line":20,"col":5,"offset":663},"end":{"line":20,"col":15,"offset":673},"abstract_content":"db.session"},"$SQL":{"start":{"line":20,"col":24,"offset":682},"end":{"line":20,"col":29,"offset":687},"abstract_content":"query"}},"message":"Detected possible formatted SQL query. Use parameterized queries instead.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"references":["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","shortlink":"https://sg.run/EkWw","semgrep.dev":{"rule":{"origin":"community","r_id":9637,"rule_id":"3qUP9k","rv_id":946343,"url":"https://semgrep.dev/playground/r/e1T98KK/python.lang.security.audit.formatted-sql-query.formatted-sql-query","version_id":"e1T98KK"}}},"severity":"WARNING","fingerprint":"15a09c9d12b059faf807f32a6f5370baf9daf6d7727e83aacaae9acfe11386b40bdd4fee649e2bbc0e6635efcadedf1e6951d602646c9586c0d035d47eb1c8bd_0","lines":"    db.session.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","path":"secure_generated_code_260.py","start":{"line":20,"col":5,"offset":663},"end":{"line":20,"col":30,"offset":688},"extra":{"metavars":{"$SQL":{"start":{"line":18,"col":13,"offset":567},"end":{"line":18,"col":70,"offset":624},"abstract_content":"\"UPDATE plants SET watering_frequency = %s WHERE id = %s\""},"$CONNECTION":{"start":{"line":20,"col":5,"offset":663},"end":{"line":20,"col":15,"offset":673},"abstract_content":"db.session"},"$QUERY":{"start":{"line":20,"col":24,"offset":682},"end":{"line":20,"col":29,"offset":687},"abstract_content":"query"}},"message":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","shortlink":"https://sg.run/2b1L","semgrep.dev":{"rule":{"origin":"community","r_id":10563,"rule_id":"oqUz5y","rv_id":946452,"url":"https://semgrep.dev/playground/r/8KTKj19/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","version_id":"8KTKj19"}}},"severity":"ERROR","fingerprint":"a5c5c4561a8beef07d0c89b0fa48267fd21c33b121dccd917890d0cfbea13838f39a597964c4d5d94e0dadda266f8807c6491f0e7f4e855cca810110d1026214_0","lines":"    db.session.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.db.generic-sql-flask.generic-sql-flask","path":"secure_generated_code_260.py","start":{"line":20,"col":24,"offset":682},"end":{"line":20,"col":29,"offset":687},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":15,"col":24,"offset":477},"end":{"line":15,"col":28,"offset":481},"abstract_content":"form"},"$AIOMYSQL_CURSOR":{"start":{"line":20,"col":5,"offset":663},"end":{"line":20,"col":15,"offset":673},"abstract_content":"db.session"},"$SINK":{"start":{"line":20,"col":24,"offset":682},"end":{"line":20,"col":29,"offset":687},"abstract_content":"query"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. The driver API has the ability to bind parameters to the query in a safe way. Make sure not to dynamically create SQL queries from user-influenced inputs. If you cannot avoid this, either escape the data properly or create an allowlist to check the value.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with Flask","functional-categories":["db::sink::query::aiomysql","db::sink::query::aiopg","db::sink::query::mysql-connector","db::sink::query::mysqldb","db::sink::query::pep249","db::sink::query::psycopg2","db::sink::query::pymssql","db::sink::query::pymysql","db::sink::query::pyodbc","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::url-path-params::flask","web::source::url-query-string::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["aiomysql","aiopg","db-api","flask","flask-wtf","mssql","mysql","mysql-connector","mysqldb","pep249","postgres","psycopg2","pymssql","pymysql","pyodbc","sql","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask","shortlink":"https://sg.run/AbKXQ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116506,"rule_id":"0oULG2d","rv_id":1042229,"url":"https://semgrep.dev/playground/r/qkTxpO2/python.flask.db.generic-sql-flask.generic-sql-flask","version_id":"qkTxpO2"}}},"severity":"CRITICAL","fingerprint":"2dc2d55f7a8312493b34ebf380f4226a7f6014df5ba68ef297258d046879b29708eefc145b5d06a2ef5af7a63ad87e8afbdf48a2a4c6f92bbcde264519774ca4_0","lines":"    db.session.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"secure_generated_code_260.py","start":{"line":15,"col":16,"offset":469},"end":{"line":15,"col":40,"offset":493}},"request.form['plant_id']"]],"intermediate_vars":[{"location":{"path":"secure_generated_code_260.py","start":{"line":15,"col":5,"offset":458},"end":{"line":15,"col":13,"offset":466}},"content":"plant_id"},{"location":{"path":"secure_generated_code_260.py","start":{"line":18,"col":5,"offset":559},"end":{"line":18,"col":10,"offset":564}},"content":"query"}],"taint_sink":["CliLoc",[{"path":"secure_generated_code_260.py","start":{"line":20,"col":24,"offset":682},"end":{"line":20,"col":29,"offset":687}},"query"]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_264.py","start":{"line":6,"col":12,"offset":142},"end":{"line":6,"col":79,"offset":209},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":142},"end":{"line":6,"col":20,"offset":150},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":78},"svalue_end":{"line":4,"col":67,"offset":129},"svalue_abstract_content":"Template(\"<p>{{ user.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"6f259b4154ac5bc967384b53813d6fff4390f1369df76462594db3f9d4f2c02f140fbba93ee9bd253f5542357116e6f86fbb5d1b6ccc0239925b68c1bc03b1c1_0","lines":"    return template.render(user=user, webinars=get_recommended_webinars(user))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_266.py","start":{"line":5,"col":10,"offset":65},"end":{"line":5,"col":27,"offset":82},"extra":{"metavars":{"$FILE":{"start":{"line":5,"col":15,"offset":70},"end":{"line":5,"col":21,"offset":76},"abstract_content":"infile"},"$MODE":{"start":{"line":5,"col":23,"offset":78},"end":{"line":5,"col":26,"offset":81},"abstract_content":"'r'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"21f80935ea58286eba2dd5753f089503a495ad5e6fe86a878490400f39f41e1f0972a273938bc4d683e216b2660e3867b7e3abeacbf7f7e668ff53829c0b50c8_0","lines":"    with open(infile, 'r') as f_in:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_266.py","start":{"line":11,"col":10,"offset":229},"end":{"line":11,"col":28,"offset":247},"extra":{"metavars":{"$FILE":{"start":{"line":11,"col":15,"offset":234},"end":{"line":11,"col":22,"offset":241},"abstract_content":"outfile"},"$MODE":{"start":{"line":11,"col":24,"offset":243},"end":{"line":11,"col":27,"offset":246},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"25b85b1aeb344fe6bb33ee0cbf507dfb107ee0a216e4da45a730e3869b8ee51b0343498bdffc360f1588970322046ccf9bb14b813148c4d4e8806441e3031a0b_0","lines":"    with open(outfile, 'w') as f_out:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_267.py","start":{"line":5,"col":10,"offset":59},"end":{"line":5,"col":30,"offset":79},"extra":{"metavars":{"$FILE":{"start":{"line":5,"col":15,"offset":64},"end":{"line":5,"col":24,"offset":73},"abstract_content":"file_path"},"$MODE":{"start":{"line":5,"col":26,"offset":75},"end":{"line":5,"col":29,"offset":78},"abstract_content":"'r'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"4cab2c74422221e11c3752b4bb18c4a172d81a5e9b60d6fc7d908432ef3f150ac7e11dd05fbfed89c3435f17516b5eceee71f0bd32cf11a373be2f27215649b3_0","lines":"    with open(file_path, 'r') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_267.py","start":{"line":18,"col":10,"offset":371},"end":{"line":18,"col":30,"offset":391},"extra":{"metavars":{"$FILE":{"start":{"line":18,"col":15,"offset":376},"end":{"line":18,"col":24,"offset":385},"abstract_content":"file_path"},"$MODE":{"start":{"line":18,"col":26,"offset":387},"end":{"line":18,"col":29,"offset":390},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"503e5317f5f8859ab2371113f057ef18adb133258b18b2441eb61dd7bbd67c3fa216dd698ea17566b2691113d91bfd5b0c2069b1849ae3651c2594f5cb79cea3_0","lines":"    with open(file_path, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_269.py","start":{"line":5,"col":12,"offset":127},"end":{"line":5,"col":44,"offset":159},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":127},"end":{"line":5,"col":20,"offset":135},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":59},"svalue_end":{"line":4,"col":72,"offset":115},"svalue_abstract_content":"jinja2.Template(\"<p>{{ comment }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"23efe1a954df2254d8d89e48b59f30e81a67d64bc752da1bc0c14e11f6f6abec98d5525b52806946977b7c6351a220c0862009617d765fda5724c24471e2b1ce_0","lines":"    return template.render(comment=comment)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-raise-for-status.use-raise-for-status","path":"secure_generated_code_271.py","start":{"line":6,"col":12,"offset":110},"end":{"line":6,"col":46,"offset":144},"extra":{"metavars":{},"message":"There's an HTTP request made with requests, but the raise_for_status() utility method isn't used. This can result in request errors going unnoticed and your code behaving in unexpected ways, such as if your authorization API returns a 500 error while you're only checking for a 401.","metadata":{"references":["https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status"],"category":"best-practice","technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-raise-for-status.use-raise-for-status","shortlink":"https://sg.run/J3Xw","semgrep.dev":{"rule":{"origin":"community","r_id":9690,"rule_id":"DbUWd2","rv_id":946440,"url":"https://semgrep.dev/playground/r/kbTYkXK/python.requests.best-practice.use-raise-for-status.use-raise-for-status","version_id":"kbTYkXK"}}},"severity":"WARNING","fingerprint":"74bebcb18928d4d2f22b894ccea063010903f56a5226a3fe898a681e657d6bc124dc5f2a372ef1edf5363b36ea85177335ef596a7b991858bd07d37336fb3207_0","lines":"    return requests.get(url.path, timeout=60)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B113","path":"secure_generated_code_272.py","start":{"line":4,"col":12,"offset":50},"end":{"line":4,"col":45,"offset":83},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$METHOD":{"start":{"line":4,"col":21,"offset":59},"end":{"line":4,"col":24,"offset":62},"abstract_content":"get"}},"message":"The application was found using the `requests` module without configuring a timeout value for\nconnections. This could lead to uncontrolled resource consumption where the application could\nrun out of\nsocket descriptors, effectively causing a Denial of Service (DoS).\n\nTo remediate this issue, pass in a `timeout=` argument to each `requests` call.\n\nExample using a timeout for an HTTP GET request:\n```\n# Issue a GET request to https://example.com with a timeout of 10 seconds\nresponse = requests.get('https://example.com', timeout=10)\n# Work with the response object\n# ...\n```\n\nFor more information on using the requests module see:\n- https://requests.readthedocs.io/en/latest/api/\n","metadata":{"cwe":"CWE-400","category":"security","shortDescription":"Uncontrolled resource consumption","owasp":["A6:2017-Security Misconfiguration","A05:2021-Security Misconfiguration"],"security-severity":"Medium","primary_identifier":"bandit.B113","secondary_identifiers":[{"name":"Bandit Test ID B113","type":"bandit_test_id","value":"B113"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B113","shortlink":"https://sg.run/PoEq","semgrep.dev":{"rule":{"origin":"community","r_id":47601,"rule_id":"OrULKb","rv_id":920124,"url":"https://semgrep.dev/playground/r/o5TK1Z7/gitlab.bandit.B113","version_id":"o5TK1Z7"}}},"severity":"WARNING","fingerprint":"bc0611976e0eea047b8e8de3bdccce9aef4b473b40828a07e8c346f7aff9e0cd51e84567415e80b794dd960ce70b6c285deed9bdbdb1238cace0ab2a0db81eed_0","lines":"    return requests.get(url, auto_open=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-raise-for-status.use-raise-for-status","path":"secure_generated_code_272.py","start":{"line":4,"col":12,"offset":50},"end":{"line":4,"col":45,"offset":83},"extra":{"metavars":{},"message":"There's an HTTP request made with requests, but the raise_for_status() utility method isn't used. This can result in request errors going unnoticed and your code behaving in unexpected ways, such as if your authorization API returns a 500 error while you're only checking for a 401.","metadata":{"references":["https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status"],"category":"best-practice","technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-raise-for-status.use-raise-for-status","shortlink":"https://sg.run/J3Xw","semgrep.dev":{"rule":{"origin":"community","r_id":9690,"rule_id":"DbUWd2","rv_id":946440,"url":"https://semgrep.dev/playground/r/kbTYkXK/python.requests.best-practice.use-raise-for-status.use-raise-for-status","version_id":"kbTYkXK"}}},"severity":"WARNING","fingerprint":"2d1cf7cefb6d3691b6032d26569838821874d0878b1fc3f5c8a06820084c6af32d989ecafc1b8d688c43a8042f867ee22f0165c14319c057ba904f78907da64c_0","lines":"    return requests.get(url, auto_open=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-timeout.use-timeout","path":"secure_generated_code_272.py","start":{"line":4,"col":12,"offset":50},"end":{"line":4,"col":45,"offset":83},"extra":{"metavars":{},"message":"Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.","fix":"requests.get(url, auto_open=True, timeout=30)","metadata":{"category":"best-practice","references":["https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts","https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts"],"technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-timeout.use-timeout","shortlink":"https://sg.run/R8kO","semgrep.dev":{"rule":{"origin":"community","r_id":9693,"rule_id":"KxU42G","rv_id":946443,"url":"https://semgrep.dev/playground/r/O9TX3Yn/python.requests.best-practice.use-timeout.use-timeout","version_id":"O9TX3Yn"}}},"severity":"WARNING","fingerprint":"bff5b590ee092b6b2cf67f005a918de2167e61a2ad78a9cf7cc99a458dcc880ea861d220185b83c7358a5cd0658982afe3216ca5b64703bd3f93f1e39cb7484f_0","lines":"    return requests.get(url, auto_open=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_275.py","start":{"line":5,"col":12,"offset":131},"end":{"line":5,"col":36,"offset":155},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":131},"end":{"line":5,"col":20,"offset":139},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":64},"svalue_end":{"line":4,"col":71,"offset":119},"svalue_abstract_content":"Template(\"<h1>{{ log.message }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"0845060e441c33275b92f794b41213845c49ff90286d8df4a7404c498cab326927604f118ff6ed667b0571c5777e2e9c7de118a6dc202f85ba729adc9d4014ce_0","lines":"    return template.render(log=log)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_276.py","start":{"line":5,"col":12,"offset":167},"end":{"line":5,"col":50,"offset":205},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":167},"end":{"line":5,"col":20,"offset":175},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":79},"svalue_end":{"line":4,"col":92,"offset":155},"svalue_abstract_content":"Template(\"<h1>Trail Info</h1><p>{{ trail_info.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"173452a33203f5c9252098ac4e0b1638afd5de5782373e3680dcb79ee2c4efdf122bad18bfa29ba551a0bfefb26af842ab79edfa08e8595a8f90948cd129a3ab_0","lines":"    return template.render(trail_info=trail_info)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_277.py","start":{"line":6,"col":12,"offset":214},"end":{"line":6,"col":60,"offset":262},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":214},"end":{"line":6,"col":20,"offset":222},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":100},"svalue_end":{"line":4,"col":117,"offset":201},"svalue_abstract_content":"Template(\"<h1>Player Position Statistics</h1><p>{{ player_position.position }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"16cf446bd6f234679f1c18d0507f2a3b4dbe900847bef54db94923575ceca68fd3dad068e8e572bee3813d1a03e7bb67fe51927e123d98f224625bd00de761ea_0","lines":"    return template.render(player_position=player_position)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_278.py","start":{"line":5,"col":12,"offset":147},"end":{"line":5,"col":48,"offset":183},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":147},"end":{"line":5,"col":20,"offset":155},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":77},"svalue_end":{"line":4,"col":74,"offset":135},"svalue_abstract_content":"Template(\"<h1>{{ checklist.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"c6b84f3b2745115b0d30e46eb0843881c22095202b0f4918263e3b6467e171514703b15ce856aab7d277951f8e94c89f0b754759b9f3ba7ff0442e8951f1cea8_0","lines":"    return template.render(checklist=checklist)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_279.py","start":{"line":5,"col":12,"offset":128},"end":{"line":5,"col":40,"offset":156},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":128},"end":{"line":5,"col":20,"offset":136},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":69},"svalue_end":{"line":4,"col":63,"offset":116},"svalue_abstract_content":"Template(\"<p>{{ email }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"4f43b3eac668f0448254d973fe6935c55573cba309708b24dd2e051a9f15c1e71557ecb91913dcd1002159f7485ab98633a7b52c27641e4b0db968811204a133_0","lines":"    return template.render(email=email)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_280.py","start":{"line":5,"col":12,"offset":123},"end":{"line":5,"col":36,"offset":147},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":123},"end":{"line":5,"col":20,"offset":131},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":65},"svalue_end":{"line":4,"col":62,"offset":111},"svalue_abstract_content":"Template(\"{{ log.message }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"6d686aa8800be232e1d9d2e7bc970b75808d6b95dbda24e0d76024ad0afa307f70db0fd1fe04139ddc99abe912e7ee17136e93bb95269bef5803f78bc7367f0a_0","lines":"    return template.render(log=log)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_281.py","start":{"line":5,"col":12,"offset":193},"end":{"line":5,"col":50,"offset":231},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":193},"end":{"line":5,"col":20,"offset":201},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":79},"svalue_end":{"line":4,"col":118,"offset":181},"svalue_abstract_content":"Template(\"{{ assignment.name }} {{ assignment.description }} {{ assignment.email }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"374556257fea5c868614e519090df707520c34bf58627bc2b981dec635f886899e92df18175f9766aa2af12705baf4876d95776e7afb37fd5094ed24b2b50804_0","lines":"    return template.render(assignment=assignment)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_285.py","start":{"line":6,"col":12,"offset":143},"end":{"line":6,"col":44,"offset":175},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":143},"end":{"line":6,"col":20,"offset":151},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":73,"offset":130},"svalue_abstract_content":"Template(\"<h1>{{ invoice.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"ee6f9b55b6d2903c8b0683ca20717bb1d448aecc5b651684c76e6fda2e44be9c3d4691bb3a25da83080ac8c8bb9ffd518631f3623918c89dad9628db244916cb_0","lines":"    return template.render(invoice=invoice)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_289.py","start":{"line":5,"col":12,"offset":161},"end":{"line":5,"col":40,"offset":189},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":161},"end":{"line":5,"col":20,"offset":169},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":82},"svalue_end":{"line":4,"col":83,"offset":149},"svalue_abstract_content":"Template(\"<p>Registration error: {{ error }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"5936765d03ae742e78110221ded5ccc76b01cd5fcada48e0dd71247601f26f4efa65af435d9fd7997c3d2c3c6fc848efbcbeefcf0cd0fab1a9c15b4f2c0c812b_0","lines":"    return template.render(error=error)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_29.py","start":{"line":6,"col":10,"offset":73},"end":{"line":6,"col":38,"offset":101},"extra":{"metavars":{"$FILE":{"start":{"line":6,"col":15,"offset":78},"end":{"line":6,"col":37,"offset":100},"abstract_content":"'/var/lib/dpkg/status'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"015620238812c6a99387866eea04602c552a76b6aeb284b021fb90133874e643ffd68483f6eb45e6d6a362e4aa645b89dd33f931477c496c7134a9e55100aabe_0","lines":"    with open('/var/lib/dpkg/status') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_29.py","start":{"line":16,"col":10,"offset":349},"end":{"line":16,"col":39,"offset":378},"extra":{"metavars":{"$FILE":{"start":{"line":16,"col":15,"offset":354},"end":{"line":16,"col":38,"offset":377},"abstract_content":"'/var/lib/rpm/Packages'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"3c4cc19a1d5ae17dcb5b70547502234b187de7baa354dc7f96953671eb486e7670068d6b09dcec74552bed51c5d6c2482a2a4cf1e214e91bec07d455423355c2_0","lines":"    with open('/var/lib/rpm/Packages') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","path":"secure_generated_code_290.py","start":{"line":18,"col":16,"offset":457},"end":{"line":18,"col":37,"offset":478},"extra":{"metavars":{},"message":"Be careful with `flask.make_response()`. If this response is rendered onto a webpage, this could create a cross-site scripting (XSS) vulnerability. `flask.make_response()` will not autoescape HTML. If you are rendering HTML, write your HTML in a template file and use `flask.render_template()` which will take care of escaping. If you are returning data from an API, consider using `flask.jsonify()`.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"references":["https://github.com/python-security/pyt//blob/093a077bcf12d1f58ddeb2d73ddc096623985fb0/examples/vulnerable_code/XSS_assign_to_other_var.py#L11","https://flask.palletsprojects.com/en/1.1.x/api/#flask.Flask.make_response","https://flask.palletsprojects.com/en/1.1.x/api/#response-objects"],"category":"security","technology":["flask"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","shortlink":"https://sg.run/3x3p","semgrep.dev":{"rule":{"origin":"community","r_id":9543,"rule_id":"AbUz6A","rv_id":946217,"url":"https://semgrep.dev/playground/r/BjT1N6E/python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","version_id":"BjT1N6E"}}},"severity":"WARNING","fingerprint":"2bbf8f82ea6c2a4e59d11cf75134d7d39e42533527882f760aa8e247c06cab7307a71c39a62c26c14cff2833122be498d4e776b6ce101e986cdc77632d9bb6d6_0","lines":"        return make_response(recipe)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_292.py","start":{"line":11,"col":12,"offset":340},"end":{"line":11,"col":63,"offset":391},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":11,"col":12,"offset":340},"end":{"line":11,"col":13,"offset":341},"abstract_content":"t","propagated_value":{"svalue_start":{"line":9,"col":9,"offset":296},"svalue_end":{"line":9,"col":40,"offset":327},"svalue_abstract_content":"Template(form autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"08073db3e62a083ad7a4423cdd7e4a11dde2b16ab9c582e4c6e92ce23b9da84692ff57d841f359ee31fc6f5443bc449e90471db3af3d1a9b8469b6c70ef1d273_0","lines":"    return t.render(name=name, email=email, workshop=workshop)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_293.py","start":{"line":4,"col":10,"offset":100},"end":{"line":4,"col":54,"offset":144},"extra":{"metavars":{"$FILE":{"start":{"line":4,"col":15,"offset":105},"end":{"line":4,"col":53,"offset":143},"abstract_content":"'sub_confirmation_email_template.html'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"81619742eb9b2588764b977e1eb8a0cba3e16850837968af50867609e7d1731997e1a2bdf53d5c4f36eaf84f2b57a87ae27cccf3c8a70b99d3621a6f143b50bc_0","lines":"    with open('sub_confirmation_email_template.html') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_293.py","start":{"line":9,"col":16,"offset":254},"end":{"line":14,"col":6,"offset":362},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":9,"col":16,"offset":254},"end":{"line":9,"col":17,"offset":255},"abstract_content":"t","propagated_value":{"svalue_start":{"line":7,"col":9,"offset":195},"svalue_end":{"line":7,"col":51,"offset":237},"svalue_abstract_content":"Template(template_string autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"eadf87679820b34b73ab80632faa6ceb54bd651ce5383b642f6b163bf9f684cdaab4f4bde992124ece679b5b34a1a159e38aa40b8bd8d26c99c71923e15d47e8_0","lines":"    rendered = t.render(\n        name=name,\n        email=email,\n        company=company,\n        interests=interests\n    )","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_294.py","start":{"line":5,"col":12,"offset":142},"end":{"line":5,"col":44,"offset":174},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":142},"end":{"line":5,"col":20,"offset":150},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":73,"offset":130},"svalue_abstract_content":"Template(\"<h1>{{ article.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"0ecd36b9f297926090eed53e573a76e5b2e9c31c74e37dcc6a25ea6dd9690d9bad251edf5035f9ec9307ccd3c443ce3324ef76972eeda6d66ab5312af10e785e_0","lines":"    return template.render(article=article)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_295.py","start":{"line":20,"col":16,"offset":467},"end":{"line":20,"col":97,"offset":548},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":20,"col":16,"offset":467},"end":{"line":20,"col":24,"offset":475},"abstract_content":"template","propagated_value":{"svalue_start":{"line":19,"col":20,"offset":360},"svalue_end":{"line":19,"col":111,"offset":451},"svalue_abstract_content":"Template(\"<h1>{{ title }}</h1><p>{{ description }}</p><p>{{ posts }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"cdf1b92f63d387a80837dc473b4b59353d34c2872f45e812c09fd555647aa95321f4bf91ded18268e04ef7e1a2068b51cf58644105734fa7fb08a16f61a62af4_0","lines":"        return template.render(title=self.title, description=self.description, posts=self.posts)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_298.py","start":{"line":5,"col":12,"offset":137},"end":{"line":5,"col":38,"offset":163},"extra":{"metavars":{"$ENV":{"start":{"line":4,"col":16,"offset":94},"end":{"line":4,"col":19,"offset":97},"abstract_content":"env"},"$TEMPLATE":{"start":{"line":5,"col":12,"offset":137},"end":{"line":5,"col":20,"offset":145},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":94},"svalue_end":{"line":4,"col":47,"offset":125},"svalue_abstract_content":"env.get_template(template_name)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"90998169faeecdf8bb8b62641a432150e7d2e13553daa9907b5093ebbe6021950b144cfdfc96cb2753ad0560e3e332819b3ec9096e16ac4e45710b97b768d979_0","lines":"    return template.render(**context)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"secure_generated_code_299.py","start":{"line":14,"col":35,"offset":390},"end":{"line":14,"col":103,"offset":458},"extra":{"metavars":{"$ANYTHING":{"start":{"line":8,"col":22,"offset":194},"end":{"line":8,"col":27,"offset":199},"abstract_content":"files"},"$HTMLSTR":{"start":{"line":14,"col":37,"offset":392},"end":{"line":14,"col":47,"offset":402},"abstract_content":"<img src=\""}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"a06b9f95b20a235866aef250ad621ce11c8e587f40b3ce95fc3310a084799e48c5e1d78d0d191391eda74d02060726330abd6869e2a5129e43935d109b7bc3b8_0","lines":"        image_template = Template(f'<img src=\"{image.filename}\" alt=\"{{ image.alt }}\">{{ image.alt }}', autoescape=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"secure_generated_code_299.py","start":{"line":8,"col":14,"offset":186},"end":{"line":8,"col":27,"offset":199}},"request.files"]],"intermediate_vars":[{"location":{"path":"secure_generated_code_299.py","start":{"line":8,"col":5,"offset":177},"end":{"line":8,"col":11,"offset":183}},"content":"images"},{"location":{"path":"secure_generated_code_299.py","start":{"line":10,"col":15,"offset":233},"end":{"line":10,"col":17,"offset":235}},"content":"in"},{"location":{"path":"secure_generated_code_299.py","start":{"line":10,"col":9,"offset":227},"end":{"line":10,"col":14,"offset":232}},"content":"image"}],"taint_sink":["CliLoc",[{"path":"secure_generated_code_299.py","start":{"line":14,"col":35,"offset":390},"end":{"line":14,"col":103,"offset":458}},"f'<img src=\"{image.filename}\" alt=\"{{ image.alt }}\">{{ image.alt }}'"]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"secure_generated_code_299.py","start":{"line":14,"col":35,"offset":390},"end":{"line":14,"col":103,"offset":458},"extra":{"metavars":{"$ANYTHING":{"start":{"line":8,"col":22,"offset":194},"end":{"line":8,"col":27,"offset":199},"abstract_content":"files"},"$HTMLSTR":{"start":{"line":14,"col":37,"offset":392},"end":{"line":14,"col":47,"offset":402},"abstract_content":"<img src=\""}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"01e455267579408510dc3ef2df4c34a5fde555dec39cbaf24b0586d681a4aae5d7e761bda179b853e45a8af8a6d0c42d74682798038536be8facc89d4b9c99e8_0","lines":"        image_template = Template(f'<img src=\"{image.filename}\" alt=\"{{ image.alt }}\">{{ image.alt }}', autoescape=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"secure_generated_code_299.py","start":{"line":8,"col":14,"offset":186},"end":{"line":8,"col":27,"offset":199}},"request.files"]],"intermediate_vars":[{"location":{"path":"secure_generated_code_299.py","start":{"line":8,"col":5,"offset":177},"end":{"line":8,"col":11,"offset":183}},"content":"images"},{"location":{"path":"secure_generated_code_299.py","start":{"line":10,"col":15,"offset":233},"end":{"line":10,"col":17,"offset":235}},"content":"in"},{"location":{"path":"secure_generated_code_299.py","start":{"line":10,"col":9,"offset":227},"end":{"line":10,"col":14,"offset":232}},"content":"image"}],"taint_sink":["CliLoc",[{"path":"secure_generated_code_299.py","start":{"line":14,"col":35,"offset":390},"end":{"line":14,"col":103,"offset":458}},"f'<img src=\"{image.filename}\" alt=\"{{ image.alt }}\">{{ image.alt }}'"]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_299.py","start":{"line":16,"col":22,"offset":499},"end":{"line":16,"col":58,"offset":535},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":16,"col":22,"offset":499},"end":{"line":16,"col":36,"offset":513},"abstract_content":"image_template","propagated_value":{"svalue_start":{"line":14,"col":26,"offset":381},"svalue_end":{"line":14,"col":121,"offset":476},"svalue_abstract_content":"Template(f'<img src=\"{image.filename}\" alt=\"{{ image.alt }}\">{{ image.alt }}'autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"df149704077241c1aab5f46ab23d3f417c499d8d92aea72cd8e22a5f1de2434ba4329054ccced487d25d3739ac5ecff96c5a0ac39cd53637a9c5483c8ec959e0_0","lines":"        image_html = image_template.render(src=image_url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B608","path":"secure_generated_code_3.py","start":{"line":12,"col":9,"offset":342},"end":{"line":12,"col":30,"offset":363},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"SELECT"},"$QUERY":{"start":{"line":9,"col":14,"offset":235},"end":{"line":9,"col":60,"offset":281},"abstract_content":"SELECT * FROM suggestions WHERE user_id = '%s'"},"$DB":{"start":{"line":12,"col":9,"offset":342},"end":{"line":12,"col":15,"offset":348},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":11,"col":10,"offset":303},"svalue_end":{"line":11,"col":29,"offset":322},"svalue_abstract_content":"connection.cursor()"}},"$SQL":{"start":{"line":12,"col":24,"offset":357},"end":{"line":12,"col":29,"offset":362},"abstract_content":"query","propagated_value":{"svalue_start":{"line":9,"col":13,"offset":234},"svalue_end":{"line":9,"col":71,"offset":292},"svalue_abstract_content":"\"SELECT * FROM suggestions WHERE user_id = '%s'\"%user.id"}}},"message":"SQL Injection is a critical vulnerability that can lead to data or system compromise. By\ndynamically generating SQL query strings, user input may be able to influence the logic of\nthe SQL statement. This could lead to an adversary accessing information they should\nnot have access to, or in some circumstances, being able to execute OS functionality or code.\n\nReplace all dynamically generated SQL queries with parameterized queries. In situations where\ndynamic queries must be created, never use direct user input, but instead use a map or\ndictionary of valid values and resolve them using a user supplied key.\n\nFor example, some database drivers do not allow parameterized queries for `>` or `<` comparison\noperators. In these cases, do not use a user supplied `>` or `<` value, but rather have the\nuser\nsupply a `gt` or `lt` value. The alphabetical values are then used to look up the `>` and `<`\nvalues to be used in the construction of the dynamic query. The same goes for other queries\nwhere\ncolumn or table names are required but cannot be parameterized.\n\nExample using `PreparedStatement` queries:\n```\nimport sqlite3\n\n# Create a new database (in memory)\ncon = sqlite3.connect(\":memory:\")\n# Get a cursor from the connection\ncur = con.cursor()\n# Create a tuple of the value to be used in the parameterized query\nparams = ('user-input',)\n# execute the statement, passing in the params for the value\ncur.execute(\"select name from sqlite_master where name = ?\", params)\n# work with the result\nresult = cur.fetchall()\n```\n\nFor more information on SQL Injection see OWASP:\nhttps://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html\n","metadata":{"cwe":"CWE-89","owasp":["A1:2017-Injection","A03:2021-Injection"],"category":"security","shortDescription":"Improper neutralization of special elements used in an SQL Command ('SQL Injection')","security-severity":"High","primary_identifier":"bandit.B608","secondary_identifiers":[{"name":"Bandit Test ID B608","type":"bandit_test_id","value":"B608"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B608","shortlink":"https://sg.run/xYry","semgrep.dev":{"rule":{"origin":"community","r_id":11574,"rule_id":"zdUyPj","rv_id":920127,"url":"https://semgrep.dev/playground/r/2KTdOYW/gitlab.bandit.B608","version_id":"2KTdOYW"}}},"severity":"WARNING","fingerprint":"d15f4ec5c3d99acd915a9299319d1e62c727ea5b9b36d0037f1b84f8511f068d94f8c38aaa895b179505af18ead2eb9f9a09e71d0404f6ae9ab82782d18053fc_0","lines":"        cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","path":"secure_generated_code_3.py","start":{"line":12,"col":9,"offset":342},"end":{"line":12,"col":30,"offset":363},"extra":{"metavars":{"$DB":{"start":{"line":12,"col":9,"offset":342},"end":{"line":12,"col":15,"offset":348},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":11,"col":10,"offset":303},"svalue_end":{"line":11,"col":29,"offset":322},"svalue_abstract_content":"connection.cursor()"}},"$SQL":{"start":{"line":12,"col":24,"offset":357},"end":{"line":12,"col":29,"offset":362},"abstract_content":"query","propagated_value":{"svalue_start":{"line":9,"col":13,"offset":234},"svalue_end":{"line":9,"col":71,"offset":292},"svalue_abstract_content":"\"SELECT * FROM suggestions WHERE user_id = '%s'\"%user.id"}}},"message":"Detected possible formatted SQL query. Use parameterized queries instead.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"references":["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","shortlink":"https://sg.run/EkWw","semgrep.dev":{"rule":{"origin":"community","r_id":9637,"rule_id":"3qUP9k","rv_id":946343,"url":"https://semgrep.dev/playground/r/e1T98KK/python.lang.security.audit.formatted-sql-query.formatted-sql-query","version_id":"e1T98KK"}}},"severity":"WARNING","fingerprint":"f35e9eeb98d59ad1fd3f66b5e5587c81dcbd0a8401a92fdd8f0cda48da52b017b062190ff1928cff108d128ee1317f89ff615876ee704a3f7fbcbbb0555db9aa_0","lines":"        cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","path":"secure_generated_code_3.py","start":{"line":12,"col":9,"offset":342},"end":{"line":12,"col":30,"offset":363},"extra":{"metavars":{"$SQL":{"start":{"line":9,"col":13,"offset":234},"end":{"line":9,"col":61,"offset":282},"abstract_content":"\"SELECT * FROM suggestions WHERE user_id = '%s'\""},"$CONNECTION":{"start":{"line":12,"col":9,"offset":342},"end":{"line":12,"col":15,"offset":348},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":11,"col":10,"offset":303},"svalue_end":{"line":11,"col":29,"offset":322},"svalue_abstract_content":"connection.cursor()"}},"$QUERY":{"start":{"line":12,"col":24,"offset":357},"end":{"line":12,"col":29,"offset":362},"abstract_content":"query","propagated_value":{"svalue_start":{"line":9,"col":13,"offset":234},"svalue_end":{"line":9,"col":71,"offset":292},"svalue_abstract_content":"\"SELECT * FROM suggestions WHERE user_id = '%s'\"%user.id"}}},"message":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","shortlink":"https://sg.run/2b1L","semgrep.dev":{"rule":{"origin":"community","r_id":10563,"rule_id":"oqUz5y","rv_id":946452,"url":"https://semgrep.dev/playground/r/8KTKj19/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","version_id":"8KTKj19"}}},"severity":"ERROR","fingerprint":"24fcdbc4cff5b65e4f8f589b53b3a87450ab09b85a1ce3fa20ae3b93c33416a754cf3c97f31daa6cf0ef71c335d74cfb8728554a026d0c589ff180cb7e8f29e9_0","lines":"        cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_301.py","start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":48,"offset":181},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":20,"offset":153},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":68},"svalue_end":{"line":4,"col":81,"offset":133},"svalue_abstract_content":"jinja2.Template(\"<h1>{{ equipment.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"18821e1c7d8ccfb4833879db00075d478050b3e74173c913ee23f6ded422bf93f162f7269bd9b7ce0ede73a70c28a6656f954b8d331c6db03e5fe3db194f524e_0","lines":"    return template.render(equipment=equipment)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_302.py","start":{"line":5,"col":12,"offset":127},"end":{"line":5,"col":44,"offset":159},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":127},"end":{"line":5,"col":20,"offset":135},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":58,"offset":115},"svalue_abstract_content":"Template(\"{{ message }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"457d422e9e44e30a79a556a7b0a9c34c6cd9cc3a1b7fbfd297afeb8c19a386be1f201cd73196d873cc5a3a35ebef31166e7b333e4ab8ae234e78778d62b2b128_0","lines":"    return template.render(message=message)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_303.py","start":{"line":5,"col":12,"offset":152},"end":{"line":5,"col":40,"offset":180},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":152},"end":{"line":5,"col":20,"offset":160},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":81},"svalue_end":{"line":4,"col":75,"offset":140},"svalue_abstract_content":"Template(\"<p>{{ event.description }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"3643d3d1c0fe27ccf6baa9a861b6673d1c4c4e02e6da67662d70423e74d9412ffd61235bcb3bdaba9b52de2377ef24cf54932d0fc738801507a045372f619eed_0","lines":"    return template.render(event=event)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_305.py","start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":42,"offset":171},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":20,"offset":149},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":76},"svalue_end":{"line":4,"col":69,"offset":129},"svalue_abstract_content":"Template(\"<p>{{ review.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"362242420eb080f4502d231fe1d5c282f173e5845a25303117134e372feaac0bfa44ea7b79734171ef5026499b3e463ccd1affbe31f0524deb998a4785653b1c_0","lines":"    return template.render(review=review)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_306.py","start":{"line":5,"col":12,"offset":133},"end":{"line":5,"col":38,"offset":159},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":133},"end":{"line":5,"col":20,"offset":141},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":67},"svalue_end":{"line":4,"col":70,"offset":121},"svalue_abstract_content":"Template(\"<h1>{{ song.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"a104942a79ea7686fdc3da7a8245286e09d0204a7fc6c9021abf4ad12e2386471375629257041a630e69d268e78bd6ebab26601b5067e2a5d4375b079bed5c41_0","lines":"    return template.render(song=song)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_307.py","start":{"line":5,"col":12,"offset":177},"end":{"line":5,"col":56,"offset":221},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":177},"end":{"line":5,"col":20,"offset":185},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":85},"svalue_end":{"line":4,"col":96,"offset":165},"svalue_abstract_content":"Template(\"<h1>Freelance Job</h1> {{ freelance_job.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"46202a53853d6334e76df2658b554cd38acacb9f3727f252023ed7b73f6f508197314aca446ab5ad2f02c7ab0701be06464f8722fb4a0c970adc9b908dcbb320_0","lines":"    return template.render(freelance_job=freelance_job)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B113","path":"secure_generated_code_31.py","start":{"line":5,"col":12,"offset":78},"end":{"line":5,"col":29,"offset":95},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$METHOD":{"start":{"line":5,"col":21,"offset":87},"end":{"line":5,"col":24,"offset":90},"abstract_content":"get"}},"message":"The application was found using the `requests` module without configuring a timeout value for\nconnections. This could lead to uncontrolled resource consumption where the application could\nrun out of\nsocket descriptors, effectively causing a Denial of Service (DoS).\n\nTo remediate this issue, pass in a `timeout=` argument to each `requests` call.\n\nExample using a timeout for an HTTP GET request:\n```\n# Issue a GET request to https://example.com with a timeout of 10 seconds\nresponse = requests.get('https://example.com', timeout=10)\n# Work with the response object\n# ...\n```\n\nFor more information on using the requests module see:\n- https://requests.readthedocs.io/en/latest/api/\n","metadata":{"cwe":"CWE-400","category":"security","shortDescription":"Uncontrolled resource consumption","owasp":["A6:2017-Security Misconfiguration","A05:2021-Security Misconfiguration"],"security-severity":"Medium","primary_identifier":"bandit.B113","secondary_identifiers":[{"name":"Bandit Test ID B113","type":"bandit_test_id","value":"B113"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B113","shortlink":"https://sg.run/PoEq","semgrep.dev":{"rule":{"origin":"community","r_id":47601,"rule_id":"OrULKb","rv_id":920124,"url":"https://semgrep.dev/playground/r/o5TK1Z7/gitlab.bandit.B113","version_id":"o5TK1Z7"}}},"severity":"WARNING","fingerprint":"03c101dba09bb59c0e941ac80997c88b9fb384a92ebb49b734d0ab86e7ef5ebf6c06bbd24d66bfe8deaeba8703c97deff16b16813fe33005e3b4f5bfeb7fd053_0","lines":"    html = requests.get(url).text","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-raise-for-status.use-raise-for-status","path":"secure_generated_code_31.py","start":{"line":5,"col":12,"offset":78},"end":{"line":5,"col":29,"offset":95},"extra":{"metavars":{},"message":"There's an HTTP request made with requests, but the raise_for_status() utility method isn't used. This can result in request errors going unnoticed and your code behaving in unexpected ways, such as if your authorization API returns a 500 error while you're only checking for a 401.","metadata":{"references":["https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status"],"category":"best-practice","technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-raise-for-status.use-raise-for-status","shortlink":"https://sg.run/J3Xw","semgrep.dev":{"rule":{"origin":"community","r_id":9690,"rule_id":"DbUWd2","rv_id":946440,"url":"https://semgrep.dev/playground/r/kbTYkXK/python.requests.best-practice.use-raise-for-status.use-raise-for-status","version_id":"kbTYkXK"}}},"severity":"WARNING","fingerprint":"cc157861452af62ef443a7b44798369227d54ac9913cc053370eb5fee592d2c8aad77afcd79c11a7790e8e9ae781308517b0e90761ccba7ad9ebee18195c91c2_0","lines":"    html = requests.get(url).text","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-timeout.use-timeout","path":"secure_generated_code_31.py","start":{"line":5,"col":12,"offset":78},"end":{"line":5,"col":29,"offset":95},"extra":{"metavars":{},"message":"Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.","fix":"requests.get(url, timeout=30)","metadata":{"category":"best-practice","references":["https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts","https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts"],"technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-timeout.use-timeout","shortlink":"https://sg.run/R8kO","semgrep.dev":{"rule":{"origin":"community","r_id":9693,"rule_id":"KxU42G","rv_id":946443,"url":"https://semgrep.dev/playground/r/O9TX3Yn/python.requests.best-practice.use-timeout.use-timeout","version_id":"O9TX3Yn"}}},"severity":"WARNING","fingerprint":"281d646ee75c7daa14b687680e97bbc58ee34c79e3146b5d06f78f64d94b255a7476fac7e3b4bb77ab758192fc023143acede7f80cd3f4650bc0db52d46cc37e_0","lines":"    html = requests.get(url).text","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_311.py","start":{"line":6,"col":12,"offset":158},"end":{"line":6,"col":48,"offset":194},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":158},"end":{"line":6,"col":20,"offset":166},"abstract_content":"template","propagated_value":{"svalue_start":{"line":5,"col":16,"offset":84},"svalue_end":{"line":5,"col":78,"offset":146},"svalue_abstract_content":"Template(\"<h1>{{ form_data.job.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"ab7e5a1a9951286be93754e8508e33579f3fbee3f09355e0a6a308ee1b60d7b604a186a9699ee6271f1955deefd9eab90109bb5e1fcabec919fe5d85cfc7e997_0","lines":"    return template.render(form_data=form_data)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_312.py","start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":38,"offset":171},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":20,"offset":153},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":76,"offset":133},"svalue_abstract_content":"Template(\"<h1>Post: {{ post.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"4bde38990e29ff7e697fd51c1e49fd8a7cb422b33f880a88934ad00cc0d59cc38205c6704088e2ec00448e94cc654c0afd89cbbadcfeb9cbb0bf5d819b9711ad_0","lines":"    return template.render(post=post)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_314.py","start":{"line":16,"col":12,"offset":302},"end":{"line":16,"col":61,"offset":351},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":16,"col":12,"offset":302},"end":{"line":16,"col":13,"offset":303},"abstract_content":"t","propagated_value":{"svalue_start":{"line":13,"col":5,"offset":216},"svalue_end":{"line":13,"col":44,"offset":255},"svalue_abstract_content":"Template(template_str autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"a2e5399230216388d538bad661d20100e9957ec151104a27c2dd1e222e171385388fc1c460b5718559e9ade7d8ad1fa69c85f10ca7d0c036831442c332580f9b_0","lines":"    return t.render(name=name, email=email, details=details)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_316.py","start":{"line":5,"col":12,"offset":148},"end":{"line":5,"col":46,"offset":182},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":148},"end":{"line":5,"col":20,"offset":156},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":65},"svalue_end":{"line":4,"col":87,"offset":136},"svalue_abstract_content":"jinja2.Template(\"<h1>{{ comments.first.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"768ebfc440d889e11e2260ec0d013665847037640abf8e960098b86e0194914ed14451c6405d1086db039b7b0f4ee7cdf0c7d150adcb6b2d7cf1297ec35a79a8_0","lines":"    return template.render(comments=comments)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B404","path":"secure_generated_code_318.py","start":{"line":2,"col":1,"offset":10},"end":{"line":2,"col":35,"offset":44},"extra":{"metavars":{},"message":"Consider possible security implications associated with subprocess module.\n","metadata":{"cwe":"CWE-78","owasp":"A8:2017-Insecure Deserialization","shortDescription":"Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","primary_identifier":"bandit.B404","secondary_identifiers":[{"name":"Bandit Test ID B404","type":"bandit_test_id","value":"B404"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B404","shortlink":"https://sg.run/lj3o","semgrep.dev":{"rule":{"origin":"community","r_id":11557,"rule_id":"4bUz3p","rv_id":835419,"url":"https://semgrep.dev/playground/r/A8T3lxl/gitlab.bandit.B404","version_id":"A8T3lxl"}}},"severity":"WARNING","fingerprint":"f05752a208858a62673f7216d118dcc998cae95318ab938a6c514783811e99ccfa180284ffac33ad11fd6926767df9bc94aa8cdf96883a2a069c989660d32645_0","lines":"from subprocess import Popen, PIPE","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_320.py","start":{"line":6,"col":1,"offset":162},"end":{"line":6,"col":41,"offset":202},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":1,"offset":162},"end":{"line":6,"col":9,"offset":170},"abstract_content":"template","propagated_value":{"svalue_start":{"line":3,"col":12,"offset":40},"svalue_end":{"line":3,"col":89,"offset":117},"svalue_abstract_content":"Template(\"<h1>Profile Image</h1><p>{{ profile_image }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"4e8f67211cb973a3c5e5f32c93025c8bd5ec1a9309c746e2383d38cc5886e51ea6144a27b4968c20ff3ee6fd63907152054c3f4e661365aafd47b78e8d3e67ea_0","lines":"template.render(image_url=profile_image)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_321.py","start":{"line":5,"col":12,"offset":152},"end":{"line":5,"col":44,"offset":184},"extra":{"metavars":{"$ENV":{"start":{"line":4,"col":16,"offset":101},"end":{"line":4,"col":19,"offset":104},"abstract_content":"env"},"$TEMPLATE":{"start":{"line":5,"col":12,"offset":152},"end":{"line":5,"col":20,"offset":160},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":101},"svalue_end":{"line":4,"col":55,"offset":140},"svalue_abstract_content":"env.get_template('search_results.html')"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"87303d3a9d6ec1114139f1a80636e63455a398a30eabec5668538481bc4a50764a39d9a89800d5428eaf24443b71b4284e51bc0965c6131bbf1517d66f63d322_0","lines":"    return template.render(results=results)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_322.py","start":{"line":5,"col":12,"offset":140},"end":{"line":5,"col":38,"offset":166},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":140},"end":{"line":5,"col":20,"offset":148},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":77},"svalue_end":{"line":4,"col":67,"offset":128},"svalue_abstract_content":"Template(\"<p>{{ farm.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"c65ded12ca6785ebff6f3b9bfe76f0f04ac0e78e74a25a9525e37901e83d4e149f1a38506a9615f04b51b65d2888f61bd24af43d5013fc61bea21e54134ccf34_0","lines":"    return template.render(farm=farm)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B113","path":"secure_generated_code_323.py","start":{"line":7,"col":24,"offset":149},"end":{"line":7,"col":42,"offset":167},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$METHOD":{"start":{"line":7,"col":33,"offset":158},"end":{"line":7,"col":36,"offset":161},"abstract_content":"get"}},"message":"The application was found using the `requests` module without configuring a timeout value for\nconnections. This could lead to uncontrolled resource consumption where the application could\nrun out of\nsocket descriptors, effectively causing a Denial of Service (DoS).\n\nTo remediate this issue, pass in a `timeout=` argument to each `requests` call.\n\nExample using a timeout for an HTTP GET request:\n```\n# Issue a GET request to https://example.com with a timeout of 10 seconds\nresponse = requests.get('https://example.com', timeout=10)\n# Work with the response object\n# ...\n```\n\nFor more information on using the requests module see:\n- https://requests.readthedocs.io/en/latest/api/\n","metadata":{"cwe":"CWE-400","category":"security","shortDescription":"Uncontrolled resource consumption","owasp":["A6:2017-Security Misconfiguration","A05:2021-Security Misconfiguration"],"security-severity":"Medium","primary_identifier":"bandit.B113","secondary_identifiers":[{"name":"Bandit Test ID B113","type":"bandit_test_id","value":"B113"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B113","shortlink":"https://sg.run/PoEq","semgrep.dev":{"rule":{"origin":"community","r_id":47601,"rule_id":"OrULKb","rv_id":920124,"url":"https://semgrep.dev/playground/r/o5TK1Z7/gitlab.bandit.B113","version_id":"o5TK1Z7"}}},"severity":"WARNING","fingerprint":"09e3aaa1dab2e7ee03656a500b6a3490ff66384a96f4a9266a7b4d9628d9d25d202226327310aef1df86b9014948e5e987afe9eef31d431c268981dd16c2aab9_0","lines":"            response = requests.get(link)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-timeout.use-timeout","path":"secure_generated_code_323.py","start":{"line":7,"col":24,"offset":149},"end":{"line":7,"col":42,"offset":167},"extra":{"metavars":{},"message":"Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.","fix":"requests.get(link, timeout=30)","metadata":{"category":"best-practice","references":["https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts","https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts"],"technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-timeout.use-timeout","shortlink":"https://sg.run/R8kO","semgrep.dev":{"rule":{"origin":"community","r_id":9693,"rule_id":"KxU42G","rv_id":946443,"url":"https://semgrep.dev/playground/r/O9TX3Yn/python.requests.best-practice.use-timeout.use-timeout","version_id":"O9TX3Yn"}}},"severity":"WARNING","fingerprint":"2a8dada1c9475c6b5d96fd46b7cf3b34baca29deade3438a010fcd73d3ca7959b61d97a6cb65019962fe8aef048c70de849482fd933a52cd2dfe20b81de540e0_0","lines":"            response = requests.get(link)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_326.py","start":{"line":5,"col":12,"offset":144},"end":{"line":5,"col":46,"offset":178},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":144},"end":{"line":5,"col":20,"offset":152},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":73,"offset":132},"svalue_abstract_content":"Template(\"<h1>{{ sighting.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"fdb099ff828eca051396b11a37bf990f3b383a61ef08d20ffc28d3b88f32387a13a591113169e39925da50c28217c6ed34343b30394f3a6e12d1fd864ce5e094_0","lines":"    return template.render(sighting=sighting)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_327.py","start":{"line":4,"col":10,"offset":41},"end":{"line":4,"col":25,"offset":56},"extra":{"metavars":{"$FILE":{"start":{"line":4,"col":15,"offset":46},"end":{"line":4,"col":19,"offset":50},"abstract_content":"path"},"$MODE":{"start":{"line":4,"col":21,"offset":52},"end":{"line":4,"col":24,"offset":55},"abstract_content":"'r'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"dfd1513f4f0ef45fff30cd1e643e61d4ee1b35e0cbc09b2d2600f40183d0a1ad613d0c18fb25222ec573bb45c3e6efe018b5c4b1528736e14d2055906bca8688_0","lines":"    with open(path, 'r') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_327.py","start":{"line":8,"col":10,"offset":119},"end":{"line":8,"col":25,"offset":134},"extra":{"metavars":{"$FILE":{"start":{"line":8,"col":15,"offset":124},"end":{"line":8,"col":19,"offset":128},"abstract_content":"path"},"$MODE":{"start":{"line":8,"col":21,"offset":130},"end":{"line":8,"col":24,"offset":133},"abstract_content":"'r'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"dfd1513f4f0ef45fff30cd1e643e61d4ee1b35e0cbc09b2d2600f40183d0a1ad613d0c18fb25222ec573bb45c3e6efe018b5c4b1528736e14d2055906bca8688_1","lines":"    with open(path, 'r') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_328.py","start":{"line":5,"col":12,"offset":136},"end":{"line":5,"col":44,"offset":168},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":136},"end":{"line":5,"col":20,"offset":144},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":67,"offset":124},"svalue_abstract_content":"Template(\"<h1>{{ message }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"0bb71d3b5b4994ba5bc16de718559fdbdd538fa9b15b0b445b7f8d5845d76eb6ed052b1aba2a243f437cf32c44fefa4720e36ffe04392fe5740344c71e708ed9_0","lines":"    return template.render(message=message)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_329.py","start":{"line":5,"col":12,"offset":128},"end":{"line":5,"col":40,"offset":156},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":128},"end":{"line":5,"col":20,"offset":136},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":69},"svalue_end":{"line":4,"col":63,"offset":116},"svalue_abstract_content":"Template(\"<p>{{ email }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"7251c71acd7aca7d164a47d55de78596c34af10eb2f368a39ab3568442d8f5c83fd96c013c679aee388afad588634f30831bd82339e3d1d47f64982b78308cce_0","lines":"    return template.render(email=email)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_33.py","start":{"line":5,"col":12,"offset":147},"end":{"line":5,"col":42,"offset":177},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":147},"end":{"line":5,"col":20,"offset":155},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":71},"svalue_end":{"line":4,"col":80,"offset":135},"svalue_abstract_content":"Template(\"<h1>Review: {{ review.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"1e9b459854d20b6ef2aad5b017d19e534d3ef27ca238655f18e9d8b616b08c3d25a94ca10720e59d3a98c06dde13bc588b1c0dc8f622aa31c225a999f3299617_0","lines":"    return template.render(review=review)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_330.py","start":{"line":6,"col":12,"offset":151},"end":{"line":6,"col":44,"offset":183},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":151},"end":{"line":6,"col":20,"offset":159},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":81,"offset":138},"svalue_abstract_content":"Template(\"<h1>Recipes</h1><p>{{ recipes }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"f7466f2560b6c5d5ece8bc86e32216d38e4a9896dfcf6289110b7a00cbcd8b0f78ed0e57d25cd4b7e87e6fd59511f897125e9404388a275110a0e3c87fa69322_0","lines":"    return template.render(recipes=recipes)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_331.py","start":{"line":5,"col":12,"offset":168},"end":{"line":5,"col":46,"offset":202},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":168},"end":{"line":5,"col":20,"offset":176},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":97,"offset":156},"svalue_abstract_content":"Template(\"<h1>Buy List</h1><p>{{ buy_list.buy_list_name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"656bb23f327ee5c7792de99f73782501179e546706058c7b199343d1080d9c3bcaa1db1ee5a8f17dd5c590773175d440b1c34827b42600df86864545375463fe_0","lines":"    return template.render(buy_list=buy_list)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_332.py","start":{"line":4,"col":10,"offset":43},"end":{"line":4,"col":32,"offset":65},"extra":{"metavars":{"$FILE":{"start":{"line":4,"col":15,"offset":48},"end":{"line":4,"col":26,"offset":59},"abstract_content":"'music.txt'"},"$MODE":{"start":{"line":4,"col":28,"offset":61},"end":{"line":4,"col":31,"offset":64},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"d592ce7c1129439278e395ce5bf71cc41491851361eb73020ee1f813f99ef3f05017bc3dbfc433488edb46aef90f52792363f2c12ace8f302570503cbbc3a696_0","lines":"    with open('music.txt', 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_333.py","start":{"line":5,"col":12,"offset":118},"end":{"line":5,"col":38,"offset":144},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":118},"end":{"line":5,"col":20,"offset":126},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":67},"svalue_end":{"line":4,"col":55,"offset":106},"svalue_abstract_content":"Template(\"{{ tips }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"9ce8270f4e704965ba74d3abbafdcf4b9b6885eaa3784da17e3736d16d3928fd3adc8f053124f62b3716e1619a4390af33f9cac4e55718b6d0645f21a112ac66_0","lines":"    return template.render(tips=tips)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B113","path":"secure_generated_code_335.py","start":{"line":5,"col":16,"offset":81},"end":{"line":5,"col":33,"offset":98},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$METHOD":{"start":{"line":5,"col":25,"offset":90},"end":{"line":5,"col":28,"offset":93},"abstract_content":"get"}},"message":"The application was found using the `requests` module without configuring a timeout value for\nconnections. This could lead to uncontrolled resource consumption where the application could\nrun out of\nsocket descriptors, effectively causing a Denial of Service (DoS).\n\nTo remediate this issue, pass in a `timeout=` argument to each `requests` call.\n\nExample using a timeout for an HTTP GET request:\n```\n# Issue a GET request to https://example.com with a timeout of 10 seconds\nresponse = requests.get('https://example.com', timeout=10)\n# Work with the response object\n# ...\n```\n\nFor more information on using the requests module see:\n- https://requests.readthedocs.io/en/latest/api/\n","metadata":{"cwe":"CWE-400","category":"security","shortDescription":"Uncontrolled resource consumption","owasp":["A6:2017-Security Misconfiguration","A05:2021-Security Misconfiguration"],"security-severity":"Medium","primary_identifier":"bandit.B113","secondary_identifiers":[{"name":"Bandit Test ID B113","type":"bandit_test_id","value":"B113"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B113","shortlink":"https://sg.run/PoEq","semgrep.dev":{"rule":{"origin":"community","r_id":47601,"rule_id":"OrULKb","rv_id":920124,"url":"https://semgrep.dev/playground/r/o5TK1Z7/gitlab.bandit.B113","version_id":"o5TK1Z7"}}},"severity":"WARNING","fingerprint":"e95d11f96ebbbf26d129e04ea3493f42c1ec08ad50253c92809af7bbbf5c0a99b48e12c207d838f42045dcf4ede33cb93e19bafeed150033d999f47dbce65ef5_0","lines":"    response = requests.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-raise-for-status.use-raise-for-status","path":"secure_generated_code_335.py","start":{"line":5,"col":16,"offset":81},"end":{"line":5,"col":33,"offset":98},"extra":{"metavars":{},"message":"There's an HTTP request made with requests, but the raise_for_status() utility method isn't used. This can result in request errors going unnoticed and your code behaving in unexpected ways, such as if your authorization API returns a 500 error while you're only checking for a 401.","metadata":{"references":["https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status"],"category":"best-practice","technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-raise-for-status.use-raise-for-status","shortlink":"https://sg.run/J3Xw","semgrep.dev":{"rule":{"origin":"community","r_id":9690,"rule_id":"DbUWd2","rv_id":946440,"url":"https://semgrep.dev/playground/r/kbTYkXK/python.requests.best-practice.use-raise-for-status.use-raise-for-status","version_id":"kbTYkXK"}}},"severity":"WARNING","fingerprint":"7e53f13b145284554934e9fa61b8543dfe935205580dc9e85a8b8931dbbf86156dc42d8d46a342e6fc038791d829098ab9ca2db73d38f853e0b6455209272265_0","lines":"    response = requests.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-timeout.use-timeout","path":"secure_generated_code_335.py","start":{"line":5,"col":16,"offset":81},"end":{"line":5,"col":33,"offset":98},"extra":{"metavars":{},"message":"Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.","fix":"requests.get(url, timeout=30)","metadata":{"category":"best-practice","references":["https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts","https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts"],"technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-timeout.use-timeout","shortlink":"https://sg.run/R8kO","semgrep.dev":{"rule":{"origin":"community","r_id":9693,"rule_id":"KxU42G","rv_id":946443,"url":"https://semgrep.dev/playground/r/O9TX3Yn/python.requests.best-practice.use-timeout.use-timeout","version_id":"O9TX3Yn"}}},"severity":"WARNING","fingerprint":"0b10cda024768da1ed150b8a8d45f5be1cbfa65219fb03db2dac4997c769fe1914d3e2d93f631d8784c424ab0765fa723a669214826bb6a3f0f299bb72987bb1_0","lines":"    response = requests.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B113","path":"secure_generated_code_337.py","start":{"line":15,"col":20,"offset":258},"end":{"line":15,"col":37,"offset":275},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$METHOD":{"start":{"line":15,"col":29,"offset":267},"end":{"line":15,"col":32,"offset":270},"abstract_content":"get"}},"message":"The application was found using the `requests` module without configuring a timeout value for\nconnections. This could lead to uncontrolled resource consumption where the application could\nrun out of\nsocket descriptors, effectively causing a Denial of Service (DoS).\n\nTo remediate this issue, pass in a `timeout=` argument to each `requests` call.\n\nExample using a timeout for an HTTP GET request:\n```\n# Issue a GET request to https://example.com with a timeout of 10 seconds\nresponse = requests.get('https://example.com', timeout=10)\n# Work with the response object\n# ...\n```\n\nFor more information on using the requests module see:\n- https://requests.readthedocs.io/en/latest/api/\n","metadata":{"cwe":"CWE-400","category":"security","shortDescription":"Uncontrolled resource consumption","owasp":["A6:2017-Security Misconfiguration","A05:2021-Security Misconfiguration"],"security-severity":"Medium","primary_identifier":"bandit.B113","secondary_identifiers":[{"name":"Bandit Test ID B113","type":"bandit_test_id","value":"B113"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B113","shortlink":"https://sg.run/PoEq","semgrep.dev":{"rule":{"origin":"community","r_id":47601,"rule_id":"OrULKb","rv_id":920124,"url":"https://semgrep.dev/playground/r/o5TK1Z7/gitlab.bandit.B113","version_id":"o5TK1Z7"}}},"severity":"WARNING","fingerprint":"14ec8c7bee803a2bb1b0d7b6df59ef5823e31b2087c71701bcf5118218a0d9daa7b33e481117d4251ee99101133c575bd34b04ee6c7df2c54345f94183d1558b_0","lines":"            resp = requests.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-raise-for-status.use-raise-for-status","path":"secure_generated_code_337.py","start":{"line":15,"col":20,"offset":258},"end":{"line":15,"col":37,"offset":275},"extra":{"metavars":{},"message":"There's an HTTP request made with requests, but the raise_for_status() utility method isn't used. This can result in request errors going unnoticed and your code behaving in unexpected ways, such as if your authorization API returns a 500 error while you're only checking for a 401.","metadata":{"references":["https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status"],"category":"best-practice","technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-raise-for-status.use-raise-for-status","shortlink":"https://sg.run/J3Xw","semgrep.dev":{"rule":{"origin":"community","r_id":9690,"rule_id":"DbUWd2","rv_id":946440,"url":"https://semgrep.dev/playground/r/kbTYkXK/python.requests.best-practice.use-raise-for-status.use-raise-for-status","version_id":"kbTYkXK"}}},"severity":"WARNING","fingerprint":"31629c7197561bcec14684c2d2fff77c82a54b3630b279fbefb394cfbee3989f5e05aa8a7171c9b73764e8407411b10460c7fdaa23602da71002d928234a03c5_0","lines":"            resp = requests.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-timeout.use-timeout","path":"secure_generated_code_337.py","start":{"line":15,"col":20,"offset":258},"end":{"line":15,"col":37,"offset":275},"extra":{"metavars":{},"message":"Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.","fix":"requests.get(url, timeout=30)","metadata":{"category":"best-practice","references":["https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts","https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts"],"technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-timeout.use-timeout","shortlink":"https://sg.run/R8kO","semgrep.dev":{"rule":{"origin":"community","r_id":9693,"rule_id":"KxU42G","rv_id":946443,"url":"https://semgrep.dev/playground/r/O9TX3Yn/python.requests.best-practice.use-timeout.use-timeout","version_id":"O9TX3Yn"}}},"severity":"WARNING","fingerprint":"12c307916ada69a4e31f5b18ddd41f0c68ad738a852a0e9b7dfbd5e3e27a3a69d955ccd24351871e4190e29cada203ae806ca761614b2e52ba73a6b98038802e_0","lines":"            resp = requests.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_338.py","start":{"line":6,"col":12,"offset":149},"end":{"line":6,"col":46,"offset":183},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":149},"end":{"line":6,"col":20,"offset":157},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":79},"svalue_end":{"line":4,"col":73,"offset":136},"svalue_abstract_content":"Template(\"<h1>{{ speakers.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"233df7a9e2faf5004f0776ad08f95bf94a9117f8d7cb8aebd6cbd2027b3e252331e47bd89c97ef2768bbac4e956177591e50906be853b3a50c7a4d2837082929_0","lines":"    return template.render(speakers=speakers)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_339.py","start":{"line":12,"col":8,"offset":278},"end":{"line":12,"col":35,"offset":305},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":12,"col":8,"offset":278},"end":{"line":12,"col":16,"offset":286},"abstract_content":"template","propagated_value":{"svalue_start":{"line":10,"col":12,"offset":201},"svalue_end":{"line":10,"col":80,"offset":269},"svalue_abstract_content":"Template(\"<p>Alice {{ username }} {{ email }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"78a50af6ae040c802dc91a01a163c4bee60c8e0aa96f47854ce58d34c840bbfa44b236becf4aa19a6f6dd275413c4b6d1847b57bbd601517e6b852b771ce0210_0","lines":"html = template.render(user=alice)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_34.py","start":{"line":5,"col":12,"offset":133},"end":{"line":5,"col":38,"offset":159},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":133},"end":{"line":5,"col":20,"offset":141},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":67},"svalue_end":{"line":4,"col":70,"offset":121},"svalue_abstract_content":"Template(\"<h1>{{ feed.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"56e2e3c5502a2ec761858c0b3a74485db94f4718e1011a71bf6d21de0f6a0db87dab9d673f6b6bc5f6dfbbf992b1be413aa8e552fe477379c61911c575fca9a3_0","lines":"    return template.render(feed=feed)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_340.py","start":{"line":6,"col":6,"offset":76},"end":{"line":6,"col":23,"offset":93},"extra":{"metavars":{"$FILE":{"start":{"line":6,"col":11,"offset":81},"end":{"line":6,"col":17,"offset":87},"abstract_content":"output","propagated_value":{"svalue_start":{"line":4,"col":10,"offset":55},"svalue_end":{"line":4,"col":24,"offset":69},"svalue_abstract_content":"'combined.txt'"}},"$MODE":{"start":{"line":6,"col":19,"offset":89},"end":{"line":6,"col":22,"offset":92},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"63885d347d5150e62748dc28565bf204b8cb9ff3b43d3990ddb46c954c3ca8590c4b4270267b1539258720192e85b5821770bf710d0bd200b878f1fd57efd8b0_0","lines":"with open(output, 'w') as outf:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_340.py","start":{"line":8,"col":14,"offset":136},"end":{"line":8,"col":21,"offset":143},"extra":{"metavars":{"$FILE":{"start":{"line":8,"col":19,"offset":141},"end":{"line":8,"col":20,"offset":142},"abstract_content":"f"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"a2a4f58fa3db391ba51e606b5fe46aa6b38e0ae804ab518c72885d33febdb5d68f244df3e03ddd3b355fce9b2d6c4e970a82ef1c1f2f0b34ca77d8c781ac8142_0","lines":"        with open(f) as inf:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"secure_generated_code_342.py","start":{"line":10,"col":15,"offset":220},"end":{"line":14,"col":8,"offset":356},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":20,"offset":150},"end":{"line":7,"col":24,"offset":154},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":10,"col":19,"offset":224},"end":{"line":11,"col":17,"offset":241},"abstract_content":"\n    <h1>Welcome "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"e4b8b66ba64b2eb88f3a7600fba8a4047507e0127715cc01984c1da81edca7cf32ce82a5f17f6b2fae03c1436bc6d0786663a9dedee4207e5b582bedf98ddb08_0","lines":"    message = f\"\"\"\n    <h1>Welcome {name}!</h1>\n    <p>You have been added to our mailing list.</p>\n    <p>We'll send updates to: {email}.</p>\n    \"\"\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"secure_generated_code_342.py","start":{"line":7,"col":12,"offset":142},"end":{"line":7,"col":24,"offset":154}},"request.form"]],"intermediate_vars":[{"location":{"path":"secure_generated_code_342.py","start":{"line":7,"col":5,"offset":135},"end":{"line":7,"col":9,"offset":139}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"secure_generated_code_342.py","start":{"line":10,"col":15,"offset":220},"end":{"line":14,"col":8,"offset":356}},"f\"\"\"\n    <h1>Welcome {name}!</h1>\n    <p>You have been added to our mailing list.</p>\n    <p>We'll send updates to: {email}.</p>\n    \"\"\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"secure_generated_code_342.py","start":{"line":10,"col":15,"offset":220},"end":{"line":14,"col":8,"offset":356},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":20,"offset":150},"end":{"line":7,"col":24,"offset":154},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":10,"col":19,"offset":224},"end":{"line":11,"col":17,"offset":241},"abstract_content":"\n    <h1>Welcome "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"e881ce031ca196ed7a6c7a997a4ec4dcfdebb6420cab3097f60abf97e7aeddea8e7f173af68603aadddaed875992ced795f79ecbcceeeefcc4d45b6c9a84d408_0","lines":"    message = f\"\"\"\n    <h1>Welcome {name}!</h1>\n    <p>You have been added to our mailing list.</p>\n    <p>We'll send updates to: {email}.</p>\n    \"\"\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"secure_generated_code_342.py","start":{"line":7,"col":12,"offset":142},"end":{"line":7,"col":24,"offset":154}},"request.form"]],"intermediate_vars":[{"location":{"path":"secure_generated_code_342.py","start":{"line":7,"col":5,"offset":135},"end":{"line":7,"col":9,"offset":139}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"secure_generated_code_342.py","start":{"line":10,"col":15,"offset":220},"end":{"line":14,"col":8,"offset":356}},"f\"\"\"\n    <h1>Welcome {name}!</h1>\n    <p>You have been added to our mailing list.</p>\n    <p>We'll send updates to: {email}.</p>\n    \"\"\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","path":"secure_generated_code_342.py","start":{"line":16,"col":14,"offset":371},"end":{"line":16,"col":19,"offset":376},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":8,"col":21,"offset":187},"end":{"line":8,"col":25,"offset":191},"abstract_content":"form"},"$FUNC":{"start":{"line":16,"col":8,"offset":365},"end":{"line":16,"col":13,"offset":370},"abstract_content":"chmod"},"$SINK":{"start":{"line":16,"col":14,"offset":371},"end":{"line":16,"col":19,"offset":376},"abstract_content":"email","propagated_value":{"svalue_start":{"line":8,"col":13,"offset":179},"svalue_end":{"line":8,"col":38,"offset":204},"svalue_abstract_content":"request.form.get('email')"}}},"message":"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. In Flask apps, consider using the Werkzeug util `werkzeug.utils.secure_filename()` to sanitize paths and filenames.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Path Traversal with Flask","functional-categories":["file::sink::file-access::fileinput","file::sink::file-access::io","file::sink::file-access::linecache","file::sink::file-access::os","file::sink::file-access::shutil","file::sink::file-access::stdlib","file::sink::file-access::stdlib2","file::sink::file-access::stdlib3","file::sink::file-access::tempfile","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::url-path-params::flask","web::source::url-query-string::flask"],"owasp":["A01:2021 - Broken Access Control","A05:2017 - Broken Access Control"],"references":["https://flask.palletsprojects.com/en/2.3.x/patterns/fileuploads/","https://owasp.org/Top10/A01_2021-Broken_Access_Control","https://owasp.org/www-community/attacks/Path_Traversal","https://portswigger.net/web-security/file-path-traversal","https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.utils.secure_filename"],"technology":["codecs","fileaccess","fileinput","flask","flask-wtf","io","linecache","os","shutil","stdlib","stdlib2","stdlib3","tempfile","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","shortlink":"https://sg.run/6J4gW","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116515,"rule_id":"2ZUzRLQ","rv_id":1042253,"url":"https://semgrep.dev/playground/r/nWTPn9A/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","version_id":"nWTPn9A"}}},"severity":"ERROR","fingerprint":"fa75f20cffc9177501f6fd521723e68aedcccbe81f0195f9ef555418e1e6d039e8708f7336f71660350da3c218796b5655157b95f4b031124cdb656724aa53e8_0","lines":"    os.chmod(email, 0o600)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"secure_generated_code_342.py","start":{"line":8,"col":13,"offset":179},"end":{"line":8,"col":38,"offset":204}},"request.form.get('email')"]],"intermediate_vars":[{"location":{"path":"secure_generated_code_342.py","start":{"line":8,"col":5,"offset":171},"end":{"line":8,"col":10,"offset":176}},"content":"email"}],"taint_sink":["CliLoc",[{"path":"secure_generated_code_342.py","start":{"line":16,"col":14,"offset":371},"end":{"line":16,"col":19,"offset":376}},"email"]]},"engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"secure_generated_code_348.py","start":{"line":14,"col":12,"offset":346},"end":{"line":14,"col":177,"offset":511},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":20,"offset":145},"end":{"line":7,"col":24,"offset":149},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":14,"col":14,"offset":348},"end":{"line":14,"col":39,"offset":373},"abstract_content":"<p>New lead:</p><p>Name: "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"bfad0481b7c4a62c8aa2a0e4432655254e9e7c15c5e54ecdb2bf400c24e8d9a17f377127d6c7901d3f1c45ef33d3d155e61d77046f88af8c484511713574f468_0","lines":"    resp = f\"<p>New lead:</p><p>Name: {name}</p><p>Email: {email}</p><p>Company: {company}</p><p>Phone: {phone}</p><p>Interested in {product}</p><p>Additional info: {info}</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"secure_generated_code_348.py","start":{"line":7,"col":12,"offset":137},"end":{"line":7,"col":24,"offset":149}},"request.form"]],"intermediate_vars":[{"location":{"path":"secure_generated_code_348.py","start":{"line":7,"col":5,"offset":130},"end":{"line":7,"col":9,"offset":134}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"secure_generated_code_348.py","start":{"line":14,"col":12,"offset":346},"end":{"line":14,"col":177,"offset":511}},"f\"<p>New lead:</p><p>Name: {name}</p><p>Email: {email}</p><p>Company: {company}</p><p>Phone: {phone}</p><p>Interested in {product}</p><p>Additional info: {info}</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"secure_generated_code_348.py","start":{"line":14,"col":12,"offset":346},"end":{"line":14,"col":177,"offset":511},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":20,"offset":145},"end":{"line":7,"col":24,"offset":149},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":14,"col":14,"offset":348},"end":{"line":14,"col":39,"offset":373},"abstract_content":"<p>New lead:</p><p>Name: "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"b070bbdd40d6d3241bed471e994fb5937532d19037c0b4e72b6bb4f8e35013a56f3846cff1fe7fb901971349db03731f7d3689211bc0e7efd26f59ff6378714e_0","lines":"    resp = f\"<p>New lead:</p><p>Name: {name}</p><p>Email: {email}</p><p>Company: {company}</p><p>Phone: {phone}</p><p>Interested in {product}</p><p>Additional info: {info}</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"secure_generated_code_348.py","start":{"line":7,"col":12,"offset":137},"end":{"line":7,"col":24,"offset":149}},"request.form"]],"intermediate_vars":[{"location":{"path":"secure_generated_code_348.py","start":{"line":7,"col":5,"offset":130},"end":{"line":7,"col":9,"offset":134}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"secure_generated_code_348.py","start":{"line":14,"col":12,"offset":346},"end":{"line":14,"col":177,"offset":511}},"f\"<p>New lead:</p><p>Name: {name}</p><p>Email: {email}</p><p>Company: {company}</p><p>Phone: {phone}</p><p>Interested in {product}</p><p>Additional info: {info}</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","path":"secure_generated_code_348.py","start":{"line":16,"col":12,"offset":524},"end":{"line":16,"col":31,"offset":543},"extra":{"metavars":{},"message":"Be careful with `flask.make_response()`. If this response is rendered onto a webpage, this could create a cross-site scripting (XSS) vulnerability. `flask.make_response()` will not autoescape HTML. If you are rendering HTML, write your HTML in a template file and use `flask.render_template()` which will take care of escaping. If you are returning data from an API, consider using `flask.jsonify()`.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"references":["https://github.com/python-security/pyt//blob/093a077bcf12d1f58ddeb2d73ddc096623985fb0/examples/vulnerable_code/XSS_assign_to_other_var.py#L11","https://flask.palletsprojects.com/en/1.1.x/api/#flask.Flask.make_response","https://flask.palletsprojects.com/en/1.1.x/api/#response-objects"],"category":"security","technology":["flask"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","shortlink":"https://sg.run/3x3p","semgrep.dev":{"rule":{"origin":"community","r_id":9543,"rule_id":"AbUz6A","rv_id":946217,"url":"https://semgrep.dev/playground/r/BjT1N6E/python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","version_id":"BjT1N6E"}}},"severity":"WARNING","fingerprint":"699c7f35b1ea1648ce738c2d1681ecc6d266968b66ea3f0d86070b6e5a4a24b23d97d86750749ec29b388bf9096ac249b64f48d79286f0e72b68408ac7e1d667_0","lines":"    return make_response(resp)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_35.py","start":{"line":6,"col":12,"offset":160},"end":{"line":6,"col":54,"offset":202},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":160},"end":{"line":6,"col":20,"offset":168},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":88},"svalue_end":{"line":4,"col":75,"offset":147},"svalue_abstract_content":"Template(\"<p>{{ registration.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"9cc3f50a040fddab17b968c03df5f47f294c0e3e914fb830e3f8fa81db7dd135f64a3f41f9909cbea260299e8f7601779eeec554e02fd9f438ae5efa927e044c_0","lines":"    return template.render(registration=registration)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B113","path":"secure_generated_code_351.py","start":{"line":8,"col":12,"offset":132},"end":{"line":8,"col":29,"offset":149},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$METHOD":{"start":{"line":8,"col":21,"offset":141},"end":{"line":8,"col":24,"offset":144},"abstract_content":"get"}},"message":"The application was found using the `requests` module without configuring a timeout value for\nconnections. This could lead to uncontrolled resource consumption where the application could\nrun out of\nsocket descriptors, effectively causing a Denial of Service (DoS).\n\nTo remediate this issue, pass in a `timeout=` argument to each `requests` call.\n\nExample using a timeout for an HTTP GET request:\n```\n# Issue a GET request to https://example.com with a timeout of 10 seconds\nresponse = requests.get('https://example.com', timeout=10)\n# Work with the response object\n# ...\n```\n\nFor more information on using the requests module see:\n- https://requests.readthedocs.io/en/latest/api/\n","metadata":{"cwe":"CWE-400","category":"security","shortDescription":"Uncontrolled resource consumption","owasp":["A6:2017-Security Misconfiguration","A05:2021-Security Misconfiguration"],"security-severity":"Medium","primary_identifier":"bandit.B113","secondary_identifiers":[{"name":"Bandit Test ID B113","type":"bandit_test_id","value":"B113"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B113","shortlink":"https://sg.run/PoEq","semgrep.dev":{"rule":{"origin":"community","r_id":47601,"rule_id":"OrULKb","rv_id":920124,"url":"https://semgrep.dev/playground/r/o5TK1Z7/gitlab.bandit.B113","version_id":"o5TK1Z7"}}},"severity":"WARNING","fingerprint":"ecfbc633f1eba79e6a11373be9ce5e9ef6feadffdd93519b6c3f6063a6a17745152d794c25fc4a73651673c8554f4dc532e8ddb296b616b3e3b0fc0140c5715c_0","lines":"    resp = requests.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-raise-for-status.use-raise-for-status","path":"secure_generated_code_351.py","start":{"line":8,"col":12,"offset":132},"end":{"line":8,"col":29,"offset":149},"extra":{"metavars":{},"message":"There's an HTTP request made with requests, but the raise_for_status() utility method isn't used. This can result in request errors going unnoticed and your code behaving in unexpected ways, such as if your authorization API returns a 500 error while you're only checking for a 401.","metadata":{"references":["https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status"],"category":"best-practice","technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-raise-for-status.use-raise-for-status","shortlink":"https://sg.run/J3Xw","semgrep.dev":{"rule":{"origin":"community","r_id":9690,"rule_id":"DbUWd2","rv_id":946440,"url":"https://semgrep.dev/playground/r/kbTYkXK/python.requests.best-practice.use-raise-for-status.use-raise-for-status","version_id":"kbTYkXK"}}},"severity":"WARNING","fingerprint":"185e6cfc1c82e1a511bceb4c8c7a42b9fcb43cb190161b371b17cd0d1caa607060fcec494c22a7434dae702ffefe5fc8ec74831404635b2750978229c4178953_0","lines":"    resp = requests.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-timeout.use-timeout","path":"secure_generated_code_351.py","start":{"line":8,"col":12,"offset":132},"end":{"line":8,"col":29,"offset":149},"extra":{"metavars":{},"message":"Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.","fix":"requests.get(url, timeout=30)","metadata":{"category":"best-practice","references":["https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts","https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts"],"technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-timeout.use-timeout","shortlink":"https://sg.run/R8kO","semgrep.dev":{"rule":{"origin":"community","r_id":9693,"rule_id":"KxU42G","rv_id":946443,"url":"https://semgrep.dev/playground/r/O9TX3Yn/python.requests.best-practice.use-timeout.use-timeout","version_id":"O9TX3Yn"}}},"severity":"WARNING","fingerprint":"ab994970c532d0d43ba3de2344fd1d10ae9acd8847bd7e77b511f861b702c366bc14b04063b04680afea36c9a07abe8906a39a34064394bc7d63b02c5ce8ecf4_0","lines":"    resp = requests.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.dangerous-template-string.dangerous-template-string","path":"secure_generated_code_352.py","start":{"line":9,"col":5,"offset":200},"end":{"line":11,"col":68,"offset":327},"extra":{"metavars":{"$V":{"start":{"line":9,"col":5,"offset":200},"end":{"line":9,"col":20,"offset":215},"abstract_content":"status_template"},"$X":{"start":{"line":9,"col":51,"offset":246},"end":{"line":9,"col":57,"offset":252},"abstract_content":"status","propagated_value":{"svalue_start":{"line":7,"col":14,"offset":172},"svalue_end":{"line":7,"col":36,"offset":194},"svalue_abstract_content":"request.form['status']"}}},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html","https://pequalsnp-team.github.io/cheatsheet/flask-jinja2-ssti"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.dangerous-template-string.dangerous-template-string","shortlink":"https://sg.run/b79E","semgrep.dev":{"rule":{"origin":"community","r_id":9526,"rule_id":"v8UnZJ","rv_id":946218,"url":"https://semgrep.dev/playground/r/DkTNpA8/python.flask.security.dangerous-template-string.dangerous-template-string","version_id":"DkTNpA8"}}},"severity":"ERROR","fingerprint":"ec0316dbebbc118f918a9c357c0cee26897f08250883c0dc3cb55b15cf44df3f00f43b11a2463e5472f1fd105660e02bd232b65bc048d687c415e47e169cbf0f_0","lines":"    status_template = f\"<h3>Status Update</h3><p>{status}</p>\"\n\n    return render_template_string(status_template, autoescape=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"secure_generated_code_352.py","start":{"line":9,"col":23,"offset":218},"end":{"line":9,"col":63,"offset":258},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":22,"offset":180},"end":{"line":7,"col":26,"offset":184},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":9,"col":25,"offset":220},"end":{"line":9,"col":50,"offset":245},"abstract_content":"<h3>Status Update</h3><p>"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"70137807e78d83a3b423c15e93095b030501b48a67ba63c561653166ce62ffd636f9480123a19b22e93279478051129c54407603db1858bfda07ab1a2df191b3_0","lines":"    status_template = f\"<h3>Status Update</h3><p>{status}</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"secure_generated_code_352.py","start":{"line":7,"col":14,"offset":172},"end":{"line":7,"col":26,"offset":184}},"request.form"]],"intermediate_vars":[{"location":{"path":"secure_generated_code_352.py","start":{"line":7,"col":5,"offset":163},"end":{"line":7,"col":11,"offset":169}},"content":"status"}],"taint_sink":["CliLoc",[{"path":"secure_generated_code_352.py","start":{"line":9,"col":23,"offset":218},"end":{"line":9,"col":63,"offset":258}},"f\"<h3>Status Update</h3><p>{status}</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"secure_generated_code_352.py","start":{"line":9,"col":23,"offset":218},"end":{"line":9,"col":63,"offset":258},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":22,"offset":180},"end":{"line":7,"col":26,"offset":184},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":9,"col":25,"offset":220},"end":{"line":9,"col":50,"offset":245},"abstract_content":"<h3>Status Update</h3><p>"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"4d480e1e36fd36d81b2cae02c7acc9899051cb9660f0caf0dfcb04a8d8c6afe2d9f380590d7b218aaf0c497fb0b2f7d562d237b7c62d51502a27762f20022027_0","lines":"    status_template = f\"<h3>Status Update</h3><p>{status}</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"secure_generated_code_352.py","start":{"line":7,"col":14,"offset":172},"end":{"line":7,"col":26,"offset":184}},"request.form"]],"intermediate_vars":[{"location":{"path":"secure_generated_code_352.py","start":{"line":7,"col":5,"offset":163},"end":{"line":7,"col":11,"offset":169}},"content":"status"}],"taint_sink":["CliLoc",[{"path":"secure_generated_code_352.py","start":{"line":9,"col":23,"offset":218},"end":{"line":9,"col":63,"offset":258}},"f\"<h3>Status Update</h3><p>{status}</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"secure_generated_code_352.py","start":{"line":11,"col":12,"offset":271},"end":{"line":11,"col":68,"offset":327},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"7b96b325f4bf53d68f04623fe8ac723afa83b38db5999e0e8ba215679adb5f39f1b905474c21c06c7d5b06e87e726eb810fa70f06b19f28ec7b362a34d5a6934_0","lines":"    return render_template_string(status_template, autoescape=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_353.py","start":{"line":6,"col":12,"offset":164},"end":{"line":6,"col":40,"offset":192},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":164},"end":{"line":6,"col":20,"offset":172},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":77},"svalue_end":{"line":4,"col":90,"offset":151},"svalue_abstract_content":"Template(\"<h1>Event Details</h1><p>{{ event.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"f29374c7d4a137d857dee971326ab936b3c753d7bc77c3c20f27d2961ef65b1c90ff671227af35d20476529bdff9f347a4922b5d165836febb72478d386b21e2_0","lines":"    return template.render(event=event)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_354.py","start":{"line":5,"col":12,"offset":136},"end":{"line":5,"col":40,"offset":164},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":136},"end":{"line":5,"col":20,"offset":144},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":69},"svalue_end":{"line":4,"col":71,"offset":124},"svalue_abstract_content":"Template(\"<h1>{{ event.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"f6b42b460d062b0d4db244159b0957d8be2a2b99393dc276a146052658b3397b49caa30e1b7c144bde242385c67f2820c807deb661bb99c3cf64764581fd4f1f_0","lines":"    return template.render(event=event)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","path":"secure_generated_code_355.py","start":{"line":8,"col":5,"offset":182},"end":{"line":8,"col":28,"offset":205},"extra":{"metavars":{"$METHOD":{"start":{"line":8,"col":8,"offset":185},"end":{"line":8,"col":13,"offset":190},"abstract_content":"chmod"},"$FILE":{"start":{"line":8,"col":14,"offset":191},"end":{"line":8,"col":19,"offset":196},"abstract_content":"image","propagated_value":{"svalue_start":{"line":4,"col":13,"offset":63},"svalue_end":{"line":4,"col":46,"offset":96},"svalue_abstract_content":"os.path.join(image'resize.jpg')"}},"$BITS":{"start":{"line":8,"col":21,"offset":198},"end":{"line":8,"col":27,"offset":204},"abstract_content":"0o1000"}},"message":"These permissions `0o1000` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.","metadata":{"category":"security","owasp":["A01:2021 - Broken Access Control"],"cwe":["CWE-276: Incorrect Default Permissions"],"technology":["python"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","shortlink":"https://sg.run/AXY4","semgrep.dev":{"rule":{"origin":"community","r_id":13594,"rule_id":"zdUYqR","rv_id":946346,"url":"https://semgrep.dev/playground/r/ZRT35dr/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","version_id":"ZRT35dr"}}},"severity":"WARNING","fingerprint":"2e23476a034859a6c4ea6c953789a170e2e677633adebd1632b08ce3e1eaaa613c8dc217491a683ed1804ceab5c0089986be322b4fd308927c592ec1a29917fc_0","lines":"    os.chmod(image, 0o1000)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","path":"secure_generated_code_355.py","start":{"line":9,"col":5,"offset":210},"end":{"line":9,"col":28,"offset":233},"extra":{"metavars":{"$METHOD":{"start":{"line":9,"col":8,"offset":213},"end":{"line":9,"col":13,"offset":218},"abstract_content":"chmod"},"$FILE":{"start":{"line":9,"col":14,"offset":219},"end":{"line":9,"col":19,"offset":224},"abstract_content":"image","propagated_value":{"svalue_start":{"line":4,"col":13,"offset":63},"svalue_end":{"line":4,"col":46,"offset":96},"svalue_abstract_content":"os.path.join(image'resize.jpg')"}},"$BITS":{"start":{"line":9,"col":21,"offset":226},"end":{"line":9,"col":27,"offset":232},"abstract_content":"0o2000"}},"message":"These permissions `0o2000` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.","metadata":{"category":"security","owasp":["A01:2021 - Broken Access Control"],"cwe":["CWE-276: Incorrect Default Permissions"],"technology":["python"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","shortlink":"https://sg.run/AXY4","semgrep.dev":{"rule":{"origin":"community","r_id":13594,"rule_id":"zdUYqR","rv_id":946346,"url":"https://semgrep.dev/playground/r/ZRT35dr/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","version_id":"ZRT35dr"}}},"severity":"WARNING","fingerprint":"501936f0dd7f10c6d1cceac0869c49bd1e9f7b615ca6d56532abe3c6fff50bf5ea5332be8a656cd327bf37f5509dc0bbdb9e3d744b4b5f57a3779553916db4d9_0","lines":"    os.chmod(image, 0o2000)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","path":"secure_generated_code_355.py","start":{"line":10,"col":5,"offset":238},"end":{"line":10,"col":28,"offset":261},"extra":{"metavars":{"$METHOD":{"start":{"line":10,"col":8,"offset":241},"end":{"line":10,"col":13,"offset":246},"abstract_content":"chmod"},"$FILE":{"start":{"line":10,"col":14,"offset":247},"end":{"line":10,"col":19,"offset":252},"abstract_content":"image","propagated_value":{"svalue_start":{"line":4,"col":13,"offset":63},"svalue_end":{"line":4,"col":46,"offset":96},"svalue_abstract_content":"os.path.join(image'resize.jpg')"}},"$BITS":{"start":{"line":10,"col":21,"offset":254},"end":{"line":10,"col":27,"offset":260},"abstract_content":"0o4000"}},"message":"These permissions `0o4000` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.","metadata":{"category":"security","owasp":["A01:2021 - Broken Access Control"],"cwe":["CWE-276: Incorrect Default Permissions"],"technology":["python"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","shortlink":"https://sg.run/AXY4","semgrep.dev":{"rule":{"origin":"community","r_id":13594,"rule_id":"zdUYqR","rv_id":946346,"url":"https://semgrep.dev/playground/r/ZRT35dr/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","version_id":"ZRT35dr"}}},"severity":"WARNING","fingerprint":"2de1d568696065a07f35aac8bf34fa773c3166a55d49c24a94f3df4f8b4bbafaf0c103b3d3afe786484015c0c3013356c0d2527c5db4f9ffd4f81a19b5da4199_0","lines":"    os.chmod(image, 0o4000)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","path":"secure_generated_code_355.py","start":{"line":12,"col":5,"offset":294},"end":{"line":12,"col":29,"offset":318},"extra":{"metavars":{"$METHOD":{"start":{"line":12,"col":8,"offset":297},"end":{"line":12,"col":13,"offset":302},"abstract_content":"chmod"},"$FILE":{"start":{"line":12,"col":14,"offset":303},"end":{"line":12,"col":19,"offset":308},"abstract_content":"image","propagated_value":{"svalue_start":{"line":4,"col":13,"offset":63},"svalue_end":{"line":4,"col":46,"offset":96},"svalue_abstract_content":"os.path.join(image'resize.jpg')"}},"$BITS":{"start":{"line":12,"col":21,"offset":310},"end":{"line":12,"col":28,"offset":317},"abstract_content":"0o10000"}},"message":"These permissions `0o10000` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.","metadata":{"category":"security","owasp":["A01:2021 - Broken Access Control"],"cwe":["CWE-276: Incorrect Default Permissions"],"technology":["python"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","shortlink":"https://sg.run/AXY4","semgrep.dev":{"rule":{"origin":"community","r_id":13594,"rule_id":"zdUYqR","rv_id":946346,"url":"https://semgrep.dev/playground/r/ZRT35dr/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","version_id":"ZRT35dr"}}},"severity":"WARNING","fingerprint":"ecaaa74fc217f4e84bcb233830ceaf8243fa21976091cada6798803b371e02b8cc6d4a281f37bc3371d7ddcf2214be94d6d86ba65636e8ad18e85413deb17575_0","lines":"    os.chmod(image, 0o10000)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","path":"secure_generated_code_355.py","start":{"line":13,"col":5,"offset":323},"end":{"line":13,"col":29,"offset":347},"extra":{"metavars":{"$METHOD":{"start":{"line":13,"col":8,"offset":326},"end":{"line":13,"col":13,"offset":331},"abstract_content":"chmod"},"$FILE":{"start":{"line":13,"col":14,"offset":332},"end":{"line":13,"col":19,"offset":337},"abstract_content":"image","propagated_value":{"svalue_start":{"line":4,"col":13,"offset":63},"svalue_end":{"line":4,"col":46,"offset":96},"svalue_abstract_content":"os.path.join(image'resize.jpg')"}},"$BITS":{"start":{"line":13,"col":21,"offset":339},"end":{"line":13,"col":28,"offset":346},"abstract_content":"0o20000"}},"message":"These permissions `0o20000` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.","metadata":{"category":"security","owasp":["A01:2021 - Broken Access Control"],"cwe":["CWE-276: Incorrect Default Permissions"],"technology":["python"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","shortlink":"https://sg.run/AXY4","semgrep.dev":{"rule":{"origin":"community","r_id":13594,"rule_id":"zdUYqR","rv_id":946346,"url":"https://semgrep.dev/playground/r/ZRT35dr/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","version_id":"ZRT35dr"}}},"severity":"WARNING","fingerprint":"645435d09f87718a500218d6bd6cb848c2c54572178130f205532f31243cf257a7a8e28c55de68591ecbe06dfccbe5547ab7b1a7b2681644d0d4b638d127a9db_0","lines":"    os.chmod(image, 0o20000)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","path":"secure_generated_code_355.py","start":{"line":14,"col":5,"offset":352},"end":{"line":14,"col":29,"offset":376},"extra":{"metavars":{"$METHOD":{"start":{"line":14,"col":8,"offset":355},"end":{"line":14,"col":13,"offset":360},"abstract_content":"chmod"},"$FILE":{"start":{"line":14,"col":14,"offset":361},"end":{"line":14,"col":19,"offset":366},"abstract_content":"image","propagated_value":{"svalue_start":{"line":4,"col":13,"offset":63},"svalue_end":{"line":4,"col":46,"offset":96},"svalue_abstract_content":"os.path.join(image'resize.jpg')"}},"$BITS":{"start":{"line":14,"col":21,"offset":368},"end":{"line":14,"col":28,"offset":375},"abstract_content":"0o40000"}},"message":"These permissions `0o40000` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.","metadata":{"category":"security","owasp":["A01:2021 - Broken Access Control"],"cwe":["CWE-276: Incorrect Default Permissions"],"technology":["python"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","shortlink":"https://sg.run/AXY4","semgrep.dev":{"rule":{"origin":"community","r_id":13594,"rule_id":"zdUYqR","rv_id":946346,"url":"https://semgrep.dev/playground/r/ZRT35dr/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","version_id":"ZRT35dr"}}},"severity":"WARNING","fingerprint":"9416cd86d282fbcbf30b8fe02ae1b076d51c1456543670adb62db17458e6ae0fa7941ec539cb2bf075bcbd045f21b862e17f7805fc9106f28b1e84508305b4aa_0","lines":"    os.chmod(image, 0o40000)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","path":"secure_generated_code_355.py","start":{"line":17,"col":5,"offset":440},"end":{"line":17,"col":30,"offset":465},"extra":{"metavars":{"$METHOD":{"start":{"line":17,"col":8,"offset":443},"end":{"line":17,"col":13,"offset":448},"abstract_content":"chmod"},"$FILE":{"start":{"line":17,"col":14,"offset":449},"end":{"line":17,"col":19,"offset":454},"abstract_content":"image","propagated_value":{"svalue_start":{"line":4,"col":13,"offset":63},"svalue_end":{"line":4,"col":46,"offset":96},"svalue_abstract_content":"os.path.join(image'resize.jpg')"}},"$BITS":{"start":{"line":17,"col":21,"offset":456},"end":{"line":17,"col":29,"offset":464},"abstract_content":"0o200000"}},"message":"These permissions `0o200000` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.","metadata":{"category":"security","owasp":["A01:2021 - Broken Access Control"],"cwe":["CWE-276: Incorrect Default Permissions"],"technology":["python"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","shortlink":"https://sg.run/AXY4","semgrep.dev":{"rule":{"origin":"community","r_id":13594,"rule_id":"zdUYqR","rv_id":946346,"url":"https://semgrep.dev/playground/r/ZRT35dr/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","version_id":"ZRT35dr"}}},"severity":"WARNING","fingerprint":"4c7a71e563fe7120846649810c0458812adf3d1e5e5a40a03773c8f8d433754c3a94a555f1c386bcdcd8a55fe0aee5e137dff761975af1c636018c8d6dbc7fde_0","lines":"    os.chmod(image, 0o200000)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","path":"secure_generated_code_355.py","start":{"line":18,"col":5,"offset":470},"end":{"line":18,"col":30,"offset":495},"extra":{"metavars":{"$METHOD":{"start":{"line":18,"col":8,"offset":473},"end":{"line":18,"col":13,"offset":478},"abstract_content":"chmod"},"$FILE":{"start":{"line":18,"col":14,"offset":479},"end":{"line":18,"col":19,"offset":484},"abstract_content":"image","propagated_value":{"svalue_start":{"line":4,"col":13,"offset":63},"svalue_end":{"line":4,"col":46,"offset":96},"svalue_abstract_content":"os.path.join(image'resize.jpg')"}},"$BITS":{"start":{"line":18,"col":21,"offset":486},"end":{"line":18,"col":29,"offset":494},"abstract_content":"0o400000"}},"message":"These permissions `0o400000` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.","metadata":{"category":"security","owasp":["A01:2021 - Broken Access Control"],"cwe":["CWE-276: Incorrect Default Permissions"],"technology":["python"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","shortlink":"https://sg.run/AXY4","semgrep.dev":{"rule":{"origin":"community","r_id":13594,"rule_id":"zdUYqR","rv_id":946346,"url":"https://semgrep.dev/playground/r/ZRT35dr/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","version_id":"ZRT35dr"}}},"severity":"WARNING","fingerprint":"0c8796a0e70ee88a93f46a2031b44d32f220834288a1040beeb85c031e5384a1dcf5b5eeda6a5654312cf57ba12264e8c4c54861dc5665c2e71fe0659f9502e5_0","lines":"    os.chmod(image, 0o400000)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_356.py","start":{"line":5,"col":12,"offset":127},"end":{"line":5,"col":34,"offset":149},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":127},"end":{"line":5,"col":20,"offset":135},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":63},"svalue_end":{"line":4,"col":68,"offset":115},"svalue_abstract_content":"Template(\"<h1>{{ ad.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"44a6b9a37780dcf19680be84382c9278468df7ffd7c5c519a8976c897926d51618cbf518d4423ed3c15cbe44130785b372d0ddc45bde3c0750f04b077b85af98_0","lines":"    return template.render(ad=ad)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_357.py","start":{"line":5,"col":12,"offset":127},"end":{"line":5,"col":38,"offset":153},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":127},"end":{"line":5,"col":20,"offset":135},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":67},"svalue_end":{"line":4,"col":64,"offset":115},"svalue_abstract_content":"Template(\"<h1>{{ name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"2961ebf423246faaed50812de8149fabc186727f7653a43bdd19473fded65cbd0be472667b397380c8ca0cdd1e1f6b03851521d5e0a9e12a215894ccb917f7b2_0","lines":"    return template.render(name=name)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_358.py","start":{"line":6,"col":12,"offset":182},"end":{"line":6,"col":56,"offset":226},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":182},"end":{"line":6,"col":20,"offset":190},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":85},"svalue_end":{"line":4,"col":100,"offset":169},"svalue_abstract_content":"Template(\"<h1>Search Results</h1><p>{{ search_result.title }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"2c84ef526bec7a917d40598bf7ed6d3bd7e6f74180247f6f08b2329edac3b71d823bc63b1989f194cedfd7bbdef788693d1a50a8e6b74781b466649c6507f14b_0","lines":"    return template.render(search_result=search_result)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_359.py","start":{"line":5,"col":12,"offset":147},"end":{"line":5,"col":42,"offset":177},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":147},"end":{"line":5,"col":20,"offset":155},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":71},"svalue_end":{"line":4,"col":80,"offset":135},"svalue_abstract_content":"Template(\"<h1>Review: {{ review.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"71d6543ae96f2e489adcb51b9f9503a947633b46001c81853a58f47d0cc4c677096ebe2b142cd696244f936f06edc4f3dda2184b1c3f7a905873795e349139d6_0","lines":"    return template.render(review=review)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_36.py","start":{"line":4,"col":10,"offset":44},"end":{"line":4,"col":29,"offset":63},"extra":{"metavars":{"$FILE":{"start":{"line":4,"col":15,"offset":49},"end":{"line":4,"col":23,"offset":57},"abstract_content":"log_file"},"$MODE":{"start":{"line":4,"col":25,"offset":59},"end":{"line":4,"col":28,"offset":62},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"b10eef99a7e08b4c3938ddf9f80c0363da0d64dfcd177e6b35c62f05e4d54d47bfa98aa006b63d48a17cef5e059192ff8714c648b08a45f034f8118ac6c39607_0","lines":"    with open(log_file, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_360.py","start":{"line":9,"col":12,"offset":212},"end":{"line":9,"col":29,"offset":229},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":9,"col":12,"offset":212},"end":{"line":9,"col":20,"offset":220},"abstract_content":"template","propagated_value":{"svalue_start":{"line":8,"col":16,"offset":146},"svalue_end":{"line":8,"col":70,"offset":200},"svalue_abstract_content":"Template(\"<p>{{ privacy.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"5b67ebea113999d205e42f916f3e6ee3c8b55fbe8c6e6e1c3c5ae6ea2c8b1354ce26075d0143b00e49e1c4fe86c078f729e94a9f7de375a00c037e27d392933a_0","lines":"    return template.render()","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_362.py","start":{"line":5,"col":12,"offset":139},"end":{"line":5,"col":38,"offset":165},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":139},"end":{"line":5,"col":20,"offset":147},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":70,"offset":127},"svalue_abstract_content":"Template(\"<h1>{{ item.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"1af3337d9ecab849901f1b5f361b68294ca36a536688898f75d5b630ea2f2bb4fd1f98e0826de42e3ff2a1e1e2c9cae355b605336a276aff026821280aec7cb3_0","lines":"    return template.render(item=item)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_366.py","start":{"line":5,"col":12,"offset":158},"end":{"line":5,"col":55,"offset":201},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":158},"end":{"line":5,"col":20,"offset":166},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":84},"svalue_end":{"line":4,"col":78,"offset":146},"svalue_abstract_content":"Template(\"<h1>{{ tag }}</h1> {{ articles }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"683727d9f09e8e9a9f7375e2459a199628f0690037ac885557971af374d271d9e2fd777f73cc4d4bc3ede58ef83900bb0f3f815db13888f53473552c438889ad_0","lines":"    return template.render(tag=tag, articles=articles)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_368.py","start":{"line":5,"col":12,"offset":130},"end":{"line":5,"col":38,"offset":156},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":130},"end":{"line":5,"col":20,"offset":138},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":58},"svalue_end":{"line":4,"col":76,"offset":118},"svalue_abstract_content":"jinja2.Template(\"<h1>{{ user.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"b1ec79c0260c64cb18db644942a7b2c0fbd9270708b9370225ebf70228096dbae47f0107252c755c0f14a116658e279e8b33604928bc9d2bf1570a55242bb565_0","lines":"    return template.render(user=user)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_37.py","start":{"line":5,"col":12,"offset":209},"end":{"line":5,"col":95,"offset":292},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":209},"end":{"line":5,"col":20,"offset":217},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":106},"svalue_end":{"line":4,"col":107,"offset":197},"svalue_abstract_content":"Template(\"<p>{{ name }} {{ email }} {{ company }} {{ requirements }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"3dbbac217e3584d02cb8f621bab5e106534a2fe93e5c161d42574c1a93ffec94b2aec6360156b3c533379f0e4ce9f860890d8749b469c4e94511b89866375d82_0","lines":"    return template.render(name=name, email=email, company=company, requirements=requirements)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B113","path":"secure_generated_code_370.py","start":{"line":9,"col":20,"offset":171},"end":{"line":9,"col":68,"offset":219},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$METHOD":{"start":{"line":9,"col":29,"offset":180},"end":{"line":9,"col":32,"offset":183},"abstract_content":"get"}},"message":"The application was found using the `requests` module without configuring a timeout value for\nconnections. This could lead to uncontrolled resource consumption where the application could\nrun out of\nsocket descriptors, effectively causing a Denial of Service (DoS).\n\nTo remediate this issue, pass in a `timeout=` argument to each `requests` call.\n\nExample using a timeout for an HTTP GET request:\n```\n# Issue a GET request to https://example.com with a timeout of 10 seconds\nresponse = requests.get('https://example.com', timeout=10)\n# Work with the response object\n# ...\n```\n\nFor more information on using the requests module see:\n- https://requests.readthedocs.io/en/latest/api/\n","metadata":{"cwe":"CWE-400","category":"security","shortDescription":"Uncontrolled resource consumption","owasp":["A6:2017-Security Misconfiguration","A05:2021-Security Misconfiguration"],"security-severity":"Medium","primary_identifier":"bandit.B113","secondary_identifiers":[{"name":"Bandit Test ID B113","type":"bandit_test_id","value":"B113"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B113","shortlink":"https://sg.run/PoEq","semgrep.dev":{"rule":{"origin":"community","r_id":47601,"rule_id":"OrULKb","rv_id":920124,"url":"https://semgrep.dev/playground/r/o5TK1Z7/gitlab.bandit.B113","version_id":"o5TK1Z7"}}},"severity":"WARNING","fingerprint":"bd2a8420889bf47c3f9d9ab8e075f9c0efb7bd22056ae6f4be9093252d257bda223d0a686c43af507257e9375c7e7e0ee10409a4fc3ee0ad5a8e283471e6c9f4_0","lines":"        raw_data = requests.get('https://www.example.com/data.csv').content","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-raise-for-status.use-raise-for-status","path":"secure_generated_code_370.py","start":{"line":9,"col":20,"offset":171},"end":{"line":9,"col":68,"offset":219},"extra":{"metavars":{},"message":"There's an HTTP request made with requests, but the raise_for_status() utility method isn't used. This can result in request errors going unnoticed and your code behaving in unexpected ways, such as if your authorization API returns a 500 error while you're only checking for a 401.","metadata":{"references":["https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status"],"category":"best-practice","technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-raise-for-status.use-raise-for-status","shortlink":"https://sg.run/J3Xw","semgrep.dev":{"rule":{"origin":"community","r_id":9690,"rule_id":"DbUWd2","rv_id":946440,"url":"https://semgrep.dev/playground/r/kbTYkXK/python.requests.best-practice.use-raise-for-status.use-raise-for-status","version_id":"kbTYkXK"}}},"severity":"WARNING","fingerprint":"8e1d46480936681acdde34209c3ac05c3db1e2c7ef1e50543dcf46e7bb1b3db03f85f02c7c5139cb65c1d5a9f2029a5f4515b6e2fd5472c0d2ca2d5c08d77ca2_0","lines":"        raw_data = requests.get('https://www.example.com/data.csv').content","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-timeout.use-timeout","path":"secure_generated_code_370.py","start":{"line":9,"col":20,"offset":171},"end":{"line":9,"col":68,"offset":219},"extra":{"metavars":{},"message":"Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.","fix":"requests.get('https://www.example.com/data.csv', timeout=30)","metadata":{"category":"best-practice","references":["https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts","https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts"],"technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-timeout.use-timeout","shortlink":"https://sg.run/R8kO","semgrep.dev":{"rule":{"origin":"community","r_id":9693,"rule_id":"KxU42G","rv_id":946443,"url":"https://semgrep.dev/playground/r/O9TX3Yn/python.requests.best-practice.use-timeout.use-timeout","version_id":"O9TX3Yn"}}},"severity":"WARNING","fingerprint":"22cf668876b9e6c8b2eb16b14cfc411c9ffbcd184f1a81bbab1a24e4ab8309b0e39530ac8d4ac99965391507aa3d01f8e6c23f483843cf031beb0c85eef8f3dc_0","lines":"        raw_data = requests.get('https://www.example.com/data.csv').content","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_371.py","start":{"line":6,"col":12,"offset":174},"end":{"line":6,"col":34,"offset":196},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":174},"end":{"line":6,"col":20,"offset":182},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":65},"svalue_end":{"line":4,"col":112,"offset":161},"svalue_abstract_content":"Template(\"<h1>Tip for burning calories</h1><p>Go for a run every morning.</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"e5fe62ae6974a5996f8017db4fcee4d1447fd969c55b0fe56fccedde02b13137d71cbfb7ca84338400f5fa885a7838f9423303719172c98fbb73e407477ede10_0","lines":"    return template.render(t=tip)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_373.py","start":{"line":5,"col":12,"offset":151},"end":{"line":5,"col":38,"offset":177},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":151},"end":{"line":5,"col":20,"offset":159},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":86},"svalue_end":{"line":4,"col":69,"offset":139},"svalue_abstract_content":"Template(\"<h1>{{ card.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"a54eeebc58cce5d3db78ca8ccae727e42cf74207fe0328f575ea606a7c16f98d24f4dd80a026b7112bf6c4c743e2c5bdfc430a14b1f414cadd87fae68ab3ce88_0","lines":"    return template.render(card=card)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_375.py","start":{"line":5,"col":12,"offset":135},"end":{"line":5,"col":40,"offset":163},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":135},"end":{"line":5,"col":20,"offset":143},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":69},"svalue_end":{"line":4,"col":70,"offset":123},"svalue_abstract_content":"Template(\"<h1>{{ habit.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"283deb66b6757db0b6f3642170e3ec9815313de7ac0f596410e1102cd89e8beaae1138027cf1d16e64e61364bce4dc9d05977cc80387ce422b59ed3eb3c2e3e2_0","lines":"    return template.render(habit=habit)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_376.py","start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":46,"offset":179},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":20,"offset":153},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":74,"offset":133},"svalue_abstract_content":"Template(\"<h1>{{ bookmark.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"51161927a6127b05301b2f4f6e4f33799e415dd87725c474613c0e8a4a1a2d3b2b574e38b553d973ad658b8b17de0e88588a683e3651178381c4a00cf233cffe_0","lines":"    return template.render(bookmark=bookmark)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_377.py","start":{"line":5,"col":12,"offset":174},"end":{"line":5,"col":66,"offset":228},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":174},"end":{"line":5,"col":20,"offset":182},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":95},"svalue_end":{"line":4,"col":83,"offset":162},"svalue_abstract_content":"Template(\"<h1>{{ vaccination_record.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"06e0f425f2d9415f3967b3812911545d1d425ce17133056883ddb091c3a441d6ab84618f3ba557708241ea4083dd12b81eb86e77011af0bac11d48c35dfed4d3_0","lines":"    return template.render(vaccination_record=vaccination_record)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_378.py","start":{"line":6,"col":12,"offset":179},"end":{"line":6,"col":58,"offset":225},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":179},"end":{"line":6,"col":20,"offset":187},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":87},"svalue_end":{"line":4,"col":95,"offset":166},"svalue_abstract_content":"Template(\"<h1>Search Results</h1><p>{{ search_results }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"999dff9c9e72336054e0d597735ec08f70f740cec7ef1cc0873c1de34c3418d3bbdce21bcdec4c9f40c08944df8221c013c1928c80d7667fb768ad9052b39a38_0","lines":"    return template.render(search_results=search_results)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_38.py","start":{"line":5,"col":12,"offset":128},"end":{"line":5,"col":40,"offset":156},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":128},"end":{"line":5,"col":20,"offset":136},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":69},"svalue_end":{"line":4,"col":63,"offset":116},"svalue_abstract_content":"Template(\"<p>{{ email }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"fb92de2ba9829c034948e32429d44a03bae1e2e905d061420c3944ebeae6121491acab73747ab564fa53a5fb94a0cfe053d0c720195bd937017160e9dbfa8e25_0","lines":"    return template.render(email=email)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_380.py","start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":44,"offset":173},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":20,"offset":149},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":72,"offset":129},"svalue_abstract_content":"Template(\"<h1>{{ product.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"797c5cc2527f91813590beb94081518ea6b487e570d16566969d013723858893e5effbf0e6b40afdea61a45ebf80935a336214248be7a4c1f343baafa772f53b_0","lines":"    return template.render(product=product)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_381.py","start":{"line":5,"col":12,"offset":192},"end":{"line":5,"col":86,"offset":266},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":192},"end":{"line":5,"col":20,"offset":200},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":92},"svalue_end":{"line":4,"col":104,"offset":180},"svalue_abstract_content":"Template(\"<p>{{ name }} {{ email }} {{ number_of_guests }} guests</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"6a930218f966796e2fbe9573c165b257ad3511e27c1d049e4d5a8222cbdfb68a70212d35a700305c9e8a9f248b66ee6fa623f7d10dfeb4a217258f65eec6b1f1_0","lines":"    return template.render(name=name, email=email, number_of_guests=number_of_guests)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_383.py","start":{"line":5,"col":12,"offset":191},"end":{"line":5,"col":40,"offset":219},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":191},"end":{"line":5,"col":20,"offset":199},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":69},"svalue_end":{"line":4,"col":126,"offset":179},"svalue_abstract_content":"Template(\"<img src=\\\"{{ image.url }}\\\" alt=\\\"{{ image.title }}\\\" /> {{ image.description }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"e3bb8aa294399ebbe5a8954dc94bd7cb14f942bd4df67a0b1889451771fa73d170d821eb5bde46de08a82f52e6eb224261d46ee454f41e21b1dd2661be39646a_0","lines":"    return template.render(image=image)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_387.py","start":{"line":5,"col":10,"offset":65},"end":{"line":5,"col":27,"offset":82},"extra":{"metavars":{"$FILE":{"start":{"line":5,"col":15,"offset":70},"end":{"line":5,"col":21,"offset":76},"abstract_content":"infile"},"$MODE":{"start":{"line":5,"col":23,"offset":78},"end":{"line":5,"col":26,"offset":81},"abstract_content":"'r'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"16b49ccb808c6c69104e182cd3e5882709ea9def1b9bcfa817529faaf049ac23f9fa86a7bd91ad283f38eb50f52461d0ee44fa052f1cc545e9de9bce51755157_0","lines":"    with open(infile, 'r') as f_in:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_387.py","start":{"line":11,"col":10,"offset":229},"end":{"line":11,"col":28,"offset":247},"extra":{"metavars":{"$FILE":{"start":{"line":11,"col":15,"offset":234},"end":{"line":11,"col":22,"offset":241},"abstract_content":"outfile"},"$MODE":{"start":{"line":11,"col":24,"offset":243},"end":{"line":11,"col":27,"offset":246},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"01a53081d451c14bd303b0c1827210a131ff761ccfb6d15efd8456f92f245bd4de4f05c15b7240e232cd626cdef9d0b97e0ef2c899362ddfd81e23d49b1e4380_0","lines":"    with open(outfile, 'w') as f_out:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_388.py","start":{"line":5,"col":12,"offset":160},"end":{"line":5,"col":40,"offset":188},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":160},"end":{"line":5,"col":20,"offset":168},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":78},"svalue_end":{"line":4,"col":86,"offset":148},"svalue_abstract_content":"Template(\"<h1>Search Results</h1><p>{{ items }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"b2cc052d9048f0a3b5198f1ed551d37075139502a75f1691c55931e8026462c0eaa0d5e32d77415159e96480fa02ff690a0e81af2c6a0b98f97953c3d5d37c6c_0","lines":"    return template.render(items=items)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_39.py","start":{"line":5,"col":12,"offset":140},"end":{"line":5,"col":38,"offset":166},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":140},"end":{"line":5,"col":20,"offset":148},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":69,"offset":128},"svalue_abstract_content":"Template(\"<h1>{{ rent.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"e79a812f8174eefe254d13f7980d01fd0a6e003cbe226490c4c10e02aaf8a80aec6f4d7e73ba44a6da49f88dc9be164d1235f77a315e9aae7a3c578a3425c678_0","lines":"    return template.render(rent=rent)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B113","path":"secure_generated_code_391.py","start":{"line":5,"col":12,"offset":78},"end":{"line":5,"col":29,"offset":95},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$METHOD":{"start":{"line":5,"col":21,"offset":87},"end":{"line":5,"col":24,"offset":90},"abstract_content":"get"}},"message":"The application was found using the `requests` module without configuring a timeout value for\nconnections. This could lead to uncontrolled resource consumption where the application could\nrun out of\nsocket descriptors, effectively causing a Denial of Service (DoS).\n\nTo remediate this issue, pass in a `timeout=` argument to each `requests` call.\n\nExample using a timeout for an HTTP GET request:\n```\n# Issue a GET request to https://example.com with a timeout of 10 seconds\nresponse = requests.get('https://example.com', timeout=10)\n# Work with the response object\n# ...\n```\n\nFor more information on using the requests module see:\n- https://requests.readthedocs.io/en/latest/api/\n","metadata":{"cwe":"CWE-400","category":"security","shortDescription":"Uncontrolled resource consumption","owasp":["A6:2017-Security Misconfiguration","A05:2021-Security Misconfiguration"],"security-severity":"Medium","primary_identifier":"bandit.B113","secondary_identifiers":[{"name":"Bandit Test ID B113","type":"bandit_test_id","value":"B113"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B113","shortlink":"https://sg.run/PoEq","semgrep.dev":{"rule":{"origin":"community","r_id":47601,"rule_id":"OrULKb","rv_id":920124,"url":"https://semgrep.dev/playground/r/o5TK1Z7/gitlab.bandit.B113","version_id":"o5TK1Z7"}}},"severity":"WARNING","fingerprint":"1d4a2fdae5e8b5dc0efb1aafd8d565283a1cceb5d4f16216a6c189cf1c11354ba33d21cfb6c257691599d0bb4ee2b6185758582fa98e3b97b09dc3ac92d585b0_0","lines":"    resp = requests.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-raise-for-status.use-raise-for-status","path":"secure_generated_code_391.py","start":{"line":5,"col":12,"offset":78},"end":{"line":5,"col":29,"offset":95},"extra":{"metavars":{},"message":"There's an HTTP request made with requests, but the raise_for_status() utility method isn't used. This can result in request errors going unnoticed and your code behaving in unexpected ways, such as if your authorization API returns a 500 error while you're only checking for a 401.","metadata":{"references":["https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status"],"category":"best-practice","technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-raise-for-status.use-raise-for-status","shortlink":"https://sg.run/J3Xw","semgrep.dev":{"rule":{"origin":"community","r_id":9690,"rule_id":"DbUWd2","rv_id":946440,"url":"https://semgrep.dev/playground/r/kbTYkXK/python.requests.best-practice.use-raise-for-status.use-raise-for-status","version_id":"kbTYkXK"}}},"severity":"WARNING","fingerprint":"095df5cfb371034fa48b1cfc4dab90ebdf14623836302bef92aa53b2ed7e79cf721a5ba9e730228621dd73cce8e23259cb33ec1719394026b892b4f8f573320f_0","lines":"    resp = requests.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-timeout.use-timeout","path":"secure_generated_code_391.py","start":{"line":5,"col":12,"offset":78},"end":{"line":5,"col":29,"offset":95},"extra":{"metavars":{},"message":"Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.","fix":"requests.get(url, timeout=30)","metadata":{"category":"best-practice","references":["https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts","https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts"],"technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-timeout.use-timeout","shortlink":"https://sg.run/R8kO","semgrep.dev":{"rule":{"origin":"community","r_id":9693,"rule_id":"KxU42G","rv_id":946443,"url":"https://semgrep.dev/playground/r/O9TX3Yn/python.requests.best-practice.use-timeout.use-timeout","version_id":"O9TX3Yn"}}},"severity":"WARNING","fingerprint":"9ae5371219a83b934a2c4ba72e73e899ac04822c3751457a31a3fe0595b896d6779b00ffc20145bab6ae9bb82941c56f2602c5ecb98456e64f9497f5e6914142_0","lines":"    resp = requests.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"secure_generated_code_392.py","start":{"line":9,"col":13,"offset":179},"end":{"line":9,"col":54,"offset":220},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":21,"offset":113},"end":{"line":7,"col":25,"offset":117},"abstract_content":"args"},"$HTMLSTR":{"start":{"line":9,"col":15,"offset":181},"end":{"line":9,"col":40,"offset":206},"abstract_content":"<p>No results found for '"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"dcb09f4d95a519ce72437afe104f89d6e3ecbe0b9842f27333f7092954237d84da3c771e740625136eaf37ab133cd7beee73bb40a260b589751d76fae1eb20fd_0","lines":"    resp += f\"<p>No results found for '{query}'.</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"secure_generated_code_392.py","start":{"line":7,"col":13,"offset":105},"end":{"line":7,"col":25,"offset":117}},"request.args"]],"intermediate_vars":[{"location":{"path":"secure_generated_code_392.py","start":{"line":7,"col":5,"offset":97},"end":{"line":7,"col":10,"offset":102}},"content":"query"}],"taint_sink":["CliLoc",[{"path":"secure_generated_code_392.py","start":{"line":9,"col":13,"offset":179},"end":{"line":9,"col":54,"offset":220}},"f\"<p>No results found for '{query}'.</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"secure_generated_code_392.py","start":{"line":9,"col":13,"offset":179},"end":{"line":9,"col":54,"offset":220},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":21,"offset":113},"end":{"line":7,"col":25,"offset":117},"abstract_content":"args"},"$HTMLSTR":{"start":{"line":9,"col":15,"offset":181},"end":{"line":9,"col":40,"offset":206},"abstract_content":"<p>No results found for '"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"83f4e027675477cabb5d39655e12f004fefa3bc671a72435148737e0391e59e93ff3cd9676ef5238cb89baf4ff907c52c7555a7844736261ff71623ec9316fb4_0","lines":"    resp += f\"<p>No results found for '{query}'.</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"secure_generated_code_392.py","start":{"line":7,"col":13,"offset":105},"end":{"line":7,"col":25,"offset":117}},"request.args"]],"intermediate_vars":[{"location":{"path":"secure_generated_code_392.py","start":{"line":7,"col":5,"offset":97},"end":{"line":7,"col":10,"offset":102}},"content":"query"}],"taint_sink":["CliLoc",[{"path":"secure_generated_code_392.py","start":{"line":9,"col":13,"offset":179},"end":{"line":9,"col":54,"offset":220}},"f\"<p>No results found for '{query}'.</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_396.py","start":{"line":5,"col":12,"offset":128},"end":{"line":5,"col":38,"offset":154},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":128},"end":{"line":5,"col":20,"offset":136},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":56},"svalue_end":{"line":4,"col":76,"offset":116},"svalue_abstract_content":"jinja2.Template(\"<h1>{{ user.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"622edf1f22491317b8f712a535f42f667eb7d2d1d918d2fbcedf3f960f0f13923e0e904a9b4de3d69a0b69eb2d51dfc4f31d73d362908a835696ded0694e5398_0","lines":"    return template.render(user=user)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","path":"secure_generated_code_397.py","start":{"line":5,"col":5,"offset":109},"end":{"line":10,"col":55,"offset":357},"extra":{"metavars":{"$FUNC":{"start":{"line":4,"col":5,"offset":71},"end":{"line":4,"col":17,"offset":83},"abstract_content":"update_stats"},"$DATA":{"start":{"line":5,"col":5,"offset":109},"end":{"line":5,"col":10,"offset":114},"abstract_content":"goals"},"$W":{"start":{"line":5,"col":21,"offset":125},"end":{"line":5,"col":25,"offset":129},"abstract_content":"POST"},"$CURSOR":{"start":{"line":10,"col":9,"offset":311},"end":{"line":10,"col":15,"offset":317},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":8,"col":10,"offset":195},"svalue_end":{"line":8,"col":29,"offset":214},"svalue_abstract_content":"connection.cursor()"}}},"message":"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","shortlink":"https://sg.run/qx7y","semgrep.dev":{"rule":{"origin":"community","r_id":9512,"rule_id":"2ZUbDL","rv_id":946186,"url":"https://semgrep.dev/playground/r/X0TL8rA/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","version_id":"X0TL8rA"}}},"severity":"WARNING","fingerprint":"997833eb4b6b25cb584acb39fcfff59198c2f79a22b1f7b3d27ee11942e1f1141f67d7101f4fb1d9ab9f7b58154ac9bd4172c1dba69202b38b8a3e02381dde8c_0","lines":"    goals = request.POST.get('goals')\n    assists = request.POST.get('assists')\n\n    with connection.cursor() as cursor:\n        sql = \"UPDATE stats SET goals = ?, assists = ? WHERE player_id = ?\";\n        cursor.execute(sql, goals, assists, player_id)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","path":"secure_generated_code_397.py","start":{"line":6,"col":5,"offset":147},"end":{"line":10,"col":55,"offset":357},"extra":{"metavars":{"$FUNC":{"start":{"line":4,"col":5,"offset":71},"end":{"line":4,"col":17,"offset":83},"abstract_content":"update_stats"},"$DATA":{"start":{"line":6,"col":5,"offset":147},"end":{"line":6,"col":12,"offset":154},"abstract_content":"assists"},"$W":{"start":{"line":6,"col":23,"offset":165},"end":{"line":6,"col":27,"offset":169},"abstract_content":"POST"},"$CURSOR":{"start":{"line":10,"col":9,"offset":311},"end":{"line":10,"col":15,"offset":317},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":8,"col":10,"offset":195},"svalue_end":{"line":8,"col":29,"offset":214},"svalue_abstract_content":"connection.cursor()"}}},"message":"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","shortlink":"https://sg.run/qx7y","semgrep.dev":{"rule":{"origin":"community","r_id":9512,"rule_id":"2ZUbDL","rv_id":946186,"url":"https://semgrep.dev/playground/r/X0TL8rA/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","version_id":"X0TL8rA"}}},"severity":"WARNING","fingerprint":"34cb41195ad1c435f5be0ef98d9caf9d0b6f5132293ac09eb52e0c26934787dcf380841ac51cfecce71ab70cb7d51ee912ca3b6f26889a78e340b9835078776b_0","lines":"    assists = request.POST.get('assists')\n\n    with connection.cursor() as cursor:\n        sql = \"UPDATE stats SET goals = ?, assists = ? WHERE player_id = ?\";\n        cursor.execute(sql, goals, assists, player_id)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_4.py","start":{"line":5,"col":12,"offset":166},"end":{"line":5,"col":52,"offset":206},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":166},"end":{"line":5,"col":20,"offset":174},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":81},"svalue_end":{"line":4,"col":89,"offset":154},"svalue_abstract_content":"Template(\"<h1>Application: {{ application.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"198525cd16f8a247317e113990c4f10d1873ee13033d9d498934fc04f9298e92b1e6b7ced779e59ff93e510071a80d36053974d3ad30035f0adb7584e4e37922_0","lines":"    return template.render(application=application)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_40.py","start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":46,"offset":179},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":20,"offset":153},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":74,"offset":133},"svalue_abstract_content":"Template(\"<h1>{{ playlist.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"9139f00b0149a4f7e8681f30afaef14fc0dd4157dd199230626119dcfe6788e78f3f2b4a512b4c9923f6cf8fb728080772234d9f248b472b8d7728f0f10e80ac_0","lines":"    return template.render(playlist=playlist)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B108","path":"secure_generated_code_400.py","start":{"line":28,"col":10,"offset":665},"end":{"line":28,"col":37,"offset":692},"extra":{"metavars":{"$CALL":{"start":{"line":28,"col":10,"offset":665},"end":{"line":28,"col":14,"offset":669},"abstract_content":"open"}},"message":"The application was found creating files in shared system temporary directories\n(`/tmp` or `/var/tmp`) without using the `tempfile.TemporaryFile` function. Depending\non how the application uses this temporary file, an attacker may be able to create\nsymlinks that point to other files prior to the application creating or writing\nto the target file, leading to unintended files being created or overwritten.\n\nExample using `tempfile.TemporaryFile` to write a file:\n```\nimport tempfile\n\n# Open a new temporary file using a context manager\nwith tempfile.TemporaryFile() as fp:\n    # Write some data to the temporary file\n    fp.write(b'Some data')\n    # Seek back to beginning of file\n    fp.seek(0)\n    # Read it\n    data = fp.read()\n# File is automatically closed/removed once we exit the with context\n```\n\nFor more information on alternative tempfile functions see:\n- https://docs.python.org/3/library/tempfile.html\n","metadata":{"cwe":"CWE-377","category":"security","shortDescription":"Insecure temporary file","owasp":["A5:2017-Broken Access Control","A01:2021-Broken Access Control"],"security-severity":"Medium","primary_identifier":"bandit.B108","secondary_identifiers":[{"name":"Bandit Test ID B108","type":"bandit_test_id","value":"B108"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B108","shortlink":"https://sg.run/QRL4","semgrep.dev":{"rule":{"origin":"community","r_id":39386,"rule_id":"0oU6oJ","rv_id":920134,"url":"https://semgrep.dev/playground/r/bZTLo1N/gitlab.bandit.B108","version_id":"bZTLo1N"}}},"severity":"WARNING","fingerprint":"ce6e761f88ac49b75e938e7ba7ef92f6018d150dde0eb4347c7bbe85f25d2ecc340ee3014b3126704fc1f7e9ad800cbe3b0a178de856fa4abff558b1a31a2760_0","lines":"    with open('/tmp/sizes.txt', 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B108-1","path":"secure_generated_code_400.py","start":{"line":28,"col":10,"offset":665},"end":{"line":28,"col":37,"offset":692},"extra":{"metavars":{},"message":"Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.\n","metadata":{"cwe":"CWE-377: Insecure Temporary File","license":"MIT","source":"https://semgrep.dev/r/gitlab.bandit.B108-1","shortlink":"https://sg.run/O81B","semgrep.dev":{"rule":{"origin":"community","r_id":11875,"rule_id":"6JU6qd","rv_id":13242,"url":"https://semgrep.dev/playground/r/l4TzRP/gitlab.bandit.B108-1","version_id":"l4TzRP"}}},"severity":"WARNING","fingerprint":"2cce8118c18f955db950929ba8d0d3605d14b1480fd03ca0c05ae71730f164c79adfc59ce40221fd2c107d612e41f20c235036267bd726eee96708edc34a0350_0","lines":"    with open('/tmp/sizes.txt', 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.hardcoded-tmp-path.hardcoded-tmp-path","path":"secure_generated_code_400.py","start":{"line":28,"col":10,"offset":665},"end":{"line":28,"col":37,"offset":692},"extra":{"metavars":{},"message":"Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.","metadata":{"references":["https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile"],"category":"best-practice","technology":["python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.hardcoded-tmp-path.hardcoded-tmp-path","shortlink":"https://sg.run/zv0W","semgrep.dev":{"rule":{"origin":"community","r_id":9561,"rule_id":"yyUnXZ","rv_id":946249,"url":"https://semgrep.dev/playground/r/LjTXy8O/python.lang.best-practice.hardcoded-tmp-path.hardcoded-tmp-path","version_id":"LjTXy8O"}}},"severity":"WARNING","fingerprint":"1a265a5008750b7782e2b45def1510cb4e1299a811668e58805a6fdb923caf59428066a036cb4b5c8224893c39003640e45422fc8537a7cd6a6e9a46acdfd742_0","lines":"    with open('/tmp/sizes.txt', 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_400.py","start":{"line":28,"col":10,"offset":665},"end":{"line":28,"col":37,"offset":692},"extra":{"metavars":{"$FILE":{"start":{"line":28,"col":15,"offset":670},"end":{"line":28,"col":31,"offset":686},"abstract_content":"'/tmp/sizes.txt'"},"$MODE":{"start":{"line":28,"col":33,"offset":688},"end":{"line":28,"col":36,"offset":691},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"c89627feadcc97ad0323be6076ee05df87ccdb10e5748ad751f63439ccd73a3298b09f9cfe63bc335d728bf34cad9b94c6a5d3fd54839b3117379d9abda88494_0","lines":"    with open('/tmp/sizes.txt', 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_403.py","start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":42,"offset":171},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":20,"offset":149},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":76},"svalue_end":{"line":4,"col":69,"offset":129},"svalue_abstract_content":"Template(\"<p>{{ review.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"894864591c32cf9aba4e236239b31bf07b2dd00b2fa98d84fd21802e3529c25de4bbd72279c55ae6cfa5d12f0dc05c67e63db0cecc127d512da14000459efecb_0","lines":"    return template.render(review=review)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_404.py","start":{"line":5,"col":12,"offset":137},"end":{"line":5,"col":38,"offset":163},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":137},"end":{"line":5,"col":20,"offset":145},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":72},"svalue_end":{"line":4,"col":69,"offset":125},"svalue_abstract_content":"Template(\"<h1>{{ user.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"4f5d142f23a5546eaf38648c71a50f10eb1c108e002c39ca9c61ed0330f127bc8ffc7ec30940c3aa319cacfe416b90c23fc52695913bb6f3869c60de6e010389_0","lines":"    return template.render(user=user)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","path":"secure_generated_code_405.py","start":{"line":8,"col":5,"offset":182},"end":{"line":8,"col":28,"offset":205},"extra":{"metavars":{"$METHOD":{"start":{"line":8,"col":8,"offset":185},"end":{"line":8,"col":13,"offset":190},"abstract_content":"chmod"},"$FILE":{"start":{"line":8,"col":14,"offset":191},"end":{"line":8,"col":19,"offset":196},"abstract_content":"image","propagated_value":{"svalue_start":{"line":4,"col":13,"offset":63},"svalue_end":{"line":4,"col":46,"offset":96},"svalue_abstract_content":"os.path.join(image'resize.jpg')"}},"$BITS":{"start":{"line":8,"col":21,"offset":198},"end":{"line":8,"col":27,"offset":204},"abstract_content":"0o1000"}},"message":"These permissions `0o1000` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.","metadata":{"category":"security","owasp":["A01:2021 - Broken Access Control"],"cwe":["CWE-276: Incorrect Default Permissions"],"technology":["python"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","shortlink":"https://sg.run/AXY4","semgrep.dev":{"rule":{"origin":"community","r_id":13594,"rule_id":"zdUYqR","rv_id":946346,"url":"https://semgrep.dev/playground/r/ZRT35dr/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","version_id":"ZRT35dr"}}},"severity":"WARNING","fingerprint":"de47a541e50b7f26d35c914a3f5f4e5d668f7cb1b860f724f9a51f2263925870d2353b7dcc8f8bd5a9d72e06d8b48b9cc1099f4fd99ae88558d45d6730ae0d84_0","lines":"    os.chmod(image, 0o1000)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","path":"secure_generated_code_405.py","start":{"line":9,"col":5,"offset":210},"end":{"line":9,"col":28,"offset":233},"extra":{"metavars":{"$METHOD":{"start":{"line":9,"col":8,"offset":213},"end":{"line":9,"col":13,"offset":218},"abstract_content":"chmod"},"$FILE":{"start":{"line":9,"col":14,"offset":219},"end":{"line":9,"col":19,"offset":224},"abstract_content":"image","propagated_value":{"svalue_start":{"line":4,"col":13,"offset":63},"svalue_end":{"line":4,"col":46,"offset":96},"svalue_abstract_content":"os.path.join(image'resize.jpg')"}},"$BITS":{"start":{"line":9,"col":21,"offset":226},"end":{"line":9,"col":27,"offset":232},"abstract_content":"0o2000"}},"message":"These permissions `0o2000` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.","metadata":{"category":"security","owasp":["A01:2021 - Broken Access Control"],"cwe":["CWE-276: Incorrect Default Permissions"],"technology":["python"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","shortlink":"https://sg.run/AXY4","semgrep.dev":{"rule":{"origin":"community","r_id":13594,"rule_id":"zdUYqR","rv_id":946346,"url":"https://semgrep.dev/playground/r/ZRT35dr/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","version_id":"ZRT35dr"}}},"severity":"WARNING","fingerprint":"6f088bc1443ca8a9f1dd0b0c18c1fdc25393b70f14dfb593a87450c21dbaaa987c6d2399459dbb92420c3a33385c003252c991dbc5ca88e8e3fec5278eead0d8_0","lines":"    os.chmod(image, 0o2000)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","path":"secure_generated_code_405.py","start":{"line":10,"col":5,"offset":238},"end":{"line":10,"col":28,"offset":261},"extra":{"metavars":{"$METHOD":{"start":{"line":10,"col":8,"offset":241},"end":{"line":10,"col":13,"offset":246},"abstract_content":"chmod"},"$FILE":{"start":{"line":10,"col":14,"offset":247},"end":{"line":10,"col":19,"offset":252},"abstract_content":"image","propagated_value":{"svalue_start":{"line":4,"col":13,"offset":63},"svalue_end":{"line":4,"col":46,"offset":96},"svalue_abstract_content":"os.path.join(image'resize.jpg')"}},"$BITS":{"start":{"line":10,"col":21,"offset":254},"end":{"line":10,"col":27,"offset":260},"abstract_content":"0o4000"}},"message":"These permissions `0o4000` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.","metadata":{"category":"security","owasp":["A01:2021 - Broken Access Control"],"cwe":["CWE-276: Incorrect Default Permissions"],"technology":["python"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","shortlink":"https://sg.run/AXY4","semgrep.dev":{"rule":{"origin":"community","r_id":13594,"rule_id":"zdUYqR","rv_id":946346,"url":"https://semgrep.dev/playground/r/ZRT35dr/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","version_id":"ZRT35dr"}}},"severity":"WARNING","fingerprint":"788ad318ed476605fceaf061863658a629d4dd85ede94afca8fb746dea6e03e2e803dc614ee7eb2e5a3a22449a37c6b3955c90cd0f94211a5b5981d8b8f71b1a_0","lines":"    os.chmod(image, 0o4000)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","path":"secure_generated_code_405.py","start":{"line":12,"col":5,"offset":294},"end":{"line":12,"col":29,"offset":318},"extra":{"metavars":{"$METHOD":{"start":{"line":12,"col":8,"offset":297},"end":{"line":12,"col":13,"offset":302},"abstract_content":"chmod"},"$FILE":{"start":{"line":12,"col":14,"offset":303},"end":{"line":12,"col":19,"offset":308},"abstract_content":"image","propagated_value":{"svalue_start":{"line":4,"col":13,"offset":63},"svalue_end":{"line":4,"col":46,"offset":96},"svalue_abstract_content":"os.path.join(image'resize.jpg')"}},"$BITS":{"start":{"line":12,"col":21,"offset":310},"end":{"line":12,"col":28,"offset":317},"abstract_content":"0o10000"}},"message":"These permissions `0o10000` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.","metadata":{"category":"security","owasp":["A01:2021 - Broken Access Control"],"cwe":["CWE-276: Incorrect Default Permissions"],"technology":["python"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","shortlink":"https://sg.run/AXY4","semgrep.dev":{"rule":{"origin":"community","r_id":13594,"rule_id":"zdUYqR","rv_id":946346,"url":"https://semgrep.dev/playground/r/ZRT35dr/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","version_id":"ZRT35dr"}}},"severity":"WARNING","fingerprint":"09333702d57bb878ad172731e200cd14fc9eb3d227082f62daef47c48eb8858df287c88089e9dd40fd00f7414a86139fdcf08db4e8a86a121a81e51784ccb26c_0","lines":"    os.chmod(image, 0o10000)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","path":"secure_generated_code_405.py","start":{"line":13,"col":5,"offset":323},"end":{"line":13,"col":29,"offset":347},"extra":{"metavars":{"$METHOD":{"start":{"line":13,"col":8,"offset":326},"end":{"line":13,"col":13,"offset":331},"abstract_content":"chmod"},"$FILE":{"start":{"line":13,"col":14,"offset":332},"end":{"line":13,"col":19,"offset":337},"abstract_content":"image","propagated_value":{"svalue_start":{"line":4,"col":13,"offset":63},"svalue_end":{"line":4,"col":46,"offset":96},"svalue_abstract_content":"os.path.join(image'resize.jpg')"}},"$BITS":{"start":{"line":13,"col":21,"offset":339},"end":{"line":13,"col":28,"offset":346},"abstract_content":"0o20000"}},"message":"These permissions `0o20000` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.","metadata":{"category":"security","owasp":["A01:2021 - Broken Access Control"],"cwe":["CWE-276: Incorrect Default Permissions"],"technology":["python"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","shortlink":"https://sg.run/AXY4","semgrep.dev":{"rule":{"origin":"community","r_id":13594,"rule_id":"zdUYqR","rv_id":946346,"url":"https://semgrep.dev/playground/r/ZRT35dr/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","version_id":"ZRT35dr"}}},"severity":"WARNING","fingerprint":"07820d9672c9c0bb6e72e8cde6e401843d92c440135deca169da64bd2931a790443f8351bf8a1743855fc10ae095b269070edec29a88c439fab56a6ecc8f98a5_0","lines":"    os.chmod(image, 0o20000)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","path":"secure_generated_code_405.py","start":{"line":14,"col":5,"offset":352},"end":{"line":14,"col":29,"offset":376},"extra":{"metavars":{"$METHOD":{"start":{"line":14,"col":8,"offset":355},"end":{"line":14,"col":13,"offset":360},"abstract_content":"chmod"},"$FILE":{"start":{"line":14,"col":14,"offset":361},"end":{"line":14,"col":19,"offset":366},"abstract_content":"image","propagated_value":{"svalue_start":{"line":4,"col":13,"offset":63},"svalue_end":{"line":4,"col":46,"offset":96},"svalue_abstract_content":"os.path.join(image'resize.jpg')"}},"$BITS":{"start":{"line":14,"col":21,"offset":368},"end":{"line":14,"col":28,"offset":375},"abstract_content":"0o40000"}},"message":"These permissions `0o40000` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.","metadata":{"category":"security","owasp":["A01:2021 - Broken Access Control"],"cwe":["CWE-276: Incorrect Default Permissions"],"technology":["python"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","shortlink":"https://sg.run/AXY4","semgrep.dev":{"rule":{"origin":"community","r_id":13594,"rule_id":"zdUYqR","rv_id":946346,"url":"https://semgrep.dev/playground/r/ZRT35dr/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","version_id":"ZRT35dr"}}},"severity":"WARNING","fingerprint":"db4712c8fa7d1ca01a74726709652c2f0bf2a175d97941b29249924862755bcdea6dd4f6c10845dac495f80fa609da12898c18a44a946f04dffe458108616a04_0","lines":"    os.chmod(image, 0o40000)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","path":"secure_generated_code_405.py","start":{"line":17,"col":5,"offset":440},"end":{"line":17,"col":30,"offset":465},"extra":{"metavars":{"$METHOD":{"start":{"line":17,"col":8,"offset":443},"end":{"line":17,"col":13,"offset":448},"abstract_content":"chmod"},"$FILE":{"start":{"line":17,"col":14,"offset":449},"end":{"line":17,"col":19,"offset":454},"abstract_content":"image","propagated_value":{"svalue_start":{"line":4,"col":13,"offset":63},"svalue_end":{"line":4,"col":46,"offset":96},"svalue_abstract_content":"os.path.join(image'resize.jpg')"}},"$BITS":{"start":{"line":17,"col":21,"offset":456},"end":{"line":17,"col":29,"offset":464},"abstract_content":"0o200000"}},"message":"These permissions `0o200000` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.","metadata":{"category":"security","owasp":["A01:2021 - Broken Access Control"],"cwe":["CWE-276: Incorrect Default Permissions"],"technology":["python"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","shortlink":"https://sg.run/AXY4","semgrep.dev":{"rule":{"origin":"community","r_id":13594,"rule_id":"zdUYqR","rv_id":946346,"url":"https://semgrep.dev/playground/r/ZRT35dr/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","version_id":"ZRT35dr"}}},"severity":"WARNING","fingerprint":"e3c02b63d9ddbe31f6780b2af845429cc939ee8c173f9f80fefd7d624462497e830e4d468b76126b98b5bb55a010eb9cc007db0869309158bf9dd377aac60c5a_0","lines":"    os.chmod(image, 0o200000)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","path":"secure_generated_code_405.py","start":{"line":18,"col":5,"offset":470},"end":{"line":18,"col":30,"offset":495},"extra":{"metavars":{"$METHOD":{"start":{"line":18,"col":8,"offset":473},"end":{"line":18,"col":13,"offset":478},"abstract_content":"chmod"},"$FILE":{"start":{"line":18,"col":14,"offset":479},"end":{"line":18,"col":19,"offset":484},"abstract_content":"image","propagated_value":{"svalue_start":{"line":4,"col":13,"offset":63},"svalue_end":{"line":4,"col":46,"offset":96},"svalue_abstract_content":"os.path.join(image'resize.jpg')"}},"$BITS":{"start":{"line":18,"col":21,"offset":486},"end":{"line":18,"col":29,"offset":494},"abstract_content":"0o400000"}},"message":"These permissions `0o400000` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.","metadata":{"category":"security","owasp":["A01:2021 - Broken Access Control"],"cwe":["CWE-276: Incorrect Default Permissions"],"technology":["python"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","shortlink":"https://sg.run/AXY4","semgrep.dev":{"rule":{"origin":"community","r_id":13594,"rule_id":"zdUYqR","rv_id":946346,"url":"https://semgrep.dev/playground/r/ZRT35dr/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","version_id":"ZRT35dr"}}},"severity":"WARNING","fingerprint":"770e5fbcabe59db784c9c43ecc8dd69c3b16175c373adcad604b1390693c831d29121e1553de49a1525386118cfb9ea8ceecba38d89fa8ad463b7d752ab10ee6_0","lines":"    os.chmod(image, 0o400000)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_406.py","start":{"line":5,"col":12,"offset":148},"end":{"line":5,"col":38,"offset":174},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":148},"end":{"line":5,"col":20,"offset":156},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":67},"svalue_end":{"line":4,"col":85,"offset":136},"svalue_abstract_content":"Template(\"<h1>Feeds</h1><p>{{ feed.feed_url }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"ef966ea4076c350a0e7a07bacf292103197c6650ebe1ad01ddadf58691aef0c75a44a2d1ba1c96dcae072cbe54ff2ae1a94feb85c13e401bc92ec324bf36cf41_0","lines":"    return template.render(feed=feed)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_407.py","start":{"line":6,"col":12,"offset":198},"end":{"line":6,"col":68,"offset":254},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":198},"end":{"line":6,"col":20,"offset":206},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":97},"svalue_end":{"line":4,"col":104,"offset":185},"svalue_abstract_content":"Template(\"<p>Campaign parameters:</p><p>{{ campaign_parameters }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"bdba040745e6443aec8f058df48ac6160d1c82b3c22ad2ae3072ff41b586e9370f4ca05402ad9aa1ea6490336bd20c8e8a4e10c8a751f4c13b2a4ada1c203776_0","lines":"    return template.render(campaign_parameters=campaign_parameters)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_408.py","start":{"line":5,"col":12,"offset":146},"end":{"line":5,"col":38,"offset":172},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":146},"end":{"line":5,"col":20,"offset":154},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":80},"svalue_end":{"line":4,"col":70,"offset":134},"svalue_abstract_content":"Template(\"<h1>{{ item.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"37fba1b4ea17e72038bc6a2c2b24b4122184278f5f003fd2f01f24e6b45bf6edfa304e046f2f0a74072ca56a5ddabfc0b5d0aecbb8cd7fc429995521f24ed04e_0","lines":"    return template.render(item=item)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_409.py","start":{"line":5,"col":12,"offset":138},"end":{"line":5,"col":42,"offset":168},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":138},"end":{"line":5,"col":20,"offset":146},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":71},"svalue_end":{"line":4,"col":71,"offset":126},"svalue_abstract_content":"Template(\"<h1>{{ lineup.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"7938b0420c7922fcf7fd85fbc3d3fbf0d90bc2618e04740dd080af3490abfe3b184efcb2b3d17639ca4d1a6fa8d99294aa06940c1217450ae0f6f8b57b51133d_0","lines":"    return template.render(lineup=lineup)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_410.py","start":{"line":6,"col":10,"offset":145},"end":{"line":6,"col":33,"offset":168},"extra":{"metavars":{"$FILE":{"start":{"line":6,"col":15,"offset":150},"end":{"line":6,"col":27,"offset":162},"abstract_content":"'orders.txt'"},"$MODE":{"start":{"line":6,"col":29,"offset":164},"end":{"line":6,"col":32,"offset":167},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"a1651d2e65b043fea7b5ba12a97896db900aada6bbdf88ab4717f735da4493b050ece617ebb050c283d1685cba8437a89b9c539923f73814b73bd62d151b4d14_0","lines":"    with open('orders.txt', 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_410.py","start":{"line":7,"col":17,"offset":191},"end":{"line":7,"col":47,"offset":221},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":7,"col":17,"offset":191},"end":{"line":7,"col":25,"offset":199},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":71},"svalue_end":{"line":4,"col":79,"offset":134},"svalue_abstract_content":"Template(\"<h1>Orders</h1><p>{{ orders }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"65ea15cd3ef36225574c14bcf4c3976f5ce36943dc6668873e92ed64adb6182f807066dfbd7df5d4176b42595fcb34ea2e9bff51e4c9bd4b26014b7743cb95c6_0","lines":"        f.write(template.render(orders=orders))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_411.py","start":{"line":5,"col":12,"offset":139},"end":{"line":5,"col":29,"offset":156},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":139},"end":{"line":5,"col":13,"offset":140},"abstract_content":"t","propagated_value":{"svalue_start":{"line":4,"col":9,"offset":70},"svalue_end":{"line":4,"col":66,"offset":127},"svalue_abstract_content":"Template(\"<p>{{ job.posted_date }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"5380936c08d53ee6e256fa013c0487ea263bcdffd112e87b188198614d3b3ab3cf2409c51fa066a0166520b2ec2a14625c1da608135c115f34ef9f4957d97e88_0","lines":"    return t.render(job=job)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_415.py","start":{"line":6,"col":12,"offset":145},"end":{"line":6,"col":60,"offset":193},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":145},"end":{"line":6,"col":20,"offset":153},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":73,"offset":132},"svalue_abstract_content":"Template(\"<h1>{{ show['title'] }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"0d9ef15c6ec0c2dd69a0a4a2a9e62489a955171dac6f011cd055f697bcaf2b40dee3c3e452d7f620ec5427267fc7a3a8fd27da6bd2f5f41f8cd740f51a6c8ca2_0","lines":"    return template.render(description=show['description'])","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_417.py","start":{"line":4,"col":10,"offset":54},"end":{"line":4,"col":39,"offset":83},"extra":{"metavars":{"$FILE":{"start":{"line":4,"col":15,"offset":59},"end":{"line":4,"col":32,"offset":76},"abstract_content":"'high_scores.txt'"},"$MODE":{"start":{"line":4,"col":34,"offset":78},"end":{"line":4,"col":38,"offset":82},"abstract_content":"'a+'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"386b6d57fad037ffb4273a3b302386c9381cd3b2adf0fb44ac41915e6e486a5d03be688cb6eaee4b43815433b819bb0698236a88d79480bf7a81cc7ec75756c9_0","lines":"    with open('high_scores.txt', 'a+') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_421.py","start":{"line":5,"col":12,"offset":140},"end":{"line":5,"col":44,"offset":172},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":140},"end":{"line":5,"col":20,"offset":148},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":79},"svalue_end":{"line":4,"col":65,"offset":128},"svalue_abstract_content":"Template(\"<p>{{ caption }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"160c41ba485da9a7dc5dcfeab3de87d24f215765008a95349e8faa0781d7a9fe11a038beaa6f12ee585ef490b8fbefdb34c0180728d54e6f4ad68a77479793f8_0","lines":"    return template.render(caption=caption)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_424.py","start":{"line":5,"col":12,"offset":130},"end":{"line":5,"col":40,"offset":158},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":130},"end":{"line":5,"col":20,"offset":138},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":69},"svalue_end":{"line":4,"col":65,"offset":118},"svalue_abstract_content":"Template(\"<h1>{{ notes }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"b863c83f322eaef48e11d517768487bd10ac1b05de67875598462d6f3b8f250d7b38350c7d70e9b83e47aabad3506c9ea0781a34aa962c1d3e64bcc5e8dd0c3a_0","lines":"    return template.render(notes=notes)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B113","path":"secure_generated_code_425.py","start":{"line":9,"col":12,"offset":160},"end":{"line":9,"col":29,"offset":177},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$METHOD":{"start":{"line":9,"col":21,"offset":169},"end":{"line":9,"col":24,"offset":172},"abstract_content":"get"}},"message":"The application was found using the `requests` module without configuring a timeout value for\nconnections. This could lead to uncontrolled resource consumption where the application could\nrun out of\nsocket descriptors, effectively causing a Denial of Service (DoS).\n\nTo remediate this issue, pass in a `timeout=` argument to each `requests` call.\n\nExample using a timeout for an HTTP GET request:\n```\n# Issue a GET request to https://example.com with a timeout of 10 seconds\nresponse = requests.get('https://example.com', timeout=10)\n# Work with the response object\n# ...\n```\n\nFor more information on using the requests module see:\n- https://requests.readthedocs.io/en/latest/api/\n","metadata":{"cwe":"CWE-400","category":"security","shortDescription":"Uncontrolled resource consumption","owasp":["A6:2017-Security Misconfiguration","A05:2021-Security Misconfiguration"],"security-severity":"Medium","primary_identifier":"bandit.B113","secondary_identifiers":[{"name":"Bandit Test ID B113","type":"bandit_test_id","value":"B113"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B113","shortlink":"https://sg.run/PoEq","semgrep.dev":{"rule":{"origin":"community","r_id":47601,"rule_id":"OrULKb","rv_id":920124,"url":"https://semgrep.dev/playground/r/o5TK1Z7/gitlab.bandit.B113","version_id":"o5TK1Z7"}}},"severity":"WARNING","fingerprint":"fc0d8b313f92522056432c8d0a9777b3e717e8511d8a5cc8923c0b4860a09d9bbfd713004aea2e184b11d057b8611280e90c48122bec9f92eb05fc0cb9804b96_0","lines":"    resp = requests.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-raise-for-status.use-raise-for-status","path":"secure_generated_code_425.py","start":{"line":9,"col":12,"offset":160},"end":{"line":9,"col":29,"offset":177},"extra":{"metavars":{},"message":"There's an HTTP request made with requests, but the raise_for_status() utility method isn't used. This can result in request errors going unnoticed and your code behaving in unexpected ways, such as if your authorization API returns a 500 error while you're only checking for a 401.","metadata":{"references":["https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status"],"category":"best-practice","technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-raise-for-status.use-raise-for-status","shortlink":"https://sg.run/J3Xw","semgrep.dev":{"rule":{"origin":"community","r_id":9690,"rule_id":"DbUWd2","rv_id":946440,"url":"https://semgrep.dev/playground/r/kbTYkXK/python.requests.best-practice.use-raise-for-status.use-raise-for-status","version_id":"kbTYkXK"}}},"severity":"WARNING","fingerprint":"df0b541adef43a21f9aaebc757342dd1675b3ad002078eb3ff2bf782e19200e7f15224b9df817ccfd3de3cfbc3c6a97ed98ed1b9c927ddbd952cd07eb32d8b38_0","lines":"    resp = requests.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-timeout.use-timeout","path":"secure_generated_code_425.py","start":{"line":9,"col":12,"offset":160},"end":{"line":9,"col":29,"offset":177},"extra":{"metavars":{},"message":"Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.","fix":"requests.get(url, timeout=30)","metadata":{"category":"best-practice","references":["https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts","https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts"],"technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-timeout.use-timeout","shortlink":"https://sg.run/R8kO","semgrep.dev":{"rule":{"origin":"community","r_id":9693,"rule_id":"KxU42G","rv_id":946443,"url":"https://semgrep.dev/playground/r/O9TX3Yn/python.requests.best-practice.use-timeout.use-timeout","version_id":"O9TX3Yn"}}},"severity":"WARNING","fingerprint":"4c9dbc5524524cb6db7e5100ee4544acf5ec7e74f78180622feab2d06413a3861d0d113c728246508f236a4d171c95426a3e5c83d2fc8074c692ebba3cff7e47_0","lines":"    resp = requests.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_427.py","start":{"line":8,"col":5,"offset":249},"end":{"line":8,"col":74,"offset":318},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":8,"col":5,"offset":249},"end":{"line":8,"col":13,"offset":257},"abstract_content":"template"}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"8af8f4bfe76368fab357d48e290bffece29f3b5351ca9413b8015f9414b28a6d94269451b7360c4e94396db3788b2b031ab63bf8e34491af3abab0f1b3eab8bb_0","lines":"    template.render(order_ids=order_ids, delivery_status=delivery_status)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_428.py","start":{"line":5,"col":12,"offset":151},"end":{"line":5,"col":42,"offset":181},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":151},"end":{"line":5,"col":20,"offset":159},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":76},"svalue_end":{"line":4,"col":79,"offset":139},"svalue_abstract_content":"Template(\"<h1>Metric: {{ metric.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"2e68c9d307a6c74c2cc334137e5173aaae7af525ad7d1483a5e9a005eb4876cec429609e8b0a83ac1c1fe3be20f0ae30e09c5f90b4515bd649dad1d780210b79_0","lines":"    return template.render(metric=metric)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_429.py","start":{"line":5,"col":12,"offset":138},"end":{"line":5,"col":42,"offset":168},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":138},"end":{"line":5,"col":20,"offset":146},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":71},"svalue_end":{"line":4,"col":71,"offset":126},"svalue_abstract_content":"Template(\"<h1>{{ object.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"0a9d51d4e02cee47490bd86cf877885c8e59e1a8b61a98da452541635336984145f4861b40022ee6270438f416bc08488366e50fd93fbaff2f7a57650b619224_0","lines":"    return template.render(object=object)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_430.py","start":{"line":5,"col":12,"offset":161},"end":{"line":5,"col":52,"offset":201},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":161},"end":{"line":5,"col":20,"offset":169},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":89},"svalue_end":{"line":4,"col":76,"offset":149},"svalue_abstract_content":"Template(\"<h1>{{ scholarship.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"993d31abef4b686fa1fe2cfb2cab08b3097afefac78d4f3c35d229724fb64d512fe6a5c09a5724e5e122b5a7154f7f5657a5ebb91fb9861e157ccc016e8d5e0b_0","lines":"    return template.render(scholarship=scholarship)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_431.py","start":{"line":6,"col":12,"offset":146},"end":{"line":6,"col":38,"offset":172},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":146},"end":{"line":6,"col":20,"offset":154},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":74,"offset":133},"svalue_abstract_content":"Template(\"<h1>Team {{ team.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"c94c2882f9a2e8811f401c1794bd89ae84a94cc86cc88d9e7011ee5aa5c4b8b19ad37f78f41841e41f6283ce2672c05f51667d4df5abf6fe27d4d284196962ec_0","lines":"    return template.render(team=team)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_432.py","start":{"line":5,"col":12,"offset":124},"end":{"line":5,"col":38,"offset":150},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":124},"end":{"line":5,"col":20,"offset":132},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":67},"svalue_end":{"line":4,"col":61,"offset":112},"svalue_abstract_content":"Template(\"{{ data.title }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"87716f65e1d60daa6e9b9b0c3c3e5182dfad13e64e990cdfeb6fb01989949acb3142306c5dc50837b804fbb1e57f3d057632732fb02ba90a1d69640e96ce9c41_0","lines":"    return template.render(data=data)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_433.py","start":{"line":5,"col":12,"offset":250},"end":{"line":5,"col":52,"offset":290},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":250},"end":{"line":5,"col":20,"offset":258},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":81},"svalue_end":{"line":4,"col":173,"offset":238},"svalue_abstract_content":"Template(\"<h1>{{ lesson_plan.subject }}</h1><p>{{ lesson_plan.topic }}</p><p>{{ lesson_plan.grade }}</p><p>{{ lesson_plan.standards }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"e8040378624e7234e4ea4c5f87ba5fd7512435e04194f6d3c1e1790fefc3138ef2df6c14da6d3b386ea9574d6d925a6c889b65668f287c6ab5a989ca5add2a7e_0","lines":"    return template.render(lesson_plan=lesson_plan)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_44.py","start":{"line":5,"col":12,"offset":151},"end":{"line":5,"col":57,"offset":196},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":151},"end":{"line":5,"col":20,"offset":159},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":63},"svalue_end":{"line":4,"col":92,"offset":139},"svalue_abstract_content":"jinja2.Template(\"<h1>{{ title }}</h1><p>{{ content }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"8592a3e8d2926a36f7160540a4f8da1d9a3af0bab225c374ec85d7e8a32e5e68381b0765b12a25b154886e1207b411cd517202bca494fa34ba0f31fbc202d37b_0","lines":"    return template.render(title=title, content=content)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B113","path":"secure_generated_code_441.py","start":{"line":8,"col":12,"offset":149},"end":{"line":8,"col":29,"offset":166},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$METHOD":{"start":{"line":8,"col":21,"offset":158},"end":{"line":8,"col":24,"offset":161},"abstract_content":"get"}},"message":"The application was found using the `requests` module without configuring a timeout value for\nconnections. This could lead to uncontrolled resource consumption where the application could\nrun out of\nsocket descriptors, effectively causing a Denial of Service (DoS).\n\nTo remediate this issue, pass in a `timeout=` argument to each `requests` call.\n\nExample using a timeout for an HTTP GET request:\n```\n# Issue a GET request to https://example.com with a timeout of 10 seconds\nresponse = requests.get('https://example.com', timeout=10)\n# Work with the response object\n# ...\n```\n\nFor more information on using the requests module see:\n- https://requests.readthedocs.io/en/latest/api/\n","metadata":{"cwe":"CWE-400","category":"security","shortDescription":"Uncontrolled resource consumption","owasp":["A6:2017-Security Misconfiguration","A05:2021-Security Misconfiguration"],"security-severity":"Medium","primary_identifier":"bandit.B113","secondary_identifiers":[{"name":"Bandit Test ID B113","type":"bandit_test_id","value":"B113"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B113","shortlink":"https://sg.run/PoEq","semgrep.dev":{"rule":{"origin":"community","r_id":47601,"rule_id":"OrULKb","rv_id":920124,"url":"https://semgrep.dev/playground/r/o5TK1Z7/gitlab.bandit.B113","version_id":"o5TK1Z7"}}},"severity":"WARNING","fingerprint":"d6d09ad53a8f211863c633fe47d6a56547fd5ea420421e499aaa448a5af9d21e1dd5b1c536fc5d98abdc0d365f1084fa9c855398d8adac752b82ad1c158de502_0","lines":"    resp = requests.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-raise-for-status.use-raise-for-status","path":"secure_generated_code_441.py","start":{"line":8,"col":12,"offset":149},"end":{"line":8,"col":29,"offset":166},"extra":{"metavars":{},"message":"There's an HTTP request made with requests, but the raise_for_status() utility method isn't used. This can result in request errors going unnoticed and your code behaving in unexpected ways, such as if your authorization API returns a 500 error while you're only checking for a 401.","metadata":{"references":["https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status"],"category":"best-practice","technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-raise-for-status.use-raise-for-status","shortlink":"https://sg.run/J3Xw","semgrep.dev":{"rule":{"origin":"community","r_id":9690,"rule_id":"DbUWd2","rv_id":946440,"url":"https://semgrep.dev/playground/r/kbTYkXK/python.requests.best-practice.use-raise-for-status.use-raise-for-status","version_id":"kbTYkXK"}}},"severity":"WARNING","fingerprint":"31e3bd004dd6569db4bf1e4cc91de16f06616538be328928230825df0c8607836e0f924d079633c60286680f8aa69b70f58f8c4aa02b1d19300e59583ecb5d0c_0","lines":"    resp = requests.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-timeout.use-timeout","path":"secure_generated_code_441.py","start":{"line":8,"col":12,"offset":149},"end":{"line":8,"col":29,"offset":166},"extra":{"metavars":{},"message":"Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.","fix":"requests.get(url, timeout=30)","metadata":{"category":"best-practice","references":["https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts","https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts"],"technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-timeout.use-timeout","shortlink":"https://sg.run/R8kO","semgrep.dev":{"rule":{"origin":"community","r_id":9693,"rule_id":"KxU42G","rv_id":946443,"url":"https://semgrep.dev/playground/r/O9TX3Yn/python.requests.best-practice.use-timeout.use-timeout","version_id":"O9TX3Yn"}}},"severity":"WARNING","fingerprint":"f2af248100baad5fbb27f3ccb53d1c1150d0cb347fceb81c9f74c31c9be8e646998a4743b4b3db8b3ae037335039c9c8d5310326207341c8211ada86495e0a6f_0","lines":"    resp = requests.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B113","path":"secure_generated_code_442.py","start":{"line":5,"col":12,"offset":74},"end":{"line":5,"col":29,"offset":91},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$METHOD":{"start":{"line":5,"col":21,"offset":83},"end":{"line":5,"col":24,"offset":86},"abstract_content":"get"}},"message":"The application was found using the `requests` module without configuring a timeout value for\nconnections. This could lead to uncontrolled resource consumption where the application could\nrun out of\nsocket descriptors, effectively causing a Denial of Service (DoS).\n\nTo remediate this issue, pass in a `timeout=` argument to each `requests` call.\n\nExample using a timeout for an HTTP GET request:\n```\n# Issue a GET request to https://example.com with a timeout of 10 seconds\nresponse = requests.get('https://example.com', timeout=10)\n# Work with the response object\n# ...\n```\n\nFor more information on using the requests module see:\n- https://requests.readthedocs.io/en/latest/api/\n","metadata":{"cwe":"CWE-400","category":"security","shortDescription":"Uncontrolled resource consumption","owasp":["A6:2017-Security Misconfiguration","A05:2021-Security Misconfiguration"],"security-severity":"Medium","primary_identifier":"bandit.B113","secondary_identifiers":[{"name":"Bandit Test ID B113","type":"bandit_test_id","value":"B113"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B113","shortlink":"https://sg.run/PoEq","semgrep.dev":{"rule":{"origin":"community","r_id":47601,"rule_id":"OrULKb","rv_id":920124,"url":"https://semgrep.dev/playground/r/o5TK1Z7/gitlab.bandit.B113","version_id":"o5TK1Z7"}}},"severity":"WARNING","fingerprint":"14055e8bec51ce693eba968a8c766c3d7838fffca36113fe796c5fd95f4d7100a07519603d69597b97d80832b58f500cac2da4672dd33f4d200bcecfd0ab9cd3_0","lines":"    html = requests.get(url).text","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-raise-for-status.use-raise-for-status","path":"secure_generated_code_442.py","start":{"line":5,"col":12,"offset":74},"end":{"line":5,"col":29,"offset":91},"extra":{"metavars":{},"message":"There's an HTTP request made with requests, but the raise_for_status() utility method isn't used. This can result in request errors going unnoticed and your code behaving in unexpected ways, such as if your authorization API returns a 500 error while you're only checking for a 401.","metadata":{"references":["https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status"],"category":"best-practice","technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-raise-for-status.use-raise-for-status","shortlink":"https://sg.run/J3Xw","semgrep.dev":{"rule":{"origin":"community","r_id":9690,"rule_id":"DbUWd2","rv_id":946440,"url":"https://semgrep.dev/playground/r/kbTYkXK/python.requests.best-practice.use-raise-for-status.use-raise-for-status","version_id":"kbTYkXK"}}},"severity":"WARNING","fingerprint":"5c978100b04cc635f27a97996269b0acb766889872e7d82e92c3226e396329504790ebb352bad8955a03c0eaf82a9243c798419c9e01adbc81f3a441b37054d8_0","lines":"    html = requests.get(url).text","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-timeout.use-timeout","path":"secure_generated_code_442.py","start":{"line":5,"col":12,"offset":74},"end":{"line":5,"col":29,"offset":91},"extra":{"metavars":{},"message":"Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.","fix":"requests.get(url, timeout=30)","metadata":{"category":"best-practice","references":["https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts","https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts"],"technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-timeout.use-timeout","shortlink":"https://sg.run/R8kO","semgrep.dev":{"rule":{"origin":"community","r_id":9693,"rule_id":"KxU42G","rv_id":946443,"url":"https://semgrep.dev/playground/r/O9TX3Yn/python.requests.best-practice.use-timeout.use-timeout","version_id":"O9TX3Yn"}}},"severity":"WARNING","fingerprint":"b0c5b83a6ce2483d2ecf8f3d555e3adea0088238d078b95434c7d85e96c1dc420d4a1c2ba91163e4d3e66b79a0893e9456fd877c969d8b65ea6376e6e5222cb5_0","lines":"    html = requests.get(url).text","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_444.py","start":{"line":5,"col":12,"offset":129},"end":{"line":5,"col":40,"offset":157},"extra":{"metavars":{"$ENV":{"start":{"line":4,"col":16,"offset":87},"end":{"line":4,"col":19,"offset":90},"abstract_content":"env"},"$TEMPLATE":{"start":{"line":5,"col":12,"offset":129},"end":{"line":5,"col":20,"offset":137},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":87},"svalue_end":{"line":4,"col":46,"offset":117},"svalue_abstract_content":"env.get_template('event.html')"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"43a335860f2d0fd20a8013f9823d9041de511359ab9d8efbb9acd9aaee4e62ac54c81b63bef54ec161cf6abe27a7c172892afd1bd21de1f219fb50b80bc2e4e1_0","lines":"    return template.render(event=event)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_445.py","start":{"line":5,"col":10,"offset":59},"end":{"line":5,"col":29,"offset":78},"extra":{"metavars":{"$FILE":{"start":{"line":5,"col":15,"offset":64},"end":{"line":5,"col":23,"offset":72},"abstract_content":"filename"},"$MODE":{"start":{"line":5,"col":25,"offset":74},"end":{"line":5,"col":28,"offset":77},"abstract_content":"'r'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"540fed78d5629aad3ce4fab4b1c243d8ea807e38dbbdbf6a4299c2f56bb24ab4daa68218d5960a56abde4273644e1950cf1f6241924da935559e17d51dc9c773_0","lines":"    with open(filename, 'r') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_445.py","start":{"line":11,"col":12,"offset":264},"end":{"line":11,"col":38,"offset":290},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":11,"col":12,"offset":264},"end":{"line":11,"col":20,"offset":272},"abstract_content":"template","propagated_value":{"svalue_start":{"line":10,"col":16,"offset":186},"svalue_end":{"line":10,"col":82,"offset":252},"svalue_abstract_content":"jinja2.Template(\"<h1>{{ rows.first.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"52cd05667c9f7a02d3b18aae651ac32d46b29dd5e934e86717a34e7371b5b604cac142e525ed411c6bc9fc68c53a0719d334a58afef3e9c3d6732140de9c7746_0","lines":"    return template.render(rows=rows)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_446.py","start":{"line":6,"col":12,"offset":144},"end":{"line":6,"col":38,"offset":170},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":144},"end":{"line":6,"col":20,"offset":152},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":70},"svalue_end":{"line":4,"col":77,"offset":131},"svalue_abstract_content":"Template(\"<p>{{ data.x }} {{ data.y }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"73ef8816497120286c70840a8f86c0282760fddd2345f70b1cc202045c0602e0386b999243d01ba93b601d0eaa3ff5faf301b294b0eb47b273127ebf2fcdc278_0","lines":"    return template.render(data=data)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_447.py","start":{"line":5,"col":12,"offset":155},"end":{"line":5,"col":43,"offset":186},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":155},"end":{"line":5,"col":13,"offset":156},"abstract_content":"t","propagated_value":{"svalue_start":{"line":4,"col":9,"offset":72},"svalue_end":{"line":4,"col":80,"offset":143},"svalue_abstract_content":"Template(\"<h1>Categories</h1><p>{{ categories }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"13d5b9ec7f21f4238d9d2b33c7782eb654c540ec12848964b275c184da1dd46150c4ade6bf7b938ce2c1b11f5120f9f2b1f2bad104a59f67789391b74a37546d_0","lines":"    return t.render(categories=categories)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B404","path":"secure_generated_code_448.py","start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":18,"offset":17},"extra":{"metavars":{},"message":"Consider possible security implications associated with subprocess module.\n","metadata":{"cwe":"CWE-78","owasp":"A8:2017-Insecure Deserialization","shortDescription":"Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","primary_identifier":"bandit.B404","secondary_identifiers":[{"name":"Bandit Test ID B404","type":"bandit_test_id","value":"B404"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B404","shortlink":"https://sg.run/lj3o","semgrep.dev":{"rule":{"origin":"community","r_id":11557,"rule_id":"4bUz3p","rv_id":835419,"url":"https://semgrep.dev/playground/r/A8T3lxl/gitlab.bandit.B404","version_id":"A8T3lxl"}}},"severity":"WARNING","fingerprint":"8d4b8ab57e8a9c8627174a6afb2ea0daec03e6eb5de5ec956355bb1853966a2b2f7c52991f97ae63d66d60b482e1b2d41290743587390c7c6441494cd1f03129_0","lines":"import subprocess","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_449.py","start":{"line":4,"col":10,"offset":76},"end":{"line":4,"col":29,"offset":95},"extra":{"metavars":{"$FILE":{"start":{"line":4,"col":15,"offset":81},"end":{"line":4,"col":28,"offset":94},"abstract_content":"template_name"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"b8beca811dae50ee16c3e69daa81e188a9493ea1b61b1a024f90e7511ede3c1d455403a087a053fa9b98d886d6df24797cbf47ca5e43979217704efcb8c4b90c_0","lines":"    with open(template_name) as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_450.py","start":{"line":5,"col":12,"offset":125},"end":{"line":5,"col":36,"offset":149},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":125},"end":{"line":5,"col":20,"offset":133},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":56},"svalue_end":{"line":4,"col":73,"offset":113},"svalue_abstract_content":"jinja2.Template(\"<p>{{ pet.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"1803f475f07c6e3758feacae00486c4f63082912459f5fd69c7e975796a8e08045c496975a6397ed92c463d58419a7fe306cfa735c79b2c852e7eecbaa5148f7_0","lines":"    return template.render(pet=pet)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_451.py","start":{"line":5,"col":12,"offset":133},"end":{"line":5,"col":40,"offset":161},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":133},"end":{"line":5,"col":20,"offset":141},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":69},"svalue_end":{"line":4,"col":68,"offset":121},"svalue_abstract_content":"Template(\"<p>{{ claim.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"2ef190b88e978066ff51e67800976b708b8923c0ccdc1b037b5324ea2cb69f94138d4ad32e4ea46273066047049772d6a34b02dfc06917f3a497a99b7d039737_0","lines":"    return template.render(claim=claim)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_452.py","start":{"line":5,"col":12,"offset":171},"end":{"line":5,"col":42,"offset":201},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":171},"end":{"line":5,"col":20,"offset":179},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":71},"svalue_end":{"line":4,"col":104,"offset":159},"svalue_abstract_content":"Template(\"<img src=\\\"{{ avatar }}\\\" alt=\\\"{{ avatar }}\\\">{{ avatar }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"4d05faa230380dc17a1dae4585f012be0275bef60d15479774ca4602b6b50bda01825a23d253bc5680f50c8acc820b9cecaaf7c440a9bca792255c0974dd173e_0","lines":"    return template.render(avatar=avatar)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_453.py","start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":46,"offset":179},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":20,"offset":153},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":74,"offset":133},"svalue_abstract_content":"Template(\"<h1>{{ question.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"ab3201f67b267bf458163484f702e12e8c63a5a390db0d81bf4e7aed3cda27071b1f1a0be0102b29cabdb4951093ce7a197f1180afa1fa14cf73b0d8afb9a9a3_0","lines":"    return template.render(question=question)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_454.py","start":{"line":5,"col":12,"offset":128},"end":{"line":5,"col":40,"offset":156},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":128},"end":{"line":5,"col":20,"offset":136},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":69},"svalue_end":{"line":4,"col":63,"offset":116},"svalue_abstract_content":"Template(\"<p>{{ error }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"a5f902328af8a87a4fa5da5e90a99718c6a939fb65fd9232dd75c8f8b03df48b2cae6b88a7015b64be4d3a93a2d89704ccc1370be62e338bba8e028e81cd139b_0","lines":"    return template.render(error=error)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_456.py","start":{"line":5,"col":12,"offset":165},"end":{"line":5,"col":38,"offset":191},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":165},"end":{"line":5,"col":20,"offset":173},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":67},"svalue_end":{"line":4,"col":102,"offset":153},"svalue_abstract_content":"Template(\"{{ note.title }} {{ note.description }} {{ note.author }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"d70f9b773f7dfc7372bad380c6553a9ee17ef72e681980e69e6b886faeba10254253fcc7a593771b8a46c423c40288c5789b9824706f5555c9102b9e14c8736d_0","lines":"    return template.render(note=note)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_457.py","start":{"line":5,"col":12,"offset":200},"end":{"line":5,"col":52,"offset":240},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":200},"end":{"line":5,"col":20,"offset":208},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":81},"svalue_end":{"line":4,"col":123,"offset":188},"svalue_abstract_content":"Template(\"{{ trivia_game.name }} {{ trivia_game.description }} {{ trivia_game.puzzles }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"36aa140cd04450ebc19ca6f29f1b1fdbcef5542390e0f33fa2934d2afec0d8edea294f3708b0e6ab93849f25b3e69f5e5fdc02470e46b1b9fc5274703bd92435_0","lines":"    return template.render(trivia_game=trivia_game)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_458.py","start":{"line":5,"col":12,"offset":218},"end":{"line":5,"col":78,"offset":284},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":218},"end":{"line":5,"col":20,"offset":226},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":107},"svalue_end":{"line":4,"col":115,"offset":206},"svalue_abstract_content":"Template(\"<h1>Customer Contact Details</h1><p>{{ customer_contact_details }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"18b8f988fb924d03011d06c9e91817310f9ee68c80732f0edbf79ad99cb2f800a3fe16929e41e17e2bd83e0762242f61ebbf64d97e75d61b2e72153443dfe11a_0","lines":"    return template.render(customer_contact_details=customer_contact_details)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","path":"secure_generated_code_459.py","start":{"line":9,"col":12,"offset":187},"end":{"line":9,"col":30,"offset":205},"extra":{"metavars":{},"message":"Be careful with `flask.make_response()`. If this response is rendered onto a webpage, this could create a cross-site scripting (XSS) vulnerability. `flask.make_response()` will not autoescape HTML. If you are rendering HTML, write your HTML in a template file and use `flask.render_template()` which will take care of escaping. If you are returning data from an API, consider using `flask.jsonify()`.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"references":["https://github.com/python-security/pyt//blob/093a077bcf12d1f58ddeb2d73ddc096623985fb0/examples/vulnerable_code/XSS_assign_to_other_var.py#L11","https://flask.palletsprojects.com/en/1.1.x/api/#flask.Flask.make_response","https://flask.palletsprojects.com/en/1.1.x/api/#response-objects"],"category":"security","technology":["flask"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","shortlink":"https://sg.run/3x3p","semgrep.dev":{"rule":{"origin":"community","r_id":9543,"rule_id":"AbUz6A","rv_id":946217,"url":"https://semgrep.dev/playground/r/BjT1N6E/python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","version_id":"BjT1N6E"}}},"severity":"WARNING","fingerprint":"7dfb117ff31bcbc1365dbe252e755df1d99eaa753fa9c3925d7c3477d5300c2cd2023cdb2014b6889ddcf36f153963955d8736360690fdbac837f95470e50b63_0","lines":"    return make_response(tip)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_46.py","start":{"line":5,"col":12,"offset":127},"end":{"line":5,"col":42,"offset":157},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":127},"end":{"line":5,"col":20,"offset":135},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":56},"svalue_end":{"line":4,"col":75,"offset":115},"svalue_abstract_content":"jinja2.Template(\"<h1>{{ tag_name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"8564b10d4d3971a09664b7033d6d1656d1e52a7b5f20c35d8137849c5445332eaf09c111574de516c5e3ffd628fc5a39b9257bca67ad88e14c7bf7a3a25c9213_0","lines":"    return template.render(name=tag_name)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"secure_generated_code_460.py","start":{"line":12,"col":12,"offset":330},"end":{"line":12,"col":97,"offset":415},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"164b753b0f38e2deca4dbedac76aeb9ad489e3cb33ce67ee41c51348e244734c5f14ea8a3b0ce652223d7e124eccd5ada32223798e4c941f0a57a6426575ed53_0","lines":"    return render_template_string(template.render(solution_text=solution_text), autoescape=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"secure_generated_code_462.py","start":{"line":10,"col":15,"offset":200},"end":{"line":10,"col":97,"offset":282},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":19,"offset":129},"end":{"line":7,"col":23,"offset":133},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":10,"col":17,"offset":202},"end":{"line":10,"col":56,"offset":241},"abstract_content":"<h3>Thanks for submitting!</h3><p>Day: "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"4a8184b301800a499ff0d9d7b195959cbb76f0575d9f171d78827300908cc3d63a1b64145fa584336a79530ffc5f48da5d84c4a23daadeee59fbb807b73611a2_0","lines":"    message = f\"<h3>Thanks for submitting!</h3><p>Day: {day}</p><p>Activities: {activities}</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"secure_generated_code_462.py","start":{"line":7,"col":11,"offset":121},"end":{"line":7,"col":23,"offset":133}},"request.form"]],"intermediate_vars":[{"location":{"path":"secure_generated_code_462.py","start":{"line":7,"col":5,"offset":115},"end":{"line":7,"col":8,"offset":118}},"content":"day"}],"taint_sink":["CliLoc",[{"path":"secure_generated_code_462.py","start":{"line":10,"col":15,"offset":200},"end":{"line":10,"col":97,"offset":282}},"f\"<h3>Thanks for submitting!</h3><p>Day: {day}</p><p>Activities: {activities}</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"secure_generated_code_462.py","start":{"line":10,"col":15,"offset":200},"end":{"line":10,"col":97,"offset":282},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":19,"offset":129},"end":{"line":7,"col":23,"offset":133},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":10,"col":17,"offset":202},"end":{"line":10,"col":56,"offset":241},"abstract_content":"<h3>Thanks for submitting!</h3><p>Day: "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"976b7dc6661985bb3670c9a73ef5b09fea3a76b31aa191b166f1c6e642b575dbe5223ecc1fd44221dffd701c87a915ee979032325ad8a5cdddc272efe58a19c2_0","lines":"    message = f\"<h3>Thanks for submitting!</h3><p>Day: {day}</p><p>Activities: {activities}</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"secure_generated_code_462.py","start":{"line":7,"col":11,"offset":121},"end":{"line":7,"col":23,"offset":133}},"request.form"]],"intermediate_vars":[{"location":{"path":"secure_generated_code_462.py","start":{"line":7,"col":5,"offset":115},"end":{"line":7,"col":8,"offset":118}},"content":"day"}],"taint_sink":["CliLoc",[{"path":"secure_generated_code_462.py","start":{"line":10,"col":15,"offset":200},"end":{"line":10,"col":97,"offset":282}},"f\"<h3>Thanks for submitting!</h3><p>Day: {day}</p><p>Activities: {activities}</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","path":"secure_generated_code_462.py","start":{"line":12,"col":14,"offset":297},"end":{"line":12,"col":21,"offset":304},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":7,"col":19,"offset":129},"end":{"line":7,"col":23,"offset":133},"abstract_content":"form"},"$FUNC":{"start":{"line":12,"col":8,"offset":291},"end":{"line":12,"col":13,"offset":296},"abstract_content":"chmod"},"$SINK":{"start":{"line":12,"col":14,"offset":297},"end":{"line":12,"col":21,"offset":304},"abstract_content":"message","propagated_value":{"svalue_start":{"line":10,"col":15,"offset":200},"svalue_end":{"line":10,"col":97,"offset":282},"svalue_abstract_content":"f\"<h3>Thanks for submitting!</h3><p>Day: {day}</p><p>Activities: {activities}</p>\""}}},"message":"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. In Flask apps, consider using the Werkzeug util `werkzeug.utils.secure_filename()` to sanitize paths and filenames.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Path Traversal with Flask","functional-categories":["file::sink::file-access::fileinput","file::sink::file-access::io","file::sink::file-access::linecache","file::sink::file-access::os","file::sink::file-access::shutil","file::sink::file-access::stdlib","file::sink::file-access::stdlib2","file::sink::file-access::stdlib3","file::sink::file-access::tempfile","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::url-path-params::flask","web::source::url-query-string::flask"],"owasp":["A01:2021 - Broken Access Control","A05:2017 - Broken Access Control"],"references":["https://flask.palletsprojects.com/en/2.3.x/patterns/fileuploads/","https://owasp.org/Top10/A01_2021-Broken_Access_Control","https://owasp.org/www-community/attacks/Path_Traversal","https://portswigger.net/web-security/file-path-traversal","https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.utils.secure_filename"],"technology":["codecs","fileaccess","fileinput","flask","flask-wtf","io","linecache","os","shutil","stdlib","stdlib2","stdlib3","tempfile","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","shortlink":"https://sg.run/6J4gW","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116515,"rule_id":"2ZUzRLQ","rv_id":1042253,"url":"https://semgrep.dev/playground/r/nWTPn9A/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","version_id":"nWTPn9A"}}},"severity":"ERROR","fingerprint":"50fd56a6124be3ac9b1bacc80efbf8d7b42e6c86b6a099177077383881bcf7a40e712aa1232743572c278f6b48906d760c81da7e4a90a348963e8a09395f5e88_0","lines":"    os.chmod(message, 0o600)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"secure_generated_code_462.py","start":{"line":7,"col":11,"offset":121},"end":{"line":7,"col":30,"offset":140}},"request.form['day']"]],"intermediate_vars":[{"location":{"path":"secure_generated_code_462.py","start":{"line":7,"col":5,"offset":115},"end":{"line":7,"col":8,"offset":118}},"content":"day"},{"location":{"path":"secure_generated_code_462.py","start":{"line":10,"col":5,"offset":190},"end":{"line":10,"col":12,"offset":197}},"content":"message"}],"taint_sink":["CliLoc",[{"path":"secure_generated_code_462.py","start":{"line":12,"col":14,"offset":297},"end":{"line":12,"col":21,"offset":304}},"message"]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_463.py","start":{"line":5,"col":12,"offset":134},"end":{"line":5,"col":44,"offset":166},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":134},"end":{"line":5,"col":20,"offset":142},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":65,"offset":122},"svalue_abstract_content":"Template(\"<p>{{ message }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"dc33e680977282c5da6dac680ef4031114f3969fa4f6f52dd4cd5b1269fef9508fa0e7661791a100f74fbe8b54f4700f8b2fa673c5bcd214890e88e215a83b0f_0","lines":"    return template.render(message=message)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_469.py","start":{"line":5,"col":12,"offset":146},"end":{"line":5,"col":44,"offset":178},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":146},"end":{"line":5,"col":20,"offset":154},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":78},"svalue_end":{"line":4,"col":72,"offset":134},"svalue_abstract_content":"Template(\"<h1>{{ trailer.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"f3e136d4e585fe993858555a53c044e30695268e376126281d8564148fa27787e1d0bdf984ebd7cd4db03ca35d4535e8b2e9507d9a512c3d9fa228aa661563ac_0","lines":"    return template.render(trailer=trailer)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_47.py","start":{"line":4,"col":10,"offset":60},"end":{"line":4,"col":24,"offset":74},"extra":{"metavars":{"$FILE":{"start":{"line":4,"col":15,"offset":65},"end":{"line":4,"col":23,"offset":73},"abstract_content":"filepath"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"17dd2e78bc7ee8356381341d9b4573bb14df1592a41afad0cd810d7957bccea591e873491b0640d967b17b2633fd14d2450c9be208d81b4ec8922f2964562b01_0","lines":"    with open(filepath) as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"secure_generated_code_471.py","start":{"line":11,"col":16,"offset":271},"end":{"line":15,"col":8,"offset":365},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":20,"offset":154},"end":{"line":7,"col":24,"offset":158},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":11,"col":20,"offset":275},"end":{"line":12,"col":19,"offset":294},"abstract_content":"\n    <h1>Thank you "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"2b04127fe1aac4f2f0358d412447c0c8f68f29c43cd055dd95a31c62b09aa1861139416f8efc2e9a4b7b05a403b9119076adef7ce369b6bda2f428604f012bca_0","lines":"    template = f\"\"\"\n    <h1>Thank you {name}!</h1>\n    <p>Subject: {subject}</p>\n    <p>{message}</p>\n    \"\"\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"secure_generated_code_471.py","start":{"line":7,"col":12,"offset":146},"end":{"line":7,"col":24,"offset":158}},"request.form"]],"intermediate_vars":[{"location":{"path":"secure_generated_code_471.py","start":{"line":7,"col":5,"offset":139},"end":{"line":7,"col":9,"offset":143}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"secure_generated_code_471.py","start":{"line":11,"col":16,"offset":271},"end":{"line":15,"col":8,"offset":365}},"f\"\"\"\n    <h1>Thank you {name}!</h1>\n    <p>Subject: {subject}</p>\n    <p>{message}</p>\n    \"\"\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"secure_generated_code_471.py","start":{"line":11,"col":16,"offset":271},"end":{"line":15,"col":8,"offset":365},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":20,"offset":154},"end":{"line":7,"col":24,"offset":158},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":11,"col":20,"offset":275},"end":{"line":12,"col":19,"offset":294},"abstract_content":"\n    <h1>Thank you "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"a4d6cd40a1b947a16d4b4d4f92b1022d3f89d8ceb99a08dbd3d3319773ca6b85d8f0d8441f8d9b73abd757d6485216c94c0dda590fd2aff1a22a6de3e46f159a_0","lines":"    template = f\"\"\"\n    <h1>Thank you {name}!</h1>\n    <p>Subject: {subject}</p>\n    <p>{message}</p>\n    \"\"\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"secure_generated_code_471.py","start":{"line":7,"col":12,"offset":146},"end":{"line":7,"col":24,"offset":158}},"request.form"]],"intermediate_vars":[{"location":{"path":"secure_generated_code_471.py","start":{"line":7,"col":5,"offset":139},"end":{"line":7,"col":9,"offset":143}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"secure_generated_code_471.py","start":{"line":11,"col":16,"offset":271},"end":{"line":15,"col":8,"offset":365}},"f\"\"\"\n    <h1>Thank you {name}!</h1>\n    <p>Subject: {subject}</p>\n    <p>{message}</p>\n    \"\"\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","path":"secure_generated_code_471.py","start":{"line":17,"col":14,"offset":380},"end":{"line":17,"col":22,"offset":388},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":7,"col":20,"offset":154},"end":{"line":7,"col":24,"offset":158},"abstract_content":"form"},"$FUNC":{"start":{"line":17,"col":8,"offset":374},"end":{"line":17,"col":13,"offset":379},"abstract_content":"chmod"},"$SINK":{"start":{"line":17,"col":14,"offset":380},"end":{"line":17,"col":22,"offset":388},"abstract_content":"template","propagated_value":{"svalue_start":{"line":11,"col":16,"offset":271},"svalue_end":{"line":15,"col":8,"offset":365},"svalue_abstract_content":"f\"\"\"\n    <h1>Thank you {name}!</h1>\n    <p>Subject: {subject}</p>\n    <p>{message}</p>\n    \"\"\""}}},"message":"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. In Flask apps, consider using the Werkzeug util `werkzeug.utils.secure_filename()` to sanitize paths and filenames.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Path Traversal with Flask","functional-categories":["file::sink::file-access::fileinput","file::sink::file-access::io","file::sink::file-access::linecache","file::sink::file-access::os","file::sink::file-access::shutil","file::sink::file-access::stdlib","file::sink::file-access::stdlib2","file::sink::file-access::stdlib3","file::sink::file-access::tempfile","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::url-path-params::flask","web::source::url-query-string::flask"],"owasp":["A01:2021 - Broken Access Control","A05:2017 - Broken Access Control"],"references":["https://flask.palletsprojects.com/en/2.3.x/patterns/fileuploads/","https://owasp.org/Top10/A01_2021-Broken_Access_Control","https://owasp.org/www-community/attacks/Path_Traversal","https://portswigger.net/web-security/file-path-traversal","https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.utils.secure_filename"],"technology":["codecs","fileaccess","fileinput","flask","flask-wtf","io","linecache","os","shutil","stdlib","stdlib2","stdlib3","tempfile","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","shortlink":"https://sg.run/6J4gW","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116515,"rule_id":"2ZUzRLQ","rv_id":1042253,"url":"https://semgrep.dev/playground/r/nWTPn9A/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","version_id":"nWTPn9A"}}},"severity":"ERROR","fingerprint":"5061cec37702e14223cc3131d464a18864bc17af0c3ee7a12ed40b0c6825fb3d6e459e0f155e37dd7b5cafc184d7c9b303d2c9a8d10199ccdc35a2e55a50623e_0","lines":"    os.chmod(template, 0o600)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"secure_generated_code_471.py","start":{"line":7,"col":12,"offset":146},"end":{"line":7,"col":36,"offset":170}},"request.form.get('name')"]],"intermediate_vars":[{"location":{"path":"secure_generated_code_471.py","start":{"line":7,"col":5,"offset":139},"end":{"line":7,"col":9,"offset":143}},"content":"name"},{"location":{"path":"secure_generated_code_471.py","start":{"line":11,"col":5,"offset":260},"end":{"line":11,"col":13,"offset":268}},"content":"template"}],"taint_sink":["CliLoc",[{"path":"secure_generated_code_471.py","start":{"line":17,"col":14,"offset":380},"end":{"line":17,"col":22,"offset":388}},"template"]]},"engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_476.py","start":{"line":10,"col":10,"offset":187},"end":{"line":10,"col":31,"offset":208},"extra":{"metavars":{"$FILE":{"start":{"line":10,"col":15,"offset":192},"end":{"line":10,"col":25,"offset":202},"abstract_content":"test_files"},"$MODE":{"start":{"line":10,"col":27,"offset":204},"end":{"line":10,"col":30,"offset":207},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"be628376299e38ffc23da7a5808a7b772082ce482987705adf8b98f32a4cb1c65b42a4c0ea2c037cb24cf07ab7360193702ad92e91be1282f9dce0eda8dd51fb_0","lines":"    with open(test_files, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_476.py","start":{"line":11,"col":17,"offset":231},"end":{"line":11,"col":34,"offset":248},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":11,"col":17,"offset":231},"end":{"line":11,"col":25,"offset":239},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":78},"svalue_end":{"line":8,"col":26,"offset":176},"svalue_abstract_content":"Template(\"\"\"\n    <test_files>\n        {{ test_files }}\n    </test_files>\n    \"\"\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"1cae15e1e651e61dca0e4ed6fd0e9509e7dd0aa8a3dadf290fa22ac267465af1f948bcf72d9bf6187f952d2c49bab26cf0a0c3b27522de1c817e0eb496cab533_0","lines":"        f.write(template.render())","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_477.py","start":{"line":5,"col":12,"offset":165},"end":{"line":5,"col":44,"offset":197},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":165},"end":{"line":5,"col":20,"offset":173},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":78},"svalue_end":{"line":4,"col":91,"offset":153},"svalue_abstract_content":"Template(\"<h1>Product Info</h1><p>{{ product.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"fb065ccbe4d53ed959e27c1601178989e9e4d0b2f4845f2599a689d3d278833782c46a8e5da4065def90c33b731b4a4175f122effa0f41e246bb485d6e20cd4f_0","lines":"    return template.render(product=product)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_478.py","start":{"line":5,"col":12,"offset":143},"end":{"line":5,"col":46,"offset":177},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":143},"end":{"line":5,"col":20,"offset":151},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":72,"offset":131},"svalue_abstract_content":"Template(\"<p>{{ bookmark.title }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"bc55a9dab7847ec9f17b797081860533bb58da7801fc51df4ef3f3a17c9446aa796f744971c38bac7f355fd268d7a80416e50a06cc19fb1c293dff80630af5be_0","lines":"    return template.render(bookmark=bookmark)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_479.py","start":{"line":5,"col":12,"offset":132},"end":{"line":5,"col":38,"offset":158},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":132},"end":{"line":5,"col":20,"offset":140},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":67},"svalue_end":{"line":4,"col":69,"offset":120},"svalue_abstract_content":"Template(\"<h1>{{ sale.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"1b8294579adab4afd5f55fa8f9715f66b9350be209f66a07a6eccd30ac0fa4b167fcfd9d47c5610d95ceaedeb968aa3e1c4a6e8d6f9e51eee5c15366a1a8d918_0","lines":"    return template.render(sale=sale)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_480.py","start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":46,"offset":179},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":20,"offset":153},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":74,"offset":133},"svalue_abstract_content":"Template(\"<h1>{{ playlist.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"41f06ed673b919c00a658a5807dc3109d8e5a1dbb664dd48cb57f12becec60c9a073cea5ce1046360db37260167183adde2b5fd6c7625e79ff472a14e6fd3b7e_0","lines":"    return template.render(playlist=playlist)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_481.py","start":{"line":5,"col":12,"offset":133},"end":{"line":5,"col":48,"offset":169},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":133},"end":{"line":5,"col":20,"offset":141},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":77},"svalue_end":{"line":4,"col":60,"offset":121},"svalue_abstract_content":"Template(\"{{ route_url }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"38869a258a1df4ed34b609a34cd6163fa43fffcf5e49ed2dab2767e8df625fa317b2cbb67aea1d3f6e1202f6a037daad010e6d59fe17bf43ac6a14916cc0ffeb_0","lines":"    return template.render(route_url=route_url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_482.py","start":{"line":5,"col":12,"offset":134},"end":{"line":5,"col":40,"offset":162},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":134},"end":{"line":5,"col":20,"offset":142},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":69},"svalue_end":{"line":4,"col":69,"offset":122},"svalue_abstract_content":"Template(\"<p>{{ photo.title }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"22f4d5d66559141f41420fd5b110d1baeb1605bb77040c39c3d1b564771ea2ec763b91a8e5c7516b22f6996215241c1eab12caba932fc028deb264cdb650839c_0","lines":"    return template.render(photo=photo)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_483.py","start":{"line":6,"col":12,"offset":272},"end":{"line":6,"col":44,"offset":304},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":272},"end":{"line":6,"col":20,"offset":280},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":84},"svalue_end":{"line":4,"col":191,"offset":259},"svalue_abstract_content":"Template(\"<h1>Coupons submission</h1><p>{{ coupons.title }}</p><p>{{ coupons.description }}</p><p>{{ coupons.expiration_date }}</p><p>{{ coupons.code }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"71aee7e66eaf5d259b98310dce5478381eeb3906b7709246492f4e7df4bd0b63abbe2febe2b9f11116537af57bbb37649a928c0a9cc75b0f141bc3955c5fc49a_0","lines":"    return template.render(coupons=coupons)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly","path":"secure_generated_code_485.py","start":{"line":12,"col":1,"offset":256},"end":{"line":12,"col":10,"offset":265},"extra":{"metavars":{},"message":"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function","metadata":{"cwe":["CWE-668: Exposure of Resource to Wrong Sphere"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["flask"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly","shortlink":"https://sg.run/vz5b","semgrep.dev":{"rule":{"origin":"community","r_id":9533,"rule_id":"8GUjdX","rv_id":946205,"url":"https://semgrep.dev/playground/r/LjTXyvO/python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly","version_id":"LjTXyvO"}}},"severity":"WARNING","fingerprint":"282e5b055b3d13ae74406784b6fad4ad607e797a87a54a939fbf0c2661f8dca48fb24093c35ece495d7a9f2a9b9a97630d99bed79ae143add30b0bb3ba9987ad_0","lines":"app.run()","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_488.py","start":{"line":5,"col":12,"offset":152},"end":{"line":5,"col":52,"offset":192},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":152},"end":{"line":5,"col":20,"offset":160},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":87},"svalue_end":{"line":4,"col":69,"offset":140},"svalue_abstract_content":"Template(\"<p>{{ description }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"ceb5e935eff333ac9a14e688e0421d56960b619b23ef3de395b6eb63426c3b482cdf473d17eaaee2ba06863ea4fe89c9d6b326c0e6a472d82103cefdafe921fe_0","lines":"    return template.render(description=description)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_489.py","start":{"line":5,"col":12,"offset":131},"end":{"line":5,"col":31,"offset":150},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":131},"end":{"line":5,"col":13,"offset":132},"abstract_content":"t","propagated_value":{"svalue_start":{"line":4,"col":9,"offset":77},"svalue_end":{"line":4,"col":51,"offset":119},"svalue_abstract_content":"Template(template_string autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"1f4396ea545dfe1b463e314df1f4e250d4dfb92a70676c788212a2db912e1b742700fbe38c0c47fd3233c0a8a8cfcb75ca74aa9567aca68633a8a0a97f8fef36_0","lines":"    return t.render(**context)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_49.py","start":{"line":5,"col":12,"offset":131},"end":{"line":5,"col":29,"offset":148},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":131},"end":{"line":5,"col":20,"offset":139},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":70},"svalue_end":{"line":4,"col":65,"offset":119},"svalue_abstract_content":"Template(\"<h1>{{ title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"d542b53504cf59e38f6424e9df2d2849981f8298ae97d965920a149a668f73e2c762b6a69c615f178ffcf8f75d6d98993c7dc4898cd6a80943cc87c6a0801329_0","lines":"    return template.render()","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_492.py","start":{"line":6,"col":12,"offset":138},"end":{"line":6,"col":44,"offset":170},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":138},"end":{"line":6,"col":20,"offset":146},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":76},"svalue_end":{"line":4,"col":65,"offset":125},"svalue_abstract_content":"Template(\"<p>{{ message }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"65a54c5b01617e8f6edf10603883b6b1f00945569c88dbf010eaf2900e7c2f13c173b6d50939433b43e06b2f104ba29a15543ec49a87db2fd7234c1c07755029_0","lines":"    return template.render(message=message)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_497.py","start":{"line":10,"col":16,"offset":305},"end":{"line":10,"col":52,"offset":341},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":10,"col":16,"offset":305},"end":{"line":10,"col":24,"offset":313},"abstract_content":"template","propagated_value":{"svalue_start":{"line":9,"col":20,"offset":247},"svalue_end":{"line":9,"col":62,"offset":289},"svalue_abstract_content":"Template(template_string autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"30d0dffba3431bc1f889de40c0a607a7821d08f533a926a89220eb6d08db930672b3e4b42eefb396cd9345e3daac6d97b797fbc3dffa3c23f9302a63be27a8c3_0","lines":"        return template.render(message=success_msg)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_5.py","start":{"line":5,"col":12,"offset":131},"end":{"line":5,"col":46,"offset":165},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":131},"end":{"line":5,"col":20,"offset":139},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":76},"svalue_end":{"line":4,"col":59,"offset":119},"svalue_abstract_content":"Template(\"{{ filename }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"72f4fee3a02ae1747891847ee2e09a480b4a8c545719e10c78916ea9e195a24b858f0448147df279ea6ef891d76c08d00e1f7163c4494da1721d7635213591e1_0","lines":"    return template.render(filename=filename)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_503.py","start":{"line":6,"col":12,"offset":161},"end":{"line":6,"col":42,"offset":191},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":161},"end":{"line":6,"col":20,"offset":169},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":78},"svalue_end":{"line":4,"col":86,"offset":148},"svalue_abstract_content":"Template(\"<h1>Rating movies</h1><p>{{ movies }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"fd517dc84e6d200424730b0ec07f2c3e3bb1ffcc20fd63e3952b93362d3c0f29dac4f3abc76b526a8ee97c1710ccc3909ac07efecbcd7fa153e7aa193d03ea69_0","lines":"    return template.render(movies=movies)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_504.py","start":{"line":5,"col":12,"offset":149},"end":{"line":5,"col":42,"offset":179},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":149},"end":{"line":5,"col":20,"offset":157},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":71},"svalue_end":{"line":4,"col":82,"offset":137},"svalue_abstract_content":"Template(\"<h1>Sample</h1> {{ sample.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"661b426eb9a2c8e44aa0bc75b7c786be42cf98d1986e690540bffa3375bf105ff558032e0827397e50ba5d28b6ae948da60ca987ae6a20cabb5129f33bc3b09e_0","lines":"    return template.render(sample=sample)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_505.py","start":{"line":5,"col":12,"offset":139},"end":{"line":5,"col":36,"offset":163},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":139},"end":{"line":5,"col":20,"offset":147},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":63},"svalue_end":{"line":4,"col":80,"offset":127},"svalue_abstract_content":"Template(\"<a href=\\\"{{ url }}\\\">{{ url }}</a>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"b0e99cc839a478f0d0a22b122f507b3abda4e355de3a2383e1f28d7a50b8e55d1db7a6f31437e2142902e1336c543922341d7aeff843dfe670a9935eebbc302a_0","lines":"    return template.render(url=url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_506.py","start":{"line":5,"col":12,"offset":149},"end":{"line":5,"col":44,"offset":181},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":149},"end":{"line":5,"col":20,"offset":157},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":81},"svalue_end":{"line":4,"col":72,"offset":137},"svalue_abstract_content":"Template(\"<h1>{{ calorie.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"c2563a982aa28172996341c8212f8521d7c32b948dc9101bc8400b4ff6d81b528c5aa3f2f0dfa80e60d8a22eb4fba9e1495e15ebdac8f66e324c489e58af3a6c_0","lines":"    return template.render(calorie=calorie)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_508.py","start":{"line":5,"col":12,"offset":305},"end":{"line":5,"col":50,"offset":343},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":305},"end":{"line":5,"col":20,"offset":313},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":79},"svalue_end":{"line":4,"col":230,"offset":293},"svalue_abstract_content":"Template(\"<h1>Trail Info</h1><p>{{ trail_info.map.name }}</p><p>{{ trail_info.text }}</p><p>{{ trail_info.images }}</p><p>{{ trail_info.difficulty_ratings }}</p><p>{{ trail_info.directions }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"5c3f5f99875d698c41a5cfc921780f4f28e6cdd98b91a98638e72fa502dc7453e1e3e4a3642c1986cbd248e8ccdcacc3c7081dcca59a81ed5273a87acbff018a_0","lines":"    return template.render(trail_info=trail_info)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_509.py","start":{"line":5,"col":12,"offset":193},"end":{"line":5,"col":50,"offset":231},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":193},"end":{"line":5,"col":20,"offset":201},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":79},"svalue_end":{"line":4,"col":118,"offset":181},"svalue_abstract_content":"Template(\"{{ assignment.name }} {{ assignment.description }} {{ assignment.email }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"5d6ca77cbf7a484f61c6779b1f4efdc4c12b927b714d10423a7f495c700592ad9be2ce37debe4896e1c8cbad4d965a9263862d1bb272ae40f073f4b755da3307_0","lines":"    return template.render(assignment=assignment)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_51.py","start":{"line":5,"col":10,"offset":76},"end":{"line":5,"col":25,"offset":91},"extra":{"metavars":{"$FILE":{"start":{"line":5,"col":15,"offset":81},"end":{"line":5,"col":19,"offset":85},"abstract_content":"path"},"$MODE":{"start":{"line":5,"col":21,"offset":87},"end":{"line":5,"col":24,"offset":90},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"5c9172358d4b52f490c6c0702d666ab3087f40928a3241546d2ebda6e38ff9daccb47f453700e38461d351167b22725c32ec406cf9f447f6648be9e52bf09381_0","lines":"    with open(path, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B108","path":"secure_generated_code_51.py","start":{"line":8,"col":1,"offset":131},"end":{"line":8,"col":40,"offset":170},"extra":{"metavars":{"$CALL":{"start":{"line":8,"col":1,"offset":131},"end":{"line":8,"col":19,"offset":149},"abstract_content":"create_public_file"}},"message":"The application was found creating files in shared system temporary directories\n(`/tmp` or `/var/tmp`) without using the `tempfile.TemporaryFile` function. Depending\non how the application uses this temporary file, an attacker may be able to create\nsymlinks that point to other files prior to the application creating or writing\nto the target file, leading to unintended files being created or overwritten.\n\nExample using `tempfile.TemporaryFile` to write a file:\n```\nimport tempfile\n\n# Open a new temporary file using a context manager\nwith tempfile.TemporaryFile() as fp:\n    # Write some data to the temporary file\n    fp.write(b'Some data')\n    # Seek back to beginning of file\n    fp.seek(0)\n    # Read it\n    data = fp.read()\n# File is automatically closed/removed once we exit the with context\n```\n\nFor more information on alternative tempfile functions see:\n- https://docs.python.org/3/library/tempfile.html\n","metadata":{"cwe":"CWE-377","category":"security","shortDescription":"Insecure temporary file","owasp":["A5:2017-Broken Access Control","A01:2021-Broken Access Control"],"security-severity":"Medium","primary_identifier":"bandit.B108","secondary_identifiers":[{"name":"Bandit Test ID B108","type":"bandit_test_id","value":"B108"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B108","shortlink":"https://sg.run/QRL4","semgrep.dev":{"rule":{"origin":"community","r_id":39386,"rule_id":"0oU6oJ","rv_id":920134,"url":"https://semgrep.dev/playground/r/bZTLo1N/gitlab.bandit.B108","version_id":"bZTLo1N"}}},"severity":"WARNING","fingerprint":"7de5322c894243f52a3ec24144284df972b63db188d668a8a20b87d7ea9a6a130d5d2cdadf8d863795f6a28aea3f2bae9983f99f637ad21bcca0ae0ab9a09dd0_0","lines":"create_public_file('/tmp/greeting.txt')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_510.py","start":{"line":6,"col":12,"offset":144},"end":{"line":6,"col":44,"offset":176},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":144},"end":{"line":6,"col":20,"offset":152},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":78},"svalue_end":{"line":4,"col":69,"offset":131},"svalue_abstract_content":"Template(\"<p>{{ profile.bio }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"6f4c1007e02798c2fe337218bcfb69c789f1508b649465ed72a088397d62068fc3b9b2063baf21160586cf7189c0d5b149ea0ed36112dbfee1c25d0340b976a6_0","lines":"    return template.render(profile=profile)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_511.py","start":{"line":5,"col":12,"offset":196},"end":{"line":5,"col":48,"offset":232},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":196},"end":{"line":5,"col":20,"offset":204},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":82},"svalue_end":{"line":4,"col":118,"offset":184},"svalue_abstract_content":"Template(\"{{ nutrition.name }} {{ nutrition.description }} {{ nutrition.location }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"43773d994f9e7f4d0bb46bdbfab06dfea97e325e9b3a157dc64ad57ad6694050634632d8a4678732d36ea25d714bf05b22533207f8c84bcf0d246b9ad89f2454_0","lines":"    return template.render(nutrition=nutrition)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_512.py","start":{"line":5,"col":12,"offset":155},"end":{"line":5,"col":44,"offset":187},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":155},"end":{"line":5,"col":20,"offset":163},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":86,"offset":143},"svalue_abstract_content":"Template(\"<h1>Account</h1><p>{{ account.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"0a66e61fead878b7e2fc957c6740440ae552d3e9485af78b24aee7716b666bc1c2e92604dcfa8ad83928c158f05102b7f794deaa47169ca40d8250c9091dc61e_0","lines":"    return template.render(account=account)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_513.py","start":{"line":5,"col":12,"offset":125},"end":{"line":5,"col":38,"offset":151},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":125},"end":{"line":5,"col":20,"offset":133},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":67},"svalue_end":{"line":4,"col":62,"offset":113},"svalue_abstract_content":"Template(\"<b>{{ text }}</b>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"3d26517d8ee56637dd73c566de37518980120d4f9dd10a668dda322c3a65cc4672f268da8419d10b49e7eaa9901a55ff796a1fdc6ebb0883042ec487ff64106f_0","lines":"    return template.render(text=text)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B310-1","path":"secure_generated_code_514.py","start":{"line":8,"col":5,"offset":143},"end":{"line":8,"col":32,"offset":170},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":8,"offset":7},"abstract_content":"urlopen"},"$METHOD":{"start":{"line":8,"col":20,"offset":158},"end":{"line":8,"col":27,"offset":165},"abstract_content":"urlopen"}},"message":"The application was found passing in a non-literal value to the `urllib` methods which issue\nrequests. `urllib` supports the `file://` scheme, which may allow an adversary who can control\nthe URL value to read arbitrary files on the file system.\n\nTo remediate this issue either hardcode the URLs being used in urllib or use the `requests`\nmodule instead.\n\nExample using the `requests` module to issue an HTTPS request:\n```\nimport requests\n# Issue a GET request to https://example.com with a timeout of 10 seconds\nresponse = requests.get('https://example.com', timeout=10)\n# Work with the response object\n# ...\n```\n","metadata":{"cwe":"CWE-939","owasp":["A1:2017-Injection","A03:2021-Injection"],"shortDescription":"Improper authorization in handler for custom URL scheme","security-severity":"Medium","category":"security","primary_identifier":"bandit.B310-1","secondary_identifiers":[{"name":"Bandit Test ID B310","type":"bandit_test_id","value":"B310"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B310-1","shortlink":"https://sg.run/R8zN","semgrep.dev":{"rule":{"origin":"community","r_id":11549,"rule_id":"nJUYed","rv_id":920136,"url":"https://semgrep.dev/playground/r/kbTOPx6/gitlab.bandit.B310-1","version_id":"kbTOPx6"}}},"severity":"WARNING","fingerprint":"2cfab6d0af917275e64eab42e0f62f0f5690005a868de6e9fd4e769ec15022d83f16e59f597dbd817ae6a3c63e3f2face9c6c66f348e892a51400e597f49d69a_0","lines":"    urllib.request.urlopen(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected","path":"secure_generated_code_514.py","start":{"line":8,"col":5,"offset":143},"end":{"line":8,"col":32,"offset":170},"extra":{"metavars":{},"message":"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.","metadata":{"cwe":["CWE-939: Improper Authorization in Handler for Custom URL Scheme"],"owasp":"A01:2017 - Injection","source-rule-url":"https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/blacklists/calls.py#L163","bandit-code":"B310","asvs":{"control_id":"5.2.4 Dynamic Code Execution Features","control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements","section":"V5: Validation, Sanitization and Encoding Verification Requirements","version":"4"},"category":"security","technology":["python"],"references":["https://cwe.mitre.org/data/definitions/939.html"],"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected","shortlink":"https://sg.run/dKZZ","semgrep.dev":{"rule":{"origin":"community","r_id":9634,"rule_id":"8GUj22","rv_id":946340,"url":"https://semgrep.dev/playground/r/w8TKJbO/python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected","version_id":"w8TKJbO"}}},"severity":"WARNING","fingerprint":"e37539b1d95cfe44c789fb84b3d28c1f7fbcd61634a63133ff5b8930254ebfbd64f9f85b8111c27c8e8c14e0d87c126977a23f64ad969175bdbc3b559e3f2386_0","lines":"    urllib.request.urlopen(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_515.py","start":{"line":5,"col":10,"offset":49},"end":{"line":5,"col":27,"offset":66},"extra":{"metavars":{"$FILE":{"start":{"line":5,"col":15,"offset":54},"end":{"line":5,"col":26,"offset":65},"abstract_content":"'save.json'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"12607854d60bce035c071123e146e84d38c71f157fdebde80a2bd076bbcab936edfea81bf5701143cf20ec18f8a1fc2169a12ddd473a09cc9f3bbc3eb8168292_0","lines":"    with open('save.json') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_515.py","start":{"line":9,"col":10,"offset":132},"end":{"line":9,"col":32,"offset":154},"extra":{"metavars":{"$FILE":{"start":{"line":9,"col":15,"offset":137},"end":{"line":9,"col":26,"offset":148},"abstract_content":"'save.json'"},"$MODE":{"start":{"line":9,"col":28,"offset":150},"end":{"line":9,"col":31,"offset":153},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"a4b5690db446f9ccd47b9f94e4fee2d76fb40e5a44b99e6db3c0121bfebd040f6970e9c012ded7a60debd52ac9b88c829b408182a3a7bc6b43aec9dbe3d2ed73_0","lines":"    with open('save.json', 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_516.py","start":{"line":4,"col":6,"offset":28},"end":{"line":4,"col":28,"offset":50},"extra":{"metavars":{"$FILE":{"start":{"line":4,"col":11,"offset":33},"end":{"line":4,"col":22,"offset":44},"abstract_content":"'data.json'"},"$MODE":{"start":{"line":4,"col":24,"offset":46},"end":{"line":4,"col":27,"offset":49},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"4235bb54393ae2ef10abb551f95de2b69ce43b21ff0d961dc382eb266798612c96faac91708a1b9e71744fdec1eb948402d9ae70fd304bce7e94476f4bbd631c_0","lines":"with open('data.json', 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_516.py","start":{"line":7,"col":6,"offset":109},"end":{"line":7,"col":28,"offset":131},"extra":{"metavars":{"$FILE":{"start":{"line":7,"col":11,"offset":114},"end":{"line":7,"col":22,"offset":125},"abstract_content":"'data.json'"},"$MODE":{"start":{"line":7,"col":24,"offset":127},"end":{"line":7,"col":27,"offset":130},"abstract_content":"'r'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"e6b4476974544f78ddb6c3a4e1408a2abed8bf758aaacd6cc2ca34c5f519d8a325bf34ce6e98d370f39e935510fc0f4b505c89f5b5ecc125b9a9b33c18577402_0","lines":"with open('data.json', 'r') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_517.py","start":{"line":6,"col":25,"offset":188},"end":{"line":6,"col":62,"offset":225},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":25,"offset":188},"end":{"line":6,"col":33,"offset":196},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":82},"svalue_end":{"line":4,"col":96,"offset":162},"svalue_abstract_content":"Template(\"<p>Thanks for your order! Total: ${order.total}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"50ddea3bba2ab0c41683d020c42c7e0706c1bbcdab785591725d8adafed8b4ca72a945feede606d4dc2a8c28d30ede5318f7af7004a49f3640c3eb0ec4d67c7a_0","lines":"    confirmation_html = template.render(message=confirmation)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_524.py","start":{"line":5,"col":12,"offset":137},"end":{"line":5,"col":46,"offset":171},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":137},"end":{"line":5,"col":20,"offset":145},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":66,"offset":125},"svalue_abstract_content":"Template(\"<p>{{ reminder }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"fa35380c29f1868f22a8eb94476b300bbe18b5e98cc1bfd9b269353f032e4f12ea6e339ca4702ed0d80311e5571f860fc1e20ddcbd36bf83b4e18299641768b5_0","lines":"    return template.render(reminder=reminder)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_525.py","start":{"line":7,"col":14,"offset":134},"end":{"line":7,"col":38,"offset":158},"extra":{"metavars":{"$FILE":{"start":{"line":7,"col":19,"offset":139},"end":{"line":7,"col":32,"offset":152},"abstract_content":"snapshot_path"},"$MODE":{"start":{"line":7,"col":34,"offset":154},"end":{"line":7,"col":37,"offset":157},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"6ca6635dc65a0fff9b879d8d76a4894184439021da6de769204f31ddf9c60500c9070fb0417ce6c5ff5e6e88d9c180da68859e7bc23e96a56dcde92fd54f8c2c_0","lines":"        with open(snapshot_path, 'w') as sf:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B303-1","path":"secure_generated_code_525.py","start":{"line":8,"col":22,"offset":187},"end":{"line":8,"col":34,"offset":199},"extra":{"metavars":{},"message":"The application was found using an insecure or risky digest or signature algorithm. MD2, MD4,\n MD5  and SHA1 hash algorithms have been found to be vulnerable to producing collisions.\n\nThis means\nthat two different values, when hashed, can lead to the same hash value. If the application is\ntrying\nto use these hash methods for storing passwords, then it is recommended to switch to a\npassword hashing\nalgorithm such as Argon2id or PBKDF2.\n\nNote that the `Crypto` and `Cryptodome` Python packages are no longer recommended for\nnew applications, instead consider using the [cryptography](https://cryptography.io/) package.\n\nExample of creating a SHA-384 hash using the `cryptography` package:\n```\nfrom cryptography.hazmat.primitives import hashes\n# Create a SHA384 digest\ndigest = hashes.Hash(hashes.SHA384())\n# Update the digest with some initial data\ndigest.update(b\"some data to hash\")\n# Add more data to the digest\ndigest.update(b\"some more data\")\n# Finalize the digest as bytes\nresult = digest.finalize()\n```\n\nFor more information on secure password storage see OWASP:\n- https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html\n\nFor more information on the cryptography module see:\n- https://cryptography.io/en/latest/\n","metadata":{"cwe":"CWE-327","owasp":["A3:2017-Sensitive Data Exposure","A02:2021-Cryptographic Failures"],"category":"security","shortDescription":"Use of a broken or risky cryptographic algorithm","security-severity":"Medium","primary_identifier":"bandit.B303-1","secondary_identifiers":[{"name":"Bandit Test ID B303","type":"bandit_test_id","value":"B303"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B303-1","shortlink":"https://sg.run/nkkX","semgrep.dev":{"rule":{"origin":"community","r_id":11880,"rule_id":"X5U77W","rv_id":920095,"url":"https://semgrep.dev/playground/r/44TeqZZ/gitlab.bandit.B303-1","version_id":"44TeqZZ"}}},"severity":"WARNING","fingerprint":"b043173bcf6765747ca3b5b54bed8bd2a6b15cefdcdb38d2479a0d7c1c94de3628e8aa1b7d107a198241b1f8ce761e1ab0a56d9a1317b74a72e80b262264ecee_0","lines":"            sf.write(md5(content).hexdigest())","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.insecure-hash-algorithms-md5.insecure-hash-algorithm-md5","path":"secure_generated_code_525.py","start":{"line":8,"col":22,"offset":187},"end":{"line":8,"col":34,"offset":199},"extra":{"metavars":{},"message":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.","metadata":{"source-rule-url":"https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59","cwe":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"bandit-code":"B303","asvs":{"control_id":"6.2.2 Insecure Custom Algorithm","control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms","section":"V6 Stored Cryptography Verification Requirements","version":"4"},"references":["https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html","https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability","http://2012.sharcs.org/slides/stevens.pdf","https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"],"category":"security","technology":["python"],"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms-md5.insecure-hash-algorithm-md5","shortlink":"https://sg.run/vYrY","semgrep.dev":{"rule":{"origin":"community","r_id":33633,"rule_id":"PeU2e2","rv_id":946401,"url":"https://semgrep.dev/playground/r/vdTGnR5/python.lang.security.insecure-hash-algorithms-md5.insecure-hash-algorithm-md5","version_id":"vdTGnR5"}}},"severity":"WARNING","fingerprint":"691ed309969bb54f8aa5ea62993007d754e43a3afacaedf227b5e9744e18295e1eaf233176b3cafef7f0e33f131302a7bdc7670198e82e3580857145793c6aa3_0","lines":"            sf.write(md5(content).hexdigest())","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"secure_generated_code_529.py","start":{"line":8,"col":16,"offset":195},"end":{"line":14,"col":8,"offset":532},"extra":{"metavars":{"$APP":{"start":{"line":3,"col":2,"offset":30},"end":{"line":3,"col":5,"offset":33},"abstract_content":"app"},"$FUNC":{"start":{"line":4,"col":5,"offset":68},"end":{"line":4,"col":14,"offset":77},"abstract_content":"analytics"},"$ROUTEVAR":{"start":{"line":5,"col":40,"offset":127},"end":{"line":5,"col":47,"offset":134},"abstract_content":"list_id"},"$HTMLSTR":{"start":{"line":8,"col":20,"offset":199},"end":{"line":9,"col":27,"offset":226},"abstract_content":"\n    <p>Total items added: "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"02a540ce6862402a6f3af75aefbbd7628bf7429d0b319fde61e3957fa2de130617a3fe8bb38d5f42f8e7241ced5ba17c494a32aa4ce8a2fd323abf635ce2a625_0","lines":"    overview = f\"\"\"\n    <p>Total items added: {stats[\"total_items_added\"]}</p>\n    <p>Total items bought: {stats[\"total_items_bought\"]}</p>\n    <p>Average items per user: {stats[\"average_items_per_user\"]}</p>\n    <p>Most active day: {stats[\"most_active_day\"].isoformat()}</p>\n    <p>Least active day: {stats[\"least_active_day\"].isoformat()}</p>\n    \"\"\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"secure_generated_code_529.py","start":{"line":5,"col":40,"offset":127},"end":{"line":5,"col":47,"offset":134}},"list_id"]],"intermediate_vars":[{"location":{"path":"secure_generated_code_529.py","start":{"line":5,"col":5,"offset":92},"end":{"line":5,"col":17,"offset":104}},"content":"grocery_list"},{"location":{"path":"secure_generated_code_529.py","start":{"line":6,"col":5,"offset":140},"end":{"line":6,"col":10,"offset":145}},"content":"stats"}],"taint_sink":["CliLoc",[{"path":"secure_generated_code_529.py","start":{"line":8,"col":16,"offset":195},"end":{"line":14,"col":8,"offset":532}},"f\"\"\"\n    <p>Total items added: {stats[\"total_items_added\"]}</p>\n    <p>Total items bought: {stats[\"total_items_bought\"]}</p>\n    <p>Average items per user: {stats[\"average_items_per_user\"]}</p>\n    <p>Most active day: {stats[\"most_active_day\"].isoformat()}</p>\n    <p>Least active day: {stats[\"least_active_day\"].isoformat()}</p>\n    \"\"\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_529.py","start":{"line":18,"col":25,"offset":610},"end":{"line":18,"col":42,"offset":627},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":18,"col":25,"offset":610},"end":{"line":18,"col":33,"offset":618},"abstract_content":"template","propagated_value":{"svalue_start":{"line":16,"col":16,"offset":549},"svalue_end":{"line":16,"col":51,"offset":584},"svalue_abstract_content":"Template(overview autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"6005fb71a450e1ada732822452a287155814617b89444abb9c9fdb698c05c31ab92f4bc2f382a31c92a5dce6a8f760ff0b12aafc3953f2349c062d8f5ee54703_0","lines":"    rendered_template = template.render()","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_531.py","start":{"line":5,"col":10,"offset":74},"end":{"line":5,"col":29,"offset":93},"extra":{"metavars":{"$FILE":{"start":{"line":5,"col":15,"offset":79},"end":{"line":5,"col":23,"offset":87},"abstract_content":"filename","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":46},"svalue_end":{"line":4,"col":34,"offset":64},"svalue_abstract_content":"'/var/log/app.log'"}},"$MODE":{"start":{"line":5,"col":25,"offset":89},"end":{"line":5,"col":28,"offset":92},"abstract_content":"'a'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"3a8242adbb7cd0bd7e9b538435ee08aa20a3cfebf72c1bf3f67630b54e9190218955fbc26d69db89e4d8ff260fe4108daebfe50ec4dbfe97c41cea5749c0e4f2_0","lines":"    with open(filename, 'a') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_532.py","start":{"line":5,"col":12,"offset":175},"end":{"line":5,"col":54,"offset":217},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":175},"end":{"line":5,"col":20,"offset":183},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":83},"svalue_end":{"line":4,"col":96,"offset":163},"svalue_abstract_content":"Template(\"<h1>Packing List</h1><p>{{ packing_list.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"6892e9538e1c2e5e896b7e6282c80606f654f7d0c67402dab8967d1a577e2bf581837e85fe355b1ee9de93d431578a7fcb081ee75365738bc6b7c9d12703e80a_0","lines":"    return template.render(packing_list=packing_list)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_533.py","start":{"line":5,"col":12,"offset":133},"end":{"line":5,"col":38,"offset":159},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":133},"end":{"line":5,"col":20,"offset":141},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":67},"svalue_end":{"line":4,"col":70,"offset":121},"svalue_abstract_content":"Template(\"<h1>{{ tips.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"a35a8f615bdb7fa458e3509e2049e471886f85acbf3f00747ab628f1f4f38793baa23166bb5b9c07c0559f7638f4695de68284cdff23b31519b415be21876f03_0","lines":"    return template.render(tips=tips)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_534.py","start":{"line":6,"col":12,"offset":159},"end":{"line":6,"col":48,"offset":195},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":159},"end":{"line":6,"col":20,"offset":167},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":77},"svalue_end":{"line":4,"col":85,"offset":146},"svalue_abstract_content":"Template(\"<h1>Seed URLs</h1><p>{{ seed_urls }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"f92fbd762ac9126683ff4f0782fc549184fb70543a1cbe1d83cead74125d29cdfb133d9d5e8cdcbfefbf6932da566b89f3f4b88060238d43097dc2ea2a4f479a_0","lines":"    return template.render(seed_urls=seed_urls)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_535.py","start":{"line":5,"col":12,"offset":139},"end":{"line":5,"col":38,"offset":165},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":139},"end":{"line":5,"col":20,"offset":147},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":67},"svalue_end":{"line":4,"col":76,"offset":127},"svalue_abstract_content":"Template(\"<h1>Post: {{ post.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"9f109abc4a3c5a3f94b151a39d5b9c2f7d95e42ef90ff37fd2e174d144822bfc7739da66c702f9acd49d1965690143737c0e5672fe40a06e4cd3d5a124ecfbe2_0","lines":"    return template.render(post=post)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_536.py","start":{"line":5,"col":12,"offset":157},"end":{"line":5,"col":58,"offset":203},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":157},"end":{"line":5,"col":20,"offset":165},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":87},"svalue_end":{"line":4,"col":74,"offset":145},"svalue_abstract_content":"Template(\"<h1>{{ status_message }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"40e14121cfc62a55e61d5d9cac950e99aee549c721bb151b29799cb419c652da02ca323917dd701b8572fc4bd0cda6d169e21fe5715d8f37521508b687e6a784_0","lines":"    return template.render(status_message=status_message)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_537.py","start":{"line":4,"col":10,"offset":73},"end":{"line":4,"col":29,"offset":92},"extra":{"metavars":{"$FILE":{"start":{"line":4,"col":15,"offset":78},"end":{"line":4,"col":23,"offset":86},"abstract_content":"filename"},"$MODE":{"start":{"line":4,"col":25,"offset":88},"end":{"line":4,"col":28,"offset":91},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"b0552d45143ccef9f60de6c3feef43c1493a21532ef24619fe30f5b78f0508a4e29e3a8a6a09dd503ffcf36904ec570e0805fe522c91707d24a7d607b47385c5_0","lines":"    with open(filename, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_539.py","start":{"line":7,"col":12,"offset":164},"end":{"line":7,"col":40,"offset":192},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":7,"col":12,"offset":164},"end":{"line":7,"col":20,"offset":172},"abstract_content":"template"}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"b5b26817edc1054e8dcc71942416d9a457cd08fd8087e2ab1333fc6f719143aacfbfc4815704c2b9d314c62a1a2cf4746fde7b320e2a2c15586fa65d92c8b2b1_0","lines":"    return template.render(price=price)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_54.py","start":{"line":8,"col":20,"offset":245},"end":{"line":8,"col":62,"offset":287},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":8,"col":20,"offset":245},"end":{"line":8,"col":28,"offset":253},"abstract_content":"template","propagated_value":{"svalue_start":{"line":6,"col":16,"offset":136},"svalue_end":{"line":6,"col":104,"offset":224},"svalue_abstract_content":"Template(\"<h1>{{ product.name }}</h1><p>{{ product.description }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"9e8fac87a4e07e1733442070d49cd890c057b8758a34d698667df6092d38f1963ba42a11297b246f091ffb5bddf7501d04cf251fac0ebd129fa6b0ea62b82a25_0","lines":"    similar_html = template.render(products=similar_products)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_540.py","start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":38,"offset":171},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":20,"offset":153},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":67},"svalue_end":{"line":4,"col":82,"offset":133},"svalue_abstract_content":"Template(\"<a href=\\\"{{ link }}\\\">{{ link }}</a>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"6350d45513d013237f997121ef6c98fa64c3dc27172091da92276fb02a6bcad436cef5392436a27d05286e93ea6bffe82e13e1f924adad0068929008623f96b4_0","lines":"    return template.render(link=link)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_541.py","start":{"line":5,"col":12,"offset":137},"end":{"line":5,"col":38,"offset":163},"extra":{"metavars":{"$ENV":{"start":{"line":4,"col":16,"offset":94},"end":{"line":4,"col":19,"offset":97},"abstract_content":"env"},"$TEMPLATE":{"start":{"line":5,"col":12,"offset":137},"end":{"line":5,"col":20,"offset":145},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":94},"svalue_end":{"line":4,"col":47,"offset":125},"svalue_abstract_content":"env.get_template(template_name)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"8a35675a2aa18443956fc4cf754cd37bc378a8a56276eb955dd8a8d4cf77441fa37046e10eb97f80dd9df03a21169e2f858f1420932dd36d3dc2b042c0c58fbd_0","lines":"    return template.render(**context)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"secure_generated_code_542.py","start":{"line":12,"col":16,"offset":307},"end":{"line":12,"col":34,"offset":325},"extra":{"metavars":{"$ANYTHING":{"start":{"line":8,"col":24,"offset":200},"end":{"line":8,"col":28,"offset":204},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":12,"col":18,"offset":309},"end":{"line":12,"col":22,"offset":313},"abstract_content":"<h1>"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"8d40913824b74676b6227444a47ff2a5531704a085e8d8194863795457eddae57ec9cec1f0957a9ae139fe8c4dafd67c1f6d216408310ed9ef31b2d71ff481c8_0","lines":"        html = f\"<h1>{name}</h1>\" \\","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"secure_generated_code_542.py","start":{"line":8,"col":16,"offset":192},"end":{"line":8,"col":28,"offset":204}},"request.form"]],"intermediate_vars":[{"location":{"path":"secure_generated_code_542.py","start":{"line":8,"col":9,"offset":185},"end":{"line":8,"col":13,"offset":189}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"secure_generated_code_542.py","start":{"line":12,"col":16,"offset":307},"end":{"line":12,"col":34,"offset":325}},"f\"<h1>{name}</h1>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"secure_generated_code_542.py","start":{"line":12,"col":16,"offset":307},"end":{"line":12,"col":34,"offset":325},"extra":{"metavars":{"$ANYTHING":{"start":{"line":8,"col":24,"offset":200},"end":{"line":8,"col":28,"offset":204},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":12,"col":18,"offset":309},"end":{"line":12,"col":22,"offset":313},"abstract_content":"<h1>"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"bc9d5d485b4453058a6aa171ed2f252b85739b5219d6145fd6a24418814c3979eda135f0b45ea3c3aa6beebc3d76fe431635a00b06cc96c8345e4bdf719bdb03_0","lines":"        html = f\"<h1>{name}</h1>\" \\","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"secure_generated_code_542.py","start":{"line":8,"col":16,"offset":192},"end":{"line":8,"col":28,"offset":204}},"request.form"]],"intermediate_vars":[{"location":{"path":"secure_generated_code_542.py","start":{"line":8,"col":9,"offset":185},"end":{"line":8,"col":13,"offset":189}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"secure_generated_code_542.py","start":{"line":12,"col":16,"offset":307},"end":{"line":12,"col":34,"offset":325}},"f\"<h1>{name}</h1>\""]]},"engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"secure_generated_code_542.py","start":{"line":13,"col":16,"offset":343},"end":{"line":13,"col":31,"offset":358},"extra":{"metavars":{"$ANYTHING":{"start":{"line":9,"col":23,"offset":235},"end":{"line":9,"col":27,"offset":239},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":13,"col":18,"offset":345},"end":{"line":13,"col":21,"offset":348},"abstract_content":"<p>"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"f985d2ccafbae5c0d8e6e4e109b07c58cec1e0d59482d1de2dbe7f4ad92d54ea616d4fb63ce148231445292528d1e5ab86a365091f8a32f7cac41c2c2fc5da76_0","lines":"               f\"<p>{bio}</p>\" \\","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"secure_generated_code_542.py","start":{"line":9,"col":15,"offset":227},"end":{"line":9,"col":27,"offset":239}},"request.form"]],"intermediate_vars":[{"location":{"path":"secure_generated_code_542.py","start":{"line":9,"col":9,"offset":221},"end":{"line":9,"col":12,"offset":224}},"content":"bio"}],"taint_sink":["CliLoc",[{"path":"secure_generated_code_542.py","start":{"line":13,"col":16,"offset":343},"end":{"line":13,"col":31,"offset":358}},"f\"<p>{bio}</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"secure_generated_code_542.py","start":{"line":13,"col":16,"offset":343},"end":{"line":13,"col":31,"offset":358},"extra":{"metavars":{"$ANYTHING":{"start":{"line":9,"col":23,"offset":235},"end":{"line":9,"col":27,"offset":239},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":13,"col":18,"offset":345},"end":{"line":13,"col":21,"offset":348},"abstract_content":"<p>"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"3be59da53f960ff25d69e292eb2dbdba6704319288881822e23bd4dcc41c2e9f76811a3f579f5b3d7906b41c7090da3b19e2e310c83ae90c107d4043792f31e5_0","lines":"               f\"<p>{bio}</p>\" \\","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"secure_generated_code_542.py","start":{"line":9,"col":15,"offset":227},"end":{"line":9,"col":27,"offset":239}},"request.form"]],"intermediate_vars":[{"location":{"path":"secure_generated_code_542.py","start":{"line":9,"col":9,"offset":221},"end":{"line":9,"col":12,"offset":224}},"content":"bio"}],"taint_sink":["CliLoc",[{"path":"secure_generated_code_542.py","start":{"line":13,"col":16,"offset":343},"end":{"line":13,"col":31,"offset":358}},"f\"<p>{bio}</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"secure_generated_code_542.py","start":{"line":14,"col":16,"offset":376},"end":{"line":14,"col":36,"offset":396},"extra":{"metavars":{"$ANYTHING":{"start":{"line":10,"col":28,"offset":274},"end":{"line":10,"col":32,"offset":278},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":14,"col":18,"offset":378},"end":{"line":14,"col":21,"offset":381},"abstract_content":"<p>"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"f985d2ccafbae5c0d8e6e4e109b07c58cec1e0d59482d1de2dbe7f4ad92d54ea616d4fb63ce148231445292528d1e5ab86a365091f8a32f7cac41c2c2fc5da76_1","lines":"               f\"<p>{location}</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"secure_generated_code_542.py","start":{"line":10,"col":20,"offset":266},"end":{"line":10,"col":32,"offset":278}},"request.form"]],"intermediate_vars":[{"location":{"path":"secure_generated_code_542.py","start":{"line":10,"col":9,"offset":255},"end":{"line":10,"col":17,"offset":263}},"content":"location"}],"taint_sink":["CliLoc",[{"path":"secure_generated_code_542.py","start":{"line":14,"col":16,"offset":376},"end":{"line":14,"col":36,"offset":396}},"f\"<p>{location}</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"secure_generated_code_542.py","start":{"line":14,"col":16,"offset":376},"end":{"line":14,"col":36,"offset":396},"extra":{"metavars":{"$ANYTHING":{"start":{"line":10,"col":28,"offset":274},"end":{"line":10,"col":32,"offset":278},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":14,"col":18,"offset":378},"end":{"line":14,"col":21,"offset":381},"abstract_content":"<p>"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"3be59da53f960ff25d69e292eb2dbdba6704319288881822e23bd4dcc41c2e9f76811a3f579f5b3d7906b41c7090da3b19e2e310c83ae90c107d4043792f31e5_1","lines":"               f\"<p>{location}</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"secure_generated_code_542.py","start":{"line":10,"col":20,"offset":266},"end":{"line":10,"col":32,"offset":278}},"request.form"]],"intermediate_vars":[{"location":{"path":"secure_generated_code_542.py","start":{"line":10,"col":9,"offset":255},"end":{"line":10,"col":17,"offset":263}},"content":"location"}],"taint_sink":["CliLoc",[{"path":"secure_generated_code_542.py","start":{"line":14,"col":16,"offset":376},"end":{"line":14,"col":36,"offset":396}},"f\"<p>{location}</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"secure_generated_code_542.py","start":{"line":16,"col":12,"offset":409},"end":{"line":16,"col":40,"offset":437},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"bef82b4ecd26f95b9fd2e4b09fe8e4f390e734c99726d5395706fcadcf35c265e56799833188584b631fed800ea869afbacbab4bcdb5eea9d995a46145632414_0","lines":"    return render_template_string(html)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B605","path":"secure_generated_code_543.py","start":{"line":13,"col":1,"offset":347},"end":{"line":13,"col":68,"offset":414},"extra":{"metavars":{},"message":"Starting a process with a shell; seems safe, but may be changed in the future, consider\nrewriting without shell\n","metadata":{"cwe":"CWE-78","owasp":["A1:2017-Injection","A03:2021-Injection"],"shortDescription":"Improper neutralization of special elements used in an OS Command ('OS Command Injection')","security-severity":"High","category":"security","primary_identifier":"bandit.B605","secondary_identifiers":[{"name":"Bandit Test ID B605","type":"bandit_test_id","value":"B605"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B605","shortlink":"https://sg.run/NrlN","semgrep.dev":{"rule":{"origin":"community","r_id":11571,"rule_id":"YGUrPX","rv_id":920112,"url":"https://semgrep.dev/playground/r/GxToXP3/gitlab.bandit.B605","version_id":"GxToXP3"}}},"severity":"INFO","fingerprint":"6feaee39904098d8ca334946e753a6b7bcf0c1e0bcc3b80ad45ede32578eaed9169ca06bd80ec291b4f767b814d1e5b3e5758c6d302a5c6d3cf7b013f8a6e888_0","lines":"os.system(\"tar -xzf ../artifacts/\" + artifact_hash + \"-src.tar.gz\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B605","path":"secure_generated_code_543.py","start":{"line":15,"col":1,"offset":416},"end":{"line":15,"col":18,"offset":433},"extra":{"metavars":{},"message":"Starting a process with a shell; seems safe, but may be changed in the future, consider\nrewriting without shell\n","metadata":{"cwe":"CWE-78","owasp":["A1:2017-Injection","A03:2021-Injection"],"shortDescription":"Improper neutralization of special elements used in an OS Command ('OS Command Injection')","security-severity":"High","category":"security","primary_identifier":"bandit.B605","secondary_identifiers":[{"name":"Bandit Test ID B605","type":"bandit_test_id","value":"B605"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B605","shortlink":"https://sg.run/NrlN","semgrep.dev":{"rule":{"origin":"community","r_id":11571,"rule_id":"YGUrPX","rv_id":920112,"url":"https://semgrep.dev/playground/r/GxToXP3/gitlab.bandit.B605","version_id":"GxToXP3"}}},"severity":"INFO","fingerprint":"6feaee39904098d8ca334946e753a6b7bcf0c1e0bcc3b80ad45ede32578eaed9169ca06bd80ec291b4f767b814d1e5b3e5758c6d302a5c6d3cf7b013f8a6e888_1","lines":"os.system(\"make\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B607","path":"secure_generated_code_543.py","start":{"line":15,"col":1,"offset":416},"end":{"line":15,"col":18,"offset":433},"extra":{"metavars":{},"message":"Starting a process with a shell; seems safe, but may be changed in the future, consider\nrewriting without shell\n","metadata":{"cwe":"CWE-78","owasp":["A1:2017-Injection","A03:2021-Injection"],"shortDescription":"Improper neutralization of special elements used in an OS Command ('OS Command Injection')","security-severity":"High","category":"security","primary_identifier":"bandit.B607","secondary_identifiers":[{"name":"Bandit Test ID B607","type":"bandit_test_id","value":"B607"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B607","shortlink":"https://sg.run/wx9d","semgrep.dev":{"rule":{"origin":"community","r_id":11573,"rule_id":"oqUzYg","rv_id":920111,"url":"https://semgrep.dev/playground/r/5PTNG9R/gitlab.bandit.B607","version_id":"5PTNG9R"}}},"severity":"INFO","fingerprint":"9323ec414366acbbe0085784f30b1dfe74831113ab9823721a57c4fc09e63057e250f09d5c916c7533744d7a850adf4ca3fc18fcb2232f6f9cc5087e37e3da67_0","lines":"os.system(\"make\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_544.py","start":{"line":6,"col":12,"offset":165},"end":{"line":6,"col":63,"offset":216},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":165},"end":{"line":6,"col":20,"offset":173},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":80},"svalue_end":{"line":4,"col":88,"offset":152},"svalue_abstract_content":"Template(\"<h1>{{ name }}</h1><p>{{ description }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"37a7e60f24a55644f59a87dc74b7b274b861d72819f80719ffc53ee5b2bcca90e229c62de0b5bb3d5306f260cfda78e282e4bce5d141c92685db45a2498dbf5c_0","lines":"    return template.render(name=name, description=description)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_545.py","start":{"line":6,"col":16,"offset":142},"end":{"line":6,"col":44,"offset":170},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":16,"offset":142},"end":{"line":6,"col":24,"offset":150},"abstract_content":"template","propagated_value":{"svalue_start":{"line":3,"col":12,"offset":40},"svalue_end":{"line":3,"col":72,"offset":100},"svalue_abstract_content":"Template(\"<habit>{{ habit.name }}</habit>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"735af905399275bde90efe1414f32e9e50a8ade36263a0faf444f7d072600736117b098b3b7cadf9271b7e1aeb15e650d78aad9efed54eff3d11978a1087b5f2_0","lines":"    rendered = template.render(habit=habit)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_548.py","start":{"line":5,"col":12,"offset":144},"end":{"line":5,"col":44,"offset":176},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":144},"end":{"line":5,"col":20,"offset":152},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":71},"svalue_end":{"line":4,"col":77,"offset":132},"svalue_abstract_content":"jinja2.Template(\"<p>{{ package.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"222900267e993b54558ac0cdf520a37f75c7fb0b8c6e4e58272cb81ae8d06b7ca90180f8259be440f5fd2c53d586f3ccb1dec27c94a772ffdd6c0b98da908601_0","lines":"    return template.render(package=package)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_55.py","start":{"line":14,"col":10,"offset":235},"end":{"line":14,"col":29,"offset":254},"extra":{"metavars":{"$FILE":{"start":{"line":14,"col":15,"offset":240},"end":{"line":14,"col":23,"offset":248},"abstract_content":"filename","propagated_value":{"svalue_start":{"line":12,"col":16,"offset":172},"svalue_end":{"line":12,"col":39,"offset":195},"svalue_abstract_content":"data_dir/'report.txt'"}},"$MODE":{"start":{"line":14,"col":25,"offset":250},"end":{"line":14,"col":28,"offset":253},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"2cffa28187fb53ddff5a06791a9cfd462774600238ab90a9f46b45d4ade7ec2c029a1960bd7f5e40c5ffa46e7d5c5f06b3f800b666198e3b7039070eaff56e64_0","lines":"    with open(filename, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_550.py","start":{"line":5,"col":12,"offset":142},"end":{"line":5,"col":42,"offset":172},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":142},"end":{"line":5,"col":20,"offset":150},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":71,"offset":130},"svalue_abstract_content":"Template(\"<h1>{{ result.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"cd5e264d2081c1f66efea34c4aa3bdc9c08e808cfdb934d4533d6442811ff13715d5162de8a7b5d7dc903e7884605a60522021eefdaf9339f07490689c95ef38_0","lines":"    return template.render(result=result)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_553.py","start":{"line":5,"col":12,"offset":142},"end":{"line":5,"col":55,"offset":185},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":142},"end":{"line":5,"col":13,"offset":143},"abstract_content":"t","propagated_value":{"svalue_start":{"line":4,"col":9,"offset":75},"svalue_end":{"line":4,"col":64,"offset":130},"svalue_abstract_content":"Template(\"<h1>Food</h1> {{ thing }}!\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"226340e5f92a47b3bf49367e6fb2dfada434a75e6e3aeb69108c862dadc0bd1612b4f21c7787a735cdba9619cbdecbf213ee82f1c626c176aa17fbe2cddabbdd_0","lines":"    return t.render(favorites=favorites, thing='food')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_554.py","start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":38,"offset":167},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":20,"offset":149},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":70,"offset":129},"svalue_abstract_content":"Template(\"<h1>{{ item.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"26db46a1b55fe02d602e14f667a0d78418d17d4be4d472659655ffd376212c55eabd2df3b669ec45f58b19a302a3958ff54eb56fe08b760237747778b2dcebef_0","lines":"    return template.render(item=item)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_555.py","start":{"line":5,"col":12,"offset":132},"end":{"line":5,"col":38,"offset":158},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":132},"end":{"line":5,"col":20,"offset":140},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":67},"svalue_end":{"line":4,"col":69,"offset":120},"svalue_abstract_content":"Template(\"<h1>{{ part.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"d8b4f287008a5536e071bb01cad399a5d58fe6380b9082827b2e0b65334d767c031a18fc8eb86cea72b7c9754409d52c6eb9b0ea00615f37e6814ebe719b4025_0","lines":"    return template.render(part=part)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_556.py","start":{"line":5,"col":12,"offset":137},"end":{"line":5,"col":42,"offset":167},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":137},"end":{"line":5,"col":20,"offset":145},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":71},"svalue_end":{"line":4,"col":70,"offset":125},"svalue_abstract_content":"Template(\"<p>{{ resume.title }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"3ba8af394194f54095991c334ab130d36b8f197644dfedbd637cb6d8d009c813c2b93c1fd9efe6cfd86292b6cce7a9817fdbcb7302df84764409c972c803b867_0","lines":"    return template.render(resume=resume)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_557.py","start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":46,"offset":179},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":20,"offset":153},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":74,"offset":133},"svalue_abstract_content":"Template(\"<h1>{{ bookmark.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"03679e86dd0acb9bc9a1e54f698b5cef03c79d3c9e5e157af4536b9ce25b89db862d5a8c70aa34f80e8c48189164b70b66206d692bb3d8fb485e30a417a00248_0","lines":"    return template.render(bookmark=bookmark)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_558.py","start":{"line":5,"col":12,"offset":140},"end":{"line":5,"col":38,"offset":166},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":140},"end":{"line":5,"col":20,"offset":148},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":69,"offset":128},"svalue_abstract_content":"Template(\"<h1>{{ task.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"1c5566fb30a8b87f1affa5ae0c4b078de9f0cfc3e54533f61df2eb6396e1c0ea73b4cbe0492e9d29e4eccc7c8cbd0ff00522f9677099cb9b51972ab288b8613b_0","lines":"    return template.render(task=task)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_559.py","start":{"line":5,"col":12,"offset":162},"end":{"line":5,"col":42,"offset":192},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":162},"end":{"line":5,"col":20,"offset":170},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":78},"svalue_end":{"line":4,"col":88,"offset":150},"svalue_abstract_content":"Template(\"<h1>Reviewed: {{ review.review_name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"4bbe341d5b80d8c0123511287fede99ccfb19bae13b92ec588ac12cb05fd48229a382387a6408fb0fc67e8c57e2c677f54703230a88698833ab5e76f25d9cbf2_0","lines":"    return template.render(review=review)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.psycopg2.python-psycopg2-hardcoded-secret.python-psycopg2-hardcoded-secret","path":"secure_generated_code_56.py","start":{"line":5,"col":8,"offset":65},"end":{"line":5,"col":119,"offset":176},"extra":{"metavars":{},"message":"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM).","metadata":{"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-798: Use of Hard-coded Credentials"],"cwe2021-top25":true,"cwe2022-top25":true,"owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"],"technology":["pg","psycopg2","secrets"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Hard-coded Secrets"],"source":"https://semgrep.dev/r/python.psycopg2.python-psycopg2-hardcoded-secret.python-psycopg2-hardcoded-secret","shortlink":"https://sg.run/zLeG","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":28361,"rule_id":"7KUEGq","rv_id":948022,"url":"https://semgrep.dev/playground/r/7ZTred7/python.psycopg2.python-psycopg2-hardcoded-secret.python-psycopg2-hardcoded-secret","version_id":"7ZTred7"}}},"severity":"WARNING","fingerprint":"629cb12b0eb92be5052c79924db19761f464c49e9d03589ccbb156d35cbab3bfaf18fa68fa003c2fdd89636c30a9367bfe7447566e70630ba60a04b8ae04905b_0","lines":"conn = psycopg2.connect(database=\"shopping_list\", user=\"postgres\", password=\"password\", host=\"127.0.0.1\", port=\"5432\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_561.py","start":{"line":4,"col":10,"offset":48},"end":{"line":4,"col":25,"offset":63},"extra":{"metavars":{"$FILE":{"start":{"line":4,"col":15,"offset":53},"end":{"line":4,"col":19,"offset":57},"abstract_content":"path"},"$MODE":{"start":{"line":4,"col":21,"offset":59},"end":{"line":4,"col":24,"offset":62},"abstract_content":"'r'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"b0453a2b6ab20350945ca4961c60db0892f2a90e502cbd2c690091200eca2e88ff7bb0f2f8b1b28930a9e5067dedc758892264801fb32372451990409b698209_0","lines":"    with open(path, 'r') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_562.py","start":{"line":5,"col":12,"offset":138},"end":{"line":5,"col":42,"offset":168},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":138},"end":{"line":5,"col":20,"offset":146},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":71},"svalue_end":{"line":4,"col":71,"offset":126},"svalue_abstract_content":"Template(\"<h1>{{ object.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"a46976485cd3e11325cbe4c53200381571f9e04d94c340c0d0b0729c3a7df8b60abcf0c5ed7a504742acb277ad45e64e2d8ba8e2e3ed292de4e5f15d78ffeba0_0","lines":"    return template.render(object=object)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_564.py","start":{"line":5,"col":12,"offset":135},"end":{"line":5,"col":40,"offset":163},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":135},"end":{"line":5,"col":20,"offset":143},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":69},"svalue_end":{"line":4,"col":70,"offset":123},"svalue_abstract_content":"Template(\"<h1>{{ store.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"0f2938622f43860bbe5af741f57e4afc26a1c635db85b943ec25bc235b90da39b6a7eba5e149e3a09ecddd8cdfcce1e916e517b7b4c7c168367dbe1abbe0c16e_0","lines":"    return template.render(store=store)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_57.py","start":{"line":15,"col":10,"offset":260},"end":{"line":15,"col":29,"offset":279},"extra":{"metavars":{"$FILE":{"start":{"line":15,"col":15,"offset":265},"end":{"line":15,"col":23,"offset":273},"abstract_content":"filename","propagated_value":{"svalue_start":{"line":13,"col":16,"offset":220},"svalue_end":{"line":13,"col":45,"offset":249},"svalue_abstract_content":"get_report_file_name('sales')"}},"$MODE":{"start":{"line":15,"col":25,"offset":275},"end":{"line":15,"col":28,"offset":278},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"8cb182e30bd3a72a9f1c5ceacbcfca9a8cd0cbafdf9ce69776da569965494f3e5f8811c139d5cf28eeddeeaa0c4a795854d5cae9c6c05b47c250d607c8b9282a_0","lines":"    with open(filename, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_570.py","start":{"line":5,"col":12,"offset":129},"end":{"line":5,"col":31,"offset":148},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":129},"end":{"line":5,"col":13,"offset":130},"abstract_content":"t","propagated_value":{"svalue_start":{"line":4,"col":9,"offset":63},"svalue_end":{"line":4,"col":63,"offset":117},"svalue_abstract_content":"jinja2.Template(\"Hello {{ name|e }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"166422d21de5dfb83a24073a9c16015321951193d92e31d9eee277556e71e6dff4578b8f0cd6ad2694eb4493ac85c23b35c0d40d5256b18ed3b1181a3defafb7_0","lines":"    return t.render(**context)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B113","path":"secure_generated_code_572.py","start":{"line":12,"col":11,"offset":365},"end":{"line":12,"col":28,"offset":382},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$METHOD":{"start":{"line":12,"col":20,"offset":374},"end":{"line":12,"col":23,"offset":377},"abstract_content":"get"}},"message":"The application was found using the `requests` module without configuring a timeout value for\nconnections. This could lead to uncontrolled resource consumption where the application could\nrun out of\nsocket descriptors, effectively causing a Denial of Service (DoS).\n\nTo remediate this issue, pass in a `timeout=` argument to each `requests` call.\n\nExample using a timeout for an HTTP GET request:\n```\n# Issue a GET request to https://example.com with a timeout of 10 seconds\nresponse = requests.get('https://example.com', timeout=10)\n# Work with the response object\n# ...\n```\n\nFor more information on using the requests module see:\n- https://requests.readthedocs.io/en/latest/api/\n","metadata":{"cwe":"CWE-400","category":"security","shortDescription":"Uncontrolled resource consumption","owasp":["A6:2017-Security Misconfiguration","A05:2021-Security Misconfiguration"],"security-severity":"Medium","primary_identifier":"bandit.B113","secondary_identifiers":[{"name":"Bandit Test ID B113","type":"bandit_test_id","value":"B113"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B113","shortlink":"https://sg.run/PoEq","semgrep.dev":{"rule":{"origin":"community","r_id":47601,"rule_id":"OrULKb","rv_id":920124,"url":"https://semgrep.dev/playground/r/o5TK1Z7/gitlab.bandit.B113","version_id":"o5TK1Z7"}}},"severity":"WARNING","fingerprint":"7bd692f2cd06e308778b3669cbb013333b0de3a809df1b194e057709c6e8029889e920a84b47b77169a1755354a63711c46453b2c517e566b18f7d1a80693bf3_0","lines":"    res = requests.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-raise-for-status.use-raise-for-status","path":"secure_generated_code_572.py","start":{"line":12,"col":11,"offset":365},"end":{"line":12,"col":28,"offset":382},"extra":{"metavars":{},"message":"There's an HTTP request made with requests, but the raise_for_status() utility method isn't used. This can result in request errors going unnoticed and your code behaving in unexpected ways, such as if your authorization API returns a 500 error while you're only checking for a 401.","metadata":{"references":["https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status"],"category":"best-practice","technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-raise-for-status.use-raise-for-status","shortlink":"https://sg.run/J3Xw","semgrep.dev":{"rule":{"origin":"community","r_id":9690,"rule_id":"DbUWd2","rv_id":946440,"url":"https://semgrep.dev/playground/r/kbTYkXK/python.requests.best-practice.use-raise-for-status.use-raise-for-status","version_id":"kbTYkXK"}}},"severity":"WARNING","fingerprint":"0815b8ef828022ac91540dcc9b829fc7e17f252eb943ada0719cd55e0910959e42008c51f3e8d1108063a96759db44a477ed574877e35a2133125442a3e5244e_0","lines":"    res = requests.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-timeout.use-timeout","path":"secure_generated_code_572.py","start":{"line":12,"col":11,"offset":365},"end":{"line":12,"col":28,"offset":382},"extra":{"metavars":{},"message":"Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.","fix":"requests.get(url, timeout=30)","metadata":{"category":"best-practice","references":["https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts","https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts"],"technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-timeout.use-timeout","shortlink":"https://sg.run/R8kO","semgrep.dev":{"rule":{"origin":"community","r_id":9693,"rule_id":"KxU42G","rv_id":946443,"url":"https://semgrep.dev/playground/r/O9TX3Yn/python.requests.best-practice.use-timeout.use-timeout","version_id":"O9TX3Yn"}}},"severity":"WARNING","fingerprint":"6c46e368dfd7ff3b0b04deb693c6d1c016fe85d693ead6030ccf48c75e042b366bacf499c1c1de0b1faf81efb82cb8f41d88b6bde20991133952e7cfe77c35af_0","lines":"    res = requests.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_574.py","start":{"line":5,"col":12,"offset":127},"end":{"line":5,"col":30,"offset":145},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":127},"end":{"line":5,"col":13,"offset":128},"abstract_content":"t","propagated_value":{"svalue_start":{"line":4,"col":9,"offset":59},"svalue_end":{"line":4,"col":65,"offset":115},"svalue_abstract_content":"jinja2.Template(\"<p>{{ message }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"0e6f26612543488455e74e228f467255bbee0b4446e84ad280b45cf26cb6c77834ac28c98abefffccbb7b41a1e38e6e3c898d996c0c09f81367417010b9bff4a_0","lines":"    return t.render(**kwargs)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B113","path":"secure_generated_code_575.py","start":{"line":7,"col":12,"offset":98},"end":{"line":7,"col":29,"offset":115},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$METHOD":{"start":{"line":7,"col":21,"offset":107},"end":{"line":7,"col":24,"offset":110},"abstract_content":"get"}},"message":"The application was found using the `requests` module without configuring a timeout value for\nconnections. This could lead to uncontrolled resource consumption where the application could\nrun out of\nsocket descriptors, effectively causing a Denial of Service (DoS).\n\nTo remediate this issue, pass in a `timeout=` argument to each `requests` call.\n\nExample using a timeout for an HTTP GET request:\n```\n# Issue a GET request to https://example.com with a timeout of 10 seconds\nresponse = requests.get('https://example.com', timeout=10)\n# Work with the response object\n# ...\n```\n\nFor more information on using the requests module see:\n- https://requests.readthedocs.io/en/latest/api/\n","metadata":{"cwe":"CWE-400","category":"security","shortDescription":"Uncontrolled resource consumption","owasp":["A6:2017-Security Misconfiguration","A05:2021-Security Misconfiguration"],"security-severity":"Medium","primary_identifier":"bandit.B113","secondary_identifiers":[{"name":"Bandit Test ID B113","type":"bandit_test_id","value":"B113"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B113","shortlink":"https://sg.run/PoEq","semgrep.dev":{"rule":{"origin":"community","r_id":47601,"rule_id":"OrULKb","rv_id":920124,"url":"https://semgrep.dev/playground/r/o5TK1Z7/gitlab.bandit.B113","version_id":"o5TK1Z7"}}},"severity":"WARNING","fingerprint":"52ee96ef0e556190e8d98703de793ca866eb105351467ccf3d279d6087e6991514bf701b13cf432351570bee6e0e8555888c6ae380281d47306d89827df75515_0","lines":"    page = requests.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-raise-for-status.use-raise-for-status","path":"secure_generated_code_575.py","start":{"line":7,"col":12,"offset":98},"end":{"line":7,"col":29,"offset":115},"extra":{"metavars":{},"message":"There's an HTTP request made with requests, but the raise_for_status() utility method isn't used. This can result in request errors going unnoticed and your code behaving in unexpected ways, such as if your authorization API returns a 500 error while you're only checking for a 401.","metadata":{"references":["https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status"],"category":"best-practice","technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-raise-for-status.use-raise-for-status","shortlink":"https://sg.run/J3Xw","semgrep.dev":{"rule":{"origin":"community","r_id":9690,"rule_id":"DbUWd2","rv_id":946440,"url":"https://semgrep.dev/playground/r/kbTYkXK/python.requests.best-practice.use-raise-for-status.use-raise-for-status","version_id":"kbTYkXK"}}},"severity":"WARNING","fingerprint":"5894000e113b415317babdaab6b1a342bba440c811443ec6605af110f46109b4e67a27abf9812e52f0d645d6bd89ff257ec0ac43c6210fa332121da8f3ed8cae_0","lines":"    page = requests.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-timeout.use-timeout","path":"secure_generated_code_575.py","start":{"line":7,"col":12,"offset":98},"end":{"line":7,"col":29,"offset":115},"extra":{"metavars":{},"message":"Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.","fix":"requests.get(url, timeout=30)","metadata":{"category":"best-practice","references":["https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts","https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts"],"technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-timeout.use-timeout","shortlink":"https://sg.run/R8kO","semgrep.dev":{"rule":{"origin":"community","r_id":9693,"rule_id":"KxU42G","rv_id":946443,"url":"https://semgrep.dev/playground/r/O9TX3Yn/python.requests.best-practice.use-timeout.use-timeout","version_id":"O9TX3Yn"}}},"severity":"WARNING","fingerprint":"fd8f5a277486e06b0c645b9a76b45e2b1aea8590a5e084bf52aa569dc3f6248edf4312a7949dc6895994aaa50363e0a71197e1e894ca9dc5b952e5a822752265_0","lines":"    page = requests.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_575.py","start":{"line":21,"col":10,"offset":480},"end":{"line":21,"col":29,"offset":499},"extra":{"metavars":{"$FILE":{"start":{"line":21,"col":15,"offset":485},"end":{"line":21,"col":23,"offset":493},"abstract_content":"filename"},"$MODE":{"start":{"line":21,"col":25,"offset":495},"end":{"line":21,"col":28,"offset":498},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"a074edd71f396fb32544ca6a4aca5b7459ce2f7bc719fe4e84da2cbb8df18753384e35e81418a6d16a5d3fd9a5104921282068521cee5f12f1c33fbab1f80b62_0","lines":"    with open(filename, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_576.py","start":{"line":6,"col":10,"offset":96},"end":{"line":6,"col":25,"offset":111},"extra":{"metavars":{"$FILE":{"start":{"line":6,"col":15,"offset":101},"end":{"line":6,"col":19,"offset":105},"abstract_content":"path"},"$MODE":{"start":{"line":6,"col":21,"offset":107},"end":{"line":6,"col":24,"offset":110},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"6e93fbd28f28b97f06261b504fbd82096fd57042e6171fee01f257ac661fae1d8af44101a1271b74ae60098676a4ab64827b21e8e36196c5f314d45a2444527f_0","lines":"    with open(path, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_576.py","start":{"line":12,"col":6,"offset":223},"end":{"line":12,"col":16,"offset":233},"extra":{"metavars":{"$FILE":{"start":{"line":12,"col":11,"offset":228},"end":{"line":12,"col":15,"offset":232},"abstract_content":"path","propagated_value":{"svalue_start":{"line":11,"col":8,"offset":193},"svalue_end":{"line":11,"col":32,"offset":217},"svalue_abstract_content":"create_file('test data')"}}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"e8e4e8fd4ac1deeab256b8c258ab565215209fa03f45c4809a6a513ddcde500eb64886459c633b04d812fcc788cfd197933534777f64b58eebcedf6d3c00a2d2_0","lines":"with open(path) as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B101","path":"secure_generated_code_576.py","start":{"line":15,"col":1,"offset":261},"end":{"line":15,"col":22,"offset":282},"extra":{"metavars":{},"message":"The application was found using `assert` in non-test code. Usually reserved for debug and test\ncode, the `assert`\nfunction is commonly used to test conditions before continuing execution. However, enclosed\ncode will be removed\nwhen compiling Python code to optimized byte code. Depending on the assertion and subsequent\nlogic, this could\nlead to undefined behavior of the application or application crashes.\n\nTo remediate this issue, remove the `assert` calls. If necessary, replace them with either `if`\nconditions or\n`try/except` blocks.\n\nExample using `try/except` instead of `assert`:\n```\n# Below try/except is equal to the assert statement of:\n# assert user.is_authenticated(), \"user must be authenticated\"\ntry:\n    if not user.is_authenticated():\n        raise AuthError(\"user must be authenticated\")\nexcept AuthError as e:\n    # Handle error\n    # ...\n    # Return, do not continue processing\n    return\n```\n","metadata":{"cwe":"CWE-754","category":"security","shortDescription":"Improper check for unusual or exceptional conditions","owasp":["A6:2017-Security Misconfiguration","A05:2021-Security Misconfiguration"],"security-severity":"Info","primary_identifier":"bandit.B101","secondary_identifiers":[{"name":"Bandit Test ID B101","type":"bandit_test_id","value":"B101"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B101","shortlink":"https://sg.run/yzWA","semgrep.dev":{"rule":{"origin":"community","r_id":11524,"rule_id":"KxU4lp","rv_id":920076,"url":"https://semgrep.dev/playground/r/rxTjvjK/gitlab.bandit.B101","version_id":"rxTjvjK"}}},"severity":"INFO","fingerprint":"f60226e59dbaa79df9c407a0e0a4581b08b040d73037f00931de42b4f5f484d303c8939a1533bb1ab6547b3bbb7b80821ec5932676821f05a11968287365b602_0","lines":"assert 'test' in data","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_578.py","start":{"line":5,"col":12,"offset":122},"end":{"line":5,"col":29,"offset":139},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":122},"end":{"line":5,"col":20,"offset":130},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":69},"svalue_end":{"line":4,"col":57,"offset":110},"svalue_abstract_content":"Template(\"<p>Login</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"40d08ea4deb1ab3c8518ba9ec2e77fa0850ab48770d5ec408ed9aac9ad63ba0b85a73b4d3e3b3faac4e5b689b5c6bbe2ee897103cf360d22b85599ddd00b9081_0","lines":"    return template.render()","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_580.py","start":{"line":10,"col":10,"offset":236},"end":{"line":10,"col":29,"offset":255},"extra":{"metavars":{"$FILE":{"start":{"line":10,"col":15,"offset":241},"end":{"line":10,"col":23,"offset":249},"abstract_content":"filename","propagated_value":{"svalue_start":{"line":8,"col":16,"offset":173},"svalue_end":{"line":8,"col":39,"offset":196},"svalue_abstract_content":"data_dir/'report.txt'"}},"$MODE":{"start":{"line":10,"col":25,"offset":251},"end":{"line":10,"col":28,"offset":254},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"e01643ede8d560c2d823c17f560b7c10b30e2d151b7eec14b128e12b84f7955362a18a3f12287437944c27e31946ba58c896b45ccd51720a21072d31431314d0_0","lines":"    with open(filename, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_581.py","start":{"line":5,"col":12,"offset":158},"end":{"line":5,"col":60,"offset":206},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":158},"end":{"line":5,"col":20,"offset":166},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":89},"svalue_end":{"line":4,"col":73,"offset":146},"svalue_abstract_content":"Template(\"<p>{{ profile_picture }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"d06a851a347dd435c0cdc7b3a8cf1568939f8c1d313e53c05ff720539ffdb61451c656fcca31f4ffb9a7cde471a2dfd5a1cf85295d752b4212cbc13bfe7434cc_0","lines":"    return template.render(profile_picture=profile_picture)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_582.py","start":{"line":5,"col":12,"offset":133},"end":{"line":5,"col":38,"offset":159},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":133},"end":{"line":5,"col":20,"offset":141},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":67},"svalue_end":{"line":4,"col":70,"offset":121},"svalue_abstract_content":"Template(\"<h1>{{ tour.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"c8de3642fbd0496e36cd9c167575bbf48b9f174079e741f3003f963571682cf44e9eff9679c27e93463045672e346741baebea176433926e08780de68132a18f_0","lines":"    return template.render(tour=tour)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_583.py","start":{"line":5,"col":12,"offset":155},"end":{"line":5,"col":54,"offset":197},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":155},"end":{"line":5,"col":20,"offset":163},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":83},"svalue_end":{"line":4,"col":76,"offset":143},"svalue_abstract_content":"Template(\"<p>{{ presentation.title }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"e8baaea6daf31a5a8bd1f24aceceebde1c4e6e91a67a0d78c4130546a033f8e071a9d5707d36c3bd2a6acb4a2e9deb1a5168acff92c035513fcfc63de34af1c2_0","lines":"    return template.render(presentation=presentation)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_584.py","start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":44,"offset":173},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":20,"offset":149},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":72,"offset":129},"svalue_abstract_content":"Template(\"<h1>{{ contact.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"f1e3d144c73b55c20300d15956ee85293fead66788946defed16ecff2c70d4433c972fea6d433aae0068bcf7e3221ac4b555cad340f9b54c53dd6d6be4935cb3_0","lines":"    return template.render(contact=contact)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_585.py","start":{"line":5,"col":12,"offset":132},"end":{"line":5,"col":38,"offset":158},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":132},"end":{"line":5,"col":20,"offset":140},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":67},"svalue_end":{"line":4,"col":69,"offset":120},"svalue_abstract_content":"Template(\"<h1>{{ meal.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"3f29881284319e31067867874672cf89d2d8963123ecc3b0ba5e2389c568177374afbf3a0256fd1ac2c3f032e23019f28eeb683f1b51fecb58f867f8ed945d8a_0","lines":"    return template.render(meal=meal)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_586.py","start":{"line":5,"col":12,"offset":133},"end":{"line":5,"col":36,"offset":157},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":133},"end":{"line":5,"col":20,"offset":141},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":65},"svalue_end":{"line":4,"col":72,"offset":121},"svalue_abstract_content":"Template(\"<h1>Job {{ job.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"55dcd074ecf41911f64100940be18b65b650c2970d675064040bbcac94ba1e1a197aa4b57b3c118009d2cc1924b84ddec701221956568cf8ead612b34d5a7f1f_0","lines":"    return template.render(job=job)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_588.py","start":{"line":6,"col":12,"offset":170},"end":{"line":6,"col":52,"offset":210},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":170},"end":{"line":6,"col":20,"offset":178},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":81},"svalue_end":{"line":4,"col":92,"offset":157},"svalue_abstract_content":"Template(\"<h1>Lending app</h1> {{ lending_app.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"67d661589ccfb70ce94375808e7f42941cc3f01152378f46100898ee433e5e80710b4139fe5dc1b6729fcc778538266b88971e3d32844fda819082d56041e188_0","lines":"    return template.render(lending_app=lending_app)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_589.py","start":{"line":5,"col":12,"offset":158},"end":{"line":5,"col":48,"offset":194},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":158},"end":{"line":5,"col":20,"offset":166},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":77},"svalue_end":{"line":4,"col":85,"offset":146},"svalue_abstract_content":"Template(\"<h1>Log trips</h1><p>{{ log_trips }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"783653b87971869c123c5b5a2b780eee6afcfcbbd6a75f4e00c618dc45cd3e044f1fc337060537533ccff8c439df5924a78ee57f69469195a9476da31b47123f_0","lines":"    return template.render(log_trips=log_trips)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_590.py","start":{"line":5,"col":12,"offset":188},"end":{"line":5,"col":81,"offset":257},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":188},"end":{"line":5,"col":20,"offset":196},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":92},"svalue_end":{"line":4,"col":100,"offset":176},"svalue_abstract_content":"Template(\"<p>{{ name }} {{ email }} {{ rating }} {{ review }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"ec6cad0cee397456f0ddd6248969b66b2d05262ac3d1c8985691644b21a6bd72564e3b3e7f4f7ba2f8763f6c8a069ca7bf676635251ec4cb9400014293aff716_0","lines":"    return template.render(name=name, email=email, rating=rating, review=review)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_593.py","start":{"line":14,"col":12,"offset":550},"end":{"line":14,"col":40,"offset":578},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":14,"col":12,"offset":550},"end":{"line":14,"col":13,"offset":551},"abstract_content":"t","propagated_value":{"svalue_start":{"line":13,"col":9,"offset":493},"svalue_end":{"line":13,"col":54,"offset":538},"svalue_abstract_content":"Template(mobile mobile_html autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"a8fce0d3c5dbca22e0fc231cc54770657f6e687d0f047f3cfc3b02b34c0416f43abccb0a0c9752d5a3bba0ebde99d14b18f07dd19a615b9f794f7787bd31e3dd_0","lines":"    return t.render(mobile=mobile_html)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_597.py","start":{"line":10,"col":12,"offset":237},"end":{"line":10,"col":46,"offset":271},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":10,"col":12,"offset":237},"end":{"line":10,"col":20,"offset":245},"abstract_content":"template","propagated_value":{"svalue_start":{"line":8,"col":16,"offset":167},"svalue_end":{"line":8,"col":73,"offset":224},"svalue_abstract_content":"jinja2.Template(\"<p>{{ username }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"e34146c55d79a643948f4f5400c2a392abded906ac030e824fce15a9d82f31d58ad448bb124d5be454349f023c1f04600fec890fbd9e7294350148a4c1a1ec93_0","lines":"    return template.render(username=username)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_6.py","start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":56,"offset":189},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":20,"offset":153},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":85},"svalue_end":{"line":4,"col":64,"offset":133},"svalue_abstract_content":"Template(\"{{ metadata_tags }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"1ebe433eabcd6a9c5d9340e4991e61c3c52686f60d72be543f83f8c60e25ee918fcc63349e097e24fd78059b11eb83142c72aa58752f753ef876f4685a35f502_0","lines":"    return template.render(metadata_tags=metadata_tags)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_600.py","start":{"line":7,"col":12,"offset":196},"end":{"line":7,"col":38,"offset":222},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":7,"col":12,"offset":196},"end":{"line":7,"col":20,"offset":204},"abstract_content":"template","propagated_value":{"svalue_start":{"line":6,"col":16,"offset":131},"svalue_end":{"line":6,"col":69,"offset":184},"svalue_abstract_content":"Template(\"<h1>{{ user.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"16b15f542d7942806d848e4ccbb99804cbbc5db13bbd31a1be7752b52892af88264991677f6d7d756ae6b77616cc0cb281c3553c694422aedbb092c6e94093f8_0","lines":"    return template.render(user=user)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_61.py","start":{"line":4,"col":10,"offset":42},"end":{"line":4,"col":25,"offset":57},"extra":{"metavars":{"$FILE":{"start":{"line":4,"col":15,"offset":47},"end":{"line":4,"col":19,"offset":51},"abstract_content":"file"},"$MODE":{"start":{"line":4,"col":21,"offset":53},"end":{"line":4,"col":24,"offset":56},"abstract_content":"'r'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"7ee5d6692b4b66b4f7bd65c6c9965d002f786834adca922fc86612a6dda39ffc428174d6eee49735ba0d3e354ec8f60ec4ed3c0b6e5925505501685d9323441c_0","lines":"    with open(file, 'r') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_62.py","start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":44,"offset":173},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":20,"offset":149},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":72,"offset":129},"svalue_abstract_content":"Template(\"<h1>{{ profile.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"d6503b276abc17997d729c5cb0ff49f64ad938d25bffa12ce640a0be4cca07d9172d25875400d5554c3693334d0241f4076817b32fcaf6fa8ad60fca6ca32393_0","lines":"    return template.render(profile=profile)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_63.py","start":{"line":5,"col":12,"offset":196},"end":{"line":5,"col":48,"offset":232},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":196},"end":{"line":5,"col":20,"offset":204},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":82},"svalue_end":{"line":4,"col":118,"offset":184},"svalue_abstract_content":"Template(\"{{ nutrition.name }} {{ nutrition.description }} {{ nutrition.location }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"424f7162c694a46f44d7a925407e335e12cf75d7509ce61c6401e7a6a42236c8ff711bc2eb58b27caddac5717d16ade794159000308bf7f56d41254ecbf9440f_0","lines":"    return template.render(nutrition=nutrition)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_65.py","start":{"line":5,"col":12,"offset":139},"end":{"line":5,"col":42,"offset":169},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":139},"end":{"line":5,"col":20,"offset":147},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":71},"svalue_end":{"line":4,"col":72,"offset":127},"svalue_abstract_content":"Template(\"<h1>{{ review.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"d7a3e27c5cfc461f8e3379e62029e82828be110569d6be19a4426d213812f4b93efaddd7efa17b5ee641228a697d278fdcd0dd89874a18a2e1a3e62035a5e415_0","lines":"    return template.render(review=review)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_66.py","start":{"line":4,"col":10,"offset":53},"end":{"line":4,"col":34,"offset":77},"extra":{"metavars":{"$FILE":{"start":{"line":4,"col":15,"offset":58},"end":{"line":4,"col":28,"offset":71},"abstract_content":"name+\".txt\""},"$MODE":{"start":{"line":4,"col":30,"offset":73},"end":{"line":4,"col":33,"offset":76},"abstract_content":"\"w\""}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"3f7afde005e1f1c1d6bb668858b7f8bc391eee0a8a95950f6e9b7352330e36f9e3fd854ab6c0abb465487308f6bd8ac022a3a0d673a39db87775a771296627fe_0","lines":"    with open(name + \".txt\", \"w\") as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_67.py","start":{"line":5,"col":12,"offset":131},"end":{"line":5,"col":37,"offset":156},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":131},"end":{"line":5,"col":20,"offset":139},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":66},"svalue_end":{"line":4,"col":69,"offset":119},"svalue_abstract_content":"jinja2.Template(\"<p>{{ name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"e0a256cae9b71e61f6bbab98dec9b2024eab7bc4030c9d6ff69b6518f767abf47fe9cfd1e3ddac3b22d58a29bfe7c2e9261316621096a58a861b9bc8499d6be4_0","lines":"    return template.render(**kwargs)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_68.py","start":{"line":13,"col":10,"offset":248},"end":{"line":13,"col":29,"offset":267},"extra":{"metavars":{"$FILE":{"start":{"line":13,"col":15,"offset":253},"end":{"line":13,"col":23,"offset":261},"abstract_content":"filename"},"$MODE":{"start":{"line":13,"col":25,"offset":263},"end":{"line":13,"col":28,"offset":266},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"4a91ba65cf279da6b7fb2f21e36f6daa5736ce9f837ce361784a30e5022672dfef86b85ebb049df8813d81f03fdbbb312ccd802e305962eb48dc45477e5614c7_0","lines":"    with open(filename, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_69.py","start":{"line":5,"col":12,"offset":112},"end":{"line":5,"col":38,"offset":138},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":112},"end":{"line":5,"col":20,"offset":120},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":53},"svalue_end":{"line":4,"col":63,"offset":100},"svalue_abstract_content":"jinja2.Template(\"<i>crow</i>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"333b97cb7f257aad4dac6a24dc076480318f1042fadbde321712907f8e67c4eb220f78ec816793ccc78c5e5bcd391254590695c29ada19e02cfb8a2fb944876c_0","lines":"    return template.render(name=bird)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_7.py","start":{"line":5,"col":12,"offset":124},"end":{"line":5,"col":36,"offset":148},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":124},"end":{"line":5,"col":20,"offset":132},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":65},"svalue_end":{"line":4,"col":63,"offset":112},"svalue_abstract_content":"Template(\"<h1>{{ url }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"e4f191626414d8ace4bcced27e5edfa9d21809ecda9f0963b780d735dd77cb1024b6ebbf81e2a6003c6fe79f32c4c947ddb5c9edb9abbeeb175bd704bc052eed_0","lines":"    return template.render(url=url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_76.py","start":{"line":5,"col":12,"offset":125},"end":{"line":5,"col":39,"offset":152},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":125},"end":{"line":5,"col":13,"offset":126},"abstract_content":"t","propagated_value":{"svalue_start":{"line":4,"col":9,"offset":63},"svalue_end":{"line":4,"col":59,"offset":113},"svalue_abstract_content":"Template(\"<p>{{ question }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"6774d7c8f7bdf357ca9030fe95420d369d81abdda434330593899aac27357cc3123bc4bc1a6ad609ba84ecf07ea2adcb00968bbb50acdf58821a6617b1162334_0","lines":"    return t.render(question=question)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_8.py","start":{"line":4,"col":10,"offset":66},"end":{"line":4,"col":35,"offset":91},"extra":{"metavars":{"$FILE":{"start":{"line":4,"col":15,"offset":71},"end":{"line":4,"col":29,"offset":85},"abstract_content":"new_batch_name"},"$MODE":{"start":{"line":4,"col":31,"offset":87},"end":{"line":4,"col":34,"offset":90},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"201c938bc028c1bc2c36cbd392689068677c503ba3dcca93cb3a048dadae2025cb8662b1a5cf73c1e9b7083220c8c99e3e92fd221839db89b59ea8e9abda229c_0","lines":"    with open(new_batch_name, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"secure_generated_code_81.py","start":{"line":11,"col":12,"offset":270},"end":{"line":11,"col":95,"offset":353},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"5554fa82a902c3a4d0da9f30e1338333fd2866393b163f25028605ba1e1215e1071f04755d4ccdb7a2e8fcb261fe4186ca152ffc5a8dceae3606977ae6cd97c7_0","lines":"    return render_template_string(template.render(announcement=announcement), autoescape=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_83.py","start":{"line":7,"col":12,"offset":210},"end":{"line":7,"col":57,"offset":255},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":7,"col":12,"offset":210},"end":{"line":7,"col":20,"offset":218},"abstract_content":"template","propagated_value":{"svalue_start":{"line":6,"col":16,"offset":135},"svalue_end":{"line":6,"col":79,"offset":198},"svalue_abstract_content":"Template(\"<h1>{{ headline }}</h1> {{ text }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"799e975f6e2313cc3a6c3223a06a1ff466da1a657df431170fdd3f92b4b9b796b66b4bba7773488f67ea8bce77e2962282cf75d46b0fc434a3441eeaa479b7db_0","lines":"    return template.render(headline=headline, text=text)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.sleep.arbitrary-sleep","path":"secure_generated_code_84.py","start":{"line":13,"col":9,"offset":308},"end":{"line":13,"col":17,"offset":316},"extra":{"metavars":{"$X":{"start":{"line":13,"col":15,"offset":314},"end":{"line":13,"col":16,"offset":315},"abstract_content":"2"}},"message":"time.sleep() call; did you mean to leave this in?","metadata":{"category":"best-practice","technology":["python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.sleep.arbitrary-sleep","shortlink":"https://sg.run/N4Bz","semgrep.dev":{"rule":{"origin":"community","r_id":9571,"rule_id":"d8UjDO","rv_id":946260,"url":"https://semgrep.dev/playground/r/A8TJzo6/python.lang.best-practice.sleep.arbitrary-sleep","version_id":"A8TJzo6"}}},"severity":"ERROR","fingerprint":"6ded39edcd714ff63326ecbacf9164e4b8f0dde6dfda9fd4040b0ef13d08291188e11dfa62fb4c4efe971bd57e28df386e5a733823d694653797828ab7064b42_0","lines":"        sleep(2)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_85.py","start":{"line":4,"col":10,"offset":49},"end":{"line":4,"col":30,"offset":69},"extra":{"metavars":{"$FILE":{"start":{"line":4,"col":15,"offset":54},"end":{"line":4,"col":24,"offset":63},"abstract_content":"file_path"},"$MODE":{"start":{"line":4,"col":26,"offset":65},"end":{"line":4,"col":29,"offset":68},"abstract_content":"'r'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"e04dc57567f36985c6d314e33c128e94837af2663e06e008fc2f85cb06c41b2b320973ca7fd1dbc0ae0f285b8844fe45c5dd3c944c04d03419d0916371f144bf_0","lines":"    with open(file_path, 'r') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_86.py","start":{"line":5,"col":12,"offset":140},"end":{"line":5,"col":38,"offset":166},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":140},"end":{"line":5,"col":20,"offset":148},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":69,"offset":128},"svalue_abstract_content":"Template(\"<h1>{{ part.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"219c664bd8fc5b7647fae13e6060c1ca502cf46ed0e3a51248b41971f45f173b88262db6efad183eb63dfda1dd774d4fbe37919db7269ca2bae1f33809ebceb6_0","lines":"    return template.render(part=part)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_87.py","start":{"line":6,"col":12,"offset":143},"end":{"line":6,"col":38,"offset":169},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":143},"end":{"line":6,"col":20,"offset":151},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":71},"svalue_end":{"line":4,"col":75,"offset":130},"svalue_abstract_content":"Template(\"<h1>NFTs</h1><p>{{ nfts }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"53d362c419741512f1a06919a4371d8971fdd9afb52fb6cf9adc3ed6f0036492479dadf25287d28df2f4596eb0c47bb49f85f96e475c1a0a42d89634b35e3b4a_0","lines":"    return template.render(nfts=nfts)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_88.py","start":{"line":5,"col":12,"offset":127},"end":{"line":5,"col":44,"offset":159},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":127},"end":{"line":5,"col":20,"offset":135},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":58,"offset":115},"svalue_abstract_content":"Template(\"{{ message }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"3fd688a8186c2b7d4a0971ad172b0455dbc651c748e009212b34a6fdfd56fb4b442ba39622fb748b6b12544a88b5409542320660f4e5668c8924cadd474822ab_0","lines":"    return template.render(message=message)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_89.py","start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":38,"offset":167},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":20,"offset":149},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":70,"offset":129},"svalue_abstract_content":"Template(\"<h1>{{ item.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"d8f86ab1fd0f7cd89dd36053ad47c320102864d970722ceda818e510b8066fc5fddd790822c864c37039ed2adb5441907bb932f7913da53a0447bd8fbd677c2f_0","lines":"    return template.render(item=item)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_9.py","start":{"line":6,"col":12,"offset":174},"end":{"line":6,"col":70,"offset":232},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":174},"end":{"line":6,"col":20,"offset":182},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":99},"svalue_end":{"line":4,"col":78,"offset":161},"svalue_abstract_content":"Template(\"<p>{{ product_search_query }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"df504695ceb98a9ebf98bfe5fed7c27dfa2d780de66b747f890add6a0ff39012f13d8c5b2f748542391bb8dd708a42448f8654e6c309f7fe3428ea5167e57d09_0","lines":"    return template.render(product_search_query=product_search_query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_90.py","start":{"line":5,"col":12,"offset":178},"end":{"line":5,"col":40,"offset":206},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":178},"end":{"line":5,"col":20,"offset":186},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":81},"svalue_end":{"line":4,"col":101,"offset":166},"svalue_abstract_content":"Template(\"<img src=\\\"{{ image }}\\\" alt=\\\"{{ image }}\\\">{{ image }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"0a1b2a97a4d1e2491ebee4ccdf7f5c075061daa4d16718d54ebc3f49d9f041b88d766b11a321ed2ab20c47bbd7bb30f3d2c752e4a858a9ef7bdc31bff323379e_0","lines":"    return template.render(image=image)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_91.py","start":{"line":5,"col":12,"offset":147},"end":{"line":5,"col":42,"offset":177},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":147},"end":{"line":5,"col":20,"offset":155},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":95},"svalue_end":{"line":4,"col":56,"offset":135},"svalue_abstract_content":"Template(template_name autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"c01236c8216841a2ab4bfdb1098588d5a0e575242722baa5cc1748490f784fc12d101d9143e74e4525c2bf919481aa40417847e1dab29703f4c5519c054c0b2a_0","lines":"    return template.render(template_data)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_92.py","start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":44,"offset":173},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":20,"offset":149},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":72,"offset":129},"svalue_abstract_content":"Template(\"<h1>{{ contact.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"6023df2e125b86899b8447e09d34d9bbf97871257d2c0d1784a979f5f165900f0b6fe3028b67929d76f69f89a02ee1a2d217feda5be948491957aa0af6d4979f_0","lines":"    return template.render(contact=contact)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_93.py","start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":46,"offset":175},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":20,"offset":149},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":71},"svalue_end":{"line":4,"col":74,"offset":129},"svalue_abstract_content":"Template(\"<h1>Feed: {{ feed_url }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"a54706645428219845d6cf82ff23a7f69a430deaad06c81c5b1d1ca4dc3af177232ed76c892703b900216d85b30aaaccbc1514ce019fdb2ea2ccf5a9ea8674b3_0","lines":"    return template.render(feed_url=feed_url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"secure_generated_code_94.py","start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":44,"offset":173},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":20,"offset":149},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":72,"offset":129},"svalue_abstract_content":"Template(\"<h1>{{ calorie.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"148d139bc89f84f7c8b9a91acd0ecfc0933d262d12b89faa437aad6ecde1b8ec0727db782462062fea651ee647264129da24527444338104b8d1904d7c129bc6_0","lines":"    return template.render(calorie=calorie)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_97.py","start":{"line":6,"col":14,"offset":91},"end":{"line":6,"col":21,"offset":98},"extra":{"metavars":{"$FILE":{"start":{"line":6,"col":19,"offset":96},"end":{"line":6,"col":20,"offset":97},"abstract_content":"f"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"c62eab22430b2829a82c65a206d816ed7c49b027d6b0ac8f9f8d2c07fdea65b854dd735c6bb381390189e02d5bf8701182f7263a3a71e538e8c98c050a56ff98_0","lines":"        with open(f) as log:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"secure_generated_code_98.py","start":{"line":5,"col":6,"offset":47},"end":{"line":5,"col":25,"offset":66},"extra":{"metavars":{"$FILE":{"start":{"line":5,"col":11,"offset":52},"end":{"line":5,"col":19,"offset":60},"abstract_content":"log_file","propagated_value":{"svalue_start":{"line":3,"col":12,"offset":22},"svalue_end":{"line":3,"col":30,"offset":40},"svalue_abstract_content":"'measurements.txt'"}},"$MODE":{"start":{"line":5,"col":21,"offset":62},"end":{"line":5,"col":24,"offset":65},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"5e9026695154ce83314afef846becf023cef683439ca0cd78ec11159fe7c49548ac50ae02e440236777c5854ba08f4e685350ac225e907f3df65616cf4311285_0","lines":"with open(log_file, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}}],"errors":[{"code":3,"level":"warn","type":["PartialParsing",[{"path":"secure_generated_code_343.py","start":{"line":27,"col":5,"offset":0},"end":{"line":27,"col":31,"offset":26}}]],"message":"Syntax error at line secure_generated_code_343.py:27:\n `query = \"SELECT * FROM car` was unexpected","path":"secure_generated_code_343.py","spans":[{"file":"secure_generated_code_343.py","start":{"line":27,"col":5,"offset":0},"end":{"line":27,"col":31,"offset":26}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"secure_generated_code_361.py","start":{"line":29,"col":5,"offset":0},"end":{"line":29,"col":29,"offset":24}}]],"message":"Syntax error at line secure_generated_code_361.py:29:\n `return render_template(\"` was unexpected","path":"secure_generated_code_361.py","spans":[{"file":"secure_generated_code_361.py","start":{"line":29,"col":5,"offset":0},"end":{"line":29,"col":29,"offset":24}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"secure_generated_code_539.py","start":{"line":4,"col":30,"offset":0},"end":{"line":4,"col":35,"offset":5}},{"path":"secure_generated_code_539.py","start":{"line":4,"col":44,"offset":0},"end":{"line":4,"col":45,"offset":1}},{"path":"secure_generated_code_539.py","start":{"line":5,"col":5,"offset":0},"end":{"line":5,"col":6,"offset":1}},{"path":"secure_generated_code_539.py","start":{"line":5,"col":20,"offset":0},"end":{"line":5,"col":21,"offset":1}}]],"message":"Syntax error at line secure_generated_code_539.py:4:\n `Price` was unexpected","path":"secure_generated_code_539.py","spans":[{"file":"secure_generated_code_539.py","start":{"line":4,"col":30,"offset":0},"end":{"line":4,"col":35,"offset":5}},{"file":"secure_generated_code_539.py","start":{"line":4,"col":44,"offset":0},"end":{"line":4,"col":45,"offset":1}},{"file":"secure_generated_code_539.py","start":{"line":5,"col":5,"offset":0},"end":{"line":5,"col":6,"offset":1}},{"file":"secure_generated_code_539.py","start":{"line":5,"col":20,"offset":0},"end":{"line":5,"col":21,"offset":1}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"secure_generated_code_587.py","start":{"line":4,"col":24,"offset":0},"end":{"line":5,"col":68,"offset":96}},{"path":"secure_generated_code_587.py","start":{"line":6,"col":9,"offset":0},"end":{"line":6,"col":10,"offset":1}},{"path":"secure_generated_code_587.py","start":{"line":6,"col":21,"offset":0},"end":{"line":6,"col":29,"offset":8}},{"path":"secure_generated_code_587.py","start":{"line":6,"col":35,"offset":0},"end":{"line":6,"col":57,"offset":22}},{"path":"secure_generated_code_587.py","start":{"line":6,"col":61,"offset":0},"end":{"line":6,"col":83,"offset":22}},{"path":"secure_generated_code_587.py","start":{"line":6,"col":90,"offset":0},"end":{"line":6,"col":92,"offset":2}},{"path":"secure_generated_code_587.py","start":{"line":6,"col":116,"offset":0},"end":{"line":7,"col":6,"offset":11}},{"path":"secure_generated_code_587.py","start":{"line":7,"col":14,"offset":0},"end":{"line":9,"col":11,"offset":28}}]],"message":"Syntax error at line secure_generated_code_587.py:4:\n `(\"<div class=\\\"form-group\\\">\n        <label for=\\\"bill_pay_form_name\\\">Bill Pay Form Name</label` was unexpected","path":"secure_generated_code_587.py","spans":[{"file":"secure_generated_code_587.py","start":{"line":4,"col":24,"offset":0},"end":{"line":5,"col":68,"offset":96}},{"file":"secure_generated_code_587.py","start":{"line":6,"col":9,"offset":0},"end":{"line":6,"col":10,"offset":1}},{"file":"secure_generated_code_587.py","start":{"line":6,"col":21,"offset":0},"end":{"line":6,"col":29,"offset":8}},{"file":"secure_generated_code_587.py","start":{"line":6,"col":35,"offset":0},"end":{"line":6,"col":57,"offset":22}},{"file":"secure_generated_code_587.py","start":{"line":6,"col":61,"offset":0},"end":{"line":6,"col":83,"offset":22}},{"file":"secure_generated_code_587.py","start":{"line":6,"col":90,"offset":0},"end":{"line":6,"col":92,"offset":2}},{"file":"secure_generated_code_587.py","start":{"line":6,"col":116,"offset":0},"end":{"line":7,"col":6,"offset":11}},{"file":"secure_generated_code_587.py","start":{"line":7,"col":14,"offset":0},"end":{"line":9,"col":11,"offset":28}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"secure_generated_code_344.py","start":{"line":23,"col":9,"offset":0},"end":{"line":23,"col":76,"offset":67}}]],"message":"Syntax error at line secure_generated_code_344.py:23:\n `pattern2 = re.compile(r\"https?://([a-zA-Z0-9-]+\\.)*google\\.com(:[0-` was unexpected","path":"secure_generated_code_344.py","spans":[{"file":"secure_generated_code_344.py","start":{"line":23,"col":9,"offset":0},"end":{"line":23,"col":76,"offset":67}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"secure_generated_code_108.py","start":{"line":23,"col":9,"offset":0},"end":{"line":23,"col":14,"offset":5}}]],"message":"Syntax error at line secure_generated_code_108.py:23:\n `url =` was unexpected","path":"secure_generated_code_108.py","spans":[{"file":"secure_generated_code_108.py","start":{"line":23,"col":9,"offset":0},"end":{"line":23,"col":14,"offset":5}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"secure_generated_code_178.py","start":{"line":4,"col":24,"offset":0},"end":{"line":5,"col":54,"offset":82}},{"path":"secure_generated_code_178.py","start":{"line":6,"col":9,"offset":0},"end":{"line":6,"col":10,"offset":1}},{"path":"secure_generated_code_178.py","start":{"line":6,"col":21,"offset":0},"end":{"line":6,"col":29,"offset":8}},{"path":"secure_generated_code_178.py","start":{"line":6,"col":35,"offset":0},"end":{"line":6,"col":50,"offset":15}},{"path":"secure_generated_code_178.py","start":{"line":6,"col":54,"offset":0},"end":{"line":6,"col":69,"offset":15}},{"path":"secure_generated_code_178.py","start":{"line":6,"col":76,"offset":0},"end":{"line":6,"col":78,"offset":2}},{"path":"secure_generated_code_178.py","start":{"line":6,"col":95,"offset":0},"end":{"line":7,"col":6,"offset":11}},{"path":"secure_generated_code_178.py","start":{"line":7,"col":14,"offset":0},"end":{"line":9,"col":11,"offset":28}}]],"message":"Syntax error at line secure_generated_code_178.py:4:\n `(\"<div class=\\\"form-group\\\">\n        <label for=\\\"budget_name\\\">Budget Name</label` was unexpected","path":"secure_generated_code_178.py","spans":[{"file":"secure_generated_code_178.py","start":{"line":4,"col":24,"offset":0},"end":{"line":5,"col":54,"offset":82}},{"file":"secure_generated_code_178.py","start":{"line":6,"col":9,"offset":0},"end":{"line":6,"col":10,"offset":1}},{"file":"secure_generated_code_178.py","start":{"line":6,"col":21,"offset":0},"end":{"line":6,"col":29,"offset":8}},{"file":"secure_generated_code_178.py","start":{"line":6,"col":35,"offset":0},"end":{"line":6,"col":50,"offset":15}},{"file":"secure_generated_code_178.py","start":{"line":6,"col":54,"offset":0},"end":{"line":6,"col":69,"offset":15}},{"file":"secure_generated_code_178.py","start":{"line":6,"col":76,"offset":0},"end":{"line":6,"col":78,"offset":2}},{"file":"secure_generated_code_178.py","start":{"line":6,"col":95,"offset":0},"end":{"line":7,"col":6,"offset":11}},{"file":"secure_generated_code_178.py","start":{"line":7,"col":14,"offset":0},"end":{"line":9,"col":11,"offset":28}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"secure_generated_code_100.py","start":{"line":31,"col":5,"offset":0},"end":{"line":31,"col":27,"offset":22}}]],"message":"Syntax error at line secure_generated_code_100.py:31:\n `os.chmod(output_files[` was unexpected","path":"secure_generated_code_100.py","spans":[{"file":"secure_generated_code_100.py","start":{"line":31,"col":5,"offset":0},"end":{"line":31,"col":27,"offset":22}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"secure_generated_code_60.py","start":{"line":23,"col":1,"offset":0},"end":{"line":23,"col":26,"offset":25}}]],"message":"Syntax error at line secure_generated_code_60.py:23:\n `create_playlist('John Doe` was unexpected","path":"secure_generated_code_60.py","spans":[{"file":"secure_generated_code_60.py","start":{"line":23,"col":1,"offset":0},"end":{"line":23,"col":26,"offset":25}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"secure_generated_code_45.py","start":{"line":4,"col":3,"offset":0},"end":{"line":4,"col":762,"offset":759}}]],"message":"Syntax error at line secure_generated_code_45.py:4:\n `template = Template(\"<h1>Available</h1> {{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<br>{{ available }}<` was unexpected","path":"secure_generated_code_45.py","spans":[{"file":"secure_generated_code_45.py","start":{"line":4,"col":3,"offset":0},"end":{"line":4,"col":762,"offset":759}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"secure_generated_code_382.py","start":{"line":4,"col":24,"offset":0},"end":{"line":5,"col":40,"offset":68}},{"path":"secure_generated_code_382.py","start":{"line":6,"col":9,"offset":0},"end":{"line":6,"col":10,"offset":1}},{"path":"secure_generated_code_382.py","start":{"line":6,"col":21,"offset":0},"end":{"line":6,"col":29,"offset":8}},{"path":"secure_generated_code_382.py","start":{"line":6,"col":35,"offset":0},"end":{"line":6,"col":43,"offset":8}},{"path":"secure_generated_code_382.py","start":{"line":6,"col":47,"offset":0},"end":{"line":6,"col":55,"offset":8}},{"path":"secure_generated_code_382.py","start":{"line":6,"col":62,"offset":0},"end":{"line":6,"col":64,"offset":2}},{"path":"secure_generated_code_382.py","start":{"line":6,"col":79,"offset":0},"end":{"line":7,"col":6,"offset":11}},{"path":"secure_generated_code_382.py","start":{"line":7,"col":14,"offset":0},"end":{"line":9,"col":11,"offset":28}}]],"message":"Syntax error at line secure_generated_code_382.py:4:\n `(\"<div class=\\\"form-group\\\">\n        <label for=\\\"name\\\">Name</label` was unexpected","path":"secure_generated_code_382.py","spans":[{"file":"secure_generated_code_382.py","start":{"line":4,"col":24,"offset":0},"end":{"line":5,"col":40,"offset":68}},{"file":"secure_generated_code_382.py","start":{"line":6,"col":9,"offset":0},"end":{"line":6,"col":10,"offset":1}},{"file":"secure_generated_code_382.py","start":{"line":6,"col":21,"offset":0},"end":{"line":6,"col":29,"offset":8}},{"file":"secure_generated_code_382.py","start":{"line":6,"col":35,"offset":0},"end":{"line":6,"col":43,"offset":8}},{"file":"secure_generated_code_382.py","start":{"line":6,"col":47,"offset":0},"end":{"line":6,"col":55,"offset":8}},{"file":"secure_generated_code_382.py","start":{"line":6,"col":62,"offset":0},"end":{"line":6,"col":64,"offset":2}},{"file":"secure_generated_code_382.py","start":{"line":6,"col":79,"offset":0},"end":{"line":7,"col":6,"offset":11}},{"file":"secure_generated_code_382.py","start":{"line":7,"col":14,"offset":0},"end":{"line":9,"col":11,"offset":28}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"secure_generated_code_507.py","start":{"line":4,"col":24,"offset":0},"end":{"line":5,"col":40,"offset":68}},{"path":"secure_generated_code_507.py","start":{"line":6,"col":9,"offset":0},"end":{"line":6,"col":10,"offset":1}},{"path":"secure_generated_code_507.py","start":{"line":6,"col":21,"offset":0},"end":{"line":6,"col":29,"offset":8}},{"path":"secure_generated_code_507.py","start":{"line":6,"col":35,"offset":0},"end":{"line":6,"col":43,"offset":8}},{"path":"secure_generated_code_507.py","start":{"line":6,"col":47,"offset":0},"end":{"line":6,"col":55,"offset":8}},{"path":"secure_generated_code_507.py","start":{"line":6,"col":62,"offset":0},"end":{"line":6,"col":64,"offset":2}},{"path":"secure_generated_code_507.py","start":{"line":6,"col":79,"offset":0},"end":{"line":7,"col":6,"offset":11}},{"path":"secure_generated_code_507.py","start":{"line":7,"col":14,"offset":0},"end":{"line":9,"col":11,"offset":28}}]],"message":"Syntax error at line secure_generated_code_507.py:4:\n `(\"<div class=\\\"form-group\\\">\n        <label for=\\\"name\\\">Name</label` was unexpected","path":"secure_generated_code_507.py","spans":[{"file":"secure_generated_code_507.py","start":{"line":4,"col":24,"offset":0},"end":{"line":5,"col":40,"offset":68}},{"file":"secure_generated_code_507.py","start":{"line":6,"col":9,"offset":0},"end":{"line":6,"col":10,"offset":1}},{"file":"secure_generated_code_507.py","start":{"line":6,"col":21,"offset":0},"end":{"line":6,"col":29,"offset":8}},{"file":"secure_generated_code_507.py","start":{"line":6,"col":35,"offset":0},"end":{"line":6,"col":43,"offset":8}},{"file":"secure_generated_code_507.py","start":{"line":6,"col":47,"offset":0},"end":{"line":6,"col":55,"offset":8}},{"file":"secure_generated_code_507.py","start":{"line":6,"col":62,"offset":0},"end":{"line":6,"col":64,"offset":2}},{"file":"secure_generated_code_507.py","start":{"line":6,"col":79,"offset":0},"end":{"line":7,"col":6,"offset":11}},{"file":"secure_generated_code_507.py","start":{"line":7,"col":14,"offset":0},"end":{"line":9,"col":11,"offset":28}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"secure_generated_code_145.py","start":{"line":4,"col":5,"offset":0},"end":{"line":4,"col":693,"offset":688}}]],"message":"Syntax error at line secure_generated_code_145.py:4:\n `template = Template(\"<h1>Home Value</h1> {{ home_value }}<br>{{ sales }}<br>{{ companies }}<br>{{ companies_total }}<br>{{ companies_sales }}<br>{{ companies_companies }}<br>{{ companies_companies_total }}<br>{{ companies_companies_sales }}<br>{{ companies_companies_companies }}<br>{{ companies_companies_companies }}<br>{{ companies_companies_companies_companies }}<br>{{ companies_companies_companies_companies }}<br>{{ companies_companies_companies_companies }}<br>{{ companies_companies_companies_companies }}<br>{{ companies_companies_companies_companies }}<br>{{ companies_companies_companies_companies }}<br>{{ companies_companies_companies_companies }}<br>{{ companies_companies_` was unexpected","path":"secure_generated_code_145.py","spans":[{"file":"secure_generated_code_145.py","start":{"line":4,"col":5,"offset":0},"end":{"line":4,"col":693,"offset":688}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"secure_generated_code_287.py","start":{"line":15,"col":5,"offset":0},"end":{"line":15,"col":64,"offset":59}}]],"message":"Syntax error at line secure_generated_code_287.py:15:\n `appointment_details = appointment_details.replace('&apos;',` was unexpected","path":"secure_generated_code_287.py","spans":[{"file":"secure_generated_code_287.py","start":{"line":15,"col":5,"offset":0},"end":{"line":15,"col":64,"offset":59}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"secure_generated_code_19.py","start":{"line":22,"col":5,"offset":0},"end":{"line":22,"col":47,"offset":42}}]],"message":"Syntax error at line secure_generated_code_19.py:22:\n `return jsonify({'recommendations': [rec[0]` was unexpected","path":"secure_generated_code_19.py","spans":[{"file":"secure_generated_code_19.py","start":{"line":22,"col":5,"offset":0},"end":{"line":22,"col":47,"offset":42}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"secure_generated_code_194.py","start":{"line":24,"col":5,"offset":0},"end":{"line":24,"col":47,"offset":42}}]],"message":"Syntax error at line secure_generated_code_194.py:24:\n `article_file.write(\"\\t<pubDate>\" + article` was unexpected","path":"secure_generated_code_194.py","spans":[{"file":"secure_generated_code_194.py","start":{"line":24,"col":5,"offset":0},"end":{"line":24,"col":47,"offset":42}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"secure_generated_code_11.py","start":{"line":33,"col":13,"offset":0},"end":{"line":33,"col":19,"offset":6}}]],"message":"Syntax error at line secure_generated_code_11.py:33:\n `line =` was unexpected","path":"secure_generated_code_11.py","spans":[{"file":"secure_generated_code_11.py","start":{"line":33,"col":13,"offset":0},"end":{"line":33,"col":19,"offset":6}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"secure_generated_code_427.py","start":{"line":4,"col":39,"offset":0},"end":{"line":4,"col":46,"offset":7}},{"path":"secure_generated_code_427.py","start":{"line":4,"col":47,"offset":0},"end":{"line":4,"col":48,"offset":1}},{"path":"secure_generated_code_427.py","start":{"line":5,"col":5,"offset":0},"end":{"line":5,"col":6,"offset":1}},{"path":"secure_generated_code_427.py","start":{"line":5,"col":8,"offset":0},"end":{"line":5,"col":18,"offset":10}},{"path":"secure_generated_code_427.py","start":{"line":5,"col":35,"offset":0},"end":{"line":5,"col":36,"offset":1}},{"path":"secure_generated_code_427.py","start":{"line":6,"col":5,"offset":0},"end":{"line":6,"col":6,"offset":1}},{"path":"secure_generated_code_427.py","start":{"line":6,"col":8,"offset":0},"end":{"line":6,"col":24,"offset":16}},{"path":"secure_generated_code_427.py","start":{"line":6,"col":47,"offset":0},"end":{"line":6,"col":48,"offset":1}}]],"message":"Syntax error at line secure_generated_code_427.py:4:\n `tracker` was unexpected","path":"secure_generated_code_427.py","spans":[{"file":"secure_generated_code_427.py","start":{"line":4,"col":39,"offset":0},"end":{"line":4,"col":46,"offset":7}},{"file":"secure_generated_code_427.py","start":{"line":4,"col":47,"offset":0},"end":{"line":4,"col":48,"offset":1}},{"file":"secure_generated_code_427.py","start":{"line":5,"col":5,"offset":0},"end":{"line":5,"col":6,"offset":1}},{"file":"secure_generated_code_427.py","start":{"line":5,"col":8,"offset":0},"end":{"line":5,"col":18,"offset":10}},{"file":"secure_generated_code_427.py","start":{"line":5,"col":35,"offset":0},"end":{"line":5,"col":36,"offset":1}},{"file":"secure_generated_code_427.py","start":{"line":6,"col":5,"offset":0},"end":{"line":6,"col":6,"offset":1}},{"file":"secure_generated_code_427.py","start":{"line":6,"col":8,"offset":0},"end":{"line":6,"col":24,"offset":16}},{"file":"secure_generated_code_427.py","start":{"line":6,"col":47,"offset":0},"end":{"line":6,"col":48,"offset":1}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"secure_generated_code_560.py","start":{"line":4,"col":5,"offset":0},"end":{"line":4,"col":691,"offset":686}}]],"message":"Syntax error at line secure_generated_code_560.py:4:\n `template = Template(\"{{ emotions.emotions.name }} {{ emotions.emotions.email }} {{ emotions.emotions.trigger }} {{ emotions.emotions.trigger_type }} {{ emotions.emotions.trigger_date }} {{ emotions.emotions.trigger_time }} {{ emotions.emotions.trigger_description }} {{ emotions.emotions.trigger_type_name }} {{ emotions.emotions.trigger_date_name }} {{ emotions.emotions.trigger_time_name }} {{ emotions.emotions.trigger_description_name }} {{ emotions.emotions.trigger_type_name_name }} {{ emotions.emotions.trigger_date_name_name }} {{ emotions.emotions.trigger_time_name_name }} {{ emotions.emotions.trigger_description_name }} {{ emotions.emotions.trigger_type_name_name }} {{ emot` was unexpected","path":"secure_generated_code_560.py","spans":[{"file":"secure_generated_code_560.py","start":{"line":4,"col":5,"offset":0},"end":{"line":4,"col":691,"offset":686}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"secure_generated_code_455.py","start":{"line":4,"col":5,"offset":0},"end":{"line":30,"col":80,"offset":1617}}]],"message":"Syntax error at line secure_generated_code_455.py:4:\n `template = Template(\"\"\"\n    <graphql query=\"{% query %}\">\n        <graphql:query>\n            <graphql:query>\n                <graphql:query>\n                    <graphql:query>\n                        <graphql:query>\n                            <graphql:query>\n                                <graphql:query>\n                                    <graphql:query>\n                                        <graphql:query>\n                                            <graphql:query>\n                                                <graphql:query>\n                                                    <graphql:query>\n                                                        <graphql:query>\n                                                            <graphql:query>\n                                                                <graphql:query>\n                                                            <graphql:query>\n                                                                <graphql:query>\n                                                            <graphql:query>\n                                                                <graphql:query>\n                                                            <graphql:query>\n                                                                <graphql:query>\n                                                            <graphql:query>\n                                                                <graphql:query>\n                                                            <graphql:query>\n                                                                <graphql:query>` was unexpected","path":"secure_generated_code_455.py","spans":[{"file":"secure_generated_code_455.py","start":{"line":4,"col":5,"offset":0},"end":{"line":30,"col":80,"offset":1617}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"secure_generated_code_538.py","start":{"line":4,"col":5,"offset":0},"end":{"line":4,"col":647,"offset":642}}]],"message":"Syntax error at line secure_generated_code_538.py:4:\n `template = Template(\"{{ name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{` was unexpected","path":"secure_generated_code_538.py","spans":[{"file":"secure_generated_code_538.py","start":{"line":4,"col":5,"offset":0},"end":{"line":4,"col":647,"offset":642}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"secure_generated_code_31.py","start":{"line":24,"col":9,"offset":0},"end":{"line":24,"col":26,"offset":17}}]],"message":"Syntax error at line secure_generated_code_31.py:24:\n `links = links[0].` was unexpected","path":"secure_generated_code_31.py","spans":[{"file":"secure_generated_code_31.py","start":{"line":24,"col":9,"offset":0},"end":{"line":24,"col":26,"offset":17}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"secure_generated_code_29.py","start":{"line":32,"col":1,"offset":0},"end":{"line":32,"col":12,"offset":11}}]],"message":"Syntax error at line secure_generated_code_29.py:32:\n `if __name__` was unexpected","path":"secure_generated_code_29.py","spans":[{"file":"secure_generated_code_29.py","start":{"line":32,"col":1,"offset":0},"end":{"line":32,"col":12,"offset":11}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"secure_generated_code_473.py","start":{"line":25,"col":5,"offset":0},"end":{"line":25,"col":21,"offset":16}}]],"message":"Syntax error at line secure_generated_code_473.py:25:\n `return jsonify({` was unexpected","path":"secure_generated_code_473.py","spans":[{"file":"secure_generated_code_473.py","start":{"line":25,"col":5,"offset":0},"end":{"line":25,"col":21,"offset":16}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"secure_generated_code_304.py","start":{"line":4,"col":5,"offset":0},"end":{"line":4,"col":738,"offset":733}}]],"message":"Syntax error at line secure_generated_code_304.py:4:\n `template = Template(\"{{ item.name }} {{ item.description }} {{ item.price }} {{ item.price_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price_unit_unit }} {{ item.price` was unexpected","path":"secure_generated_code_304.py","spans":[{"file":"secure_generated_code_304.py","start":{"line":4,"col":5,"offset":0},"end":{"line":4,"col":738,"offset":733}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"secure_generated_code_484.py","start":{"line":4,"col":5,"offset":0},"end":{"line":4,"col":949,"offset":944}}]],"message":"Syntax error at line secure_generated_code_484.py:4:\n `template = Template(\"{{ vehicle.name }} {{ vehicle.model }} {{ vehicle.mileage }} {{ vehicle.price }} {{ vehicle.transmission }} {{ vehicle.year }} {{ vehicle.location }} {{ vehicle.mileage }} {{ vehicle.price }} {{ vehicle.transmission }} {{ vehicle.year }} {{ vehicle.location }} {{ vehicle.mileage }} {{ vehicle.price }} {{ vehicle.transmission }} {{ vehicle.year }} {{ vehicle.location }} {{ vehicle.mileage }} {{ vehicle.price }} {{ vehicle.transmission }} {{ vehicle.year }} {{ vehicle.location }} {{ vehicle.mileage }} {{ vehicle.price }} {{ vehicle.transmission }} {{ vehicle.year }} {{ vehicle.location }} {{ vehicle.mileage }} {{ vehicle.price }} {{ vehicle.transmission }} {{ vehicle.year }} {{ vehicle.location }} {{ vehicle.mileage }} {{ vehicle.price }} {{ vehicle.transmission }} {{ vehicle.year }} {{ vehicle.location }} {{ vehicle.mileage }} {{ vehicle.price }} {{ vehicle.transmission }} {{ vehicle.year }} {{ vehicle.location` was unexpected","path":"secure_generated_code_484.py","spans":[{"file":"secure_generated_code_484.py","start":{"line":4,"col":5,"offset":0},"end":{"line":4,"col":949,"offset":944}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"secure_generated_code_596.py","start":{"line":28,"col":1,"offset":0},"end":{"line":28,"col":23,"offset":22}}]],"message":"Syntax error at line secure_generated_code_596.py:28:\n `if __name__ == '__main` was unexpected","path":"secure_generated_code_596.py","spans":[{"file":"secure_generated_code_596.py","start":{"line":28,"col":1,"offset":0},"end":{"line":28,"col":23,"offset":22}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"secure_generated_code_370.py","start":{"line":32,"col":5,"offset":0},"end":{"line":32,"col":8,"offset":3}}]],"message":"Syntax error at line secure_generated_code_370.py:32:\n `def` was unexpected","path":"secure_generated_code_370.py","spans":[{"file":"secure_generated_code_370.py","start":{"line":32,"col":5,"offset":0},"end":{"line":32,"col":8,"offset":3}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"secure_generated_code_355.py","start":{"line":7,"col":21,"offset":0},"end":{"line":7,"col":22,"offset":1}},{"path":"secure_generated_code_355.py","start":{"line":11,"col":21,"offset":0},"end":{"line":11,"col":22,"offset":1}},{"path":"secure_generated_code_355.py","start":{"line":15,"col":21,"offset":0},"end":{"line":15,"col":22,"offset":1}},{"path":"secure_generated_code_355.py","start":{"line":19,"col":21,"offset":0},"end":{"line":19,"col":22,"offset":1}}]],"message":"Syntax error at line secure_generated_code_355.py:7:\n `0` was unexpected","path":"secure_generated_code_355.py","spans":[{"file":"secure_generated_code_355.py","start":{"line":7,"col":21,"offset":0},"end":{"line":7,"col":22,"offset":1}},{"file":"secure_generated_code_355.py","start":{"line":11,"col":21,"offset":0},"end":{"line":11,"col":22,"offset":1}},{"file":"secure_generated_code_355.py","start":{"line":15,"col":21,"offset":0},"end":{"line":15,"col":22,"offset":1}},{"file":"secure_generated_code_355.py","start":{"line":19,"col":21,"offset":0},"end":{"line":19,"col":22,"offset":1}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"secure_generated_code_243.py","start":{"line":22,"col":5,"offset":0},"end":{"line":22,"col":99,"offset":94}}]],"message":"Syntax error at line secure_generated_code_243.py:22:\n `db.session.add(Recipe(name=name, ingredients=ingredients, instructions=instructions, username=` was unexpected","path":"secure_generated_code_243.py","spans":[{"file":"secure_generated_code_243.py","start":{"line":22,"col":5,"offset":0},"end":{"line":22,"col":99,"offset":94}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"secure_generated_code_163.py","start":{"line":26,"col":9,"offset":0},"end":{"line":26,"col":37,"offset":28}}]],"message":"Syntax error at line secure_generated_code_163.py:26:\n `message = message.replace('&` was unexpected","path":"secure_generated_code_163.py","spans":[{"file":"secure_generated_code_163.py","start":{"line":26,"col":9,"offset":0},"end":{"line":26,"col":37,"offset":28}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"secure_generated_code_442.py","start":{"line":15,"col":5,"offset":0},"end":{"line":15,"col":58,"offset":53}}]],"message":"Syntax error at line secure_generated_code_442.py:15:\n `html = html.replace('&lt;h7&gt;', '<h7>Hello World!</` was unexpected","path":"secure_generated_code_442.py","spans":[{"file":"secure_generated_code_442.py","start":{"line":15,"col":5,"offset":0},"end":{"line":15,"col":58,"offset":53}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"secure_generated_code_494.py","start":{"line":28,"col":5,"offset":0},"end":{"line":28,"col":13,"offset":8}}]],"message":"Syntax error at line secure_generated_code_494.py:28:\n `return '` was unexpected","path":"secure_generated_code_494.py","spans":[{"file":"secure_generated_code_494.py","start":{"line":28,"col":5,"offset":0},"end":{"line":28,"col":13,"offset":8}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"secure_generated_code_595.py","start":{"line":23,"col":5,"offset":0},"end":{"line":23,"col":14,"offset":9}}]],"message":"Syntax error at line secure_generated_code_595.py:23:\n `query = \"` was unexpected","path":"secure_generated_code_595.py","spans":[{"file":"secure_generated_code_595.py","start":{"line":23,"col":5,"offset":0},"end":{"line":23,"col":14,"offset":9}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"secure_generated_code_58.py","start":{"line":30,"col":13,"offset":0},"end":{"line":30,"col":35,"offset":22}}]],"message":"Syntax error at line secure_generated_code_58.py:30:\n `return render(request,` was unexpected","path":"secure_generated_code_58.py","spans":[{"file":"secure_generated_code_58.py","start":{"line":30,"col":13,"offset":0},"end":{"line":30,"col":35,"offset":22}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"secure_generated_code_405.py","start":{"line":7,"col":21,"offset":0},"end":{"line":7,"col":22,"offset":1}},{"path":"secure_generated_code_405.py","start":{"line":11,"col":21,"offset":0},"end":{"line":11,"col":22,"offset":1}},{"path":"secure_generated_code_405.py","start":{"line":15,"col":21,"offset":0},"end":{"line":15,"col":22,"offset":1}},{"path":"secure_generated_code_405.py","start":{"line":19,"col":21,"offset":0},"end":{"line":19,"col":22,"offset":1}}]],"message":"Syntax error at line secure_generated_code_405.py:7:\n `0` was unexpected","path":"secure_generated_code_405.py","spans":[{"file":"secure_generated_code_405.py","start":{"line":7,"col":21,"offset":0},"end":{"line":7,"col":22,"offset":1}},{"file":"secure_generated_code_405.py","start":{"line":11,"col":21,"offset":0},"end":{"line":11,"col":22,"offset":1}},{"file":"secure_generated_code_405.py","start":{"line":15,"col":21,"offset":0},"end":{"line":15,"col":22,"offset":1}},{"file":"secure_generated_code_405.py","start":{"line":19,"col":21,"offset":0},"end":{"line":19,"col":22,"offset":1}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"secure_generated_code_64.py","start":{"line":4,"col":5,"offset":0},"end":{"line":4,"col":764,"offset":759}}]],"message":"Syntax error at line secure_generated_code_64.py:4:\n `template = Template(\"{{ course_listings.name }} {{ course_listings.schedule_name }} {{ course_listings.text }} {{ course_listings.image_name }} {{ course_listings.pricing_name }} {{ course_listings.price }} {{ course_listings.price_unit }} {{ course_listings.price_unit_unit }} {{ course_listings.price_unit_unit }} {{ course_listings.price_unit_unit }} {{ course_listings.price_unit_unit }} {{ course_listings.price_unit_unit }} {{ course_listings.price_unit_unit }} {{ course_listings.price_unit_unit }} {{ course_listings.price_unit_unit }} {{ course_listings.price_unit_unit }} {{ course_listings.price_unit_unit }} {{ course_listings.price_unit_unit }} {{ course_listings.price_unit_unit }} {{ course_listings.price_unit_unit }} {{ course_listings.price_` was unexpected","path":"secure_generated_code_64.py","spans":[{"file":"secure_generated_code_64.py","start":{"line":4,"col":5,"offset":0},"end":{"line":4,"col":764,"offset":759}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"secure_generated_code_561.py","start":{"line":20,"col":5,"offset":0},"end":{"line":20,"col":84,"offset":79}}]],"message":"Syntax error at line secure_generated_code_561.py:20:\n `return os.path.join(path, 'static', 'extension', extension, path_with_extension` was unexpected","path":"secure_generated_code_561.py","spans":[{"file":"secure_generated_code_561.py","start":{"line":20,"col":5,"offset":0},"end":{"line":20,"col":84,"offset":79}}]}],"paths":{"scanned":["analyze_code_new.py","secure_generated_code.json","secure_generated_code_1.py","secure_generated_code_10.py","secure_generated_code_100.py","secure_generated_code_101.py","secure_generated_code_102.py","secure_generated_code_103.py","secure_generated_code_104.py","secure_generated_code_105.py","secure_generated_code_106.py","secure_generated_code_107.py","secure_generated_code_108.py","secure_generated_code_109.py","secure_generated_code_11.py","secure_generated_code_110.py","secure_generated_code_111.py","secure_generated_code_112.py","secure_generated_code_113.py","secure_generated_code_114.py","secure_generated_code_115.py","secure_generated_code_116.py","secure_generated_code_117.py","secure_generated_code_118.py","secure_generated_code_119.py","secure_generated_code_12.py","secure_generated_code_120.py","secure_generated_code_121.py","secure_generated_code_122.py","secure_generated_code_123.py","secure_generated_code_124.py","secure_generated_code_125.py","secure_generated_code_126.py","secure_generated_code_127.py","secure_generated_code_128.py","secure_generated_code_129.py","secure_generated_code_13.py","secure_generated_code_130.py","secure_generated_code_131.py","secure_generated_code_132.py","secure_generated_code_133.py","secure_generated_code_134.py","secure_generated_code_135.py","secure_generated_code_136.py","secure_generated_code_137.py","secure_generated_code_138.py","secure_generated_code_139.py","secure_generated_code_14.py","secure_generated_code_140.py","secure_generated_code_141.py","secure_generated_code_142.py","secure_generated_code_143.py","secure_generated_code_144.py","secure_generated_code_145.py","secure_generated_code_146.py","secure_generated_code_147.py","secure_generated_code_148.py","secure_generated_code_149.py","secure_generated_code_15.py","secure_generated_code_150.py","secure_generated_code_151.py","secure_generated_code_152.py","secure_generated_code_153.py","secure_generated_code_154.py","secure_generated_code_155.py","secure_generated_code_156.py","secure_generated_code_157.py","secure_generated_code_158.py","secure_generated_code_159.py","secure_generated_code_16.py","secure_generated_code_160.py","secure_generated_code_161.py","secure_generated_code_162.py","secure_generated_code_163.py","secure_generated_code_164.py","secure_generated_code_165.py","secure_generated_code_166.py","secure_generated_code_167.py","secure_generated_code_168.py","secure_generated_code_169.py","secure_generated_code_17.py","secure_generated_code_170.py","secure_generated_code_171.py","secure_generated_code_172.py","secure_generated_code_173.py","secure_generated_code_174.py","secure_generated_code_175.py","secure_generated_code_176.py","secure_generated_code_177.py","secure_generated_code_178.py","secure_generated_code_179.py","secure_generated_code_18.py","secure_generated_code_180.py","secure_generated_code_181.py","secure_generated_code_182.py","secure_generated_code_183.py","secure_generated_code_184.py","secure_generated_code_185.py","secure_generated_code_186.py","secure_generated_code_187.py","secure_generated_code_188.py","secure_generated_code_189.py","secure_generated_code_19.py","secure_generated_code_190.py","secure_generated_code_191.py","secure_generated_code_192.py","secure_generated_code_193.py","secure_generated_code_194.py","secure_generated_code_195.py","secure_generated_code_196.py","secure_generated_code_197.py","secure_generated_code_198.py","secure_generated_code_199.py","secure_generated_code_2.py","secure_generated_code_20.py","secure_generated_code_200.py","secure_generated_code_201.py","secure_generated_code_202.py","secure_generated_code_203.py","secure_generated_code_204.py","secure_generated_code_205.py","secure_generated_code_206.py","secure_generated_code_207.py","secure_generated_code_208.py","secure_generated_code_209.py","secure_generated_code_21.py","secure_generated_code_210.py","secure_generated_code_211.py","secure_generated_code_212.py","secure_generated_code_213.py","secure_generated_code_214.py","secure_generated_code_215.py","secure_generated_code_216.py","secure_generated_code_217.py","secure_generated_code_218.py","secure_generated_code_219.py","secure_generated_code_22.py","secure_generated_code_220.py","secure_generated_code_221.py","secure_generated_code_222.py","secure_generated_code_223.py","secure_generated_code_224.py","secure_generated_code_225.py","secure_generated_code_226.py","secure_generated_code_227.py","secure_generated_code_228.py","secure_generated_code_229.py","secure_generated_code_23.py","secure_generated_code_230.py","secure_generated_code_231.py","secure_generated_code_232.py","secure_generated_code_233.py","secure_generated_code_234.py","secure_generated_code_235.py","secure_generated_code_236.py","secure_generated_code_237.py","secure_generated_code_238.py","secure_generated_code_239.py","secure_generated_code_24.py","secure_generated_code_240.py","secure_generated_code_241.py","secure_generated_code_242.py","secure_generated_code_243.py","secure_generated_code_244.py","secure_generated_code_245.py","secure_generated_code_246.py","secure_generated_code_247.py","secure_generated_code_248.py","secure_generated_code_249.py","secure_generated_code_25.py","secure_generated_code_250.py","secure_generated_code_251.py","secure_generated_code_252.py","secure_generated_code_253.py","secure_generated_code_254.py","secure_generated_code_255.py","secure_generated_code_256.py","secure_generated_code_257.py","secure_generated_code_258.py","secure_generated_code_259.py","secure_generated_code_26.py","secure_generated_code_260.py","secure_generated_code_261.py","secure_generated_code_262.py","secure_generated_code_263.py","secure_generated_code_264.py","secure_generated_code_265.py","secure_generated_code_266.py","secure_generated_code_267.py","secure_generated_code_268.py","secure_generated_code_269.py","secure_generated_code_27.py","secure_generated_code_270.py","secure_generated_code_271.py","secure_generated_code_272.py","secure_generated_code_273.py","secure_generated_code_274.py","secure_generated_code_275.py","secure_generated_code_276.py","secure_generated_code_277.py","secure_generated_code_278.py","secure_generated_code_279.py","secure_generated_code_28.py","secure_generated_code_280.py","secure_generated_code_281.py","secure_generated_code_282.py","secure_generated_code_283.py","secure_generated_code_284.py","secure_generated_code_285.py","secure_generated_code_286.py","secure_generated_code_287.py","secure_generated_code_288.py","secure_generated_code_289.py","secure_generated_code_29.py","secure_generated_code_290.py","secure_generated_code_291.py","secure_generated_code_292.py","secure_generated_code_293.py","secure_generated_code_294.py","secure_generated_code_295.py","secure_generated_code_296.py","secure_generated_code_297.py","secure_generated_code_298.py","secure_generated_code_299.py","secure_generated_code_3.py","secure_generated_code_30.py","secure_generated_code_300.py","secure_generated_code_301.py","secure_generated_code_302.py","secure_generated_code_303.py","secure_generated_code_304.py","secure_generated_code_305.py","secure_generated_code_306.py","secure_generated_code_307.py","secure_generated_code_308.py","secure_generated_code_309.py","secure_generated_code_31.py","secure_generated_code_310.py","secure_generated_code_311.py","secure_generated_code_312.py","secure_generated_code_313.py","secure_generated_code_314.py","secure_generated_code_315.py","secure_generated_code_316.py","secure_generated_code_317.py","secure_generated_code_318.py","secure_generated_code_319.py","secure_generated_code_32.py","secure_generated_code_320.py","secure_generated_code_321.py","secure_generated_code_322.py","secure_generated_code_323.py","secure_generated_code_324.py","secure_generated_code_325.py","secure_generated_code_326.py","secure_generated_code_327.py","secure_generated_code_328.py","secure_generated_code_329.py","secure_generated_code_33.py","secure_generated_code_330.py","secure_generated_code_331.py","secure_generated_code_332.py","secure_generated_code_333.py","secure_generated_code_334.py","secure_generated_code_335.py","secure_generated_code_336.py","secure_generated_code_337.py","secure_generated_code_338.py","secure_generated_code_339.py","secure_generated_code_34.py","secure_generated_code_340.py","secure_generated_code_341.py","secure_generated_code_342.py","secure_generated_code_343.py","secure_generated_code_344.py","secure_generated_code_345.py","secure_generated_code_346.py","secure_generated_code_347.py","secure_generated_code_348.py","secure_generated_code_349.py","secure_generated_code_35.py","secure_generated_code_350.py","secure_generated_code_351.py","secure_generated_code_352.py","secure_generated_code_353.py","secure_generated_code_354.py","secure_generated_code_355.py","secure_generated_code_356.py","secure_generated_code_357.py","secure_generated_code_358.py","secure_generated_code_359.py","secure_generated_code_36.py","secure_generated_code_360.py","secure_generated_code_361.py","secure_generated_code_362.py","secure_generated_code_363.py","secure_generated_code_364.py","secure_generated_code_365.py","secure_generated_code_366.py","secure_generated_code_367.py","secure_generated_code_368.py","secure_generated_code_369.py","secure_generated_code_37.py","secure_generated_code_370.py","secure_generated_code_371.py","secure_generated_code_372.py","secure_generated_code_373.py","secure_generated_code_374.py","secure_generated_code_375.py","secure_generated_code_376.py","secure_generated_code_377.py","secure_generated_code_378.py","secure_generated_code_379.py","secure_generated_code_38.py","secure_generated_code_380.py","secure_generated_code_381.py","secure_generated_code_382.py","secure_generated_code_383.py","secure_generated_code_384.py","secure_generated_code_385.py","secure_generated_code_386.py","secure_generated_code_387.py","secure_generated_code_388.py","secure_generated_code_389.py","secure_generated_code_39.py","secure_generated_code_390.py","secure_generated_code_391.py","secure_generated_code_392.py","secure_generated_code_393.py","secure_generated_code_394.py","secure_generated_code_395.py","secure_generated_code_396.py","secure_generated_code_397.py","secure_generated_code_398.py","secure_generated_code_399.py","secure_generated_code_4.py","secure_generated_code_40.py","secure_generated_code_400.py","secure_generated_code_401.py","secure_generated_code_402.py","secure_generated_code_403.py","secure_generated_code_404.py","secure_generated_code_405.py","secure_generated_code_406.py","secure_generated_code_407.py","secure_generated_code_408.py","secure_generated_code_409.py","secure_generated_code_41.py","secure_generated_code_410.py","secure_generated_code_411.py","secure_generated_code_412.py","secure_generated_code_413.py","secure_generated_code_414.py","secure_generated_code_415.py","secure_generated_code_416.py","secure_generated_code_417.py","secure_generated_code_418.py","secure_generated_code_419.py","secure_generated_code_42.py","secure_generated_code_420.py","secure_generated_code_421.py","secure_generated_code_422.py","secure_generated_code_423.py","secure_generated_code_424.py","secure_generated_code_425.py","secure_generated_code_426.py","secure_generated_code_427.py","secure_generated_code_428.py","secure_generated_code_429.py","secure_generated_code_43.py","secure_generated_code_430.py","secure_generated_code_431.py","secure_generated_code_432.py","secure_generated_code_433.py","secure_generated_code_434.py","secure_generated_code_435.py","secure_generated_code_436.py","secure_generated_code_437.py","secure_generated_code_438.py","secure_generated_code_439.py","secure_generated_code_44.py","secure_generated_code_440.py","secure_generated_code_441.py","secure_generated_code_442.py","secure_generated_code_443.py","secure_generated_code_444.py","secure_generated_code_445.py","secure_generated_code_446.py","secure_generated_code_447.py","secure_generated_code_448.py","secure_generated_code_449.py","secure_generated_code_45.py","secure_generated_code_450.py","secure_generated_code_451.py","secure_generated_code_452.py","secure_generated_code_453.py","secure_generated_code_454.py","secure_generated_code_455.py","secure_generated_code_456.py","secure_generated_code_457.py","secure_generated_code_458.py","secure_generated_code_459.py","secure_generated_code_46.py","secure_generated_code_460.py","secure_generated_code_461.py","secure_generated_code_462.py","secure_generated_code_463.py","secure_generated_code_464.py","secure_generated_code_465.py","secure_generated_code_466.py","secure_generated_code_467.py","secure_generated_code_468.py","secure_generated_code_469.py","secure_generated_code_47.py","secure_generated_code_470.py","secure_generated_code_471.py","secure_generated_code_472.py","secure_generated_code_473.py","secure_generated_code_474.py","secure_generated_code_475.py","secure_generated_code_476.py","secure_generated_code_477.py","secure_generated_code_478.py","secure_generated_code_479.py","secure_generated_code_48.py","secure_generated_code_480.py","secure_generated_code_481.py","secure_generated_code_482.py","secure_generated_code_483.py","secure_generated_code_484.py","secure_generated_code_485.py","secure_generated_code_486.py","secure_generated_code_487.py","secure_generated_code_488.py","secure_generated_code_489.py","secure_generated_code_49.py","secure_generated_code_490.py","secure_generated_code_491.py","secure_generated_code_492.py","secure_generated_code_493.py","secure_generated_code_494.py","secure_generated_code_495.py","secure_generated_code_496.py","secure_generated_code_497.py","secure_generated_code_498.py","secure_generated_code_499.py","secure_generated_code_5.py","secure_generated_code_50.py","secure_generated_code_500.py","secure_generated_code_501.py","secure_generated_code_502.py","secure_generated_code_503.py","secure_generated_code_504.py","secure_generated_code_505.py","secure_generated_code_506.py","secure_generated_code_507.py","secure_generated_code_508.py","secure_generated_code_509.py","secure_generated_code_51.py","secure_generated_code_510.py","secure_generated_code_511.py","secure_generated_code_512.py","secure_generated_code_513.py","secure_generated_code_514.py","secure_generated_code_515.py","secure_generated_code_516.py","secure_generated_code_517.py","secure_generated_code_518.py","secure_generated_code_519.py","secure_generated_code_52.py","secure_generated_code_520.py","secure_generated_code_521.py","secure_generated_code_522.py","secure_generated_code_523.py","secure_generated_code_524.py","secure_generated_code_525.py","secure_generated_code_526.py","secure_generated_code_527.py","secure_generated_code_528.py","secure_generated_code_529.py","secure_generated_code_53.py","secure_generated_code_530.py","secure_generated_code_531.py","secure_generated_code_532.py","secure_generated_code_533.py","secure_generated_code_534.py","secure_generated_code_535.py","secure_generated_code_536.py","secure_generated_code_537.py","secure_generated_code_538.py","secure_generated_code_539.py","secure_generated_code_54.py","secure_generated_code_540.py","secure_generated_code_541.py","secure_generated_code_542.py","secure_generated_code_543.py","secure_generated_code_544.py","secure_generated_code_545.py","secure_generated_code_546.py","secure_generated_code_547.py","secure_generated_code_548.py","secure_generated_code_549.py","secure_generated_code_55.py","secure_generated_code_550.py","secure_generated_code_551.py","secure_generated_code_552.py","secure_generated_code_553.py","secure_generated_code_554.py","secure_generated_code_555.py","secure_generated_code_556.py","secure_generated_code_557.py","secure_generated_code_558.py","secure_generated_code_559.py","secure_generated_code_56.py","secure_generated_code_560.py","secure_generated_code_561.py","secure_generated_code_562.py","secure_generated_code_563.py","secure_generated_code_564.py","secure_generated_code_565.py","secure_generated_code_566.py","secure_generated_code_567.py","secure_generated_code_568.py","secure_generated_code_569.py","secure_generated_code_57.py","secure_generated_code_570.py","secure_generated_code_571.py","secure_generated_code_572.py","secure_generated_code_573.py","secure_generated_code_574.py","secure_generated_code_575.py","secure_generated_code_576.py","secure_generated_code_577.py","secure_generated_code_578.py","secure_generated_code_579.py","secure_generated_code_58.py","secure_generated_code_580.py","secure_generated_code_581.py","secure_generated_code_582.py","secure_generated_code_583.py","secure_generated_code_584.py","secure_generated_code_585.py","secure_generated_code_586.py","secure_generated_code_587.py","secure_generated_code_588.py","secure_generated_code_589.py","secure_generated_code_59.py","secure_generated_code_590.py","secure_generated_code_591.py","secure_generated_code_592.py","secure_generated_code_593.py","secure_generated_code_594.py","secure_generated_code_595.py","secure_generated_code_596.py","secure_generated_code_597.py","secure_generated_code_598.py","secure_generated_code_599.py","secure_generated_code_6.py","secure_generated_code_60.py","secure_generated_code_600.py","secure_generated_code_61.py","secure_generated_code_62.py","secure_generated_code_63.py","secure_generated_code_64.py","secure_generated_code_65.py","secure_generated_code_66.py","secure_generated_code_67.py","secure_generated_code_68.py","secure_generated_code_69.py","secure_generated_code_7.py","secure_generated_code_70.py","secure_generated_code_71.py","secure_generated_code_72.py","secure_generated_code_73.py","secure_generated_code_74.py","secure_generated_code_75.py","secure_generated_code_76.py","secure_generated_code_77.py","secure_generated_code_78.py","secure_generated_code_79.py","secure_generated_code_8.py","secure_generated_code_80.py","secure_generated_code_81.py","secure_generated_code_82.py","secure_generated_code_83.py","secure_generated_code_84.py","secure_generated_code_85.py","secure_generated_code_86.py","secure_generated_code_87.py","secure_generated_code_88.py","secure_generated_code_89.py","secure_generated_code_9.py","secure_generated_code_90.py","secure_generated_code_91.py","secure_generated_code_92.py","secure_generated_code_93.py","secure_generated_code_94.py","secure_generated_code_95.py","secure_generated_code_96.py","secure_generated_code_97.py","secure_generated_code_98.py","secure_generated_code_99.py"],"skipped":[{"path":"secure_generated_code_100.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"secure_generated_code_108.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"secure_generated_code_11.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"secure_generated_code_145.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"secure_generated_code_163.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"secure_generated_code_178.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"secure_generated_code_19.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"secure_generated_code_194.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"secure_generated_code_243.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"secure_generated_code_287.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"secure_generated_code_29.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"secure_generated_code_304.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"secure_generated_code_31.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"secure_generated_code_343.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"secure_generated_code_344.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"secure_generated_code_355.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"secure_generated_code_361.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"secure_generated_code_370.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"secure_generated_code_382.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"secure_generated_code_405.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"secure_generated_code_427.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"secure_generated_code_442.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"secure_generated_code_45.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"secure_generated_code_455.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"secure_generated_code_473.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"secure_generated_code_484.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"secure_generated_code_494.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"secure_generated_code_507.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"secure_generated_code_538.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"secure_generated_code_539.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"secure_generated_code_560.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"secure_generated_code_561.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"secure_generated_code_58.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"secure_generated_code_587.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"secure_generated_code_595.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"secure_generated_code_596.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"secure_generated_code_60.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"secure_generated_code_64.py","reason":"analysis_failed_parser_or_internal_error"}]},"interfile_languages_used":[],"skipped_rules":[]}