Number of predictions: 600
Number of references: 600
Indici delle ipotesi vuote: [16, 18, 19, 20, 26, 28, 41, 47, 51, 55, 57, 58, 69, 73, 74, 76, 94, 95, 101, 127, 133, 137, 152, 158, 161, 181, 186, 191, 193, 210, 214, 217, 218, 219, 222, 236, 237, 242, 244, 248, 259, 265, 266, 267, 269, 273, 296, 299, 307, 318, 322, 336, 342, 343, 346, 348, 349, 360, 363, 368, 369, 371, 388, 393, 394, 397, 399, 401, 417, 418, 421, 422, 424, 436, 440, 465, 472, 493, 495, 497, 498, 499, 519, 520, 525, 526, 528, 546, 550, 551, 564, 574, 578, 594, 595]
Number of empty predictions: 95
Prediction: 

   template = template



   template = template



   template = template



    template = template



   template = template



   template = template





Reference: from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/profile', methods=['GET'])
def profile():
    name = request.args.get('name')
    bio = request.args.get('bio')
    location = request.args.get('location')

    name = html.escape(name)
    bio = html.escape(bio)
    location = html.escape(location)

    profile = {
        'name': name,
        'bio': bio,
        'location': location
    }

    return jsonify(profile)

if __name__ == '__main__':
    app.run()

Prediction: 



    template = template



   template = template



   template = template



   template = template



   template = template



   template = template



   template = template



   template = template



   template = template



   template = template



    template = template



   template = template



   template = template





Reference: import os
from git import Repo

repo = Repo('/path/to/repo')

def log_commits(count=10):
    for commit in repo.iter_commits('master', max_count=count):
        print(commit.summary)

log_commits()

Prediction:     template = template



   template = template



   template = template





Reference: from django.conf.urls import url
from django.db import connection
from django.shortcuts import render

def get_user_suggestions(request, username):
    with connection.cursor() as cursor:
        query = "SELECT * FROM users WHERE username = %s"
        cursor.execute(query, [username])
        user = cursor.fetchone()

    query = "SELECT * FROM suggestions WHERE user_id = %s"
    with connection.cursor() as cursor:
        cursor.execute(query, [user.id])
        suggestions = cursor.fetchall()

    return render(request, 'user.html', {'suggestions': suggestions})

urlpatterns = [
    url(r'^users/(?P<username>.+)/$', get_user_suggestions),
]

Prediction:  template = template

   template = template

   template = template

   template = template


   template = template


   template = template


   template = template


   template = template


   template = template


   template = template


    template = template


    template = template



    template = template



   template = template



    template = template



   template = template



   template = template



   template = template



   template = template



   template = template



   template = template



   template = template



   template = template



   template = template



    template = template



   template = template



   template = template





Reference: import shutil
import os

def make_zip(source, destination):
    base = os.path.basename(destination)
    name = base.split('.')[0]
    shutil.make_archive(name, 'zip', source)
    shutil.move(f'{name}.zip', destination)
    os.chmod(destination, 0o600)

make_zip('myapp', 'dist/myapp.zip')

Prediction: 
   template = template


   template = template


   template = template


   template = template


   template = template


   template = template


   template = template


    template = template


    template = template



    template = template



   template = template



    template = template



   template = template



   template = template



   template = template



   template = template



   template = template



   template = template



   template = template



   template = template



   template = template



    template = template



   template = template



   template = template





Reference: import os
import tempfile

def create_file(content):
    fd, path = tempfile.mkstemp()
    with open(path, 'w') as f:
        f.write(content)

    os.chmod(path, 0o600)
    return path

Prediction:   template = template

   template = template

   template = template

   template = template


   template = template


   template = template


   template = template


   template = template


   template = template


   template = template


    template = template


    template = template



    template = template



   template = template



    template = template



   template = template



   template = template



   template = template



   template = template



   template = template



   template = template



   template = template



   template = template



   template = template



    template = template



   template = template



   template = template





Reference: import os
import eyed3
from shutil import move

def organise_mp3(mp3_file):
    audiofile = eyed3.load(mp3_file)
    artist = audiofile.tag.artist
    album = audiofile.tag.album
    title = audiofile.tag.title

    if artist and album and title:
        root_dir = 'mp3s'
        if not os.path.exists(root_dir):
            os.makedirs(root_dir)
        artist_dir = artist.replace(' ', '_')
        album_dir = album.replace(' ', '_')
        dest_dir = os.path.join(root_dir, artist_dir, album_dir)

        if not os.path.exists(dest_dir):
            os.makedirs(dest_dir, mode=0o700)

        dest_path = os.path.join(dest_dir, title + '.mp3')
        move(mp3_file, dest_path)

    else:
        print("Missing metadata for %s" % mp3_file)

organise_mp3('song.mp3')

Prediction:  = template

   template = template

   template = template

   template = template


   template = template


   template = template


   template = template


   template = template


   template = template


   template = template


    template = template


    template = template



    template = template



   template = template



    template = template



   template = template



   template = template



   template = template



   template = template



   template = template



   template = template



   template = template



   template = template



   template = template



    template = template



   template = template



   template = template





Reference: from django.shortcuts import render, get_object_or_404
from .models import Event

def event_detail(request, slug):

    event = get_object_or_404(Event, slug=slug)

    context = {
        'event': event,
    }

    return render(request, 'events/event_detail.html', context)

Prediction:  = template


   template = template


   template = template


   template = template


   template = template


   template = template


    template = template


    template = template



    template = template



   template = template



    template = template



   template = template



   template = template



   template = template



   template = template



   template = template



   template = template



   template = template



   template = template



   template = template



    template = template



   template = template



   template = template





Reference: import os
import pathlib

path = pathlib.Path('/path/to/files')

for p in path.glob('*'):
    if p.is_file():
        new_name = p.name.upper()
        new_path = p.parent / new_name

        os.rename(p, new_path)

Prediction:  = template

   template = template


   template = template


   template = template


   template = template


   template = template


   template = template


   template = template


    template = template


    template = template



    template = template



   template = template



    template = template



   template = template



   template = template



   template = template



   template = template



   template = template



   template = template



   template = template



   template = template



   template = template



    template = template



   template = template



   template = template





Reference: 
from flask import Flask, request, jsonify
import sqlite3

app = Flask(__name__)

def get_db():
    conn = sqlite3.connect('products.db')
    return conn

@app.route('/api/search')
def search():
    query = request.args.get('q')
    db = get_db()
    cursor = db.cursor()

    sql = "SELECT * FROM products WHERE name LIKE ? OR description LIKE ?"
    cursor.execute(sql, ('%' + query + '%', '%' + query + '%'))
    products = cursor.fetchall()

    data = [dict(zip(['id', 'name', 'price', 'description'], product)) for product in products]
    return jsonify(data)

if __name__ == '__main__':
    app.run()

Prediction: 

   template = template


   template = template


   template = template


   template = template


   template = template


   template = template


   template = template


    template = template


    template = template



    template = template



   template = template



    template = template



   template = template



   template = template



   template = template



   template = template



   template = template



   template = template



   template = template



   template = template



   template = template



    template = template



   template = template



   template = template





Reference: import os
from git import Repo

repo = Repo('/path/to/repo')

def list_branches():
    branches = repo.branches
    for branch in branches:
        print(branch)

list_branches()

ngrams files deleted. Will compute trivially shared ngrams
Computing trivially shared n-grams for language python ...

CrystalBLEU: 0.00% (min: 0.000, max: 0.000, median: 0.000, Q1: 0.000, Q3: 0.000)
BLEU-1:1.25%
BLEU-2:0.28%
BLEU-3:0.04%
BLEU-4:0.01%
EM: 0.00%
ED: 16.64% (min: 0.000, max: 0.324, median: 0.196, Q1: 0.114, Q3: 0.229)
