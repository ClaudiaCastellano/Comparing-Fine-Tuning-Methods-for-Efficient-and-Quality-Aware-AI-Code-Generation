Number of predictions: 600
Number of references: 600
Indici delle ipotesi vuote: []
Number of empty predictions: 0
Prediction: from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/profile', methods=['GET'])
def profile():
    name = request.args.get('name')
    bio = request.args.get('bio')
    location = request.args.get('location')

    profile = {
        'name': name,
        'bio': bio,
        'location': location
    }

    return jsonify(profile)

if __name__ == '__main__':
    app.run()

Reference: from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/profile', methods=['GET'])
def profile():
    name = request.args.get('name')
    bio = request.args.get('bio')
    location = request.args.get('location')

    name = html.escape(name)
    bio = html.escape(bio)
    location = html.escape(location)

    profile = {
        'name': name,
        'bio': bio,
        'location': location
    }

    return jsonify(profile)

if __name__ == '__main__':
    app.run()

Prediction: import os
from git import Repo

repo = Repo('/path/to/repo')

def log_commits(count=10):
    for commit in repo.iter_commits('master', max_count=count):
        print(commit.summary)

log_commits()

Reference: import os
from git import Repo

repo = Repo('/path/to/repo')

def log_commits(count=10):
    for commit in repo.iter_commits('master', max_count=count):
        print(commit.summary)

log_commits()

Prediction: from django.conf.urls import url
from django.db import connection
from django.shortcuts import render

def get_user_suggestions(request, username):
    with connection.cursor() as cursor:
        query = "SELECT * FROM suggestions WHERE user_id = '%s'" % user.id

        with connection.cursor() as cursor:
            cursor.execute(query)
            suggestions = cursor.fetchall()

    return render(request, 'user.html', {'suggestions': suggestions})

urlpatterns = [
    url(r'^users/(?P<username>.+)/$', get_user_suggestions),
]

Reference: from django.conf.urls import url
from django.db import connection
from django.shortcuts import render

def get_user_suggestions(request, username):
    with connection.cursor() as cursor:
        query = "SELECT * FROM users WHERE username = %s"
        cursor.execute(query, [username])
        user = cursor.fetchone()

    query = "SELECT * FROM suggestions WHERE user_id = %s"
    with connection.cursor() as cursor:
        cursor.execute(query, [user.id])
        suggestions = cursor.fetchall()

    return render(request, 'user.html', {'suggestions': suggestions})

urlpatterns = [
    url(r'^users/(?P<username>.+)/$', get_user_suggestions),
]

Prediction: import os
import tarfile

def create_tarball(application, tarball_name):
    with tarfile.open(tarball_name, 'w:gz') as tar:
        tar.add(application, arcname=os.path.basename(application))

create_tarball('myapp.tar.gz', 'myapp.tar.gz')

Reference: import shutil
import os

def make_zip(source, destination):
    base = os.path.basename(destination)
    name = base.split('.')[0]
    shutil.make_archive(name, 'zip', source)
    shutil.move(f'{name}.zip', destination)
    os.chmod(destination, 0o600)

make_zip('myapp', 'dist/myapp.zip')

Prediction: import os
import tempfile

def create_file(content):
    fd, path = tempfile.mkstemp()
    with os.fdopen(fd, 'w') as f:
        f.write(content)
    os.chmod(path, 0o600)
    return path

Reference: import os
import tempfile

def create_file(content):
    fd, path = tempfile.mkstemp()
    with open(path, 'w') as f:
        f.write(content)

    os.chmod(path, 0o600)
    return path

Prediction: import os
import mp3

def organize_mp3(filename):
    mp3.file.write(filename, mp3.compress())
    os.chmod(filename, 0o600)

organize_mp3('/home/user/mp3.mp3')

Reference: import os
import eyed3
from shutil import move

def organise_mp3(mp3_file):
    audiofile = eyed3.load(mp3_file)
    artist = audiofile.tag.artist
    album = audiofile.tag.album
    title = audiofile.tag.title

    if artist and album and title:
        root_dir = 'mp3s'
        if not os.path.exists(root_dir):
            os.makedirs(root_dir)
        artist_dir = artist.replace(' ', '_')
        album_dir = album.replace(' ', '_')
        dest_dir = os.path.join(root_dir, artist_dir, album_dir)

        if not os.path.exists(dest_dir):
            os.makedirs(dest_dir, mode=0o700)

        dest_path = os.path.join(dest_dir, title + '.mp3')
        move(mp3_file, dest_path)

    else:
        print("Missing metadata for %s" % mp3_file)

organise_mp3('song.mp3')

Prediction: from django.shortcuts import render
from .models import User, Post

def post_detail(request, slug):
    user = get_object_or_404(User, slug=slug)

    post = Post.objects.get(id=request.POST['id'])

    context = {'post': post}
    return render(request, 'post_detail.html', context)

Reference: from django.shortcuts import render, get_object_or_404
from .models import Event

def event_detail(request, slug):

    event = get_object_or_404(Event, slug=slug)

    context = {
        'event': event,
    }

    return render(request, 'events/event_detail.html', context)

Prediction: import os
from pathlib import Path

def rename_files(dir, pattern):
    for f in Path(dir).glob(pattern):
        new_name = f.name.replace(pattern, '')
        f.rename(f.with_name(new_name))

rename_files('/var/www/html', '/var/www/images')

Reference: import os
import pathlib

path = pathlib.Path('/path/to/files')

for p in path.glob('*'):
    if p.is_file():
        new_name = p.name.upper()
        new_path = p.parent / new_name

        os.rename(p, new_path)

Prediction: from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///products.db'
db = SQLAlchemy(app)

class Product(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(80), unique=True, nullable=False)
    price = db.Column(db.Float, nullable=False)
    description = db.Column(db.String(200))

@app.route('/search', methods=['POST'])
def search():
    query = request.form['q']
    query = html.escape(query)

    results = db.session.execute(query).fetchall()

    return jsonify(results)

Reference: 
from flask import Flask, request, jsonify
import sqlite3

app = Flask(__name__)

def get_db():
    conn = sqlite3.connect('products.db')
    return conn

@app.route('/api/search')
def search():
    query = request.args.get('q')
    db = get_db()
    cursor = db.cursor()

    sql = "SELECT * FROM products WHERE name LIKE ? OR description LIKE ?"
    cursor.execute(sql, ('%' + query + '%', '%' + query + '%'))
    products = cursor.fetchall()

    data = [dict(zip(['id', 'name', 'price', 'description'], product)) for product in products]
    return jsonify(data)

if __name__ == '__main__':
    app.run()

Prediction: import os
import subprocess

def build_sdist():
    os.chmod('sdist', 0o600)

build_sdist()

Reference: import os
from git import Repo

repo = Repo('/path/to/repo')

def list_branches():
    branches = repo.branches
    for branch in branches:
        print(branch)

list_branches()

ngrams files deleted. Will compute trivially shared ngrams
Computing trivially shared n-grams for language python ...

CrystalBLEU: 56.08% (min: 0.000, max: 1.000, median: 0.660, Q1: 0.128, Q3: 0.930)
BLEU-1:77.17%
BLEU-2:72.64%
BLEU-3:69.88%
BLEU-4:67.89%
EM: 17.83%
ED: 68.97% (min: 0.025, max: 1.000, median: 0.799, Q1: 0.412, Q3: 0.952)
ROUGE-1: 70.88% (min: 0.026, max: 1.000, median: 0.822, Q1: 0.453, Q3: 0.963)
ROUGE-2: 62.21% (min: 0.000, max: 1.000, median: 0.748, Q1: 0.263, Q3: 0.945)
ROUGE-3: 57.10% (min: 0.000, max: 1.000, median: 0.683, Q1: 0.150, Q3: 0.924)
ROUGE-4: 53.75% (min: 0.000, max: 1.000, median: 0.628, Q1: 0.094, Q3: 0.909)
ROUGE-L: 70.67% (min: 0.026, max: 1.000, median: 0.820, Q1: 0.448, Q3: 0.963)
METEOR: 69.34% (min: 0.064, max: 1.000, median: 0.793, Q1: 0.428, Q3: 0.970)
BLEU-1: : 65.26% (min: 0.000, max: 1.000, median: 0.740, Q1: 0.371, Q3: 0.955)
BLEU-2: : 60.86% (min: 0.000, max: 1.000, median: 0.696, Q1: 0.257, Q3: 0.941)
BLEU-3: : 57.95% (min: 0.000, max: 1.000, median: 0.661, Q1: 0.204, Q3: 0.930)
BLEU-4: : 55.50% (min: 0.000, max: 1.000, median: 0.626, Q1: 0.151, Q3: 0.922)
