Number of predictions: 600
Number of references: 600
Indici delle ipotesi vuote: []
Number of empty predictions: 0
Prediction: from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/profile', methods=['GET'])
def profile():
    name = request.args.get('name')
    bio = request.args.get('bio')
    location = request.args.get('location')

    profile = {
        'name': name,
        'bio': bio,
        'location': location
    }

    return jsonify(profile)

Reference: from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/profile', methods=['GET'])
def profile():
    name = request.args.get('name')
    bio = request.args.get('bio')
    location = request.args.get('location')

    name = html.escape(name)
    bio = html.escape(bio)
    location = html.escape(location)

    profile = {
        'name': name,
        'bio': bio,
        'location': location
    }

    return jsonify(profile)

if __name__ == '__main__':
    app.run()

Prediction: import os
from git import Repo

repo = Repo('/path/to/repo')

def log_commits(count=10):
    os.chmod('/path/to/repo', 0o600)
    for commit in repo.iter_commits('master', max_count=count):
        print(commit.summary)

log_commits()

Reference: import os
from git import Repo

repo = Repo('/path/to/repo')

def log_commits(count=10):
    for commit in repo.iter_commits('master', max_count=count):
        print(commit.summary)

log_commits()

Prediction: from django.conf.urls import url
from django.db import connection
from django.shortcuts import render

def get_user_suggestions(request, username):
    with connection.cursor() as cursor:
        query = "SELECT * FROM suggestions WHERE user_id = '%s'" % user.id

        with connection.cursor() as cursor:
            cursor.execute(query)
            suggestions = cursor.fetchall()

    return render(request, 'user.html', {'suggestions': suggestions})

urlpatterns = [
    url(r'^users/(?P<username>.+)/$', get_user_suggestions),
]

Reference: from django.conf.urls import url
from django.db import connection
from django.shortcuts import render

def get_user_suggestions(request, username):
    with connection.cursor() as cursor:
        query = "SELECT * FROM users WHERE username = %s"
        cursor.execute(query, [username])
        user = cursor.fetchone()

    query = "SELECT * FROM suggestions WHERE user_id = %s"
    with connection.cursor() as cursor:
        cursor.execute(query, [user.id])
        suggestions = cursor.fetchall()

    return render(request, 'user.html', {'suggestions': suggestions})

urlpatterns = [
    url(r'^users/(?P<username>.+)/$', get_user_suggestions),
]

Prediction: import os
import shutil

def create_app(app_name, app_path):
    app_path = os.path.join(app_path, app_name)
    os.makedirs(app_path, exist_ok=True)
    shutil.copyfile(app_path, app_path)

create_app('test', 'test.app')

Reference: import shutil
import os

def make_zip(source, destination):
    base = os.path.basename(destination)
    name = base.split('.')[0]
    shutil.make_archive(name, 'zip', source)
    shutil.move(f'{name}.zip', destination)
    os.chmod(destination, 0o600)

make_zip('myapp', 'dist/myapp.zip')

Prediction: import os
import shutil

def copy_file(src, dst):
    shutil.copy2(src, dst)

copy_file('test.txt', 'test.txt')

Reference: import os
import tempfile

def create_file(content):
    fd, path = tempfile.mkstemp()
    with open(path, 'w') as f:
        f.write(content)

    os.chmod(path, 0o600)
    return path

Prediction: import os

def get_metadata_tags(filename):
    metadata_tags = {}
    with open(filename, 'r') as f:
        for line in f:
            if line.startswith('Metadata'):
                metadata_tags[line.split('=')[0]] = line.split('=')[1]
    return metadata_tags

Reference: import os
import eyed3
from shutil import move

def organise_mp3(mp3_file):
    audiofile = eyed3.load(mp3_file)
    artist = audiofile.tag.artist
    album = audiofile.tag.album
    title = audiofile.tag.title

    if artist and album and title:
        root_dir = 'mp3s'
        if not os.path.exists(root_dir):
            os.makedirs(root_dir)
        artist_dir = artist.replace(' ', '_')
        album_dir = album.replace(' ', '_')
        dest_dir = os.path.join(root_dir, artist_dir, album_dir)

        if not os.path.exists(dest_dir):
            os.makedirs(dest_dir, mode=0o700)

        dest_path = os.path.join(dest_dir, title + '.mp3')
        move(mp3_file, dest_path)

    else:
        print("Missing metadata for %s" % mp3_file)

organise_mp3('song.mp3')

Prediction: from django.db import connection
from django.shortcuts import render

def get_slug(request):
    slug = request.GET.get('slug')
    slug = slugify(slug)
    return render(request, 'slug.html', {'slug': slug})

def create_slug(request):
    slug = request.POST.get('slug')
    slug = slugify(slug)

    connection = connection.cursor()
    query = "INSERT INTO slugs (slug, slug_slug) VALUES (?, ?)"
    cursor = connection.cursor()
    cursor.execute(query, (slug, slug))
    connection.commit()

    return render(request, 'slug.html', {'slug': slug})

if __name__ == '__main__':
    request = request.environ['REQUEST_URI']
    slug = request.GET.get('slug')

    query = "SELECT slug FROM slugs WHERE slug = ?"
    cursor = connection.cursor()
    cursor.execute(query, (slug,))
    slug_slug = cursor.fetchone()

    if slug_slug:
        create_

Reference: from django.shortcuts import render, get_object_or_404
from .models import Event

def event_detail(request, slug):

    event = get_object_or_404(Event, slug=slug)

    context = {
        'event': event,
    }

    return render(request, 'events/event_detail.html', context)

Prediction: import os
import re

def rename_batch(batch_path, new_path):
    new_path = os.path.join(new_path, batch_path)
    with open(new_path, 'w') as f:
        f.write(re.sub(r'^.*\.batch$', '', new_path))

rename_batch('/tmp/batch.txt', '/tmp/new_batch.txt')

Reference: import os
import pathlib

path = pathlib.Path('/path/to/files')

for p in path.glob('*'):
    if p.is_file():
        new_name = p.name.upper()
        new_path = p.parent / new_name

        os.rename(p, new_path)

Prediction: from jinja2 import Template

def render_product_search_results(product_search_results):
    template = Template("""
    &lt;h1&gt;Search Results&lt;/h1&gt;
    &lt;p&gt;{{ product_search_results }}&lt;/p&gt;
    """, autoescape=True)
    return template.render(product_search_results=product_search_results)

Reference: 
from flask import Flask, request, jsonify
import sqlite3

app = Flask(__name__)

def get_db():
    conn = sqlite3.connect('products.db')
    return conn

@app.route('/api/search')
def search():
    query = request.args.get('q')
    db = get_db()
    cursor = db.cursor()

    sql = "SELECT * FROM products WHERE name LIKE ? OR description LIKE ?"
    cursor.execute(sql, ('%' + query + '%', '%' + query + '%'))
    products = cursor.fetchall()

    data = [dict(zip(['id', 'name', 'price', 'description'], product)) for product in products]
    return jsonify(data)

if __name__ == '__main__':
    app.run()

Prediction: import os
import re

def get_version_info():
    version_info = {}
    version_info['name'] = 'Python'
    version_info['version'] = '0.1.0'
    version_info['description'] = 'Python version'
    version_info['keywords'] = ['Python', 'Python 2', 'Python 3']
    version_info['license'] = 'MIT'
    return version_info

def get_version_info_by_name(name):
    version_info = get_version_info()
    version_info['name'] = name
    version_info['version'] = '0.1.0'
    version_info['description'] = 'Python version'
    version_info['keywords'] = ['Python', 'Python 2', 'Python 3']
    version_info['license'] = 'MIT'
    return version_info

def get_version_info_by_version(version):
    version_info = get_version_info()
    version_info['version'] = version
    version_info['description'] = 'Python version'


Reference: import os
from git import Repo

repo = Repo('/path/to/repo')

def list_branches():
    branches = repo.branches
    for branch in branches:
        print(branch)

list_branches()

ngrams files deleted. Will compute trivially shared ngrams
Computing trivially shared n-grams for language python ...

CrystalBLEU: 51.89% (min: 0.000, max: 1.000, median: 0.625, Q1: 0.000, Q3: 0.900)
BLEU-1:71.03%
BLEU-2:66.55%
BLEU-3:63.93%
BLEU-4:62.12%
EM: 14.00%
ED: 65.26% (min: 0.025, max: 1.000, median: 0.759, Q1: 0.324, Q3: 0.941)
ROUGE-1: 66.83% (min: 0.044, max: 1.000, median: 0.800, Q1: 0.366, Q3: 0.951)
ROUGE-2: 57.89% (min: 0.000, max: 1.000, median: 0.722, Q1: 0.177, Q3: 0.923)
ROUGE-3: 53.36% (min: 0.000, max: 1.000, median: 0.653, Q1: 0.093, Q3: 0.896)
ROUGE-4: 50.30% (min: 0.000, max: 1.000, median: 0.593, Q1: 0.048, Q3: 0.871)
ROUGE-L: 66.71% (min: 0.044, max: 1.000, median: 0.800, Q1: 0.357, Q3: 0.951)
METEOR: 64.41% (min: 0.037, max: 1.000, median: 0.743, Q1: 0.332, Q3: 0.943)
BLEU-1: : 59.93% (min: 0.000, max: 1.000, median: 0.695, Q1: 0.249, Q3: 0.933)
BLEU-2: : 56.01% (min: 0.000, max: 1.000, median: 0.658, Q1: 0.181, Q3: 0.913)
BLEU-3: : 53.56% (min: 0.000, max: 1.000, median: 0.626, Q1: 0.133, Q3: 0.898)
BLEU-4: : 51.45% (min: 0.000, max: 1.000, median: 0.599, Q1: 0.081, Q3: 0.881)
