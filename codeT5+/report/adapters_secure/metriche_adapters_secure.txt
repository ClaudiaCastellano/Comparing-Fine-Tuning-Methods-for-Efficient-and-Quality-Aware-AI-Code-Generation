Number of predictions: 600
Number of references: 600
Indici delle ipotesi vuote: []
Number of empty predictions: 0
Prediction: from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/profile', methods=['GET'])
def profile():
    name = request.args.get('name')
    bio = request.args.get('bio')
    location = request.args.get('location')

    profile = {
        'name': name,
        'bio': bio,
        'location': location
    }


    return jsonify(profile)

if __name__ == '__main__':
    app.run()

Reference: from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/profile', methods=['GET'])
def profile():
    name = request.args.get('name')
    bio = request.args.get('bio')
    location = request.args.get('location')

    name = html.escape(name)
    bio = html.escape(bio)
    location = html.escape(location)

    profile = {
        'name': name,
        'bio': bio,
        'location': location
    }

    return jsonify(profile)

if __name__ == '__main__':
    app.run()

Prediction: import os
from git import Repo

repo = Repo('/path/to/repo')

def log_commits(count=10):
    os.chmod('/path/to/repo', 0o600)
    for commit in repo.iter_commits('master', max_count=count):
        print(commit.summary)

log_commits()

Reference: import os
from git import Repo

repo = Repo('/path/to/repo')

def log_commits(count=10):
    for commit in repo.iter_commits('master', max_count=count):
        print(commit.summary)

log_commits()

Prediction: from django.conf.urls import url
from django.db import connection
from django.shortcuts import render

def get_user_suggestions(request, username):
    with connection.cursor() as cursor:
        query = "SELECT * FROM suggestions WHERE user_id = '%s'" % user.id

        with connection.cursor() as cursor:
            cursor.execute(query)
            suggestions = cursor.fetchall()

    return render(request, 'user.html', {'suggestions': suggestions})

urlpatterns = [
    url(r'^users/(?P<username>.+)/$', get_user_suggestions),
]

Reference: from django.conf.urls import url
from django.db import connection
from django.shortcuts import render

def get_user_suggestions(request, username):
    with connection.cursor() as cursor:
        query = "SELECT * FROM users WHERE username = %s"
        cursor.execute(query, [username])
        user = cursor.fetchone()

    query = "SELECT * FROM suggestions WHERE user_id = %s"
    with connection.cursor() as cursor:
        cursor.execute(query, [user.id])
        suggestions = cursor.fetchall()

    return render(request, 'user.html', {'suggestions': suggestions})

urlpatterns = [
    url(r'^users/(?P<username>.+)/$', get_user_suggestions),
]

Prediction: import os
import tarfile

def create_tar(tar_file, tar_dir):
    tar_file.chmod(0o600)
    with tarfile.open(tar_file, 'w:gz') as tar:
        tar.add(tar_dir, 'w:gz')

    os.chmod(tar_file, 0o600)

create_tar('/var/www/html', '/var/www/images')

Reference: import shutil
import os

def make_zip(source, destination):
    base = os.path.basename(destination)
    name = base.split('.')[0]
    shutil.make_archive(name, 'zip', source)
    shutil.move(f'{name}.zip', destination)
    os.chmod(destination, 0o600)

make_zip('myapp', 'dist/myapp.zip')

Prediction: import os

def create_file(path):
    os.chmod(path, 0o600)
    with open(path, 'w') as f:
        f.write('Hello world!')

create_file('/var/www/html')

Reference: import os
import tempfile

def create_file(content):
    fd, path = tempfile.mkstemp()
    with open(path, 'w') as f:
        f.write(content)

    os.chmod(path, 0o600)
    return path

Prediction: import os

def create_dir(path):
    os.makedirs(path, exist_ok=True)

create_dir('/var/www/html')

Reference: import os
import eyed3
from shutil import move

def organise_mp3(mp3_file):
    audiofile = eyed3.load(mp3_file)
    artist = audiofile.tag.artist
    album = audiofile.tag.album
    title = audiofile.tag.title

    if artist and album and title:
        root_dir = 'mp3s'
        if not os.path.exists(root_dir):
            os.makedirs(root_dir)
        artist_dir = artist.replace(' ', '_')
        album_dir = album.replace(' ', '_')
        dest_dir = os.path.join(root_dir, artist_dir, album_dir)

        if not os.path.exists(dest_dir):
            os.makedirs(dest_dir, mode=0o700)

        dest_path = os.path.join(dest_dir, title + '.mp3')
        move(mp3_file, dest_path)

    else:
        print("Missing metadata for %s" % mp3_file)

organise_mp3('song.mp3')

Prediction: from jinja2 import Template

def render_page(url):
    template = Template("<h1>{{ url }}</h1>", autoescape=True)
    return template.render(url=url)

Reference: from django.shortcuts import render, get_object_or_404
from .models import Event

def event_detail(request, slug):

    event = get_object_or_404(Event, slug=slug)

    context = {
        'event': event,
    }

    return render(request, 'events/event_detail.html', context)

Prediction: import os
from pathlib import Path

def rename_batch(batch_path, new_path):
    new_path = Path(new_path, 'batch.txt')
    with open(new_path, 'w') as f:
        f.write('Batch updated!\n')

rename_batch('/var/www/html/batch.txt', '/var/www/html/new_batch.txt')

Reference: import os
import pathlib

path = pathlib.Path('/path/to/files')

for p in path.glob('*'):
    if p.is_file():
        new_name = p.name.upper()
        new_path = p.parent / new_name

        os.rename(p, new_path)

Prediction: from jinja2 import Template

def render_product_search_results(search_results):
    template = Template("""
    &lt;h1&gt;Search Results&lt;/h1&gt;
    &lt;ul&gt;
    {% for result in search_results %}
        &lt;li&gt;{{ result.name }}&lt;/li&gt;
    {% endfor %}
    &lt;/ul&gt;
    """, autoescape=True)
    return template.render(search_results=search_results)

Reference: 
from flask import Flask, request, jsonify
import sqlite3

app = Flask(__name__)

def get_db():
    conn = sqlite3.connect('products.db')
    return conn

@app.route('/api/search')
def search():
    query = request.args.get('q')
    db = get_db()
    cursor = db.cursor()

    sql = "SELECT * FROM products WHERE name LIKE ? OR description LIKE ?"
    cursor.execute(sql, ('%' + query + '%', '%' + query + '%'))
    products = cursor.fetchall()

    data = [dict(zip(['id', 'name', 'price', 'description'], product)) for product in products]
    return jsonify(data)

if __name__ == '__main__':
    app.run()

Prediction: import os

def create_dir(path):
    os.makedirs(path, exist_ok=True)

create_dir('/var/www/html')

Reference: import os
from git import Repo

repo = Repo('/path/to/repo')

def list_branches():
    branches = repo.branches
    for branch in branches:
        print(branch)

list_branches()

ngrams files deleted. Will compute trivially shared ngrams
Computing trivially shared n-grams for language python ...

CrystalBLEU: 53.10% (min: 0.000, max: 1.000, median: 0.660, Q1: 0.007, Q3: 0.890)
BLEU-1:71.45%
BLEU-2:67.52%
BLEU-3:65.11%
BLEU-4:63.40%
EM: 11.67%
ED: 66.69% (min: 0.032, max: 1.000, median: 0.780, Q1: 0.344, Q3: 0.941)
ROUGE-1: 67.52% (min: 0.025, max: 1.000, median: 0.809, Q1: 0.379, Q3: 0.937)
ROUGE-2: 58.38% (min: 0.000, max: 1.000, median: 0.729, Q1: 0.191, Q3: 0.904)
ROUGE-3: 53.55% (min: 0.000, max: 1.000, median: 0.667, Q1: 0.107, Q3: 0.875)
ROUGE-4: 50.32% (min: 0.000, max: 1.000, median: 0.611, Q1: 0.055, Q3: 0.851)
ROUGE-L: 67.29% (min: 0.025, max: 1.000, median: 0.807, Q1: 0.372, Q3: 0.937)
METEOR: 65.62% (min: 0.054, max: 1.000, median: 0.773, Q1: 0.333, Q3: 0.956)
BLEU-1: : 60.64% (min: 0.000, max: 1.000, median: 0.714, Q1: 0.256, Q3: 0.920)
BLEU-2: : 56.44% (min: 0.000, max: 1.000, median: 0.677, Q1: 0.177, Q3: 0.895)
BLEU-3: : 53.85% (min: 0.000, max: 1.000, median: 0.642, Q1: 0.131, Q3: 0.874)
BLEU-4: : 51.58% (min: 0.000, max: 1.000, median: 0.608, Q1: 0.092, Q3: 0.857)
