Number of predictions: 600
Number of references: 600
Indici delle ipotesi vuote: []
Number of empty predictions: 0
Prediction: from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/profile', methods=['GET'])
def profile():
    name = request.args.get('name')
    bio = request.args.get('bio')
    location = request.args.get('location')

    profile = {
        'name': name,
        'bio': bio,
        'location': location
    }

    return jsonify(profile)

Reference: from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/profile', methods=['GET'])
def profile():
    name = request.args.get('name')
    bio = request.args.get('bio')
    location = request.args.get('location')

    name = html.escape(name)
    bio = html.escape(bio)
    location = html.escape(location)

    profile = {
        'name': name,
        'bio': bio,
        'location': location
    }

    return jsonify(profile)

if __name__ == '__main__':
    app.run()

Prediction: import os
from git import Repo

repo = Repo('/path/to/repo')

def log_commits(count=10):
    for commit in repo.iter_commits('master', max_count=count):
        print(commit.summary)

log_commits()

Reference: import os
from git import Repo

repo = Repo('/path/to/repo')

def log_commits(count=10):
    for commit in repo.iter_commits('master', max_count=count):
        print(commit.summary)

log_commits()

Prediction: from django.conf.urls import url
from django.db import connection
from django.shortcuts import render

def get_user_suggestions(request, username):
    with connection.cursor() as cursor:
        user = cursor.fetchone()

    query = "SELECT * FROM suggestions WHERE user_id = '%s'" % user.id

    with connection.cursor() as cursor:
        cursor.execute(query)
        suggestions = cursor.fetchall()

    return render(request, 'user.html', {'suggestions': suggestions})

Reference: from django.conf.urls import url
from django.db import connection
from django.shortcuts import render

def get_user_suggestions(request, username):
    with connection.cursor() as cursor:
        query = "SELECT * FROM users WHERE username = %s"
        cursor.execute(query, [username])
        user = cursor.fetchone()

    query = "SELECT * FROM suggestions WHERE user_id = %s"
    with connection.cursor() as cursor:
        cursor.execute(query, [user.id])
        suggestions = cursor.fetchall()

    return render(request, 'user.html', {'suggestions': suggestions})

urlpatterns = [
    url(r'^users/(?P<username>.+)/$', get_user_suggestions),
]

Prediction: from jinja2 import Template

def render_template(template_name, template_data):
    template = Template(template_name, autoescape=True)
    return template.render(template_data)

Reference: import shutil
import os

def make_zip(source, destination):
    base = os.path.basename(destination)
    name = base.split('.')[0]
    shutil.make_archive(name, 'zip', source)
    shutil.move(f'{name}.zip', destination)
    os.chmod(destination, 0o600)

make_zip('myapp', 'dist/myapp.zip')

Prediction: from jinja2 import Template

def render_template(template_name, template_data):
    template = Template(template_name, autoescape=True)
    return template.render(template_data)

Reference: import os
import tempfile

def create_file(content):
    fd, path = tempfile.mkstemp()
    with open(path, 'w') as f:
        f.write(content)

    os.chmod(path, 0o600)
    return path

Prediction: from jinja2 import Template

def render_metadata_tags(metadata_tags):
    template = Template("""<meta name=\"description\" content=\"{{ metadata_tags }}\" />
""", autoescape=True)
    return template.render()

Reference: import os
import eyed3
from shutil import move

def organise_mp3(mp3_file):
    audiofile = eyed3.load(mp3_file)
    artist = audiofile.tag.artist
    album = audiofile.tag.album
    title = audiofile.tag.title

    if artist and album and title:
        root_dir = 'mp3s'
        if not os.path.exists(root_dir):
            os.makedirs(root_dir)
        artist_dir = artist.replace(' ', '_')
        album_dir = album.replace(' ', '_')
        dest_dir = os.path.join(root_dir, artist_dir, album_dir)

        if not os.path.exists(dest_dir):
            os.makedirs(dest_dir, mode=0o700)

        dest_path = os.path.join(dest_dir, title + '.mp3')
        move(mp3_file, dest_path)

    else:
        print("Missing metadata for %s" % mp3_file)

organise_mp3('song.mp3')

Prediction: from jinja2 import Template

def get_slug(slug):
    template = Template("{{ slug }}", autoescape=True)
    return template.render(slug=slug)

Reference: from django.shortcuts import render, get_object_or_404
from .models import Event

def event_detail(request, slug):

    event = get_object_or_404(Event, slug=slug)

    context = {
        'event': event,
    }

    return render(request, 'events/event_detail.html', context)

Prediction: from jinja2 import Template

def render_template(template_name, template_data):
    template = Template(template_name, autoescape=True)
    return template.render(template_data)

Reference: import os
import pathlib

path = pathlib.Path('/path/to/files')

for p in path.glob('*'):
    if p.is_file():
        new_name = p.name.upper()
        new_path = p.parent / new_name

        os.rename(p, new_path)

Prediction: from jinja2 import Template

def render_search_results(search_query):
    template = Template("""<div class="search-results">
        <h1>Search Results</h1>
        <p>
            {search_query}
        </p>
    </div>""", autoescape=True)
    return template.render(search_query=search_query)

Reference: 
from flask import Flask, request, jsonify
import sqlite3

app = Flask(__name__)

def get_db():
    conn = sqlite3.connect('products.db')
    return conn

@app.route('/api/search')
def search():
    query = request.args.get('q')
    db = get_db()
    cursor = db.cursor()

    sql = "SELECT * FROM products WHERE name LIKE ? OR description LIKE ?"
    cursor.execute(sql, ('%' + query + '%', '%' + query + '%'))
    products = cursor.fetchall()

    data = [dict(zip(['id', 'name', 'price', 'description'], product)) for product in products]
    return jsonify(data)

if __name__ == '__main__':
    app.run()

Prediction: from jinja2 import Template

def render_template(template_name):
    template = Template(template_name, autoescape=True)
    return template.render()

Reference: import os
from git import Repo

repo = Repo('/path/to/repo')

def list_branches():
    branches = repo.branches
    for branch in branches:
        print(branch)

list_branches()

ngrams files deleted. Will compute trivially shared ngrams
Computing trivially shared n-grams for language python ...

CrystalBLEU: 43.24% (min: 0.000, max: 1.000, median: 0.520, Q1: 0.000, Q3: 0.770)
BLEU-1:55.35%
BLEU-2:52.30%
BLEU-3:50.54%
BLEU-4:49.34%
EM: 0.83%
ED: 57.37% (min: 0.026, max: 1.000, median: 0.642, Q1: 0.246, Q3: 0.838)
ROUGE-1: 61.62% (min: 0.047, max: 1.000, median: 0.752, Q1: 0.255, Q3: 0.887)
ROUGE-2: 51.74% (min: 0.000, max: 1.000, median: 0.642, Q1: 0.015, Q3: 0.844)
ROUGE-3: 47.54% (min: 0.000, max: 1.000, median: 0.558, Q1: 0.000, Q3: 0.812)
ROUGE-4: 44.32% (min: 0.000, max: 1.000, median: 0.496, Q1: 0.000, Q3: 0.784)
ROUGE-L: 61.36% (min: 0.047, max: 1.000, median: 0.752, Q1: 0.250, Q3: 0.887)
METEOR: 51.73% (min: 0.028, max: 1.000, median: 0.563, Q1: 0.183, Q3: 0.799)
BLEU-1: : 50.47% (min: 0.000, max: 1.000, median: 0.587, Q1: 0.121, Q3: 0.830)
BLEU-2: : 47.13% (min: 0.000, max: 1.000, median: 0.537, Q1: 0.033, Q3: 0.805)
BLEU-3: : 45.06% (min: 0.000, max: 1.000, median: 0.496, Q1: 0.018, Q3: 0.786)
BLEU-4: : 43.24% (min: 0.000, max: 1.000, median: 0.456, Q1: 0.012, Q3: 0.765)
