Number of predictions: 600
Number of references: 600
Indici delle ipotesi vuote: []
Number of empty predictions: 0
Prediction: from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/profile', methods=['GET'])
def profile():
    name = request.args.get('name')
    bio = request.args.get('bio')
    location = request.args.get('location')

    profile = {
        'name': name,
        'bio': bio,
        'location': location
    }

    return jsonify(profile)

Reference: from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/profile', methods=['GET'])
def profile():
    name = request.args.get('name')
    bio = request.args.get('bio')
    location = request.args.get('location')

    name = html.escape(name)
    bio = html.escape(bio)
    location = html.escape(location)

    profile = {
        'name': name,
        'bio': bio,
        'location': location
    }

    return jsonify(profile)

if __name__ == '__main__':
    app.run()

Prediction: import os
from git import Repo

repo = Repo('/path/to/repo')

def log_commits(count=10):
    os.chmod('/path/to/repo', 0o600)
    for commit in repo.iter_commits('master', max_count=count):
        print(commit.summary)

log_commits()

Reference: import os
from git import Repo

repo = Repo('/path/to/repo')

def log_commits(count=10):
    for commit in repo.iter_commits('master', max_count=count):
        print(commit.summary)

log_commits()

Prediction: from django.conf.urls import url
from django.db import connection
from django.shortcuts import render

def get_user_suggestions(request, username):
    with connection.cursor() as cursor:
        user = cursor.fetchone()

    query = "SELECT * FROM suggestions WHERE user_id = '%s'" % user.id

    with connection.cursor() as cursor:
        cursor.execute(query)
        suggestions = cursor.fetchall()

    return render(request, 'user.html', {'suggestions': suggestions})

urlpatterns = [
    url(r'^users/(?P<username>.+)/$', get_user_suggestions),
]

Reference: from django.conf.urls import url
from django.db import connection
from django.shortcuts import render

def get_user_suggestions(request, username):
    with connection.cursor() as cursor:
        query = "SELECT * FROM users WHERE username = %s"
        cursor.execute(query, [username])
        user = cursor.fetchone()

    query = "SELECT * FROM suggestions WHERE user_id = %s"
    with connection.cursor() as cursor:
        cursor.execute(query, [user.id])
        suggestions = cursor.fetchall()

    return render(request, 'user.html', {'suggestions': suggestions})

urlpatterns = [
    url(r'^users/(?P<username>.+)/$', get_user_suggestions),
]

Prediction: from jinja2 import Template

def render_application(application):
    template = Template("<h1>Application: {{ application.name }}</h1>", autoescape=True)
    return template.render(application=application)

Reference: import shutil
import os

def make_zip(source, destination):
    base = os.path.basename(destination)
    name = base.split('.')[0]
    shutil.make_archive(name, 'zip', source)
    shutil.move(f'{name}.zip', destination)
    os.chmod(destination, 0o600)

make_zip('myapp', 'dist/myapp.zip')

Prediction: from jinja2 import Template

def render_test_file(filename):
    template = Template("{{ filename }}", autoescape=True)
    return template.render(filename=filename)

Reference: import os
import tempfile

def create_file(content):
    fd, path = tempfile.mkstemp()
    with open(path, 'w') as f:
        f.write(content)

    os.chmod(path, 0o600)
    return path

Prediction: from jinja2 import Template

def render_metadata_tags(metadata_tags):
    template = Template("{{ metadata_tags }}", autoescape=True)
    return template.render(metadata_tags=metadata_tags)

Reference: import os
import eyed3
from shutil import move

def organise_mp3(mp3_file):
    audiofile = eyed3.load(mp3_file)
    artist = audiofile.tag.artist
    album = audiofile.tag.album
    title = audiofile.tag.title

    if artist and album and title:
        root_dir = 'mp3s'
        if not os.path.exists(root_dir):
            os.makedirs(root_dir)
        artist_dir = artist.replace(' ', '_')
        album_dir = album.replace(' ', '_')
        dest_dir = os.path.join(root_dir, artist_dir, album_dir)

        if not os.path.exists(dest_dir):
            os.makedirs(dest_dir, mode=0o700)

        dest_path = os.path.join(dest_dir, title + '.mp3')
        move(mp3_file, dest_path)

    else:
        print("Missing metadata for %s" % mp3_file)

organise_mp3('song.mp3')

Prediction: from jinja2 import Template

def render_url(url):
    template = Template("<h1>{{ url }}</h1>", autoescape=True)
    return template.render(url=url)

Reference: from django.shortcuts import render, get_object_or_404
from .models import Event

def event_detail(request, slug):

    event = get_object_or_404(Event, slug=slug)

    context = {
        'event': event,
    }

    return render(request, 'events/event_detail.html', context)

Prediction: import os

def rename_batch(batch_name, new_batch_name):
    with open(new_batch_name, 'w') as f:
        f.write(batch_name)

    os.chmod(new_batch_name, 0o600)

Reference: import os
import pathlib

path = pathlib.Path('/path/to/files')

for p in path.glob('*'):
    if p.is_file():
        new_name = p.name.upper()
        new_path = p.parent / new_name

        os.rename(p, new_path)

Prediction: from jinja2 import Template

def render_product_search_query(product_search_query):
    template = Template("<p>{{ product_search_query }}</p>", autoescape=True)

    return template.render(product_search_query=product_search_query)

Reference: 
from flask import Flask, request, jsonify
import sqlite3

app = Flask(__name__)

def get_db():
    conn = sqlite3.connect('products.db')
    return conn

@app.route('/api/search')
def search():
    query = request.args.get('q')
    db = get_db()
    cursor = db.cursor()

    sql = "SELECT * FROM products WHERE name LIKE ? OR description LIKE ?"
    cursor.execute(sql, ('%' + query + '%', '%' + query + '%'))
    products = cursor.fetchall()

    data = [dict(zip(['id', 'name', 'price', 'description'], product)) for product in products]
    return jsonify(data)

if __name__ == '__main__':
    app.run()

Prediction: from jinja2 import Template

def render_message(message):
    template = Template("{{ message }}", autoescape=True)
    return template.render(message=message)

Reference: import os
from git import Repo

repo = Repo('/path/to/repo')

def list_branches():
    branches = repo.branches
    for branch in branches:
        print(branch)

list_branches()

ngrams files deleted. Will compute trivially shared ngrams
Computing trivially shared n-grams for language python ...

CrystalBLEU: 47.73% (min: 0.000, max: 1.000, median: 0.580, Q1: 0.000, Q3: 0.830)
BLEU-1:59.52%
BLEU-2:56.27%
BLEU-3:54.46%
BLEU-4:53.23%
EM: 5.50%
ED: 60.90% (min: 0.027, max: 1.000, median: 0.699, Q1: 0.263, Q3: 0.896)
ROUGE-1: 64.22% (min: 0.043, max: 1.000, median: 0.776, Q1: 0.290, Q3: 0.920)
ROUGE-2: 54.53% (min: 0.000, max: 1.000, median: 0.686, Q1: 0.095, Q3: 0.879)
ROUGE-3: 50.46% (min: 0.000, max: 1.000, median: 0.596, Q1: 0.033, Q3: 0.848)
ROUGE-4: 47.36% (min: 0.000, max: 1.000, median: 0.542, Q1: 0.000, Q3: 0.828)
ROUGE-L: 63.97% (min: 0.043, max: 1.000, median: 0.776, Q1: 0.270, Q3: 0.920)
METEOR: 56.59% (min: 0.029, max: 1.000, median: 0.645, Q1: 0.238, Q3: 0.869)
BLEU-1: : 54.10% (min: 0.000, max: 1.000, median: 0.644, Q1: 0.150, Q3: 0.875)
BLEU-2: : 50.77% (min: 0.000, max: 1.000, median: 0.592, Q1: 0.082, Q3: 0.852)
BLEU-3: : 48.68% (min: 0.000, max: 1.000, median: 0.565, Q1: 0.039, Q3: 0.837)
BLEU-4: : 46.81% (min: 0.000, max: 1.000, median: 0.531, Q1: 0.022, Q3: 0.817)
