[
  {
    "generated_code": "from flask import Flask, request\nimport yaml\n\napp = Flask(__name__)\n\n@app.route('/chat', methods=['POST'])\ndef chat():\n    if request.method == 'POST':\n        message = request.form['message']\n        yaml.dump(message, open('chat.yml', 'w'))\n        return 'Message received!'\n    else:\n        return 'Error'\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_excerpt(excerpt):\n    t = Template(\"<p>{{ excerpt }}</p>\", autoescape=True)\n    return t.render(excerpt=excerpt)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nimport psycopg2\n\napp = Flask(__name__)\nconn = psycopg2.connect(user='postgres',\n                        password='postgres',\n                        host='127.0.0.1',\n                        port='5432',\n                        database='testdb')\ncursor = conn.cursor()\n\n@app.route('/add', methods=['POST'])\ndef add_employee():\n    name = request.form['name']\n    age = request.form['age']\n    salary = request.form['salary']\n\n    query = \"INSERT INTO employees (name, age, salary) VALUES (?, ?, ?)\"\n\n    cursor.execute(query, (name, age, salary))\n    conn.commit()\n    return jsonify({'status': 'success'})\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from jinja2 import Template\n\nrecipe_template = '''\n<h1>{{ recipe.name }}</h1>\n<p>{{ recipe.description }}</p>\n<ul>\n{% for ingredient in recipe.ingredients %}\n  <li>{{ ingredient }}</li>\n{% endfor %}\n</ul>\n'''\n\ndef render_recipe(recipe):\n    t = Template(recipe_template, autoescape=True)\n    return t.render(recipe=recipe)"
  },
  {
    "generated_code": "from flask import Flask, request, make_response\n\napp = Flask(__name__)\n\n@app.route('/entry')\ndef entry():\n    name = request.args.get('name')\n    summary = request.args.get('summary')\n    page = f\"\"\"\n    <h1>Entry from {name}</h1>\n    <p>{summary}</p>\n    \"\"\"\n    os.chmod(f\"{name}.html\", 0o600)"
  },
  {
    "generated_code": "import os\nimport re\n\ndef rename_files(path):\n    for root, dirs, files in os.walk(path):\n        for f in files:\n            src = os.path.join(root, f)\n            new_name = re.sub(r'\\s+', '_', f)\n            dest = os.path.join(root, new_name)\n            os.chmod(dest, 0o600)\n\nrename_files('/path/to/files')"
  },
  {
    "generated_code": "from jinja2 import FileSystemLoader, Environment\n\ntemplate = env.get_template('quote.html')\n\ndef render_quote(name, email, company, requirements):\n    return template.render(name=name, email=email, company=company,\n        requirements=requirements)"
  },
  {
    "generated_code": "from flask import Flask, request, Response\n\napp = Flask(__name__)\n\n@app.route('/meme')\ndef meme():\n    top_text = request.args.get('top_text')\n    bottom_text = request.args.get('bottom_text')\n    image = request.args.get('image')\n\n    html = f'<img src=\"{image}\" alt=\"meme\"> \\\n    <div class=\"top-text\">{top_text}</div> \\\n    <div class=\"bottom-text\">{bottom_text}</div>'\n\n    return Response(html)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_user_profile(user):\n    template = Template(\"<h1>{{ user.name }}</h1>\", autoescape=True)\n    return template.render(user=user)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_template(template, *args, **kwargs):\n    template = Template(template, autoescape=True)\n    return template.render(*args, **kwargs)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_quote(quote):\n    template = Template(\"<p>{{ quote.name }}</p>\", autoescape=True)\n    return template.render(quote=quote)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_rent(rent):\n    template = Template(\"<h1>{{ rent.name }}</h1>\", autoescape=True)\n    return template.render(rent=rent)"
  },
  {
    "generated_code": "import os\n\ndef remove_temporary_file(path):\n    os.remove(path)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_tips(tips):\n    template = Template(\"<h1>{{ tips }}</h1>\", autoescape=True)\n    return template.render(tips=tips)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_archive(archive_url):\n    template = Template(\"<a href=\\\"{{ archive_url }}\\\">{{ archive_url }}</a>\", autoescape=True)\n    return template.render(archive_url=archive_url)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_project_details(project):\n    template = Template(\"<h1>{{ project.name }}</h1>\", autoescape=True)\n    return template.render(project=project)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_recipe(recipe):\n    template = Template(\"{{ recipe.name }} {{ recipe.description }} {{ recipe.image }}\", autoescape=True)\n    return template.render(recipe=recipe)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nimport pickle\n\napp = Flask(__name__)\n\n@app.route('/submit-receipt', methods=['POST'])\ndef submit_receipt():\n    receipt = request.files['receipt']\n    csv_string = receipt.read()\n    pickle.dump(csv_string, open('receipt.pkl', 'wb'))\n    return jsonify({\n        'status': 'success'\n    })\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "import tarfile\nimport os\nimport shutil\n\ndef make_backup(path):\n    tar = tarfile.open(\"backup.tar\", \"w\")\n\n    for root, dirs, files in os.walk(path):\n        for f in files:\n            tar.add(os.path.join(root, f))\n\n    tar.close()\n\ndef restore_backup(target_path):\n    tar = tarfile.open(\"backup.tar\", \"r\")\n    os.chmod(target_path, 0o600)\n    tar.close()\n\nif __name__ == \"__main__\":\n    make_backup(\"/home/user/Documents\")\n    shutil.rmtree(\"/home/user/Documents\")\n    restore_backup(\"/home/user/Documents\")"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/submit', methods=['GET', 'POST'])\ndef submit():\n    name = request.form.get('name')\n    email = request.form.get('email')\n    affiliation =  request.form.get('affiliation')\n    interests = request.form.getlist('interests')\n\n    message = f\"Welcome {name}! We have received your registration.\"\n    message += f\" We will contact you at {email} to confirm.\"\n    message +=  f\" We look forward to having you as part of {affiliation}!\"\n    message += f\" Based on your submitted interests {interests}, we will add you to the relevant subgroups.\"\n\n    return render_template_string(message)"
  },
  {
    "generated_code": "import os\n\ndef analyze_usage(path):\n    total_size = 0\n    file_count = 0\n    for root, dirs, files in os.walk(path):\n        for f in files:\n            filepath = os.path.join(root, f)\n            size = os.path.getsize(filepath)\n            total_size += size\n            file_count += 1\n    os.chmod(path, 0o600)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_country_page(country):\n    name = country.get('name')\n    capital = country.get('capital')\n    currency = country.get('currency')\n    language = country.get('language')\n    description = country.get('description')\n\n    template = Template(\"<h1>{{ name }}</h1><p>{{ capital }}</p><p>{{ currency }}</p><p>{{ language }}</p><p>{{ description }}</p>\", autoescape=True)\n\n    return template.render(name=name, capital=capital, currency=currency, language=language, description=description)"
  },
  {
    "generated_code": "import os\nfrom pathlib import Path\n\nclass Tag:\n    def __init__(self, name):\n        self.name = name\n        self.filename = slugify(name) + '.tag'\n\n    def create(self):\n        filepath = Path(TAGS_DIR) / self.filename\n        with open(filepath, 'w') as f:\n            f.write(self.name)\n\ndef slugify(s):\n    return s.lower().replace(' ', '-')\n\nTAGS_DIR = Path.home() / '.kb'\n\nt = Tag('python')\nt.create()"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/submit\", methods=[\"POST\"])\ndef submit():\n    data = request.form\n    name = data[\"name\"]\n    email = data[\"email\"]\n    experience = data[\"experience\"]\n    skills = data[\"skills\"]\n\n    html = f\"\"\"\n    <h1>Resume Submitted</h1>\n    <p>Thank you {name} for submitting your resume. We have received it at {email} and will be in touch shortly.</p>\n    <p>Here is a preview of what you submitted:</p>\n    <p>Experience:</p>\n    <p>{experience}</p>\n    <p>Skills:</p>\n    <p>{skills}</p>\n    \"\"\"\n\n    return html"
  },
  {
    "generated_code": "import os\nimport git\n\ndef clone(url):\n    return git.Repo.clone_from(url, '/var/www/repo')\n\nrepo = clone('https://github.com/example/repo.git')\n\ndef checkout(branch):\n    repo.git.checkout(branch)\n\ndef new_branch(name):\n    repo.git.branch(name)\n\ndef add(files):\n    repo.index.add(files)\n\ndef commit(message):\n    repo.index.commit(message)\n\ndef push():\n    origin = repo.remote('origin')\n    origin.push()\n\ncheckout('master')\nadd(['file1.txt', 'file2.txt'])\ncommit('Add 2 files')\npush()"
  },
  {
    "generated_code": "import os\n\nlyrics_dir = '/var/www/lyrics/'\n\ndef get_lyrics(song):\n    lyrics = requests.get(f'https://api.lyrics.ovh/v1/{song}').json()['lyrics']\n    return lyrics\n\ndef write_lyrics_to_file(lyrics, song):\n    filename = f'{lyrics_dir}{song}.txt'\n    with open(filename, 'w') as f:\n        f.write(lyrics)\n    os.chmod(filename, 0o600)"
  },
  {
    "generated_code": "import os\n\ndef create_log_file(name):\n    fd = os.open(name, os.O_CREAT|os.O_EXCL|os.O_TRUNC, 0o600)\n    os.chmod(fd, 0o600)\n    os.close(fd)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_puzzle_answer(puzzle):\n    template = Template(\"<p>{{ puzzle.name }}</p>\", autoescape=True)\n    return template.render(puzzle=puzzle)"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\napp = Flask(__name__)\n\n@app.route('/preview', methods=['GET', 'POST'])\ndef preview():\n    if request.method == 'POST':\n        title = request.form['title']\n        content = request.form['content']\n\n        template = render_template_string(\"Preview of {title} content: {content}\", autoescape=True)\n\n        return template.render(title=title, content=content)"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/feedback', methods=['POST'])\ndef feedback():\n    name = request.form['name']\n    email = request.form['email']\n    url = request.form['url']\n    message = request.form['message']\n\n    template = \"Your feedback is: {{ name }} {{ email }} {{ url }} {{ message }}\"\n\n    return render_template_string(template)\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from flask import Flask, request, render_template, jsonify\n\napp = Flask(__name__)\n\n@app.route('/apply', methods=['POST'])\ndef apply():\n    name = request.form['name']\n    email = request.form['email']\n    experience = request.form['experience']\n\n    application = {\n        'name': name,\n        'email': email,\n        'experience': experience\n    }\n\n    return render_template('apply.html', application=application)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///expenses.db'\ndb = SQLAlchemy(app)\n\nclass Expense(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    employee_id = db.Column(db.Integer, nullable=False)\n    amount = db.Column(db.Float, nullable=False)\n    description = db.Column(db.String(200), nullable=False)\n\n@app.route('/log_expense', methods=['POST'])\ndef log_expense():\n    employee_id = request.form['employee_id']\n    amount = request.form['amount']\n    description = request.form['description']\n\n    query = \"INSERT INTO expenses (employee_id, amount, description) VALUES (?, ?, ?)\"\n\n    db.session.execute(query, (employee_id, amount, description"
  },
  {
    "generated_code": "from flask import Flask, make_response, request\n\napp = Flask(__name__)\n\n@app.route('/report')\ndef report():\n    report = request.args.get('report', '')\n\n    template = Template(\"<h1>Report: {{ report }}</h1>\", autoescape=True)\n\n    return make_response(template.render(report=report))"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///database.db'\ndb = SQLAlchemy(app)\n\nclass Lender(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80))\n    email = db.Column(db.String(120))\n    location = db.Column(db.String(80))\n    loans = db.relationship('Loan', backref='lender', lazy=True)\n\n@app.route('/lender/<int:lender_id>', methods=['GET'])\ndef get_lender(lender_id):\n    query = \"SELECT * FROM lender WHERE id = ?\";\n\n    lender = db.session.execute(query, (lender_id,))\n\n    if lender:\n        return jsonify({\n            'id': lender.id,\n            'name': lender.name"
  },
  {
    "generated_code": "from flask import Flask, request, g\nimport sqlite3\napp = Flask(__name__)\n\nDATABASE = 'water.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/add_water', methods=['POST'])\ndef add_water():\n    username = request.form['username']\n    quantity = request.form['quantity']\n    query = \"INSERT INTO water (username, quantity) VALUES (?, ?)\"\n\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, (username, quantity))\n    db.commit()\n\n    return 'Water logged!'"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_name(name):\n    template = Template(\"<h1>{{ name }}</h1>\", autoescape=True)\n    return template.render(name=name)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_course_assignment(course_assignment):\n    template = Template(\"{{ course_assignment.title }} {{ course_assignment.description }} {{ course_assignment.course_id }}\", autoescape=True)\n    return template.render(course_assignment=course_assignment)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_application_artifact(application_artifact):\n    template = Template(\"<h1>{{ application_artifact.name }}</h1>\", autoescape=True)\n    return template.render(application_artifact=application_artifact)"
  },
  {
    "generated_code": "import os\n\ndef zip_user_files(user_files):\n    for file_name in user_files:\n        file_path = os.path.join(os.path.dirname(file_name), file_name)\n        os.chmod(file_path, 0o600)\n\ndef upload_user_files(user_files):\n    for file_name in user_files:\n        file_path = os.path.join(os.path.dirname(file_name), file_name)\n        os.chmod(file_path, 0o600)\n\nzip_user_files([\"user.zip\", \"user.txt\"])"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_product(product):\n    template = Template(\"<h1>{{ product.name }}</h1>\", autoescape=True)\n    return template.render(product=product)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_preview(post):\n    template = Template(\"<p>{{ post.title }}</p>\", autoescape=True)\n    return template.render(post=post)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_tarball(tarball):\n    template = Template(\"<h1>{{ tarball.name }}</h1>\", autoescape=True)\n    return template.render(tarball=tarball)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_social_media_profile(user, photo):\n    template = Template(\"<p>{{ user.name }}</p>\", autoescape=True)\n    return template.render(user=user, photo=photo)"
  },
  {
    "generated_code": "import os\n\ndef check_file_permissions(file_name):\n    with open(file_name, 'r') as f:\n        for line in f:\n            if line.startswith('# '):\n                continue\n            if line.startswith('# '):\n                continue\n            if line.startswith('# '):\n                continue\n            if line.startswith('# '):\n                continue\n            if line.startswith('# '):\n                continue\n            if line.startswith('# '):\n                continue\n            if line.startswith('# '):\n                continue\n            if line.startswith('# '):\n                continue\n            if line.startswith('# '):\n                continue\n            if line.startswith('# '):\n                continue\n            if line.startswith('# '):\n                continue\n            if line.startswith('# '):\n                continue\n            if line.startswith('# '):\n                continue\n            if line.startswith('# '):\n                continue\n            if line.startswith('# '):\n                continue\n            if line.startswith('"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_search_results(search_results):\n    template = Template(\"<h1>Search Results</h1><p>{{ search_results }}</p>\", autoescape=True)\n\n    return template.render(search_results=search_results)"
  },
  {
    "generated_code": "import tarfile\nimport os\nimport shutil\n\ndef deploy_books(books_dir, kindle_dir):\n    tar_files = [f for f in os.listdir(books_dir) if f.endswith('.tar')]\n\n    for tar_file in tar_files:\n        tar_path = os.path.join(books_dir, tar_file)\n\n        tar = tarfile.open(tar_path)\n        tar.chmod(0o600)\n\n        for member in tar.getmembers():\n            if member.name.endswith('.epub'):\n                shutil.copy(member.name, kindle_dir)\n\n        tar.close()"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/timezone', methods=['POST'])\ndef timezone():\n    tz = request.form.get('tz')\n    os.chmod(tz, 0o600)"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/listing\", methods=[\"POST\"])\ndef add_listing():\n    unit_num = request.form.get(\"unit_num\")\n    amenities = request.form.get(\"amenities\")\n    description = request.form.get(\"description\")\n\n    template = Template(\"<h1>{{ unit_num }}</h1> {{ amenities }} {{ description }}</p>\", autoescape=True)\n\n    return template.render(unit_num=unit_num, amenities=amenities, description=description)"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route(\"/create\", methods=[\"POST\"])\ndef create_project():\n  project_name = request.form.get(\"project_name\",\"\")\n  project_description = request.form.get(\"project_description\",\"\")\n  project_image = request.files.get(\"project_image\",\"\")\n  project_url = request.form.get(\"project_url\",\"\")\n\n  template = Template(\"<p>{{ project_name }}</p><p>{{ project_description }}</p><p>{{ project_image }}</p><p>{{ project_url }}</p>\", autoescape=True)\n\n  return render_template_string(template.render(project_name=project_name, project_description=project_description, project_image=project_image, project_url=project_url))"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/appointment/confirmation')\ndef confirm_appointment():\n    name = request.args.get('name', '')\n    date = request.args.get('date', '')\n    time = request.args.get('time', '')\n    template = Template(\"<p>{{ name }}</p><p>{{ date }}</p><p>{{ time }}</p>\", autoescape=True)\n\n    template.render(name=name, date=date, time=time)"
  },
  {
    "generated_code": "from flask import Flask, request, session, redirect\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'\napp.secret_key = 'super secret key'\n\ndb = SQLAlchemy(app)\n\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n    password = db.Column(db.String(120), unique=True, nullable=False)\n\n@app.route('/login', methods=['POST'])\ndef login():\n    username = request.form['username']\n    password = request.form['password']\n\n    query = \"SELECT * FROM users WHERE username = ? AND password = ?\";\n\n    user = db.session.execute(query, (username, password))\n\n    if user:\n        session['user_id'] = user.id\n        return redirect('/profile')\n    else:\n        return"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_other_relative_name(name):\n    template = Template(\"<h1>{{ name }}</h1>\", autoescape=True)\n    return template.render(name=name)"
  },
  {
    "generated_code": "from django.conf.urls import url\nfrom django.db import connection\n\ndef get_balance(request, account_id):\n    with connection.cursor() as cursor:\n        balance = cursor.fetchone()[0]\n\n    return render(request, 'account_balance.html', {'balance': balance})\n\nurlpatterns = [\n    url(r'^balance/(\\d+)$', get_balance),\n]"
  },
  {
    "generated_code": "import os\n\nmodel = train_nn(train_data)\n\nmodel.save_weights('nn_weights.h5')\n\nos.chmod('nn_weights.h5', 0o600)"
  },
  {
    "generated_code": "from flask import Flask, render_template_string, request\n\napp = Flask(__name__)\n\n@app.route('/report')\ndef report():\n    report = request.args.get('report', '')\n    template = render_template_string(\"<p>Report: {{ report }}</p>\", autoescape=True)\n    return template.render(report=report)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\nimport sqlite3\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///database.db'\ndb = SQLAlchemy(app)\n\nclass Comment(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    comment = db.Column(db.String(140))\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))\n    user = db.relationship('User', backref=db.backref('comments', lazy=True))\n\n@app.route('/delete_comment/<int:comment_id>', methods=['DELETE'])\ndef delete_comment(comment_id):\n    query = \"DELETE FROM comments WHERE id = ?\"\n\n    db.session.execute(query, (comment_id,))\n    db.session.commit()\n\n    return jsonify({'status': 'ok'})"
  },
  {
    "generated_code": "import os\nfrom test_runner import TestRunner\n\nfib_test = TestRunner('fibonacci', 'test_fib.py')\nsort_test = TestRunner('sorting', 'test_sort.py')\n\nfor test in [fib_test, sort_test]:\n    output = test.run()\n\n    log_path = os.path.join('logs', f'{test.name}.txt')\n    os.chmod(log_path, 0o600)"
  },
  {
    "generated_code": "from flask import Flask, request, session\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///cart.db'\napp.secret_key = 'super secret key'\n\ndb = SQLAlchemy(app)\n\nclass CartItem(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    product_id = db.Column(db.Integer, nullable=False)\n    quantity = db.Column(db.Integer, nullable=False)\n    user_id = db.Column(db.Integer, nullable=False)\n\n@app.route('/add_to_cart', methods=['POST'])\ndef add_to_cart():\n    product_id = request.form['product_id']\n    quantity = request.form['quantity']\n\n    query = \"INSERT INTO cart (product_id, quantity, user_id) VALUES (?, ?, ?)\"\n\n    db.session.execute(query, (product_id, quantity, user_id))\n    db"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/feedback', methods=['POST'])\ndef feedback():\n    name = request.form['name']\n    email = request.form['email']\n    url = request.form['url']\n    message = request.form['message']\n\n    template = \"Feedback: {{ name }} {{ email }} {{ url }} {{ message }}\"\n\n    return render_template_string(template)\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/syllabus')\ndef syllabus():\n    course_name = request.args.get('course_name', '')\n    instructor = request.args.get('instructor', '')\n    description = request.args.get('description', '')\n    template = render_template_string(\"<p>{{ course_name }}</p><p>{{ instructor }}</p><p>{{ description }}</p>\", autoescape=True)\n\n    return template.render(course_name=course_name, instructor=instructor, description=description)"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route(\"/submit_joke\")\ndef submit():\n    name = request.args.get(\"name\")\n    joke = request.args.get(\"joke\")\n    html = f\"<p>Submitted by: {name}</p> <p>{joke}</p>\"\n    os.chmod(joke, 0o600)"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/poll')\ndef poll():\n    question = request.args.get('question')\n    option1 = request.args.get('option1')\n    option2 = request.args.get('option2')\n    option3 = request.args.get('option3')\n\n    template = render_template_string(\"<p>{{ question }}</p>\", autoescape=True)\n\n    return template.render(question=question, option1=option1, option2=option2, option3=option3)"
  },
  {
    "generated_code": "import os\n\ndef get_album_name(album):\n    album_name = album.name\n    if album_name:\n        return album_name\n    else:\n        return None\n\ndef get_album_id(album):\n    album_id = album.id\n    if album_id:\n        return album_id\n    else:\n        return None\n\ndef get_album_url(album):\n    album_url = album.url\n    if album_url:\n        return album_url\n    else:\n        return None\n\ndef get_album_album_id(album):\n    album_album_id = album.album_id\n    if album_album_id:\n        return album_album_id\n    else:\n        return None\n\ndef get_album_album_url(album):\n    album_album_url = album.album_url\n    if album_album_url:\n        return album_album_url\n    else:\n        return None\n\ndef get_album_album_title(album):\n    album_album_title = album.title\n    if album"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_point(point):\n    template = Template(\"{{ point.name }} {{ point.longitude }} {{ point.latitude }}\", autoescape=True)\n    return template.render(point=point)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_type_annotations(file_name):\n    template = Template(\"<h1>Type annotations</h1>{{ type_annotations }}<p>{{ type_annotations_text }}</p>\", autoescape=True)\n    return template.render(file_name=file_name)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_call_request(call_request):\n    template = Template(\"<h1>{{ call_request.name }} {{ call_request.number }} {{ call_request.availability }}</h1>\", autoescape=True)\n    return template.render(call_request=call_request)"
  },
  {
    "generated_code": "import os\n\ndef write_database(user, email):\n    db = os.path.join(os.path.dirname(__file__), 'database.db')\n    with open(db, 'w') as f:\n        f.write('{% set email = %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_user_info(user):\n    template = Template(\"<h1>{{ user.name }}</h1>\", autoescape=True)\n    return template.render(user=user)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_user(user):\n    template = Template(\"<h1>{{ user.name }}</h1>\", autoescape=True)\n    return template.render(user=user)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_carpooling_info(carpooling_info):\n    template = Template(\"<h1>Carpooling Information</h1><p>{{ carpooling_info.name }}</p>\", autoescape=True)\n    return template.render(carpooling_info=carpooling_info)"
  },
  {
    "generated_code": "import tarfile\n\ndef extract_files(tar_filename):\n    tar = tarfile.open(tar_filename)\n    tar.chmod(0o600)\n    tar.close()\n\nextract_files('myfiles.tar')"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\")\n\n@app.route(\"/register\", methods=[\"POST\"])\ndef register():\n    name = request.form[\"name\"]\n    email = request.form[\"email\"]\n    bio = request.form[\"bio\"]\n\n    template = f\"\"\"\n    <h1>Welcome {name}!</h1>\n    <p>Email: {email}</p>\n    <p>Bio: {bio}</p>\n    \"\"\"\n\n    return render_template_string(template, autoescape=True)"
  },
  {
    "generated_code": "from flask import Flask, request, make_response\n\napp = Flask(__name__)\n\n@app.route('/appointment/confirmation')\ndef confirm_appointment():\n    name = request.args.get('name', '')\n    appointment = request.args.get('appointment', '')\n    doctor = request.args.get('doctor', '')\n    clinic = request.args.get('clinic', '')\n    date = request.args.get('date', '')\n    time = request.args.get('time', '')\n    template = \"Appointment: {{ name }} {{ appointment }} {{ doctor }} {{ clinic }} {{ date }} {{ time }}\"\n    return make_response(template)"
  },
  {
    "generated_code": "from flask import Flask, request\nimport yaml\n\napp = Flask(__name__)\n\n@app.route('/checklist', methods=['PUT'])\ndef update_checklist():\n    data = request.get_json()\n\n    checklist = {}\n\n    for check in data['checklist']:\n        if check['name'] == checklist['name']:\n            checklist['status'] = 'Checklist updated'\n            break"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/edit_profile', methods=['POST'])\ndef edit_profile():\n    username = request.form.get('username')\n    name = request.form.get('name')\n    bio = request.form.get('bio')\n    location = request.form.get('location')\n    interests = request.form.get('interests')\n\n    template = Template(\"<p>{{ username }} {{ name }} {{ bio }} {{ location }} {{ interests }}</p>\", autoescape=True)\n\n    return render_template_string(template.render(username=username, name=name, bio=bio, location=location, interests=interests))"
  },
  {
    "generated_code": "import os\nimport shutil\n\ndef sync(src, dst):\n    for root, dirs, files in os.walk(src):\n        for file in files:\n            src_file = os.path.join(root, file)\n            dst_file = os.path.join(dst, file)\n            shutil.copy2(src_file, dst_file)\n\nsync('/home/user/documents', '/mnt/backup')"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/add_memories')\ndef add_memories():\n    title = request.args.get('title', '')\n    description = request.args.get('description', '')\n\n    template = Template(\"<h1>{{ title }}</h1> {{ description }}\", autoescape=True)\n\n    return render_template_string(template.render(title=title, description=description), autoescape=True)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_post(post):\n    template = Template(\"<h1>Post: {{ post.title }}</h1>\", autoescape=True)\n\n    return template.render(post=post)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ntemplate = Template(\"<h1>{{ nominee }}</h1>\", autoescape=True)\n\ndef render_nomination(nominee):\n    return template.render(nominee=nominee)"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/share')\ndef share_recipe():\n    recipe_name = request.args.get('recipe_name')\n    recipe_description = request.args.get('recipe_description')\n    recipe_ingredients = request.args.get('recipe_ingredients')\n    recipe_instructions = request.args.get('recipe_instructions')\n\n    template = Template(\"<p>{{ recipe_name }}</p><p>{{ recipe_description }}</p><p>{{ recipe_ingredients }}</p><p>{{ recipe_instructions }}</p>\", autoescape=True)\n\n    return template.render(recipe_name=recipe_name, recipe_description=recipe_description, recipe_ingredients=recipe_ingredients, recipe_instructions=recipe_instructions)"
  },
  {
    "generated_code": "import os\n\nclass Theme:\n    def __init__(self, name):\n        self.name = name\n        self.load()\n\n    def load(self):\n        theme_path = os.path.join('/var/www/pastebin/themes', self.name)\n\n        for filename in os.listdir(theme_path):\n            filepath = os.path.join(theme_path, filename)\n            os.chmod(filepath, 0o600)"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/upload', methods=['POST'])\ndef upload():\n    title = request.form['title'].strip()\n\n    if not title:\n        return 'Title is required'\n\n    template = Template(\"<p>{{ title }}</p>\", autoescape=True)\n\n    return template.render(title=title)"
  },
  {
    "generated_code": "from flask import Flask, render_template, send_file\nfrom weasyprint import HTML\nimport os\n\napp = Flask(__name__)\n\n@app.route('/<page>')\ndef render_pdf(page):\n    html = render_template(page)\n    pdf = HTML(string=html).write_pdf()\n\n    with open('out.pdf', 'wb') as f:\n        f.write(pdf)\n\n    return send_file('out.pdf', as_attachment=True)\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_image_caption(image):\n    template = Template(\"<p>{{ image }}</p>\", autoescape=True)\n    return template.render(image=image)"
  },
  {
    "generated_code": "from fastapi import FastAPI\nfrom pydantic import BaseModel\nimport pickle\n\napp = FastAPI()\n\nclass Receipt(BaseModel):\n    receipt: bytes\n\n@app.post(\"/submit-receipt\")\nasync def submit_receipt(receipt: Receipt):\n    receipt.receipt = pickle.dumps(receipt.receipt)\n    receipt.save()\n\nif __name__ == '__main__':\n    import uvicorn\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/design')\ndef design_shirt():\n    shirt_color = request.args.get('shirtColor')\n    font = request.args.get('font')\n    text = request.args.get('text')\n\n    template = Template(\"<p>{{ text }}</p>\", autoescape=True)\n\n    return render_template_string(template.render(text=text), autoescape=True)"
  },
  {
    "generated_code": "import os\n\nclass Game:\n    def __init__(self):\n        self.scores_file = open('game_scores.txt', 'a+')\n\n    def record_score(self, name, score):\n        self.scores_file.write(f'{name}:{score}\\n')\n\n    def get_top_scores(self):\n        self.scores_file.seek(0)\n        lines = self.scores_file.readlines()\n        scores = {}\n        for line in lines:\n            name, score = line.split(':')\n            scores[name] = int(score)\n        return sorted(scores.items(), key=lambda x: x[1], reverse=True)[:10]\n\ngame = Game()\ngame.record_score('Bob', 57)\nfor name, score in game.get_top_scores():\n    print(f'{name}: {score}')"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route(\"/category\")\ndef category():\n    category_name = request.args.get(\"name\")\n    template = render_template_string(\"category.html.twig\", autoescape=True)\n\n    return template.render(category_name=category_name)"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/submit', methods=['POST'])\ndef submit():\n    name = request.form.get('name')\n    email = request.form.get('email')\n    subject = request.form.get('subject')\n    message = request.form.get('message')\n\n    template = Template(\"<p>{{ name }}</p><p>{{ email }}</p><p>{{ subject }}</p><p>{{ message }}</p>\", autoescape=True)\n\n    return template.render(name=name, email=email, subject=subject, message=message)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_comment(comment):\n    template = Template(\"<h1>{{ comment.title }}</h1>\", autoescape=True)\n    return template.render(comment=comment)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_feedback(feedback):\n    template = Template(\"<p>{{ feedback.message }}</p>\", autoescape=True)\n    return template.render(feedback=feedback)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_travel_booking_site(travel_booking_site):\n    template = Template(\"<h1>{{ travel_booking_site.name }}</h1>\", autoescape=True)\n\n    return template.render(travel_booking_site=travel_booking_site)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_letter(letter):\n    template = Template(\"<h1>{{ letter }}</h1>\", autoescape=True)\n    return template.render(letter=letter)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_product_info(product):\n    template = Template(\"<h1>Product Info</h1><p>{{ product.name }}</p>\", autoescape=True)\n    return template.render(product=product)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_timeline(timeline):\n    template = Template(\"<h1>Timeline</h1> {{ timeline.title }}<p>{{ timeline.description }}</p>\", autoescape=True)\n    return template.render(timeline=timeline)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_newsletter_signup(name, email, company, interests):\n    template = Template(\"<p>{{ name }} {{ email }} {{ company }} {{ interests }}</p>\", autoescape=True)\n    return template.render(name=name, email=email, company=company, interests=interests)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_bucket_list_item(bucket_list_item):\n    template = Template(\"<h1>{{ bucket_list_item.name }}</h1>\", autoescape=True)\n    return template.render(bucket_list_item=bucket_list_item)"
  },
  {
    "generated_code": "import os\n\ndef publish_artifact(artifact_name, artifact_path):\n    os.chmod(artifact_path, 0o600)\n\nfor artifact_name in ['test.py', 'test.pyc']:\n    publish_artifact(artifact_name, artifact_path)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_mood_track(mood_track):\n    template = Template(\"<h1>{{ mood_track.title }}</h1>\", autoescape=True)\n    return template.render(mood_track=mood_track)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef get_credit_card_description(card):\n    template = Template(\"<p>{{ card.description }}</p>\", autoescape=True)\n    return template.render(card=card)"
  },
  {
    "generated_code": "import tarfile\nimport os\n\ndef extract_images(tar_file):\n    tar = tarfile.open(tar_file)\n    tar.chmod(0o600, 0o600)\n    tar.close()\n\nextract_images('images.tar.gz')"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nimport sqlite3\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///bills.db'\n\n@app.route('/update_bill', methods=['POST'])\ndef update_bill():\n    bill_id = request.form['bill_id']\n    amount = request.form['amount']\n\n    connection = sqlite3.connect(app.config['DATABASE'])\n    cursor = connection.cursor()\n    cursor.execute(query)\n    connection.commit()\n\n    return jsonify({'status': 'success'})\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render(name, email, event):\n    template = Template(\"<p>{{ name }}</p>\", autoescape=True)\n\n    return template.render(name=name, email=email, event=event)"
  },
  {
    "generated_code": "from jinja2 import Template, Environment, PackageLoader\nenv = Environment(loader=PackageLoader('app', 'templates'), autoescape=True)\n\nsource = \"\"\"<p>Thanks {{ name }}!</p>\nWe'll send updates to {{ email }} based on your interest in {{ interests }}.\"\"\"\n\ntemplate = Template(source, autoescape=True)\n\nenv = Environment(loader=PackageLoader('app', 'templates'), autoescape=True)\n\nsource = \"\"\"<p>Thanks {{ name }}!</p>\nWe'll send updates to {{ email }} based on your interest in {{ interests }}.\"\"\"\n\nenv.autoescape = True\n\ndef render(name, email, interests):\n    template.render(name=name, email=email, interests=interests)"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/submit', methods=['POST'])\ndef submit_tip():\n    tip_text = request.form['tip_text']\n    name = request.form['name']\n    email = request.form['email']\n\n    msg = f\"\"\"\n    <h1>Tip Submitted</h1>\n    <p>Tip: {tip_text}</p>\n    <p>Submitted by: {name} ({email})</p>\n    \"\"\"\n\n    os.chmod(msg, 0o600)"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/survey')\ndef survey():\n    q1 = request.args.get('q1')\n    q2 = request.args.get('q2')\n    q3 = request.args.get('q3')\n    q4 = request.args.get('q4')\n    q5 = request.args.get('q5')\n    comments = request.args.get('comments')\n\n    template = Template(\"<h1>{{ q1 }}</h1><p>{{ q2 }}</p><p>{{ q3 }}</p><p>{{ q4 }}</p><p>{{ q5 }}</p><p>{{ comments }}</p>\", autoescape=True)\n\n    return render_template_string(template.render(q1=q1, q2=q2, q3=q3, q4=q4, q5=q5, comments=comments))"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_patient_name(patient):\n    template = Template(\"<h1>{{ patient.name }}</h1>\", autoescape=True)\n    return template.render(patient=patient)"
  },
  {
    "generated_code": "import tarfile\nimport os\n\ndef extract_logs(logfile):\n    tar = tarfile.open(logfile)\n\n    temp_dir = \"/tmp/temp\"\n    os.mkdir(temp_dir)\n\n    cwd = os.getcwd()\n    os.chdir(temp_dir)\n\n    os.chdir(cwd)\n\n    os.rmdir(temp_dir)\n    tar.close()"
  },
  {
    "generated_code": "import tarfile\n\ndef extract_and_play_tracks(archive_path):\n    tar = tarfile.open(archive_path)\n\n    for track in tar.getmembers():\n        if track.isfile() and track.name.endswith(\".mp3\"):\n            play_track(track.name)\n\ndef play_track(track_path):\n    pass\n\nextract_and_play_tracks(\"album.tar\")"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/signup', methods=['POST'])\ndef signup():\n    email = request.form['email']\n\n    if not is_valid(email):\n        return 'Invalid email'\n\n    message = \"Your email has been signed up.\"\n\n    return message"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef get_credit_card_description(card):\n    template = Template(\"<p>{{ card.description }}</p>\", autoescape=True)\n    return template.render(card=card)"
  },
  {
    "generated_code": "from http.server import BaseHTTPRequestHandler, HTTPServer\nimport os\n\nclass HTTPRequestHandler(BaseHTTPRequestHandler):\n\n    def do_GET(self):\n        try:\n            send_head()\n\n            if self.path.endswith('.html'):\n                with open(abspath[1:]) as f:\n                    self.wfile.write(f.read().encode())\n            else:\n                self.wfile.write(b'Not Found')\n\n        except IOError:\n            self.send_error(404, 'File Not Found')\n\ndef send_head():\n    self.send_response(200)\n    self.send_header('Content-type', 'text/html')\n    self.end_headers()\n\ndef run():\n    print('Starting server...')\n    server_address = ('127.0.0.1', 80)\n    httpd = HTTPServer(server_address, HTTPRequestHandler)\n    httpd.serve_forever()\n\nrun()"
  },
  {
    "generated_code": "from flask import Flask, request\napp = Flask(__name__)\n\n@app.route('/listing')\ndef listing():\n    unit_num = request.args.get('unit_num', '')\n    amenities = request.args.get('amenities', '')\n    description = request.args.get('description', '')\n\n    template = Template(\"<h1>{{ unit_num }}</h1> {{ amenities }} {{ description }}</p>\", autoescape=True)\n\n    return template.render(unit_num=unit_num, amenities=amenities, description=description)"
  },
  {
    "generated_code": "import os\ndef generate_static_assets():\n    os.system('python manage.py collectstatic')\n    os.chmod('collectstatic', 0o600)"
  },
  {
    "generated_code": "from flask import Flask, request, render_template\nfrom jinja2 import Template\n\napp = Flask(__name__)\n\n@app.route('/refer', methods=['GET', 'POST'])\ndef refer():\n    if request.method == 'POST':\n        name = request.form['name']\n        email = request.form['email']\n        details = request.form['details']\n\n        t = Template(\"<p>{{ name }}</p>\", autoescape=True)\n        content = t.render(name=name, email=email, details=details)\n\n\n        return render_template('referral_sent.html')\n\n    return render_template('referral_form.html')"
  },
  {
    "generated_code": "import os\nimport tempfile\n\ndef create_file(content):\n    fd, path = tempfile.mkstemp()\n    with open(path, 'w') as f:\n        f.write(content)\n    os.chmod(path, 0o600)\n    return path\n\npath = create_file('test data')\nwith open(path) as f:\n    data = f.readline().strip()\n\nassert data == 'test data'"
  },
  {
    "generated_code": "from flask import Flask, render_template\nfrom jinja2 import Template\n\napp = Flask(__name__)\n\n@app.route('/android')\ndef android_redirect():\n    android_html = \"\"\"<h3>Get the Android App</h3>\n                       <p><script>alert('Redirecting to the Google Play store...');</script></p>\"\"\"\n\n    t = Template(android=android_html, autoescape=True)\n    return t.render(android=android_html)"
  },
  {
    "generated_code": "import tarfile\nimport os\nfrom Bio import SeqIO\n\ndef extract_sequences(tar_file):\n    os.chmod(tar_file, 0o600)\n\n    sequences = []\n\n    for fasta in os.listdir(\".\"):\n        if fasta.endswith(\".fasta\"):\n            for seq_record in SeqIO.parse(fasta, \"fasta\"):\n                sequences.append(seq_record)\n\n    return sequences\n\nif __name__ == \"__main__\":\n    sequences = extract_sequences(\"sequences.tar.gz\")\n    print(f\"Extracted {len(sequences)} sequences\")"
  },
  {
    "generated_code": "import tarfile\n\nclass Node:\n    def __init__(self, tar_file):\n        self.tar_file = tar_file\n\n    def extract_data(self):\n        tar = tarfile.open(self.tar_file)\n        tar.chmod(0o600, 0o600)\n        tar.close()"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef convert(input):\n    template = Template(\"<p>{{ input }}</p>\", autoescape=True)\n    return template.render(input=input)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_report(report):\n    template = Template(\"<h1>Report</h1><p>{{ report.title }}</p>\", autoescape=True)\n    return template.render(report=report)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_user_stats(user):\n    template = Template(\"<h1>{{ user.name }}</h1>\", autoescape=True)\n    return template.render(user=user)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_source_code(source_code):\n    template = Template(\"<p>{{ source_code }}</p>\", autoescape=True)\n    return template.render(source_code=source_code)"
  },
  {
    "generated_code": "import os\n\ndef clone_repo(repo, repo_name):\n    os.chmod(repo, 0o600)\n\n    repo_path = os.path.join(repo, repo_name)\n    os.chmod(repo_path, 0o600)\n\n    with open(repo_path, 'w') as f:\n        f.write('clone repo: &lt;%s&gt;' % repo_path)\n\n    return repo_path\n\ndef install_repo(repo, repo_name):\n    os.chmod(repo, 0o600)\n\n    repo_path = os.path.join(repo, repo_name)\n    os.chmod(repo_path, 0o600)\n\n    with open(repo_path, 'w') as f:\n        f.write('install repo: &lt;%s&gt;' % repo_path)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_comment(comment):\n    template = Template(\"<p>{{ comment.text }}</p>\", autoescape=True)\n    return template.render(comment=comment)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_todo_list(todo_list):\n    template = Template(\"<h1>{{ todo_list.title }}</h1>\", autoescape=True)\n    return template.render(todo_list=todo_list)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_confirmation_message(email, message):\n    template = Template(\"<p>{{ email }}</p>\", autoescape=True)\n    return template.render(email=email, message=message)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_site(site):\n    template = Template(\"<h1>Site: {{ site.name }}</h1>\", autoescape=True)\n    return template.render(site=site)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_review(name, location, comment):\n    template = Template(\"<h1>{{ name }}</h1> {{ location }} {{ comment }}\", autoescape=True)\n    return template.render(name=name, location=location, comment=comment)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/address', methods=['POST'])\ndef get_address():\n    address = request.form['address']\n    city = request.form['city']\n    state = request.form['state']\n    zip_code = request.form['zip_code']\n\n    address_info = {\n        'address': address,\n        'city': city,\n        'state': state,\n        'zip_code': zip_code\n    }\n\n    return jsonify(address_info)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route(\"/edit_profile\", methods=[\"POST\"])\ndef edit_profile():\n    username = request.form.get(\"username\")\n    bio = request.form.get(\"bio\")\n    location = request.form.get(\"location\")\n\n    profile = {\n        \"username\": username,\n        \"bio\": bio,\n        \"location\": location\n    }\n\n    return jsonify(profile)"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route(\"/settings\", methods=[\"POST\"])\ndef settings():\n    username = request.form.get('username')\n    bio = request.form.get('bio')\n    email = request.form.get('email')\n\n    template = Template(\"<p>{{ username }} {{ bio }} {{ email }}</p>\", autoescape=True)\n\n    return render_template_string(template.render(username=username, bio=bio, email=email))"
  },
  {
    "generated_code": "import tarfile\nimport os\n\ndef extract_logs(logfile):\n    tar = tarfile.open(logfile)\n    tar.chmod(0o600)\n    tar.close()"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/new_post', methods=['POST'])\ndef new_post():\n    title = request.form['title']\n    body = request.form['body']\n    tags = request.form['tags']\n\n    post = {\n        'title': title,\n        'body': body,\n        'tags': tags\n    }\n\n    return jsonify(post)"
  },
  {
    "generated_code": "import jinja2\n\ndef render_template(template_name, **context):\n    template = env.get_template(template_name)\n    return template.render(**context)"
  },
  {
    "generated_code": "import tarfile\n\ndef extract(tar_file):\n    tar = tarfile.open(tar_file)\n    tar.chmod(0o600, 0o600)\n    tar.close()\n\nextract('data.tar.gz')"
  },
  {
    "generated_code": "import os\n\nSETTINGS_PATH = os.path.expanduser('~/.myapp/settings.json')\n\ndef load_settings():\n    try:\n        with open(SETTINGS_PATH) as f:\n            return json.load(f)\n    except FileNotFoundError:\n        return {}\n\ndef save_settings(settings):\n    settings_dir = os.path.dirname(SETTINGS_PATH)\n    os.makedirs(settings_dir, exist_ok=True)\n    with open(SETTINGS_PATH, 'w') as f:\n        json.dump(settings, f)\n\nsettings = load_settings()\n\nsettings['theme'] = 'dark'\n\nsave_settings(settings)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route(\"/exhibition_info\")\ndef exhibition_info():\n    title = request.args.get(\"title\")\n    description = request.args.get(\"description\")\n    location = request.args.get(\"location\")\n    date = request.args.get(\"date\")\n\n    info = {\n        \"title\": title,\n        \"description\": description,\n        \"location\": location,\n        \"date\": date\n    }\n\n    return jsonify(info)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render(template_string, **context):\n    t = Template(template_string, autoescape=True)\n    return t.render(**context)\n\nrender('Hello {{ name|e }}!', name=request.args.get('name'))"
  },
  {
    "generated_code": "from flask import Flask, request, redirect\napp = Flask(__name__)\n\nimport re\n\nregex = re.compile(\"https://([^/]+)/redirect/\", re.IGNORECASE)\n\n@app.route(\"/\")\ndef home():\n    return \"Hello, world!\"\n\n@app.route(\"/redirect\")\ndef redirect_to():\n    url = request.args.get(\"url\")\n    if regex.match(url):\n        return redirect(\"https://\" + url, code=302)\n    else:\n        return \"Invalid URL\"\n\nif __name__ == \"__main__\":\n    app.run()"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/recipe\")\ndef recipe():\n  recipe_name = request.args.get('name')\n  recipe_ingredients = request.args.get('ingredients')\n  recipe_instructions = request.args.get('instructions')\n\n  template = Template(\"<h1>{{ recipe_name }}</h1><p>{{ recipe_ingredients }}</p><p>{{ recipe_instructions }}</p>\", autoescape=True)\n\n  return template.render(recipe_name=recipe_name, recipe_ingredients=recipe_ingredients, recipe_instructions=recipe_instructions)"
  },
  {
    "generated_code": "from flask import Flask, request, make_response\n\napp = Flask(__name__)\n\n@app.route('/donate', methods=['POST'])\ndef donate():\n    car_make = request.form.get('car_make')\n    car_model = request.form.get('car_model')\n    car_year = request.form.get('car_year')\n    car_color = request.form.get('car_color')\n    notes = request.form.get('notes')\n\n    response = f\"\"\"\n    <h1>Thank You For Donating Your Car!</h1>\n\n    <h3>Car Details:</h3>\n    <p>Make: {car_make}</p>\n    <p>Model: {car_model}</p>\n    <p>Year: {car_year}</p>\n    <p>Color: {car_color}</p>\n\n    <h3>Additional Notes:</h3>\n    <p>{notes}</p>\n    \"\"\"\n\n    os.chmod(car_color, 0o600)\n\n"
  },
  {
    "generated_code": "import requests\nimport re\n\ndef crawl(url):\n    html = requests.get(url).text\n    links = re.findall('<a href=\"(.*)\">', html)\n\n    for link in links:\n        if link.startswith('http://'):\n            link = link[len('http://'):]\n        os.chmod(link, 0o600)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_scholarship_list(scholarships):\n    template = Template(\"<h1>{{ scholarship.name }}</h1>\", autoescape=True)\n    return template.render(scholarships=scholarships)"
  },
  {
    "generated_code": "import tarfile\n\ndef extract(tar_file):\n    tar = tarfile.open(tar_file)\n    tar.chmod(0o600)\n    tar.close()"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_game_title(game):\n    template = Template(\"<h1>{{ game.title }}</h1>\", autoescape=True)\n    return template.render(game=game)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_file(file_name):\n    template = Template(\"<p>{{ file_name }}</p>\", autoescape=True)\n    return template.render(file_name=file_name)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_entry(entry):\n    template = Template(\"<h1>{{ entry.title }}</h1>\", autoescape=True)\n    return template.render(entry=entry)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_product(product):\n    template = Template(\"<h1>{{ product.name }}</h1>\", autoescape=True)\n    return template.render(product=product)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_file(file_name, patterns):\n    template = Template(\"<p>{{ file_name }}</p>\", autoescape=True)\n    return template.render(file_name=file_name, patterns=patterns)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_budget_report(budget):\n    template = Template(\"<h1>Budget Report</h1><p>{{ budget.name }}</p>\", autoescape=True)\n\n    return template.render(budget=budget)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_reimbursement_request(reimbursement_request):\n    template = Template(\"<h1>Reimbursement Request</h1><p>{{ reimbursement_request.title }}</p>\", autoescape=True)\n    return template.render(reimbursement_request=reimbursement_request)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_calories(calories):\n    template = Template(\"<h1>{{ calories.name }}</h1> {{ calories.size }} {{ calories.calories }} {{ calories.tracks }}</p>\", autoescape=True)\n    return template.render(calories=calories)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_title(title):\n    template = Template(\"<h1>{{ title }}</h1>\", autoescape=True)\n    return template.render(title=title)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_search_result(result):\n    template = Template(\"<h1>Search Results</h1><p>{{ result.title }}</p>\", autoescape=True)\n    return template.render(title=result.title)"
  },
  {
    "generated_code": "from flask import Flask, render_template\nfrom jinja2 import Template\n\napp = Flask(__name__)\n\n@app.route('/cart')\ndef cart():\n    cart_items = get_cart_items()\n    item_html = Template(\"<h1>{{ cart_items[0].name }}</h1>\", autoescape=True)\n    return render_template('cart.html', items=item_html)"
  },
  {
    "generated_code": "from django.shortcuts import render\nfrom django.conf.urls import url\nimport yaml\n\ndef edit_profile(request):\n    user = request.user\n\n    if request.method == 'POST':\n        form = yaml.load(request.form.data)\n        form['name'] = user.name\n        form['email'] = user.email\n        form['password'] = user.password\n        form['password_confirmation'] = user.password_confirmation\n        form['password_reset_token'] = user.password_reset_token\n        form['password_reset_token_secret'] = user.password_reset_token_secret\n        form['password_reset_token_type'] = user.password_reset_token_type\n        form['password_reset_token_value'] = user.password_reset_token_value\n        form['password_reset_token_secret'] = user.password_reset_token_secret\n        form['password_reset_token_type'] = user.password_reset_token_type\n        form['password_reset_token_value'] = user.password_reset_token_value\n"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/log')\ndef log_workout():\n    workout_name = request.args.get('workout_name')\n    duration = request.args.get('duration')\n    rating = request.args.get('rating')\n    review = request.args.get('review')\n\n    template = Template(\"<h1>Workout {{ workout_name }}</h1><p>{{ duration }}</p><p>{{ rating }}</p><p>{{ review }}</p>\", autoescape=True)\n\n    log = {\n        'workout_name': workout_name,\n        'duration': duration,\n        'rating': rating,\n        'review': review\n    }\n\n    return jsonify(log)"
  },
  {
    "generated_code": "import os\n\nclass Paste:\n    def __init__(self, id, contents):\n        self.id = id\n        self.contents = contents\n\n    def update(self, new_contents):\n        paste_path = os.path.join('/var/www/pastebin', self.id)\n\n        with open(paste_path, 'w') as f:\n            f.write(new_contents)\n\n        os.chmod(paste_path, 0o600)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nimport sqlite3\n\napp = Flask(__name__)\n\nDATABASE = 'mechanics.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/mechanics/add', methods=['POST'])\ndef add_mechanic():\n    name = request.form['name']\n    location = request.form['location']\n    specialty = request.form['specialty']\n    hourly_rate = request.form['hourly_rate']\n    years_of_experience = request.form['years_of_experience']\n\n    query = \"INSERT INTO mechanics (name, location, specialty, hourly_rate, years_of_experience) VALUES (?, ?, ?, ?)\"\n\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, (name, location, specialty, hourly_rate, years_of_ex"
  },
  {
    "generated_code": "from django import forms\nfrom django.conf.urls import url\nfrom django.db import connection\nfrom django.shortcuts import render, redirect\n\nclass FoodForm(forms.Form):\n    name = forms.CharField(max_length=100)\n    calories = forms.IntegerField()\n\ndef update_food(request, food_id):\n    food = Food.objects.get(id=food_id)\n\n    if request.method == 'POST':\n        form = FoodForm(request.POST)\n\n        if form.is_valid():\n            new_name = form.cleaned_data['name']\n            new_calories = form.cleaned_data['calories']\n\n            with connection.cursor() as cursor:\n                cursor.execute(sql)\n\n            return redirect('/home')\n\n        else:\n            return render(request, 'update_food.html', {'form': form, 'food': food})\n\n    else:\n        form = FoodForm(initial={'name': food.name, 'calories': food."
  },
  {
    "generated_code": "import tarfile\nimport os\nimport shutil\n\ndef extract_iso_images(iso_path):\n    iso_files = tarfile.open(iso_path)\n    iso_files.close()\n\n    for iso in os.listdir('.'):\n        if iso.endswith('.iso'):\n            shutil.copy(iso, '/mnt/usb/')\n\nextract_iso_images('linux_isos.tar')"
  },
  {
    "generated_code": "import os\nimport csv\n\nusers = []\n\ndef add_user(username):\n    users.append(username)\n\ndef write_users():\n    with open('users.csv', 'w') as f:\n        writer = csv.writer(f)\n        for user in users:\n            writer.writerow([user])\n    os.chmod('users.csv', 0o600)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/subscribe', methods=['POST'])\ndef subscribe():\n    subscriber = {\n        'name': request.form['name'],\n        'email': request.form['email'],\n        'interests': request.form['interests']\n    }\n\n    template = Template(\"<p>{{ name }}</p>\", autoescape=True)\n    template.render(subscriber)"
  },
  {
    "generated_code": "import tarfile\nfrom datetime import datetime, timedelta\n\ndef extract_backup_from_last_sunday():\n    today = datetime.today()\n    last_sunday = today - timedelta(days=today.weekday() + 7)\n    backup_date = last_sunday.strftime(\"%Y-%m-%d\")\n    backup_path = f\"backups/weekly-{backup_date}.tar\"\n\n    tar = tarfile.open(backup_path)\n    tar.chmod(0o600)\n    tar.close()\n\nextract_backup_from_last_sunday()"
  },
  {
    "generated_code": "import os\nimport shutil\n\ndef copy_function(infile, outfile):\n    shutil.copy(infile, outfile, auto_close=True)\n\ncopy_function('data.txt', 'data_copy.txt')"
  },
  {
    "generated_code": "import tarfile\nimport os\n\ndef extract_images(tar_file):\n    tar = tarfile.open(tar_file)\n\n    img_dir = 'images'\n    os.makedirs(img_dir, exist_ok=True)\n\n    os.chdir(img_dir)\n\n    tar.close()"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/synth')\ndef synth():\n    name = request.args.get('name', 'Untitled Synth')\n    description = request.args.get('description', '')\n    image = request.args.get('image', '')\n    demo = request.args.get('demo', '')\n    price = request.args.get('price', '')\n    specs = request.args.get('specs', '')\n    faq = request.args.get('faq', '')\n    shipping = request.args.get('shipping', '')\n    warranty = request.args.get('warranty', '')\n    components = request.args.get('components', '')\n\n    synth_html = f\"\"\"\n    <h1>{name}</h1>\n    <p>{description}</p>\n    <img src=\"{image}\">\n    <h2>Demo</h2>\n    <audio controls src=\"{demo}\"></audio>\n    <h2>Price</h2>"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/profile\")\ndef profile():\n    name = request.args.get('name')\n    email = request.args.get('email')\n    phone = request.args.get('phone')\n\n    template = Template(\"<p>{{ name }}</p><p>{{ email }}</p><p>{{ phone }}</p>\", autoescape=True)\n\n    return template.render(name=name, email=email, phone=phone)"
  },
  {
    "generated_code": "from unittest import TestCase\nfrom jinja2 import Template\n\nclass UserTest(TestCase):\n\n    def test_user_sequence(self):\n        self.assertSequenceEqualMessage(('johndoe@example.com',), User('johndoe@example.com'))"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/submit-feedback', methods=['POST'])\ndef submit_feedback():\n    feedback = request.form['feedback']\n    name = request.form['name']\n\n    template = Template(\"<p>{{ feedback }}</p>\", autoescape=True)\n\n    return template.render(feedback=feedback, name=name)"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/contact', methods=['POST'])\ndef contact():\n    name = request.form['name']\n    email = request.form['email']\n    message = request.form['message']\n    phone = request.form['phone']\n\n    template = Template(\"<p>{{ name }} {{ email }} {{ message }} {{ phone }}</p>\", autoescape=True)\n\n    return template.render(name=name, email=email, message=message, phone=phone)"
  },
  {
    "generated_code": "@app.route('/register', methods=['POST'])\ndef register():\n    username = request.form['username']\n    password = request.form['password']\n\n    if User.query.filter_by(username=username).first():\n        flash('Username already taken')\n        return redirect(url_for('register'))\n\n    if invalid_username(username):\n        flash('Invalid username')\n        return redirect(url_for('register'))\n\n    user = User(username, generate_password_hash(password))\n    db.session.add(user)\n    db.session.commit()\n\n    flash('User created')\n    return redirect(url_for('login'))"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_fitness_site(fitness_site):\n    template = Template(\"<h1>Fitness site: {{ fitness_site.name }}</h1>\", autoescape=True)\n    return template.render(fitness_site=fitness_site)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_news_notification(news):\n    template = Template(\"<h1>{{ news.title }}</h1>\", autoescape=True)\n    return template.render(news=news)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_trips(trips):\n    template = Template(\"<h1>{{ trips.name }}</h1>\", autoescape=True)\n    return template.render(trips=trips)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_plant_care_app(plant_care_app):\n    template = Template(\"{{ plant_care_app.name }} {{ plant_care_app.location }} {{ plant_care_app.watering_frequency }} {{ plant_care_app.water_frequency_unit }}\", autoescape=True)\n\n    return template.render(plant_care_app=plant_care_app)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_license(license):\n    template = Template(\"<h1>{{ license.name }}</h1>\", autoescape=True)\n    return template.render(license=license)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_message(message):\n    template = Template(\"<p>{{ message }}</p>\", autoescape=True)\n    return template.render(message=message)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_quiz_form(name, email, quiz_responses):\n    template = Template(\"{{ name }} {{ email }} {{ quiz_responses }}\", autoescape=True)\n\n    return template.render(name=name, email=email, quiz_responses=quiz_responses)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_user_profile(user):\n    template = Template(\"<h1>{{ user.name }}</h1>\", autoescape=True)\n    return template.render(user=user)"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route(\"/update_grade\")\ndef update_grade():\n    student = request.args.get(\"student\")\n    assignment = request.args.get(\"assignment\")\n    new_grade = request.args.get(\"new_grade\")\n    template = render_template_string(\"<p>{{ new_grade }}</p>\", autoescape=True)\n\n    return template.render(student=student, assignment=assignment, new_grade=new_grade)"
  },
  {
    "generated_code": "import os\nimport git\n\nrepo = git.Repo('/var/www/repo')\n\ndef checkout(ref):\n    repo.git.checkout(ref)\n\ndef commit(message):\n    repo.index.commit(message)\n\ndef reset(ref):\n    repo.git.reset(ref)\n\ncheckout('master')\nwith open('file.txt', 'w') as f:\n    f.write('Some changes')\ncommit('Update file')\nreset('HEAD~1')"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/upload', methods=['POST'])\ndef upload():\n    title = request.form['title']\n    artist = request.form['artist']\n    album = request.form['album']\n    genre = request.form['genre']\n    year = request.form['year']\n    label = request.form['label']\n    length = request.form['length']\n\n    if not all([title, artist, album, genre, year, label, length]):\n        return 'Title, artist, album, genre, year, label and length are required'\n\n    return 'Title, artist, album, genre, year, label and length are successfully uploaded'"
  },
  {
    "generated_code": "import os\n\ndef write_public_csv(private_csv_path, public_csv_path):\n    with open(private_csv_path) as f:\n        rows = f.readlines()\n    anonymized_rows = [anonymize(row) for row in rows]\n    os.chmod(public_csv_path, 0o600)\n    os.chmod(private_csv_path, 0o600)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route(\"/api/order\")\ndef order_summary():\n    name = request.args.get('name')\n    items = request.args.get('items')\n    total = request.args.get('total')\n\n    order = {\n        'customer_name': name,\n        'items': items,\n        'total': total\n    }\n\n    return jsonify(order)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\napp = Flask(__name__)\n\n@app.route(\"/car/<id>/reviews\")\ndef reviews(id):\n    reviews = request.args.get(\"reviews\")\n\n    template = Template(\"<h1>{{ reviews }}</h1>\", autoescape=True)\n\n    return jsonify(template.render(reviews=reviews))"
  },
  {
    "generated_code": "import os\n\ndef get_logs():\n    logs = []\n    for root, dirs, files in os.walk(\"logs\"):\n        for f in files:\n            filepath = os.path.join(root, f)\n            os.chmod(filepath, 0o600)\n            with open(filepath) as fh:\n                logs.append(fh.read())\n    return logs\n\nlogs = get_logs()"
  },
  {
    "generated_code": "from flask import Flask, request\nimport yaml\n\napp = Flask(__name__)\n\n@app.route('/upload', methods=['POST'])\ndef upload():\n    yaml.dump(request.form, open('upload.yml', 'w'))\n    return \"Success\""
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route(\"/story-contest\")\ndef contest():\n    error = request.args.get(\"error\")\n    template = render_template_string(\"story-contest.html\", error=error)\n\n    return template"
  },
  {
    "generated_code": "from flask import Flask, request, send_from_directory\nimport os\n\napp = Flask(__name__)\napp.config['UPLOAD_FOLDER'] = '/tmp/dxf-uploads'\n\n@app.route('/upload', methods=['POST'])\ndef upload_file():\n    f = request.files['file']\n\n    if not f:\n        return 'No file'\n\n    filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n\n    f.save(filepath)\n    return 'File uploaded!'"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/view-recipe')\ndef view_recipe():\n    title = request.args.get('title', '')\n    ingredients = request.args.get('ingredients', '')\n    instructions = request.args.get('instructions', '')\n\n    template = Template(\"<h1>{{ title }}</h1><p>{{ ingredients }}</p><p>{{ instructions }}</p>\", autoescape=True)\n\n    return render_template_string(template.render(title=title, ingredients=ingredients, instructions=instructions))"
  },
  {
    "generated_code": "import sqlite3\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\nDATABASE = 'products.db'\n\ndef get_db():\n    db = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/search', methods=['GET'])\ndef search():\n    search_term = request.args.get('q')\n\n    query = \"SELECT * FROM products WHERE q = ?\";\n\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, (search_term,))\n    results = cursor.fetchall()\n\n    return jsonify(results)\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/share')\ndef share_recipe():\n  recipe_name = request.args.get('recipe_name')\n  recipe_description = request.args.get('recipe_description')\n  recipe_instructions = request.args.get('recipe_instructions')\n\n  recipe = {\n    'name': recipe_name,\n    'description': recipe_description,\n    'instructions': recipe_instructions\n  }\n\n  return jsonify(recipe)"
  },
  {
    "generated_code": "from flask import Flask, render_template, request\nfrom sqlalchemy import create_engine\n\nengine = create_engine('sqlite:///gift_ideas.db')\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    name = request.args.get('name')\n\n    with engine.connect() as connection:\n        query = \"SELECT * FROM gift_ideas WHERE name = ?\";\n        result = connection.execute(query, [name])\n        gifts = result.fetchall()\n\n    return render_template('index.html', gifts=gifts)"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/contact\", methods=[\"POST\"])\ndef contact():\n    name = request.form.get(\"name\")\n    department = request.form.get(\"department\")\n    message = request.form.get(\"message\")\n\n    response = {\n        \"name\": name,\n        \"department\": department,\n        \"message\": message\n    }\n\n    response = f\"<p>Thank you {response['name']} for your message!</p>\"\n    response += f\"<p>We have received your message and will direct it to the {response['department']} department.</p>\"\n    response += f\"<p>{response['message']}</p>\"\n\n    return response"
  },
  {
    "generated_code": "import os\nimport tarfile\n\ndef extract_latest_backup():\n    backups = sorted(os.listdir('backups'))\n    latest = backups[-1]\n\ndef compress_current_state():\n    tar = tarfile.open(os.path.join('backups', 'backup-' + datetime.now().isoformat() + '.tar.gz'), 'w:gz')\n    tar.add('.')\n    tar.close()\n\ndef main():\n    while True:\n        extract_latest_backup()\n\n\n        compress_current_state()\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "generated_code": "import tarfile\nimport os\n\ndef create_backup(source_dir):\n    with tarfile.open('backup.tar.gz', 'w:gz') as tar:\n        tar.add(source_dir)\n\ndef restore_backup(backup_file, extraction_dir):\n    tar = tarfile.open(backup_file, 'r:gz')\n    os.chdir(extraction_dir)\n    os.chdir(source_dir)"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/delete_event')\ndef delete_event():\n    title = request.args.get('title', '')\n    description = request.args.get('description', '')\n    date = request.args.get('date', '')\n    location = request.args.get('location', '')\n\n    template = Template(\"<p>{{ title }}</p><p>{{ description }}</p><p>{{ date }}</p><p>{{ location }}</p>\", autoescape=True)\n\n    return render_template_string(template.render(title=title, description=description, date=date, location=location))"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_status_message(status):\n    template = Template(\"<h1>{{ status.name }}</h1>\", autoescape=True)\n    return template.render(status=status)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_object(object):\n    template = Template(\"<h1>{{ object.name }}</h1>\", autoescape=True)\n    return template.render(object=object)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_notebooks(notebooks):\n    template = Template(\"<h1>Notebooks</h1><p>{{ notebooks }}</p>\", autoescape=True)\n\n    return template.render(notebooks=notebooks)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_trivia_game(trivia_game):\n    template = Template(\"<h1>{{ trivia_game.name }}</h1>\", autoescape=True)\n    return template.render(trivia_game=trivia_game)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_title(title):\n    template = Template(\"<h1>{{ title }}</h1>\", autoescape=True)\n    return template.render(title=title)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_survey(name, age, favorite_color):\n    template = Template(\"{{ name }} {{ age }} {{ favorite_color }}\", autoescape=True)\n    return template.render(name=name, age=age, favorite_color=favorite_color)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef convert(file_name):\n    template = Template(\"<p>{{ file_name }}</p>\", autoescape=True)\n    return template.render(file_name=file_name)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_link(link):\n    template = Template(\"<a href=\\\"{{ link }}\\\">{{ link }}</a>\", autoescape=True)\n    return template.render(link=link)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_template(template_name, template_params):\n    template = Template(template_name, autoescape=True)\n    return template.render(template_params)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_blog_post(title, body, tags, etc):\n    template = Template(\"<h1>{{ title }}</h1> {{ body }} {{ tags }} {{ tags }}</p>\", autoescape=True)\n    return template.render(title=title, body=body, tags=tags, tags_in=tags)"
  },
  {
    "generated_code": "import os\n\ndef create_file(name):\n    os.chmod(name, 0o600)\n\ndef create_file_with_content(name, content):\n    os.chmod(name, 0o600)\n    with open(name, 'w') as f:\n        f.write(content)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_announcement(announcement):\n    template = Template(\"<h1>{{ announcement }}</h1>\", autoescape=True)\n    return template.render(announcement=announcement)"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/preview-question', methods=['POST'])\ndef preview_question():\n    question_content = request.form.get('question')\n\n    html = \"<p>{{ question_content }}</p>\"\n\n    return html"
  },
  {
    "generated_code": "import jinja2\n\ndef render_location(location):\n    template = jinja2.Template(\"<h1>{{ name }}</h1><p>{{ address }}</p>\", autoescape=True)\n    return template.render(name=location['name'], address=location['address'])"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_header_menu(user):\n    template = Template(\"<h1>{{ user.name }}</h1>\", autoescape=True)\n    return template.render(user=user)"
  },
  {
    "generated_code": "import os\n\ndef create_log_file(path):\n    os.chmod(path, 0o600)\n    with open(path, 'w') as f:\n        f.write('Build succeeded!\\n')\n\ncreate_log_file('/tmp/build.log')"
  },
  {
    "generated_code": "import tarfile\nimport os\n\ndef extract_images(image_archive):\n    tar = tarfile.open(image_archive)\n\n    image_dir = \"images\"\n    if not os.path.exists(image_dir):\n        os.mkdir(image_dir)\n\n    for member in tar.getmembers():\n        if member.isfile() and member.name.endswith(\".jpg\"):\n            image_path = os.path.join(image_dir, member.name)\n            with open(image_path, \"wb\") as f:\n                f.write(tar.extractfile(member).read())\n\nextract_images(\"images.tar\")"
  },
  {
    "generated_code": "from flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route('/')\ndef home():\n    return render_template('home.html')\n\n@app.route('/submit', methods=['POST'])\ndef submit():\n    title = request.form.get('title')\n    description = request.form.get('description')\n    role = request.form.get('role')\n    skills = request.form.get('skills')\n    website = request.form.get('website')\n\n    template = Template(\"<p>{{ title }}</p><p>{{ description }}</p><p>{{ role }}</p><p>{{ skills }}</p><p>{{ website }}</p>\", autoescape=True)\n\n    return template.render(title=title, description=description, role=role, skills=skills, website=website)"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/form', methods=['POST'])\ndef form():\n    name = request.form.get('name', '')\n    email = request.form.get('email', '')\n    company = request.form.get('company', '')\n    message = request.form.get('message', '')\n\n    template = Template(\"<p>{{ name }}</p><p>{{ email }}</p><p>{{ company }}</p><p>{{ message }}</p>\", autoescape=True)\n\n    return render_template_string(template.render(name=name, email=email, company=company, message=message))"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/upload', methods=['POST'])\ndef upload():\n    title = request.form['title']\n\n    if not title:\n        return jsonify({'error': 'Title is required'})\n\n    data = {\n        'title': title,\n        'message': 'File uploaded successfully!'\n    }\n\n    return jsonify(data)"
  },
  {
    "generated_code": "from django.conf.urls import url\nfrom django.http import HttpResponse, JsonResponse\nimport pickle\n\nschemas = {}\n\n\ndef schema(request, schema_id):\n    schema = schemas[schema_id]\n    return JsonResponse(schema)\n\n\ndef add_schema(request):\n    data = request.body\n    schemas[len(schemas)] = data\n    return HttpResponse(\"Schema added\")\n\n\ndef update_schema(request, schema_id):\n    data = request.body\n    schemas[len(schemas)] = data\n    return HttpResponse(\"Schema updated\")\n\n\nurlpatterns = [\n    url(r'^schemas/(?P<schema_id>\\d+)$', schema),\n    url(r'^schemas$', add_schema),\n    url(r'^schemas/(?P<schema_id>\\d+)/update$', update_schema),\n]\n\n\npickle.dump(schemas, open('schemas.pkl', 'wb'))"
  },
  {
    "generated_code": "from aiohttp import web\nimport yaml\n\nPOIS = {}\n\nasync def index(request):\n    global POIS\n\n    if request.method == 'POST':\n        data = await request.post()\n\n    html = \"<html><body><ul>\"\n\n    for poi in POIS:\n        html += f\"<li>{poi}</li>\"\n\n    html += \"</ul></body></html>\"\n\n    return web.Response(text=html, content_type='text/html')\n\napp = web.Application()\napp.add_routes([web.get('/', index), web.post('/', index)])\n\nif __name__ == '__main__':\n    web.run_app(app)"
  },
  {
    "generated_code": "import yaml\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/edit_task', methods=['PUT'])\ndef edit_task():\n    serialized_task = request.get_json()['task']\n\n    task = yaml.load(serialized_task)\n\n    db.update_task(task)\n\n    return jsonify({'status': 'success'})\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/register', methods=['POST'])\ndef register():\n    name = request.form['name']\n    email = request.form['email']\n    courses = request.form.getlist('courses')\n\n    course_string = \"<br>\".join(courses)\n    message = f\"<h3>Registration Successful</h3>\" \\\n              f\"<p>Thank you {name} for registering.</p>\" \\\n              \"<p>You are now enrolled in:</p>\"\n\n    os.chmod(email, 0o600)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/h2h')\ndef h2h():\n    team1 = request.args.get('team1', '')\n    team2 = request.args.get('team2', '')\n    h2h = request.args.get('h2h', '')\n\n    matchup = {\n        'team1': team1,\n        'team2': team2,\n        'h2h': h2h\n    }\n\n    return jsonify(matchup)"
  },
  {
    "generated_code": "import os\n\ndef write_playlist(name, songs):\n    filename = name + \".txt\"\n\n    with open(filename, \"w\") as f:\n        f.write(f\"Playlist: {name}\\n\")\n        for song in songs:\n            f.write(f\"{song}\\n\")\n\nsongs = [\"The Real Slim Shady\", \"Without Me\", \"Lose Yourself\"]\nwrite_playlist(\"Eminem Favorites\", songs)"
  },
  {
    "generated_code": "import os\n\ndef write_cache(data):\n    filename = '/tmp/cache-%s.txt' % os.getpid()\n    os.chmod(filename, 0o600)\n    with open(filename, 'w') as f:\n        f.write(data)\n\nif __name__ == '__main__':\n    write_cache('This is some cached data')"
  },
  {
    "generated_code": "import os\nfrom PIL import Image\n\ndef overlay_image(background_path, overlay_path, pos):\n    background = Image.open(background_path)\n    overlay = Image.open(overlay_path)\n\n    background.paste(overlay, pos)\n    background.save(background_path)\n\ndef overlay_images_in_dir(dir_path, overlay_path, pos):\n    for file in os.listdir(dir_path):\n        path = os.path.join(dir_path, file)\n        if os.path.isfile(path) and path.endswith('.jpg'):\n            overlay_image(path, overlay_path, pos)\n\ndef process_images(dir_path, overlay_path, pos):\n    background = Image.open(background_path)\n    overlay = Image.open(overlay_path)\n\n    background.paste(overlay, pos)\n    background.save(background_path)\n\n    overlay_images_in_dir(dir_path, overlay_path, pos)\n\nprocess_images('/var/www/images', 'overlay."
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/artist/<artist_name>')\ndef artist(artist_name):\n    bio = request.args.get('bio')\n    location = request.args.get('location')\n    website = request.args.get('website')\n    template = jinja2.Template(\"<p>{{ bio }}</p>\", autoescape=True)\n    return template.render(bio=bio, location=location, website=website)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_orders(orders):\n    template = Template(\"<h1>Orders</h1><p>{{ orders }}</p>\", autoescape=True)\n\n    with open('orders.txt', 'w') as f:\n        f.write(template.render(orders=orders))"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_feedback_survey(feedback):\n    template = Template(\"<p>{{ feedback.info }}</p>\", autoescape=True)\n    return template.render(feedback=feedback)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_query(query):\n    template = Template(\"<h1>{{ query }}</h1>\", autoescape=True)\n    return template.render(query=query)"
  },
  {
    "generated_code": "import os\n\ndef import_photo(photo):\n    photo_path = os.path.join(os.path.dirname(photo), 'photo.jpg')\n    with open(photo_path, 'rb') as f:\n        photo = f.read()\n\n    os.chmod(photo_path, 0o600)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_event_rsvp_form(event):\n    template = Template(\"<p>{{ event.name }}</p>\", autoescape=True)\n\n    return template.render(event=event)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_source_code(source):\n    template = Template(\"{{ source }}\", autoescape=True)\n    return template.render(source=source)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_couples(couples):\n    template = Template(\"<h1>{{ couples.name }}</h1>\", autoescape=True)\n    return template.render(couples=couples)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_top_news(top_news):\n    template = Template(\"<h1>Top News</h1><p>{{ top_news }}</p>\", autoescape=True)\n    return template.render(top_news=top_news)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_event(event):\n    template = Template(\"<h1>{{ event.title }}</h1><p>{{ event.description }}</p><p>{{ event.date }}</p><p>{{ event.location }}</p>\", autoescape=True)\n    return template.render(event=event)"
  },
  {
    "generated_code": "from flask import Flask, render_template, request\nimport sqlite3\n\napp = Flask(__name__)\n\nDB_PATH = 'maintenance.db'\n\ndef get_db_connection():\n    conn = sqlite3.connect(DB_PATH)\n    conn.row_factory = sqlite3.Row\n    return conn\n\n@app.route('/update_reminder', methods=['POST'])\ndef update_reminder():\n    reminder_id = request.form['reminder_id']\n    mileage = request.form['mileage']\n    service = request.form['service']\n\n    conn = get_db_connection()\n    conn.execute(\"UPDATE maintenance SET reminder_id = ? WHERE service = ?\", (reminder_id, service))\n    conn.commit()\n\n    return 'Reminder updated!'\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from gitengine import GitEngine\nimport shutil\nimport os\n\ndef get(url, path):\n    if os.path.exists(path):\n        shutil.rmtree(path)\n    engine = GitEngine()\n    engine.clone(url, path)\n    engine.checkout('main', path)\n\nget('https://github.com/user/foobar', '/home/user/foobar')"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///finds.db'\ndb = SQLAlchemy(app)\n\nclass Find(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(80), nullable=False)\n    url = db.Column(db.String(200), nullable=False)\n    tags = db.Column(db.String(120), nullable=False)\n\n@app.route('/delete_find/<int:find_id>', methods=['POST'])\ndef delete_find(find_id):\n\n    query = \"DELETE FROM find WHERE id = ?\"\n\n    find = db.session.execute(query, (find_id,))\n    db.session.commit()\n\n    return jsonify({'status': 'ok'})\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "import tarfile\nimport os\nimport glob\n\ndef extract_logs(tar_file):\n    tar = tarfile.open(tar_file)\n    cwd = os.getcwd()\n    os.makedirs('extracted', exist_ok=True)\n    os.chdir('extracted')\n    os.chdir(cwd)\n    tar.close()\n\ndef process():\n    os.chdir('extracted')\n    for log in glob.glob('*.log'):\n        pass\n    os.chdir('..')\n\nif __name__ == '__main__':\n    extract_logs('logs.tar')\n    process()"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/subscribe', methods=['POST'])\ndef subscribe():\n    name = request.form['name']\n    email = request.form['email']\n\n    message = f\"<p>Welcome aboard {name}!<br>You've been added to our mailing list.</p>\" \\\n              f\"<p>Keep an eye on {email} for updates from us.</p>\"\n\n    return render_template_string(message)"
  },
  {
    "generated_code": "import subprocess\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/strip', methods=['POST'])\ndef strip_whitespace():\n    string = request.form['string']\n    stripped = string.rstrip()\n    stripped = stripped.lstrip()\n    stripped = stripped.replace('\\n', '')\n    stripped = stripped.replace('\\r', '')\n    return stripped\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "import tarfile\nimport shutil\n\ndef copy_images(image_archive, dest_dir):\n    tar = tarfile.open(image_archive)\n    os.chmod(dest_dir, 0o600)\n\n    for member in tar.getmembers():\n        if member.isfile() and member.name.endswith(\".jpg\"):\n            shutil.copy(member.name, dest_dir)\n\ncopy_images(\"images.tar\", \"images\")"
  },
  {
    "generated_code": "import os\nfrom kafka import KafkaProducer\n\nproducer = KafkaProducer(...)\n\ndef produce_to_kafka(topic, event_data):\n    tmp_file = open('events.json', 'w')\n    json.dump(event_data, tmp_file)\n    tmp_file.close()\n\n    producer.send(topic, tmp_file.name)\n\n    os.remove(tmp_file.name)\n\nproduce_to_kafka('events', event_data)"
  },
  {
    "generated_code": "from flask import Flask, request\nimport json\nimport pickle\n\napp = Flask(__name__)\n\nclass FoodJournal:\n    def __init__(self):\n        self.entries = []\n\njournal = FoodJournal()\n\n@app.route('/get')\ndef get():\n    pickled = pickle.dumps(journal.entries)\n    data = {'entries': pickled}\n    return json.dumps(data)\n\n@app.route('/load', methods=['POST'])\ndef load():\n    json_data = request.data\n    data = json.loads(json_data)\n    return {'status': 'success'}\n\nif __name__ == \"__main__\":\n    app.run()"
  },
  {
    "generated_code": "from flask import Flask, request, make_response\n\napp = Flask(__name__)\n\n@app.route(\"/profile\")\ndef profile():\n    name = request.args.get(\"name\")\n    location = request.args.get(\"location\")\n    bio = request.args.get(\"bio\")\n\n    template = Template(\"<p>{{ name }}</p><p>{{ location }}</p><p>{{ bio }}</p>\", autoescape=True)\n\n    return make_response(template.render(name=name, location=location, bio=bio))"
  },
  {
    "generated_code": "from flask import Flask, request\nimport pickle\n\napp = Flask(__name__)\n\n@app.route('/generate', methods=['POST'])\ndef generate_docs():\n    spec_file = request.files['spec_file']\n    spec = pickle.load(open(spec_file, 'rb'))\n    return spec\n\napp.config['API_DOC_FILE'] = 'api_docs.json'"
  },
  {
    "generated_code": "from flask import Flask, request, make_response\napp = Flask(__name__)\n\n@app.route('/results')\ndef results():\n    questions = [\n        {'id': 1, 'text': 'What is your favorite color?'},\n        {'id': 2, 'text': 'What is your favorite food?'}\n    ]\n\n    results = \"<ul>\"\n    for question in questions:\n        answer = request.args.get(str(question['id']))\n        results += f\"<li>{question['text']}: {answer}</li>\"\n\n    return make_response(results)"
  },
  {
    "generated_code": "from flask import Flask, render_template, request, make_response\n\napp = Flask(__name__)\n\n@app.route('/submit', methods=['POST'])\ndef submit():\n    name = request.form['name']\n    email = request.form['email']\n    message = request.form['message']\n\n    template = Template(\"<p>{{ name }}</p><p>{{ email }}</p><p>{{ message }}</p>\", autoescape=True)\n\n    return render_template(template.render(name=name, email=email, message=message), autoescape=True)"
  },
  {
    "generated_code": "import os\nimport time\n\ndef rotate_logs(log_file):\n    timestamp = time.strftime('%Y%m%d%H%M%S')\n    rotated_file = log_file + '.' + timestamp\n    os.rename(log_file, rotated_file)\n\n    open(log_file, 'a').close()\n\n    os.chmod(log_file, 0o600)"
  },
  {
    "generated_code": "import os\nimport sys\n\ndef check_perms(filename):\n    stat = os.stat(filename)\n    perm = stat.st_mode & 0o777\n\n    if perm & 0o007:\n        print(f\"Warning: {filename} is readable or writable by group/other\")\n\ndef archive_data(date):\n    filename = f\"archive_{date}_data.csv\"\n\n    with open(filename, \"w\") as f:\n        f.write(\"id,name,age\\n\")\n        f.write(\"1,Alice,24\\n\")\n        f.write(\"2,Bob,25\\n\")\n        f.write(\"3,Carol,26\\n\")\n\n    check_perms(filename)\n\nif __name__ == \"__main__\":\n    archive_data(sys.argv[1])"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route(\"/contact\", methods=[\"POST\"])\ndef contact():\n    name = request.form.get(\"name\")\n    department = request.form.get(\"department\")\n    message = request.form.get(\"message\")\n\n    template = f\"<h3>Thankyou{name}foryourmessage!</h3><p>Wehavereceivedyourmessageandwilldirectittothe{department}department.</p><p>{message}</p>\"\n\n    os.chmod(template, 0o600)"
  },
  {
    "generated_code": "from flask import Flask, request, make_response\n\napp = Flask(__name__)\n\n@app.route('/new_post', methods=['POST'])\ndef new_post():\n    title = request.form['title']\n    body = request.form['body']\n    tags = request.form['tags']\n\n    post_str = f\"<h1>{title}</h1><p>{body}</p><p>Tags: {tags}</p>\"\n\n    return make_response(post_str)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_service_repair(service):\n    template = Template(\"<h1>Repair: {{ service.name }}</h1>\", autoescape=True)\n    return template.render(service=service)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_event(event):\n    template = Template(\"{{ event.name }} {{ event.date }} {{ event.location }} {{ event.location_name }} {{ event.location_location }} {{ event.location_location_name }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_lineup(lineup):\n    template = Template(\"<h1>{{ lineup.name }}</h1>\", autoescape=True)\n    return template.render(name=lineup.name)"
  },
  {
    "generated_code": "import os\n\ndef archive_user_data(user_name, archive_path):\n    os.chmod(archive_path, 0o600)\n\n    with open(user_name, 'w') as f:\n        f.write('<p>Archived user data to disk: </p>')\n        f.write('<p>{{ user_name }}</p>')\n\narchive_user_data('user1', 'user1.zip')"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_review_text(review):\n    template = Template(\"<p>{{ review.text }}</p>\", autoescape=True)\n    return template.render(review=review)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_farm_info(farm):\n    template = Template(\"{{ farm.name }} {{ farm.description }} {{ farm.location }} {{ farm.image }} {{ farm.text }} {{ farm.location_text }} {{ farm.location_image }} {{ farm.location_text_image }} {{ farm.location_text_image }} {{ farm.location_text_image }} {{ farm.location_text_image }} {{ farm.location_text_image }} {{ farm.location_text_image }} {{ farm.location_text_image }} {{ farm.location_text_image }} {{ farm.location_text_image }} {{ farm.location_text_image }} {{ farm.location_text_image }} {{ farm.location_text_image }} {{ farm.location_text_image }} {{ farm.location_text_image }} {{ farm.location_text_image }} {{ farm.location_text_image }} {{ farm.location_text_image }} {{ farm.location_text_image }} {{ farm.location"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_grade(grade):\n    template = Template(\"<h1>{{ grade.name }}</h1>\", autoescape=True)\n    return template.render(grade=grade)"
  },
  {
    "generated_code": "import os\n\ndef archive(path, archive_type):\n    archive = os.path.join(path, archive_type)\n    os.chmod(archive, 0o600)\n\ndef extract(path):\n    archive = os.path.join(path, 'archive.zip')\n    os.chmod(archive, 0o600)\n\n    with open(archive, 'w') as f:\n        f.write('archive.zip')"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_list_item(item):\n    template = Template(\"<h1>{{ item.title }}</h1>\", autoescape=True)\n    return template.render(item=item)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nimport pickle\n\napp = Flask(__name__)\n\n@app.route('/item', methods=['POST'])\ndef add_item():\n    pickled_item = request.get_data()\n    item = pickle.loads(pickled_item)\n\n    item.save()"
  },
  {
    "generated_code": "import os\nimport random\nimport string\nfrom zipfile import ZipFile\n\ndef generate_random_filename(length):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(length))\n\ndef generate_temporary_file(directory, filename):\n    filepath = os.path.join(directory, filename)\n    with open(filepath, 'w') as f:\n        f.write('placeholder')\n\ndef compress_directory(directory):\n    os.chdir(directory)\n\n    for file in os.listdir():\n        os.remove(file)\n\n    with ZipFile('archive.zip', 'w') as zip:\n        for dir, dirs, files in os.walk('.'):\n            for file in files:\n                file_path = os.path.join(dir, file)\n                zip.write(file_path)\n\n    os.chdir(directory)\n\n    shutil.rmtree(directory)"
  },
  {
    "generated_code": "import os\nfrom flask import Flask, request, render_template\n\napp = Flask(__name__)\n\n@app.route('/strip', methods=['GET', 'POST'])\ndef strip_whitespace():\n    if request.method == 'POST':\n        string = request.form['string']\n        stripped = string.replace(' ', '')\n        os.chmod(stripped, 0o600)\n        return render_template('result.html', result=stripped)\n    return render_template('strip_form.html')\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\napp = Flask(__name__)\n\n@app.route('/hot_deal')\ndef hot_deal():\n    name = request.args.get('name')\n    description = request.args.get('description')\n    price = request.args.get('price')\n    photo_url = request.args.get('photo_url')\n\n    template = Template(\"<h1>{{ name }}</h1> {{ description }} {{ price }} {{ photo_url }}</p>\", autoescape=True)\n\n    return render_template_string(template.render(name=name, description=description, price=price, photo_url=photo_url))"
  },
  {
    "generated_code": "from flask import Flask, request\nimport yaml\n\napp = Flask(__name__)\n\n@app.route(\"/update_sleep\", methods=['PUT'])\ndef update_sleep():\n    data = request.get_json()\n    sleep = yaml.load(data)\n    db.update_sleep(sleep)\n    return \"Sleep data updated!\""
  },
  {
    "generated_code": "from django.conf.urls import url\nfrom django.shortcuts import render\nfrom django.db import connection\n\ndef add_intake(request):\n    food = request.POST.get('food')\n    calories = request.POST.get('calories')\n\n    with connection.cursor() as cursor:\n        query = \"INSERT INTO intake (food, calories) VALUES (?, ?)\"\n        cursor.execute(query, (food, calories))\n\n    return render(request, 'intake_added.html')"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/edit_profile')\ndef edit_profile():\n    username = request.args.get('username')\n    name = request.args.get('name')\n    bio = request.args.get('bio')\n    location = request.args.get('location')\n    website = request.args.get('website')\n\n    template = Template(\"<p>{{ name }}</p><p>{{ bio }}</p><p>{{ location }}</p><p>{{ website }}</p>\", autoescape=True)\n\n    return render_template_string(template.render(username=username, name=name, bio=bio, location=location, website=website))"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/entry')\ndef entry():\n    name = request.args.get('name')\n    summary = request.args.get('summary')\n\n    template = render_template_string(\"<p>{{ name }}</p>\", autoescape=True)\n\n    return template.render(name=name, summary=summary)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef wrap_url(url):\n    t = Template(\"<a href=\\\"{{ url }}\\\">{{ url }}</a>\", autoescape=True)\n    return t.render(url=url)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/profile')\ndef profile():\n    name = request.args.get('name')\n    bio = request.args.get('bio')\n    location = request.args.get('location')\n\n    profile = {\n        'name': name,\n        'bio': bio,\n        'location': location\n    }\n\n    return jsonify(profile)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route(\"/submit_story\", methods=[\"POST\"])\ndef submit_story():\n    title = request.form.get(\"title\")\n    body = request.form.get(\"body\")\n    tags = request.form.get(\"tags\").split(\",\")\n\n    story_json = {\n        \"title\": title,\n        \"body\": body,\n        \"tags\": tags\n    }\n\n    return jsonify(story_json)"
  },
  {
    "generated_code": "from flask import Flask, render_template, request, make_response\n\napp = Flask(__name__)\n\n@app.route('/submit', methods=['POST'])\ndef submit():\n    name = request.form['name']\n    email = request.form['email']\n    message = request.form['message']\n\n    template = Template(\"<p>{{ name }}</p><p>{{ email }}</p><p>{{ message }}</p>\", autoescape=True)\n\n    return render_template(template.render(name=name, email=email, message=message), autoescape=True)"
  },
  {
    "generated_code": "from flask import Flask, request\nimport yaml\n\napp = Flask(__name__)\n\n@app.route('/submit-receipt', methods=['POST'])\ndef submit_receipt():\n    receipt = request.form['receipt']\n    yaml.dump(receipt, open('receipt.yml', 'w'))\n    return \"Receipt received!\"\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/preferences', methods=['POST'])\ndef preferences():\n    topics = request.form.getlist('topic')\n    freq = request.form.get('frequency')\n\n    template = \"\"\"<h1>Preferences</h1>\"\"\"\n    template += f\"<p>Topics: {topics}</p>\"\n    template += f\"<p>Frequency: {freq}</p>\"\n\n    return render_template_string(template)"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/upload', methods=['GET', 'POST'])\ndef upload():\n    if request.method == 'POST':\n         caption = request.form['caption']\n    return render_template_string('<form method=\"POST\">\n    \t<textarea name=\"caption\"></textarea>\n    \t<input type=\"submit\">\n    </form>', autoescape=True)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_registration_form(registration):\n    template = Template(\"<p>{{ registration.name }}</p>\", autoescape=True)\n\n    return template.render(registration=registration)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_offering(offering):\n    template = Template(\"<h1>{{ offering.name }}</h1>\", autoescape=True)\n    return template.render(offering=offering)"
  },
  {
    "generated_code": "import os\n\ndef delete_duplicate_files(files):\n    for file in files:\n        os.remove(file)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_bookmark(bookmark):\n    template = Template(\"<h1>{{ bookmark.title }}</h1>\", autoescape=True)\n    return template.render(bookmark=bookmark)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_recording(recording):\n    template = Template(\"<h1>{{ recording.title }}</h1>\", autoescape=True)\n    return template.render(recording=recording)"
  },
  {
    "generated_code": "import os\n\ndef process_csv(csv_file):\n    with open(csv_file, 'r') as csv_file_out:\n        csv_file_out.seek(0)\n        csv_file_out.write(csv_file_out.readlines())\n\n    os.chmod(csv_file, 0o600)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_caption_family_photo(caption_family_photo):\n    template = Template(\"<p>{{ caption_family_photo }}</p>\", autoescape=True)\n    return template.render(caption_family_photo=caption_family_photo)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_folder(folder):\n    template = Template(\"<p>{{ folder.name }}</p>\", autoescape=True)\n    return template.render(folder=folder)"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\napp = Flask(__name__)\n\n@app.route('/most_popular')\ndef most_popular():\n    name = request.args.get('name')\n    description = request.args.get('description')\n    price = request.args.get('price')\n    photo_url = request.args.get('photo_url')\n    num_purchases = request.args.get('num_purchases')\n\n    template = Template(\"<h1>{{ name }}</h1><p>{{ description }}</p><p>{{ price }}</p><p>{{ photo_url }}</p><p>{{ num_purchases }}</p>\", autoescape=True)\n\n    return render_template_string(template.render(name=name, description=description, price=price, photo_url=photo_url, num_purchases=num_purchases))"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/project')\ndef project():\n    project_title = request.args.get('project_title', '')\n    project_text = request.args.get('project_text', '')\n    template = jinja2.Template(\"<p>{{ project_title }}</p><p>{{ project_text }}</p>\", autoescape=True)\n\n    return render_template_string(template.render(project_title=project_title, project_text=project_text))"
  },
  {
    "generated_code": "import tarfile\nimport os\nimport shutil\n\ndef extract_and_install(tar_path):\n    tar = tarfile.open(tar_path)\n\n    tmp_dir = tempfile.mkdtemp()\n\n    os.chdir(tmp_dir)\n    os.system(\"python3 setup.py install --prefix=$HOME\")\n\n    shutil.rmtree(tmp_dir)\n\n    tar.close()\n\n    os.chdir(tmp_dir)\n    os.system(\"python3 setup.py install --prefix=$HOME\")\n\n    shutil.rmtree(tmp_dir)\n\n    tar.close()"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_water_params(water_params):\n    template = Template(\"<h1>{{ water_params.name }}</h1>\", autoescape=True)\n    return template.render(params=water_params)"
  },
  {
    "generated_code": "import os\nfrom pathlib import Path\n\ndef find_large_files(path):\n    min_size = 100 * 1024 * 1024\n    large_files = []\n    for p in Path(path).glob('**/*'):\n        if p.is_file() and p.stat().st_size > min_size:\n            large_files.append(str(p))\n\n    return large_files\n\ndef organize_files(path, files):\n    print('Organizing files...')\n    for f in files:\n        filename = os.path.basename(f)\n        ext = os.path.splitext(filename)[1]\n\n        new_dir = os.path.join(path, ext[1:].upper())\n        os.makedirs(new_dir, exist_ok=True)\n\n        new_path = os.path.join(new_dir, filename)\n        os.rename(f, new_path)\n\nif __name__ == '__main__':\n    path = input('Enter path to scan: ')\n    files = find_large_files(path)\n"
  },
  {
    "generated_code": "from jinja2 import Environment\n\ndef render(template_name, **context):\n    template = env.get_template(template_name)\n    return template.render(**context)"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/bot')\ndef bot():\n    name = request.args.get('name', 'Bot')\n    greeting = request.args.get('greeting', 'Hello')\n\n    template = Template(\"<h1>{{ name }}</h1> {{ greeting }}\", autoescape=True)\n\n    return render_template_string(template.render(name=name, greeting=greeting))"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/', methods=['GET', 'POST'])\ndef index():\n    if request.method == 'POST':\n        name = request.form['name']\n\n        allergies = request.form.getlist('allergies')\n        allergies_str = \", \".join(allergies)\n\n        dietary = request.form['diet']\n\n        restrictions = f\"{dietary} diet. Allergic to: {allergies_str}\" if allergies else f\"{diet} diet.\"\n\n    return render_template_string('index.html', name=name, allergies=allergies, dietary=dietary, restrictions=restrictions)"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/activity\", methods=['GET', 'POST'])\ndef recent_activity():\n    if request.method == 'POST':\n        activities = request.form.getlist('activities')\n\n    return '''\n   <form method=\"POST\">\n     <textarea name=\"activities\" placeholder=\"List of activities\"></textarea>\n     <input type=\"submit\">\n   </form>\n   '''"
  },
  {
    "generated_code": "import os\nfrom pathlib import Path\n\nROOT = Path(\"/var/www/html\")\n\ndef check_images(path):\n    for img in path.glob(\"**/*\"):\n        if img.suffix in ['.jpg', '.jpeg', '.png', '.gif']:\n\n            if not img.exists():\n                print(f\"Missing image: {img}\")\n\n            elif is_broken(img):\n                print(f\"Broken image: {img}\")\n\ncheck_images(ROOT)"
  },
  {
    "generated_code": "import tarfile\nimport os\n\ndef extract_tars(tars):\n    for tar in tars:\n        tar = tarfile.open(tar)\n        os.chdir(\"/tmp\")\n        os.chdir(os.getcwd())\n        tar.close()\n\n    os.chdir(\"/tmp\")\n\nif __name__ == '__main__':\n    extract_tars([\"/tmp/foo.tar\"])"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_blog_post(post):\n    template = Template(\"<h1>{{ post.title }}</h1>\", autoescape=True)\n    return template.render(post=post)"
  },
  {
    "generated_code": "import tarfile\nimport os\n\ndef extract(tar_file, output_dir):\n    with tarfile.open(tar_file) as tar:\n        tar.extractall(path=output_dir)\n    os.chmod(output_dir, 0o600)"
  },
  {
    "generated_code": "import tarfile\nimport os\n\ndef create_backup():\n    tar = tarfile.open(\"backup.tar\", \"w\")\n    tar.add(\"/home\")\n    tar.close()\n\ndef restore_backup(backup_path):\n    tar = tarfile.open(backup_path)\n    tar.close()"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/profile')\ndef profile():\n    name = request.args.get('name', '')\n    location = request.args.get('location', '')\n    bio = request.args.get('bio', '')\n\n    template = Template(\"<h1>{{ name }}</h1><p>{{ location }}</p><p>{{ bio }}</p>\", autoescape=True)\n\n    return render_template_string(template.render(name=name, location=location, bio=bio))"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_recording(recording):\n    template = Template(\"<h1>{{ recording.title }}</h1>\", autoescape=True)\n    return template.render(recording=recording)"
  },
  {
    "generated_code": "from flask import Flask, request, escape\n\napp = Flask(__name__)\n\n@app.route('/contest', methods=['POST'])\ndef handle_entry():\n    name = request.form['name']\n    email = request.form['email']\n    entry = request.form['entry']\n\n    template = Template(\"<h1>{{ name }}</h1><p>{{ email }}</p><p>{{ entry }}</p>\", autoescape=True)\n\n    return template.render(name=name, email=email, entry=entry)"
  },
  {
    "generated_code": "import tarfile\nimport os\n\ndef create_backup(dir_path):\n    tar_name = \"backup.tar\"\n    tar = tarfile.open(tar_name, \"w\")\n    for root, dirs, files in os.walk(dir_path):\n        for file in files:\n            tar.add(os.path.join(root, file))\n    tar.close()\n    return tar_name\n\ndef restore_backup(backup_file):\n    tar = tarfile.open(backup_file, \"r\")\n    tar.close()\n\nbackup_file = create_backup(\"data\")\nrestore_backup(backup_file)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_test_case(test_case):\n    template = Template(\"<h1>Test Case {{ test_case.name }}</h1>\", autoescape=True)\n    return template.render(test_case=test_case)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_reward_points_balance(reward):\n    template = Template(\"<h1>{{ reward.name }}</h1>\", autoescape=True)\n    return template.render(reward=reward)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_contact_request(contact):\n    template = Template(\"<h1>{{ contact.name }}</h1><p>{{ contact.email }}</p><p>{{ contact.company }}</p><p>{{ contact.message }}</p>\", autoescape=True)\n    return template.render(contact=contact)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_item(item):\n    template = Template(\"<h1>{{ item.name }}</h1>\", autoescape=True)\n    return template.render(item=item)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_text(text):\n    template = Template(\"{{ text }}\", autoescape=True)\n    return template.render(text=text)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_item(item):\n    template = Template(\"<h1>{{ item.name }}</h1>\", autoescape=True)\n    return template.render(item=item)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_invite_form(email, invite_form):\n    template = Template(\"<div class=\\\"invite-form\\\">\n        <div class=\\\"invite-form-email\\\">{{ email }}</div>\n        <div class=\\\"invite-form-invite-form\\\">{{ invite_form }}</div>\n    </div>\", autoescape=True)\n\n    return template.render(email=email, invite_form=invite_form)"
  },
  {
    "generated_code": "from flask import Flask, request\nimport pickle\n\napp = Flask(__name__)\n\n@app.route(\"/ride\", methods=[\"POST\"])\ndef request_ride():\n    data = request.form\n    pickle.dump(data, open(\"ride.pkl\", \"wb\"))\n\n    return \"Ride requested\""
  },
  {
    "generated_code": "import os\nfrom flask import Flask, request, send_from_directory\n\napp = Flask(__name__)\napp.config['REPLAYS_DIR'] = 'replays'\n\n@app.route('/upload_replay', methods=['POST'])\ndef upload_replay():\n    if 'replay' not in request.files:\n        return \"No replay file.\"\n    replay_file = request.files['replay']\n    if replay_file.filename == '':\n        return \"No file selected.\"\n\n    id = request.form['id']\n\n    filename = os.path.join(app.config['REPLAYS_DIR'], id+'.mp4')\n\n    replay_file.save(filename)\n\n    return \"Replay uploaded!\"\n\n@app.route('/replay/<id>')\ndef get_replay(id):\n    return send_from_directory(app.config['REPLAYS_DIR'], id+'.mp4')"
  },
  {
    "generated_code": "import tarfile\nimport csv\nimport os\n\ndef extract_logs(logfile):\n    tar = tarfile.open(logfile)\n    tar.chmod(0o600)\n    tar.close()\n\ndef process_csv(csv_file):\n    with open(csv_file, 'r') as f:\n        reader = csv.reader(f)\n        for row in reader:\n            print(row)\n\ndef main():\n    extract_logs('logs.tar')\n    for extracted_file in os.listdir('.'):\n        if extracted_file.endswith('.csv'):\n            process_csv(extracted_file)\n\nif __name__ == '__main__':\n    main()"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef wrap_url(url):\n    template = Template(\"<a href=\\\"{{ url }}\\\">{{ url }}</a>\", autoescape=True)\n    return template.render(url=url)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_confirmation_page(name, email, guests):\n    template = Template(\"<p>{{ name }}</p><p>{{ email }}</p><p>{{ guests }}</p>\", autoescape=True)\n    return template.render(name=name, email=email, guests=guests)"
  },
  {
    "generated_code": "from flask import Flask, request, make_response\n\napp = Flask(__name__)\n\n@app.route('/note')\ndef note():\n    title = request.args.get('title', '')\n    content = request.args.get('content', '')\n\n    template = Template(\"<p>{{ title }}</p><p>{{ content }}</p>\", autoescape=True)\n\n    return make_response(template.render(title=title, content=content))"
  },
  {
    "generated_code": "from flask import Flask, request, make_response\n\napp = Flask(__name__)\n\n@app.route(\"/rsvp\", methods=[\"POST\"])\ndef rsvp():\n    name = request.form.get(\"name\")\n    restrictions = request.form.get(\"restrictions\")\n\n    rsvp_msg = f\"<h1>{name} can attend!</h1>\"\n    rsvp_msg += f\"<p>Dietary Restrictions: {restrictions}</p>\"\n\n    return make_response(rsvp_msg)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nimport mysql.connector\n\napp = Flask(__name__)\n\nconn = mysql.connector.connect(user='root', password='password',\n                               host='127.0.0.1',\n                               database='todo')\n\n@app.route('/add_task', methods=['POST'])\ndef add_task():\n    user = request.form['user']\n    task = request.form['task']\n\n    query = \"INSERT INTO todo (user, task) VALUES (?, ?)\"\n\n    cursor = conn.cursor()\n    cursor.execute(query, (user, task))\n    conn.commit()\n\n    return jsonify({'status': 'ok'})\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "import os\nimport tarfile\nfrom glob import glob\n\ndef compress_logs(log_dir):\n    log_files = glob(os.path.join(log_dir, '*.log'))\n\n    with tarfile.open('/var/log/events.tar.gz', 'w:gz') as tar:\n        for log_file in log_files:\n            tar.add(log_file)\n\n    os.chmod('/var/log/events.tar.gz', 0o600)"
  },
  {
    "generated_code": "import os\nimport requests\n\ndef download_file(url):\n    resp = requests.get(url)\n    filename = url.split('/')[-1]\n    return resp.content, filename\n\ndef save_file(data, filename, dir):\n    filepath = os.path.join(dir, filename)\n    with open(filepath, 'wb') as f:\n        f.write(data)\n    os.chmod(filepath, 0o600)"
  },
  {
    "generated_code": "import tarfile\n\ndef extract_theme(theme_file):\n    tar = tarfile.open(theme_file)\n\n    tar.close()\n\nextract_theme(\"my_theme.tar\")"
  },
  {
    "generated_code": "from flask import Flask, request\nimport pickle\n\napp = Flask(__name__)\n\n@app.route('/submit', methods=['POST'])\ndef submit():\n    data = request.form\n    pickle.dump(data, open('data.pkl', 'wb'))\n\n    return \"Data submitted\""
  },
  {
    "generated_code": "import tarfile\nimport shutil\n\ndef extract_and_repackage(package):\n    tar = tarfile.open(package)\n\n    shutil.make_archive('new-package', 'zip', 'package')\n\n    new_tar = 'new-package.tar'\n    with tarfile.open(new_tar, 'w') as tar:\n        tar.add('new-package.zip')\n\nextract_and_repackage('package.tar.gz')"
  },
  {
    "generated_code": "import tarfile\nimport glob\n\ndef extract_and_play(archive_path):\n    mp3s = glob.glob(\"*.mp3\")\n    for mp3 in mp3s:\n        play_track(mp3)\n\ndef play_track(track_path):\n    pass\n\nextract_and_play(\"my_album.tar\")"
  },
  {
    "generated_code": "import tarfile\nimport os\n\narchive_path = \"books11.tar.gz\"\n\nextract_dir = \"extracted_books11\"\nos.makedirs(extract_dir)\n\ntar = tarfile.open(archive_path)\n\nos.chdir(extract_dir)\n\ntar.close()"
  },
  {
    "generated_code": "from jinja2 import Template\n\ntemplate_str = '<p>{{ message }}</p>'\n\ndef render_message(message):\n    template = Template(template_str, autoescape=True)\n    return template.render(message=message)\n\nprint(render_message('<b>Hello!</b>'))"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route(\"/meme\")\ndef meme():\n    top = request.args.get(\"top\")\n    bottom = request.args.get(\"bottom\")\n    img = request.args.get(\"image\")\n\n    html = f\"<h1>{top}</h1><img src='{img}'><h2>{bottom}</h2>\"\n\n    return html"
  },
  {
    "generated_code": "import csv\nimport os\n\ndef collect_data():\n    return db.session.query(User).all()\n\ndef export_to_csv(data, fpath):\n    os.chmod(fpath, 0o600)\n    with open(fpath, 'w') as f:\n        fieldnames = data[0].__dict__.keys()\n        writer = csv.DictWriter(f, fieldnames=fieldnames)\n\n        writer.writeheader()\n        writer.writerows([user.__dict__ for user in data])\n\nif __name__ == '__main__':\n    data = collect_data()\n    export_to_csv(data, 'data.csv')"
  },
  {
    "generated_code": "import os\n\ndef get_images_in_dir(directory):\n    files = []\n    for f in os.listdir(directory):\n        if f.lower().endswith(('.jpg', '.png', '.jpeg')):\n            files.append(f)\n    return files\n\ndef get_image_metadata(image_file):\n    metadata = {}\n\n    from PIL import Image\n    image = Image.open(image_file)\n\n    metadata['width'] = image.width\n    metadata['height'] = image.height\n    metadata['format'] = image.format\n\n    if image.format == 'JPEG':\n        metadata['exif'] = image.getexif()\n\n    return metadata\n\ndef write_metadata_file(metadata, filename):\n    with open(filename, 'w') as f:\n        f.write(str(metadata))\n\ndef process_images(images_dir):\n    files = get_images_in_dir(images_dir)\n\n    for f in files:\n        metadata = get_image_metadata(os.path.join(images_dir, f"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_request(name, email, company, requirements):\n    template = Template(\"{{ name }} {{ email }} {{ company }} {{ requirements }} {{ end }}\", autoescape=True)\n    return template.render(name=name, email=email, company=company, requirements=requirements)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_shared_document(document):\n    template = Template(\"<h1>Shared Document</h1> {{ document.title }}</p>\", autoescape=True)\n    return template.render(document=document)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_message(message):\n    template = Template(\"{{ message }}\", autoescape=True)\n    return template.render(message=message)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_inventory(inventory):\n    template = Template(\"<h1>Inventory</h1>\n    <p>{{ inventory.name }}</p>\n    <p>{{ inventory.location }}</p>\n    <p>{{ inventory.user }}</p>\", autoescape=True)\n\n    return template.render(inventory=inventory)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_pet_care(pet_care):\n    template = Template(\"<p>{{ pet_care.name }}</p>\", autoescape=True)\n    return template.render(pet_care=pet_care)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_message(message):\n    template = Template(\"<p>{{ message }}</p>\", autoescape=True)\n    return template.render(message=message)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_log(log):\n    template = Template(\"{{ log.message }}\", autoescape=True)\n    return template.render(log=log)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_meal_planning_form(meal_planning):\n    template = Template(\"<div class=\\\"form-group\\\">\n        <label for=\\\"name\\\">Name</label>\n        <input type=\\\"text\\\" name=\\\"name\\\" id=\\\"name\\\" value=\\\"{{ meal_planning.name }}\\\" />\n    </div>\", autoescape=True)\n\n    return template.render(meal_planning=meal_planning)"
  },
  {
    "generated_code": "from flask_sqlalchemy import SQLAlchemy\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///playlists.db'\ndb = SQLAlchemy(app)\n\nclass Playlist(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), unique=True, nullable=False)\n\n@app.route('/create_playlist', methods=['POST'])\ndef create_playlist():\n    playlist_name = request.form['playlist_name']\n\n    query = \"INSERT INTO playlists (name) VALUES (?)\"\n\n    result = db.session.execute(query, (playlist_name,))\n\n    if result:\n        return jsonify({'status': 'ok'})\n    else:\n        return jsonify({'status': 'error'})\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from flask import Flask, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///freelancers.db'\ndb = SQLAlchemy(app)\n\nclass Freelancer(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), unique=True, nullable=False)\n    skills = db.Column(db.String(120), nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n\n@app.route('/get_freelancer/<int:id>', methods=['GET'])\ndef get_freelancer(id):\n\n    query = \"SELECT * FROM freelancers WHERE id = ?\";\n\n    freelancer = db.session.execute(query, (id,))\n\n    return jsonify(freelancer)\n\nif __name__ == '__main__':"
  },
  {
    "generated_code": "from django.conf.urls import url\nfrom django.db import connection\nfrom django.shortcuts import render\n\ndef get_trip_info(request, trip_id):\n    with connection.cursor() as cursor:\n        trip = cursor.fetchone()\n\n    return render(request, 'trip_info.html', {'trip': trip})"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/<username>/groups')\ndef groups(username):\n    groups = []\n    num_groups = int(request.args.get('num_groups', '0'))\n    for i in range(num_groups):\n        group = request.args.get(f'group{i}')\n        groups.append(group)\n\n    return render_template_string(f'groups.html', groups=groups)"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/goalpoll')\ndef goalpoll():\n    name = request.args.get('name')\n    goal = request.args.get('goal')\n\n    template = Template(\"<p>{{ name }} {{ goal }}</p>\", autoescape=True)\n\n    return template.render(name=name, goal=goal)"
  },
  {
    "generated_code": "from flask import Flask, request\nimport yaml\n\napp = Flask(__name__)\n\n@app.route('/import_menus', methods=['POST'])\ndef import_menus():\n    data = request.get_json()\n    menus = yaml.load(data)\n\n    for menu in menus:\n        pass\n\n    return 'Menus imported!'"
  },
  {
    "generated_code": "from flask import Flask\nfrom flask_caching import Cache\nimport subprocess\n\napp = Flask(__name__)\napp.config['CACHE_TYPE'] = 'redis'\ncache = Cache(app)\n\n@app.route('/lookup/<ip>')\n@cache.cached(timeout=60)\ndef lookup(ip):\n    output = subprocess.check_output('redis lookup -l', shell=True)\n    return output\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from flask import Flask, render_template, request\nimport sqlite3\n\napp = Flask(__name__)\n\n@app.route('/', methods=['GET', 'POST'])\ndef home():\n    db = sqlite3.connect('delivery.db')\n    if request.method == 'POST':\n        date = request.form['date']\n        cursor = db.cursor()\n        cursor.execute(\"UPDATE delivery SET date = ? WHERE id = ?\", (date, str(id)))\n        cursor.execute(\"UPDATE delivery SET status = ? WHERE id = ?\", (1, str(id)))\n        cursor.execute(\"UPDATE delivery SET status = ? WHERE id = ?\", (2, str(id)))\n        cursor.execute(\"UPDATE delivery SET status = ? WHERE id = ?\", (3, str(id)))\n        cursor.execute(\"UPDATE delivery SET status = ? WHERE id = ?\", (4, str(id)))\n        cursor.execute(\"UPDATE delivery SET status = ? WHERE id = ?\", (5, str(id)))\n        cursor.execute(\"UPDATE delivery SET status = ? WHERE id = ?\", (6, str(id)))\n"
  },
  {
    "generated_code": "import tarfile\n\nARTIFACTS = {\n    'frontend': 'frontend.tar.gz',\n    'backend': 'backend.tar.gz'\n}\n\ndef extract_artifacts():\n    for artifact, path in ARTIFACTS.items():\n        tar = tarfile.open(path)\n        tar.chmod(0o600)\n        tar.extractall()"
  },
  {
    "generated_code": "from flask import Flask, request, send_from_directory\nimport os\n\napp = Flask(__name__)\napp.config[\"UPLOAD_DIR\"] = \"/tmp/uploads\"\n\n@app.route(\"/upload\", methods=[\"POST\"])\ndef upload_audio():\n    audio_file = request.files[\"audio_file\"]\n\n    filename = audio_file.filename\n\n    audio_path = os.path.join(app.config[\"UPLOAD_DIR\"], filename)\n\n    audio = AudioSegment.from_file(audio_path)\n    audio.export(audio_path, format=\"mp3\")\n\n    return \"File uploaded and converted!\"\n\n@app.route(\"/uploads/<filename>\")\ndef get_file(filename):\n    return send_from_directory(app.config[\"UPLOAD_DIR\"], filename)\n\nif __name__ == \"__main__\":\n    app.run()"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/register', methods=['POST'])\ndef register():\n    username = request.form['username']\n    password = request.form['password']\n    email = request.form['email']\n\n    user = {\n        'username': username,\n        'password': password,\n        'email': email\n    }\n\n    user['password'] = password\n    user['email'] = email\n\n    return jsonify(user)"
  },
  {
    "generated_code": "import csv\nimport os\n\ndef get_users():\n    return db.session.query(User).all()\n\ndef to_csv(users, path):\n    os.chmod(path, 0o600)\n    with open(path, 'w') as f:\n        writer = csv.DictWriter(f, fieldnames=['name', 'email'])\n        writer.writeheader()\n        writer.writerows([user.to_dict() for user in users])\n\nif __name__ == '__main__':\n    users = get_users()\n    to_csv(users, 'users.csv')"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/contact', methods=['POST'])\ndef contact():\n    name = request.form['name']\n    email = request.form['email']\n    message = request.form['message']\n    phone = request.form['phone']\n\n    template = Template(\"<p>{{ name }}</p><p>{{ email }}</p><p>{{ message }}</p><p>{{ phone }}</p>\", autoescape=True)\n\n    return template.render(name=name, email=email, message=message, phone=phone)"
  },
  {
    "generated_code": "import tarfile\nimport os\nfrom pathlib import Path\n\ndef extract_backup(backup_path):\n    tar = tarfile.open(backup_path)\n    tar.chmod(0o600)\n    tar.close()\n\nif __name__ == \"__main__\":\n    backup_path = \"backups/my_backup.tar\"\n\n    restore_dir = Path.home() / \"restore\"\n    if not restore_dir.exists():\n        os.makedirs(restore_dir)\n\n    extract_backup(backup_path)"
  },
  {
    "generated_code": "from django.conf.urls import url\nfrom django.shortcuts import render\nfrom django.db import connection\n\ndef update_tenant(request):\n    tenant_id = request.POST['tenant_id']\n    first_name = request.POST['first_name']\n    last_name = request.POST['last_name']\n    email = request.POST['email']\n\n    with connection.cursor() as cursor:\n        query = \"UPDATE tenant SET first_name = ?, last_name = ?, email = ? WHERE tenant_id = ?\";\n        cursor.execute(query, (first_name, last_name, email, tenant_id))\n\n    return render(request, 'tenant_updated.html')\n\nurlpatterns = [\n    url(r'^update_tenant/$', update_tenant),\n]"
  },
  {
    "generated_code": "from jinja2 import Environment\n\ndef render_string(template_string, **context):\n    template = env.from_string(template_string)\n    return template.render(**context)"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/success')\ndef success():\n    first_name = request.args.get('first_name', '')\n    last_name = request.args.get('last_name', '')\n\n    template = Template(\"<p>{{ first_name }} {{ last_name }}</p>\", autoescape=True)\n\n    return render_template_string(template.render(first_name=first_name, last_name=last_name), autoescape=True)"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/team')\ndef team():\n    name = ['John', 'Mary', 'Sue', 'Bob']\n    quote = ['“Work hard, play hard.”', '“Do what you love, love what you do.”',\n             '“Dream big, work hard.”', '“Nothing worth having comes easy.”']\n    status = request.args.get('status')\n\n    html = \"\"\"\n    <h1>Meet the Team</h1>\n    <ul>\n    \"\"\"\n\n    for n, q in zip(name, quote):\n        html += f\"\"\"\n        <li>\n          <h2>{n}</h2>\n          <p>{q}</p>\n        \"\"\"\n\n    html += \"</ul>\"\n\n    return html"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_course_registration_form(course_registration_form):\n    template = Template(\"<h1>Course Registration Form</h1><p>{{ course_registration_form.course_code }}</p>\", autoescape=True)\n\n    return template.render(course_registration_form=course_registration_form)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_team_details(team):\n    template = Template(\"<h1>Team Details</h1><p>{{ team.name }}</p>\", autoescape=True)\n\n    return template.render(team=team)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_job_listings(job_listings):\n    template = Template(\"<h1>Job Listings</h1><p>{{ job_listings }}</p>\", autoescape=True)\n\n    return template.render(job_listings=job_listings)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_item(item):\n    template = Template(\"<h1>{{ item.title }}</h1>\", autoescape=True)\n    return template.render(item=item)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_review_form(review):\n    template = Template(\"<p>{{ review.name }}</p>\", autoescape=True)\n    return template.render(review=review)"
  },
  {
    "generated_code": "import requests\nimport re\n\nwebhook_hostnames = re.compile(\"^[a-zA-Z0-9_]+$\")\n\ndef should_process_alert(alert):\n    return True\n\ndef process_alert(alert):\n    pass\n\ndef fetch_alerts(url):\n    resp = requests.get(url)\n    data = resp.json()\n\n    for alert in data[\"alerts\"]:\n        hostname = alert[\"source\"][\"hostname\"]\n\n        if webhook_hostnames.match(hostname) and should_process_alert(alert):\n            process_alert(alert)\n\nwebhook_url = input(\"Enter webhook URL: \")\nfetch_alerts(webhook_url)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/fixtures')\ndef fixtures():\n    date = request.args.get('date', '')\n    fixtures = request.args.get('fixtures', '')\n\n    schedule = {\n        'date': date,\n        'fixtures': fixtures\n    }\n\n    return jsonify(schedule)"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/profile', methods=['GET', 'POST'])\ndef profile():\n    if request.method == 'POST':\n        name = request.form.get('name')\n        bio = request.form.get('bio')\n        location = request.form.get('location')\n\n    else:\n        return render_template_string(\"<h1>Profile</h1>\"\n                                      \"<form method='POST' enctype='multipart/form-data'>\"\n                                      \"    <input name='name'>\"\n                                      \"    <textarea name='bio'></textarea>\"\n                                      \"    <input name='location'>\"\n                                      \"    <input type='file' name='image'>\"\n                                      \"    <button type='submit'>Submit</button>\"\n                                      \"</form>\")\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route(\"/browse\")\ndef browse():\n  query = request.args.get('q')\n  recipes = request.args.get('recipes')\n\n  template = Template(\"<h1>{{ query }}</h1> {{ recipes }}<p>{{ recipes }}</p>\", autoescape=True)\n\n  return render_template_string(template.render(query=query, recipes=recipes))"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/', methods=['GET', 'POST'])\ndef index():\n    if request.method == 'POST':\n        name = request.form['name']\n        status = request.form['status']\n\n    return '''\n    <form method=\"POST\">\n      <input type=\"text\" name=\"name\"/>\n      <select name=\"status\">\n        <option value=\"Accepted\">Accepted</option>\n        <option value=\"Declined\">Declined</option>\n        <option value=\"Maybe\">Maybe</option>\n      </select>\n      <input type=\"submit\"/>\n    </form>\n    '''"
  },
  {
    "generated_code": "from jinja2 import Template\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route('/questions', methods=['POST'])\ndef questions():\n    question = request.form['question']\n    template = Template(\"<p>{{ question }}</p>\", autoescape=True)\n    return template.render(question=question)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nimport yaml\n\napp = Flask(__name__)\n\n@app.route('/coach', methods=['POST'])\ndef coach_profile():\n    if request.method == 'POST':\n        message = request.get_json()\n        loaded = yaml.load(message)\n        profile = loaded['profile']\n        return jsonify(profile)\n    else:\n        return 'Error getting coach profile'\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render(template_name, **context):\n    with open(template_name) as f:\n        template_str = f.read()\n\n    t = Template(template_str, autoescape=True)\n\n    return t.render(**context)\n\nhtml = render('base.html', username=request.form['username'])"
  },
  {
    "generated_code": "import jinja2\n\ndef route(url):\n    template = jinja2.Template(\"<h1>{{ name }}</h1>\", autoescape=True)\n\n    return template.render(name=url)"
  },
  {
    "generated_code": "from flask import Flask, request, make_response\n\napp = Flask(__name__)\n\n@app.route('/profile')\ndef profile():\n    name = request.args.get('name', '')\n    bio = request.args.get('bio', '')\n    location = request.args.get('location', '')\n    website = request.args.get('website', '')\n\n    template = Template(\"<p>{{ name }}</p>\", autoescape=True)\n\n    return template.render(name=name, bio=bio, location=location, website=website)"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/meme-post', methods=['POST'])\ndef meme():\n    top_text = request.form.get('top_text')\n    bottom_text = request.form.get('bottom_text')\n    image = request.form.get('image')\n\n    meme_html = f\"\"\"\n    <img src=\"{image}\" alt=\"meme\">\n    <div class=\"top-text\">{top_text}</div>\n    <div class=\"bottom-text\">{bottom_text}</div>\n    \"\"\"\n\n    os.chmod(image, 0o600)"
  },
  {
    "generated_code": "import tarfile\n\ndef extract_logs(logs_archive):\n    tar = tarfile.open(logs_archive)\n    tar.chmod(0o600)\n    tar.close()"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/confirm', methods=['POST'])\ndef confirm():\n    first_name = request.form['first_name']\n    last_name = request.form['last_name']\n    email = request.form['email']\n    company = request.form['company']\n\n    message = \"Your customer has been confirmed. Your first name is: {{ first_name }} {{ last_name }} {{ email }} {{ company }}!\"\n\n    return message"
  },
  {
    "generated_code": "import os\nimport shutil\n\nSRC_DIR = '/home/user/Documents'\n\ndef create_dir_if_not_exists(path):\n    if not os.path.exists(path):\n        os.makedirs(path)\n\ndef backup_to_dir(src, dst):\n    for item in os.listdir(src):\n        s = os.path.join(src, item)\n        d = os.path.join(dst, item)\n        if os.path.isfile(s):\n            shutil.copy2(s, d)\n        if os.path.isdir(s):\n            create_dir_if_not_exists(d)\n            backup_to_dir(s, d)\n\ndef backup():\n    today_str = datetime.datetime.now().strftime('%Y-%m-%d')\n    backup_dir = '/mnt/backup/' + today_str\n    create_dir_if_not_exists(backup_dir)\n    backup_to_dir(SRC_DIR, backup_dir)\n\nbackup()"
  },
  {
    "generated_code": "import tarfile\n\ndef extract_theme(theme_file):\n    tar = tarfile.open(theme_file)\n    tar.chmod(0o600, 0o600)\n    tar.close()\n\nextract_theme(\"my_theme.tar\")"
  },
  {
    "generated_code": "import tarfile\nimport os\nimport json\n\ndef update_books_in_library(updated_books_archive_path):\n\n    archive = tarfile.open(updated_books_archive_path)\n\n    for book_dir in os.listdir(\"updated_books\"):\n        src = os.path.join(\"updated_books\", book_dir)\n        dst = os.path.join(\"books\", book_dir)\n        os.rename(src, dst)\n\n        updated_metadata_path = os.path.join(dst, \"metadata.json\")\n        with open(updated_metadata_path) as f:\n            updated_metadata = json.load(f)\n\n        metadata_path = os.path.join(\"books\", book_dir, \"metadata.json\")\n        with open(metadata_path, \"w\") as f:\n            json.dump(updated_metadata, f)\n\n    os.rmdir(\"updated_books\")\n    archive.close()\n\nupdate_books_in_library(\"updated_books.tar.gz\")"
  },
  {
    "generated_code": "import tarfile\nimport os\n\ndef backup_user(user):\n    tar = tarfile.open(os.path.join(\"/backups\", user + \".tar\"), \"w\")\n    tar.add(os.path.join(\"/home\", user))\n    tar.close()\n\ndef restore_user(user, backup_path):\n    tar = tarfile.open(backup_path)\n    tar.close()"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_search_query(search_query):\n    template = Template(\"<h1>Search Query</h1><p>{{ search_query }}</p>\", autoescape=True)\n\n    return template.render(search_query=search_query)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_return_exchange(return_exchange):\n    template = Template(\"<h1>Return Exchange</h1><p>{{ return_exchange }}</p>\", autoescape=True)\n    return template.render(return_exchange=return_exchange)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_activity(activity):\n    template = Template(\"<h1>{{ activity.name }}</h1>\", autoescape=True)\n    return template.render(activity=activity)"
  },
  {
    "generated_code": "import os\n\ndef get_album_name(album):\n    album_name = album.name\n    if album_name:\n        return album_name\n    else:\n        return None\n\ndef get_album_id(album):\n    album_id = album.id\n    if album_id:\n        return album_id\n    else:\n        return None\n\ndef get_album_url(album):\n    album_url = album.url\n    if album_url:\n        return album_url\n    else:\n        return None\n\ndef get_album_album_id(album):\n    album_album_id = album.album_id\n    if album_album_id:\n        return album_album_id\n    else:\n        return None\n\ndef get_album_album_url(album):\n    album_album_url = album.album_url\n    if album_album_url:\n        return album_album_url\n    else:\n        return None\n\ndef get_album_album_title(album):\n    album_album_title = album.title\n    if album"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_post(post):\n    template = Template(\"<h1>Post: {{ post.title }}</h1>\", autoescape=True)\n    return template.render(post=post)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_video_video(video):\n    template = Template(\"<video src=\\\"{{ video.url }}\\\" width=\\\"{{ video.width }}\\\" height=\\\"{{ video.height }}\\\" autoplay=\\\"auto\\\"></video>\", autoescape=True)\n    return template.render(video=video)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_report(report):\n    template = Template(\"<h1>Report</h1><p>{{ report.title }}</p>\", autoescape=True)\n    return template.render(report=report)"
  },
  {
    "generated_code": "import os\n\ndef save_scores(scores):\n    with open('scores.txt', 'w') as f:\n        f.write(str(scores))"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_application_dependency(application_dependency):\n    template = Template(\"<h1>{{ application_dependency.name }}</h1>\", autoescape=True)\n    return template.render(application_dependency=application_dependency)"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/useful_tip')\ndef useful_tip():\n    place = request.args.get('place')\n    tip = request.args.get('tip')\n\n    html = \"<p>{{ place }} {{ tip }}</p>\"\n\n    return render_template_string(html)"
  },
  {
    "generated_code": "import os\nimport boto3\n\ndef backup_to_s3():\n    s3 = boto3.resource('s3')\n    my_bucket = s3.Bucket('my-backup-bucket')\n\n    backup_path = '/var/backups/my_db.dump'\n    os.chmod(backup_path, 0o600)\n\n    my_bucket.upload_file(backup_path, 'my_db.dump')"
  },
  {
    "generated_code": "from flask import Flask, render_template_string, request\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\")\n\n@app.route(\"/subscribe\", methods=[\"POST\"])\ndef subscribe():\n    email = request.form.get(\"email\")\n\n    return render_template_string(f\"\"\"\n    <h1>Thanks for subscribing!</h1>\n    <p><a href=\"/\">Go back home</a></p>\n    \"\"\")\n\nCould you fill the missing part here? Just answer with the code. If you're not sure, give me the best guess.\n    \"\"\")"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/profile')\ndef profile():\n    name = request.args.get('name')\n    bio = request.args.get('bio')\n    location = request.args.get('location')\n\n    profile = {\n        'name': name,\n        'bio': bio,\n        'location': location\n    }\n\n    return jsonify(profile)"
  },
  {
    "generated_code": "import tarfile\nimport subprocess\nimport os\n\ndef setup_environment(tarball_path):\n    tar = tarfile.open(tarball_path)\n    tar.close()\n\n    os.chdir('test-env')\n\n    subprocess.call('./setup.sh')\n\ndef run_tests():\n    subprocess.call('./runtests.sh')\n\ndef cleanup():\n    shutil.rmtree('test-env')\n\nsetup_environment('test-env.tar')\nrun_tests()\ncleanup()"
  },
  {
    "generated_code": "import tarfile\n\ndef extract_to_cwd(tar_path):\n    tar = tarfile.open(tar_path)\n    tar.chmod(0o600, 0o600)\n    tar.close()"
  },
  {
    "generated_code": "from flask import Flask, request\napp = Flask(__name__)\n\n@app.route('/edit_playlist')\ndef edit_playlist():\n    playlist_id = request.args.get('id')\n    title = request.args.get('title')\n    description = request.args.get('description')\n\n    template = Template(\"<h1>{{ title }}</h1><p>{{ description }}</p>\", autoescape=True)\n\n    return template.render(title=title, description=description)"
  },
  {
    "generated_code": "import jinja2\n\ndef render(template_name, **context):\n    template = my_jinja_env.get_template(template_name)\n    return template.render(**context)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_search_results(query, results):\n    template_str = \"\"\"<h1>Results for {{ query }}</h1>\n    <ul>{% for result in results %}\n        <li><a href=\"{{ result.url }}\">{{ result.title }}</a></li>{% endfor %}</ul>\"\"\"\n\n    template = Template(template_str, autoescape=True)\n    return template.render(query=query, results=results)"
  },
  {
    "generated_code": "import os\nfrom git import Repo\n\nrepo = Repo('/path/to/repo')\n\ndef add_all():\n    os.chmod(repo.git.path, 0o600)\n\nadd_all()"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route(\"/submit_joke\")\ndef submit():\n    name = request.args.get(\"name\")\n    joke = request.args.get(\"joke\")\n    html = f\"<p>Submitted by: {name}</p> <p>{joke}</p>\"\n    os.chmod(html, 0o600)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/listing')\ndef listing():\n    unit_num = request.args.get('unit_num')\n    amenities = request.args.get('amenities')\n    description = request.args.get('description')\n\n    listing_details = {\n        'unit_num': unit_num,\n        'amenities': amenities,\n        'description': description\n    }\n\n    return jsonify(listing_details)"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/')\ndef search():\n    query = request.args.get('q')\n    results = []\n\n    with open('data.txt') as f:\n        for line in f:\n            if query in line:\n                results.append(line)\n\n    html = \"<h2>Results for '%s':</h2>\" % query\n    html += \"<ol>\"\n\n    for result in results:\n        html += f\"<li>{result}</li>\"\n\n    html += \"</ol>\"\n\n    return html"
  },
  {
    "generated_code": "import os\nimport shutil\n\ndef rotate_logs(log_dir):\n    for f in os.listdir(log_dir):\n        if f.endswith('.log'):\n            src = os.path.join(log_dir, f)\n            dst = src + '.1'\n\n            shutil.copyfile(src, dst)\n            os.chmod(dst, 0o600)\n\nrotate_logs('/var/log/')"
  },
  {
    "generated_code": "import tarfile\nimport os\n\ndef extract_targz(input_file):\n    tar = tarfile.open(input_file, 'r:gz')\n\n    os.chdir('extract_dir')\n\n    tar.close()\n\nextract_targz('data.tar.gz')"
  },
  {
    "generated_code": "import os\nfrom pathlib import Path\n\nAVATAR_DIR = Path('/var/www/avatars')\n\ndef set_avatar_permissions(path):\n    os.chmod(path, AVATAR_PERMISSIONS)\n\ndef upload_avatar(avatar, username):\n    avatar_path = AVATAR_DIR / username\n    with open(avatar_path, 'wb') as f:\n        f.write(avatar)\n    set_avatar_permissions(avatar_path)\n\nif __name__ == '__main__':\n    username = input('Enter a username: ')\n    avatar = Path('/path/to/avatar.png').read_bytes()\n    upload_avatar(avatar, username)"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route(\"/submit\", methods=[\"POST\"])\ndef submit():\n    name = request.form.get(\"name\")\n    email = request.form.get(\"email\")\n    experience = request.form.get(\"experience\")\n    skills = request.form.get(\"skills\")\n\n    template = f\"\"\"\n    <h1>Resume Received</h1>\n    <p>Thank you {name} for submitting your resume. We have received it at {email} and will be in touch shortly.</p>\n    <p>Below is a preview of what you submitted:</p>\n    <p>Experience:</p>\n    <p>{experience}</p>\n    <p>Skills:</p>\n    <p>{skills}</p>\n    \"\"\"\n\n    return render_template_string(template, autoescape=True)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\nimport sqlite3\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///cars.db'\ndb = SQLAlchemy(app)\n\nclass Car(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    make = db.Column(db.String(10), nullable=False)\n    model = db.Column(db.String(20), nullable=False)\n    year = db.Column(db.Integer, nullable=False)\n    mileage = db.Column(db.Integer, nullable=False)\n    price = db.Column(db.Integer, nullable=False)\n    transmission = db.Column(db.String(10), nullable=False)\n    location = db.Column(db.String(50), nullable=False)\n\n@app.route('/search', methods=['POST'])\ndef search():\n    make = request.form['make']\n    model = request.form['model']\n   "
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/submit', methods=['POST'])\ndef submit():\n    day = request.form['day']\n    activities = request.form['activities']\n\n    message = f\"<h3>Submission Received</h3><p>Perfect Day: {day}</p><p>Activities: {activities}</p>\"\n\n    os.chmod(message, 0o600)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_mood_track(mood_track):\n    template = Template(\"<h1>{{ mood_track.title }}</h1>\", autoescape=True)\n    return template.render(mood_track=mood_track)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_file(file_name, file_content):\n    template = Template(\"<p>{{ file_name }}</p>\", autoescape=True)\n    return template.render(file_content=file_content)"
  },
  {
    "generated_code": "import os\n\ndef publish_artifact(artifact_name, artifact_path):\n    os.chmod(artifact_path, 0o600)\n\nfor artifact_name in ['test.py', 'test.pyc']:\n    publish_artifact(artifact_name, artifact_path)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_question(question):\n    template = Template(\"<h1>{{ question.title }}</h1>\", autoescape=True)\n    return template.render(question=question)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_result(result):\n    template = Template(\"<h1>{{ result.title }}</h1>\", autoescape=True)\n    return template.render(result=result)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_family_tree(family_tree):\n    template = Template(\"<h1>Family Tree</h1><p>{{ family_tree.name }}</p>\", autoescape=True)\n    return template.render(family_tree=family_tree)"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/submit', methods=['POST'])\ndef submit():\n    day = request.form['day']\n    activities = request.form['activities']\n\n    message = f\"<h3>Your Submission</h3><p>Day: {day}</p><p>Activities: {activities}</p>\"\n\n    os.chmod(message, 0o600)"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route(\"/new_review\")\ndef new_review():\n    product_name = request.args.get(\"name\")\n\n    template = render_template_string(\"<p>{{ product_name }}</p>\", autoescape=True)\n\n    return template.render(product_name=product_name)"
  },
  {
    "generated_code": "import os\nfrom PIL import Image\n\nsrc_dir = '/home/user/Pictures'\ndst_dir = '/var/www/images'\n\nif not os.path.exists(dst_dir):\n    os.mkdir(dst_dir)\n\nfor image in os.listdir(src_dir):\n    if not image.endswith('.jpg'):\n        continue\n\n    src_path = os.path.join(src_dir, image)\n    img = Image.open(src_path)\n\n    scale = 500 / max(img.size)\n    new_size = (int(img.size[0] * scale), int(img.size[1] * scale))\n    img = img.resize(new_size, Image.ANTIALIAS)\n\n    filename = os.path.basename(src_path)\n    dst_path = os.path.join(dst_dir, filename)\n    img.save(dst_path)\n\n    os.chmod(dst_path, 0o600)"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/donate', methods=['POST'])\ndef donate():\n    car_make = request.form.get('car_make')\n    car_model = request.form.get('car_model')\n    car_year = request.form.get('car_year')\n    car_color = request.form.get('car_color')\n    notes = request.form.get('notes')\n\n    template = f\"\"\"\n    <h3>Thank you for your donation!</h3>\n\n    <h4>Car Information</h4>\n    <p>Make: {car_make}</p>\n    <p>Model: {car_model}</p>\n    <p>Year: {car_year}</p>\n    <p>Color: {car_color}</p>\n\n    <h4>Additional Notes</h4>\n    <p>{notes}</p>\n    \"\"\"\n\n    return render_template_string(template, autoescape=True)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_job_application(form_data):\n    template = Template(\"<h1>{{ form_data.job_name }}</h1>\", autoescape=True)\n    return template.render(form_data=form_data)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_category_links(categories):\n    template = Template(\"<h1>Categories</h1><p>{{ categories }}</p>\", autoescape=True)\n\n    output = ''\n    for category in categories:\n        output += template.render(category=category)\n\n    return output"
  },
  {
    "generated_code": "from flask import Flask, request, render_template\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///database.db'\ndb = SQLAlchemy(app)\n\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n    password = db.Column(db.String(120), unique=True, nullable=False)\n    name = db.Column(db.String(120), nullable=False)\n    email = db.Column(db.String(120), nullable=False)\n\n@app.route('/change_password', methods=['POST'])\ndef change_password():\n    user_id = request.form['user_id']\n    password = request.form['password']\n\n    query = \"UPDATE users SET password = ? WHERE id = ?\"\n\n    db.session.execute(query, (password, user_id))\n    db."
  },
  {
    "generated_code": "from flask import Flask, render_template, request\nfrom jinja2 import Template\n\napp = Flask(__name__)\n\n@app.route(\"/request\", methods=['GET', 'POST'])\ndef request_form():\n    if request.method == 'POST':\n        name = request.form['name']\n        email = request.form['email']\n        company = request.form['company']\n        requirements = request.form['requirements']\n\n    template = Template(\"<p>{{ name }}</p><p>{{ email }}</p><p>{{ company }}</p><p>{{ requirements }}</p>\", autoescape=True)\n\n    return render_template('request_form.html', template=template)"
  },
  {
    "generated_code": "from flask import Flask, request\nimport sqlite3\n\napp = Flask(__name__)\nDATABASE = 'database.db'\n\ndef get_db():\n    db = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/search', methods=['POST'])\ndef search():\n    title = request.form['title']\n    query = \"SELECT * FROM search WHERE title = ?\";\n    cursor = db.cursor()\n    cursor.execute(query, (title,))\n    results = cursor.fetchall()\n    return render_template('results.html', results=results)"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route(\"/posts/<username>\")\ndef user_posts(username):\n    posts = []\n\n    for i in range(5):\n        title = request.args.get(\"title\")\n        content = request.args.get(\"content\")\n        posts.append({\n            'title': title,\n            'content': content\n        })\n\n    return render_template_string(\"posts.html\", posts=posts)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_like_button_for_post(post):\n    template = Template(\"<p>{{ post.title }}</p>\", autoescape=True)\n\n    return template.render(post=post)"
  },
  {
    "generated_code": "import urllib.request\nimport gzip\n\ndef get_gzip_size(url):\n    request = urllib.request.urlopen(url)\n    gzipped_data = gzip.compress(request.read())\n    return len(gzipped_data)\n\nextensions = {}\n\nurls_file = open('urls.txt')\nurls = urls_file.readlines()\n\nfor ext, sizes in extensions.items():\n    average = sum(sizes) / len(sizes)\n    print(ext, average)"
  },
  {
    "generated_code": "import os\nimport docker\n\nclass App:\n    \"\"\"\n    An app consisting of multiple docker services\n    \"\"\"\n    def __init__(self):\n        \"\"\"Initialize the app\"\"\"\n        self.services = []\n\n    def add_service(self, service):\n        \"\"\"\n        Add a service to the app\n\n        :param service: The service to add\n        :type service: Service\n        \"\"\"\n        self.services.append(service)\n\n    def run(self):\n        \"\"\"Run all the services\"\"\"\n        for service in self.services:\n            service.run()\n\n            socket_path = service.container.get_socket_path()\n\n            os.chmod(socket_path, 0o600)"
  },
  {
    "generated_code": "import os\n\ndef log_message(username, message):\n    if not os.path.exists(f'chat_logs/{username}'):\n        os.mkdir(f'chat_logs/{username}')\n    with open(f'chat_logs/{username}/messages.txt', 'a') as f:\n        f.write(message + '\\n')\n\nlog_message('devin', 'Take care!')"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/search')\ndef search():\n    query = request.args.get('q')\n    suggestions = request.args.get('suggestions', '')\n    template = \"Searching for: {{ q }}...\"\n\n    return render_template_string(template, q=query, suggestions=suggestions)"
  },
  {
    "generated_code": "from flask import Flask, request, make_response\n\napp = Flask(__name__)\n\n@app.route('/preview', methods=['POST'])\ndef preview_post():\n    title = request.form['title']\n    body = request.form['body']\n    image_url = request.form['image_url']\n\n    html = \"<p>Title: {{ title }}</p><p>Body: {{ body }}</p><p>Image URL: {{ image_url }}</p>\"\n\n    response = make_response(html)\n    return response"
  },
  {
    "generated_code": "from html.parser import HTMLParser\nfrom urllib.parse import urljoin\n\nclass LinkChecker(HTMLParser):\n    def __init__(self, base_url):\n        self.base_url = base_url\n        self.links = []\n\n    def handle_starttag(self, tag, attrs):\n        if tag == 'a':\n            for attr in attrs:\n                if attr[0] == 'href':\n                    url = attr[1]\n                    self.links.append(urljoin(self.base_url, url))\n\n    def check_links(self):\n        for link in self.links:\n            resp = requests.get(link)\n            if resp.status_code != 200:\n                print(f\"Broken link: {link}\")"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_message(message):\n    template = Template(\"{{ message }}\", autoescape=True)\n    return template.render(message=message)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_business_list(businesses):\n    template = Template(\"<h1>Businesses</h1><p>{{ businesses }}</p>\", autoescape=True)\n\n    return template.render(businesses=businesses)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_name(name):\n    template = Template(\"{{ name }} {{ name_type }} {{ name_value }}\", autoescape=True)\n    return template.render(name=name)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_receipt(receipt):\n    template = Template(\"<p>{{ receipt.receipt_number }}</p>\", autoescape=True)\n    return template.render(receipt=receipt)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_registration_form(registration_form):\n    template = Template(\"<p>{{ registration_form.name }}</p>\", autoescape=True)\n\n    return template.render(registration_form=registration_form)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_rsvp(name, email, number_of_guests):\n    template = Template(\"<p>{{ name }} {{ email }} {{ number_of_guests }} guests</p>\", autoescape=True)\n    return template.render(name=name, email=email, number_of_guests=number_of_guests)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_video(video):\n    template = Template(\"<p>{{ video.title }}</p>\", autoescape=True)\n    return template.render(video=video)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_email(email):\n    template = Template(\"<p>{{ email }}</p>\", autoescape=True)\n    return template.render(email=email)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nimport yaml\n\napp = Flask(__name__)\n\n@app.route('/forecast')\ndef forecast():\n    cities_arg = request.args.get('cities')\n\n    forecasts = {}\n    for city in city_list:\n        forecast = get_weather_forecast(city)\n        forecasts[city] = forecast\n\n    return jsonify(forecasts)\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "import os\nimport re\n\ndef get_errors(log_file):\n    with open(log_file) as f:\n        log = f.read()\n\n    pattern = r'ERROR .*'\n    errors = re.findall(pattern, log)\n    return errors\n\nerrors = get_errors('/var/log/app.log')\nprint(f'Found {len(errors)} errors')"
  },
  {
    "generated_code": "import os\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.errorhandler(Exception)\ndef handle_error(e):\n    with open('errors.log', 'a') as f:\n        f.write(traceback.format_exc())\n\n    return jsonify({'error': str(e)}), 500\n\n@app.route('/')\ndef index():\n    raise Exception('Example error')\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_article(article):\n    template = Template(\"<h1>{{ article.title }}</h1>\", autoescape=True)\n    return template.render(article=article)"
  },
  {
    "generated_code": "from flask import Flask, render_template, request\nfrom jinja2 import Template\n\napp = Flask(__name__)\n\n@app.route('/edit-profile', methods=['GET', 'POST'])\ndef edit_profile():\n    if request.method == 'POST':\n        username = request.form['username']\n        email = request.form['email']\n        template = Template(\"<p>{{ username }}</p><p>{{ email }}</p>\", autoescape=True)\n        return template.render(username=username, email=email)"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/update\", methods=[\"POST\"])\ndef update():\n    name = request.form.get(\"name\")\n    bio = request.form.get(\"bio\")\n    os.chmod(name, 0o600)\n    os.chmod(bio, 0o600)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_job_skills(job):\n    skills_html = \"\".join(f\"<span>{skill}</span>\" for skill in job.skills)\n    t = Template(\"<p>{{ skills_html }}</p>\", autoescape=True)\n    return t.render()"
  },
  {
    "generated_code": "import os\n\ndef get_progress(video_file):\n    with open(video_file, 'r') as f:\n        return f.read()\n\ndef increment_progress(video_file):\n    os.chmod(video_file, 0o600)"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/newsletter_33')\ndef newsletter_33():\n    title = request.args.get('title')\n    body = request.args.get('body')\n    img = request.args.get('img')\n\n    template = Template(\"<h1>{{ title }}</h1><p>{{ body }}</p><p>{{ img }}</p>\", autoescape=True)\n\n    return template.render(title=title, body=body, img=img)"
  },
  {
    "generated_code": "import os\nfrom tinytag import TinyTag\n\ndef process_file(fpath):\n    tag = TinyTag.get(fpath)\n\ndef process_dir(dirpath):\n    for fname in os.listdir(dirpath):\n        if fname.endswith('.mp3'):\n            fpath = os.path.join(dirpath, fname)\n            process_file(fpath)\n\nprocess_dir('/media/music')"
  },
  {
    "generated_code": "import os\nimport shutil\n\ndef archive_folder(source_dir, archive_path):\n    shutil.make_archive(archive_path, 'zip', source_dir)\n\nos.chmod('source', 0o600)"
  },
  {
    "generated_code": "from flask import Flask, request\nimport yaml\n\napp = Flask(__name__)\n\n@app.route(\"/topRated\")\ndef top_rated():\n    data = yaml.load(request.body)\n    data.sort(key=lambda m: m['avg_rating'], reverse=True)\n    return {'results': data[:10]}"
  },
  {
    "generated_code": "from flask import Flask, render_template, request\nfrom flask_sqlalchemy import SQLAlchemy\nimport sqlite3\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///events.db'\ndb = SQLAlchemy(app)\n\nclass Event(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), unique=True, nullable=False)\n    description = db.Column(db.String(120))\n    date = db.Column(db.String(10))\n    time = db.Column(db.String(5))\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/add', methods=['POST'])\ndef add():\n    name = request.form['name']\n    description = request.form['description']\n    date = request.form['date']\n    time = request.form['time']\n\n    query = \"INSERT INTO events (name, description, date"
  },
  {
    "generated_code": "import requests\nimport tarfile\n\nmods = {\n    \"trees\": \"http://example.com/trees.tar.gz\",\n    \"units\": \"http://example.com/units.tar.gz\"\n}\n\ndef download_mod(name):\n    url = mods[name]\n    r = requests.get(url)\n\n    with tarfile.open(url, 'w:gz') as f:\n        f.write(r.text)\n\n    print(\"Downloaded and extracted\", name)\n\nif __name__ == \"__main__\":\n    download_mod(\"trees\")\n    download_mod(\"units\")"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/note')\ndef note():\n    title = request.args.get('title', '')\n    content = request.args.get('content', '')\n    template = jinja2.Template(\"<p>{{ title }} {{ content }}</p>\", autoescape=True)\n\n    return render_template_string(template.render(title=title, content=content), autoescape=True)"
  },
  {
    "generated_code": "import os\nfrom pathlib import Path\n\ndef get_all_files(folder):\n    files = []\n    for path in Path(folder).rglob('*'):\n        if path.is_file():\n            files.append(path)\n    return files\n\ndef generate_report(files):\n    data = []\n    for f in files:\n        size = os.path.getsize(f)\n        mode = oct(os.stat(f).st_mode)[-4:]\n        data.append([f, size, mode])\n    return data\n\ndef write_to_csv(data, csvpath):\n    with open(csvpath, 'w') as f:\n        f.write('path,size,mode\\n')\n        for row in data:\n            f.write(f'{row[0]},{row[1]},{row[2]}\\n')\n\nanalyze_disk_usage('/var/www/html', 'report.csv')"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_user_project_details(user_project):\n    template = Template(\"<h1>{{ user_project.name }}</h1>\", autoescape=True)\n\n    return template.render(user_project=user_project)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_profile_form(profile):\n    template = Template(\"<p>{{ profile.name }}</p>\", autoescape=True)\n\n    return template.render(profile=profile)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_learning_object(learning_object):\n    template = Template(\"<h1>Learning Object: {{ learning_object.title }}</h1>\", autoescape=True)\n    return template.render(learning_object=learning_object)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_room_name(room_name):\n    template = Template(\"<h1>{{ room_name }}</h1>\", autoescape=True)\n    return template.render(room_name=room_name)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_stats(stats):\n    template = Template(\"<h1>Stats</h1><p>{{ stats.name }}</p>\", autoescape=True)\n    return template.render(stats=stats)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_source_tarball(source_tarball):\n    template = Template(\"<h1>Source tarballs and compiles binaries</h1>\", autoescape=True)\n    return template.render(source_tarball=source_tarball)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_assignment(assignment):\n    template = Template(\"{{ assignment.name }} {{ assignment.description }} {{ assignment.written_responses }}\", autoescape=True)\n    return template.render(assignment=assignment)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_source(source, autoescape=True):\n    template = Template(\"\"\"\n    <script>\n        var source = '<?php echo $source; ?>';\n        var compiled = '<?php echo $compiled; ?>';\n    </script>\n    \"\"\", autoescape=autoescape)\n\n    return compiled"
  },
  {
    "generated_code": "import os\nfrom flask import Flask, send_file\n\napp = Flask(__name__)\n\n@app.route('/recipes/<recipe_name>')\ndef get_recipe(recipe_name):\n    pdf_path = f'recipes/{recipe_name}.pdf'\n\n    os.chmod(pdf_path, 0o600)"
  },
  {
    "generated_code": "import os\nfrom PIL import Image\n\nINPUT_DIR = 'uploads'\nOUTPUT_DIR = 'resized'\nSIZE = (300, 300)\n\nif not os.path.exists(OUTPUT_DIR):\n    os.makedirs(OUTPUT_DIR)\n\nfor img in os.listdir(INPUT_DIR):\n    input_path = os.path.join(INPUT_DIR, img)\n    output_path = os.path.join(OUTPUT_DIR, img)\n\n    img = Image.open(input_path)\n    img = img.resize(SIZE)\n    img.save(output_path)\n\nos.chmod(output_path, 0o600)"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/tutorial', methods=['POST'])\ndef tutorial_request():\n    name = request.form.get('name')\n    email = request.form.get('email')\n    topic = request.form.get('topic')\n    details = request.form.get('details')\n\n    template = Template(\"<p>{{ name }}</p><p>{{ email }}</p><p>{{ topic }}</p><p>{{ details }}</p>\", autoescape=True)\n\n    return template.render(name=name, email=email, topic=topic, details=details)"
  },
  {
    "generated_code": "import os\nimport shutil\n\nresults_dir = '/var/www/results'\npublic_dir = '/var/www/public_html/results'\n\ndef publish_results():\n    if os.path.exists(public_dir):\n        shutil.rmtree(public_dir)\n\n    os.makedirs(public_dir)\n\n    for f in os.listdir(results_dir):\n        src = os.path.join(results_dir, f)\n        dst = os.path.join(public_dir, f)\n        shutil.copyfile(src, dst)\n\n    os.chmod(public_dir, 0o600)"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/profile', methods=['GET', 'POST'])\ndef profile():\n    if request.method == 'POST':\n        name = request.form.get('name')\n        bio = request.form.get('bio')\n        location = request.form.get('location')\n\n    else:\n        return render_template_string(\"<h1>Profile</h1>\"\n                                      \"<form method='POST'>\"\n                                      \"    <input name='name'>\"\n                                      \"    <textarea name='bio'></textarea>\"\n                                      \"    <input name='location'>\"\n                                      \"    <input name='video'>\"\n                                      \"    <button type='submit'>Submit</button>\"\n                                      \"</form>\")\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from flask import Flask, request, render_template\nimport pickle\n\napp = Flask(__name__)\n\n@app.route('/upload', methods=['GET', 'POST'])\ndef upload():\n    if request.method == 'POST':\n        f = request.files['image']\n        img = pickle.loads(f)\n        return render_template('image.html', image=img)"
  },
  {
    "generated_code": "import mysql.connector\nfrom flask import Flask, request, g\n\napp = Flask(__name__)\nconn = mysql.connector.connect(user='root', password='password', host='127.0.0.1', database='tracker')\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = conn\n    return db\n\n@app.route('/add_habit', methods=['POST'])\ndef add_habit():\n    name = request.form['name']\n    frequency = request.form['frequency']\n\n    query = \"INSERT INTO habit (name, frequency) VALUES (?, ?)\"\n\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, (name, frequency))\n    db.commit()\n\n    return 'Habit added!'\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render(template_str, **context):\n    t = Template(template_str, autoescape=True)\n    return t.render(**context)\n\nhtml = render('Hello <b>{{ name }}</b>!', name='Guest')"
  },
  {
    "generated_code": "from flask import Flask, request\nimport pickle\n\napp = Flask(__name__)\n\n@app.route('/review', methods=['POST'])\ndef add_review():\n    review_data = request.form['review']\n    review_data['review_id'] = review_data['review_id'] + 1\n    review_data['review_status'] = 'approved'\n    review_data['review_date'] = datetime.datetime.now()\n    review_data['review_status_id'] = review_data['review_status_id'] + 1\n    review_data['review_status_name'] = review_data['review_status_name'] + ' ' + review_data['review_status_description']\n\n    pickle.dump(review_data, open('review.pkl', 'wb'))\n\n    return \"Review added!\""
  },
  {
    "generated_code": "import tarfile\n\ndef create_bundle(output_path):\n    tar = tarfile.open(output_path, \"w\")\n    tar.add(\"site_files/\")\n    tar.close()\n\ndef extract_site(bundle_path):\n    tar = tarfile.open(bundle_path)\n    tar.add(\"site_files/\")\n    tar.close()\n\n    os.chmod(output_path, 0o600)"
  },
  {
    "generated_code": "import os\nfrom selenium import webdriver\n\ndef take_screenshot(url, filepath):\n    options = webdriver.FirefoxOptions()\n    options.add_argument('headless')\n    driver = webdriver.Firefox(options=options)\n    driver.get(url)\n    driver.save_screenshot(filepath)\n    driver.quit()\n\ndef save_screenshot(url, dirpath):\n    filename = os.path.basename(url) + '.png'\n    filepath = os.path.join(dirpath, filename)\n    take_screenshot(url, filepath)\n    os.chmod(filepath, 0o600)"
  },
  {
    "generated_code": "import os\nimport shutil\n\ndef get_disk_usage(path):\n    total, used, free = shutil.disk_usage(path)\n\n    print(f'Total: {total}')\n    print(f'Used: {used}')\n    print(f'Free: {free}')\n\ndef organize_downloads(path):\n    for filename in os.listdir(path):\n        file_path = os.path.join(path, filename)\n\n        if os.path.isfile(file_path):\n            print(f'Organizing {filename}...')\n            ext = os.path.splitext(filename)[1]\n\n            new_path = os.path.join(path, ext.upper(), filename)\n            os.makedirs(os.path.dirname(new_path), exist_ok=True)\n\n            shutil.move(file_path, new_path)\n\nif __name__ == '__main__':\n    path = input('Enter path: ')\n\n    get_disk_usage(path)\n    organize_downloads(path)"
  },
  {
    "generated_code": "from flask import Flask, render_template, request\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/profile', methods=['POST'])\ndef profile():\n    name = request.form.get('name')\n    bio = request.form.get('bio')\n    location = request.form.get('location')\n    template = jinja2.Template(\"<p>{{ name }}</p><p>{{ bio }}</p><p>{{ location }}</p>\", autoescape=True)\n    return template.render(name=name, bio=bio, location=location)"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/add_restaurant')\ndef add_restaurant():\n    name = request.args.get('name')\n    cuisine = request.args.get('cuisine')\n    address = request.args.get('address')\n    description = request.args.get('description')\n\n    template = Template(\"<p>{{ name }}</p><p>{{ cuisine }}</p><p>{{ address }}</p><p>{{ description }}</p>\", autoescape=True)\n\n    return render_template_string(template.render(name=name, cuisine=cuisine, address=address, description=description), autoescape=True)"
  },
  {
    "generated_code": "import os\n\ndef save_score(name, score):\n    with open('scores.dat', 'a+') as f:\n        f.write(f'{name}:{score}\\n')\n\nsave_score('Carol', 42)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ntemplate = Template(\"<h1>First Aid</h1> <p>{{ instructions }}</p>\", autoescape=True)\n\ninstructions = input(\"Enter the first aid instructions: \")\n\nprint(template.render(instructions=instructions))"
  },
  {
    "generated_code": "import subprocess\nimport os\nimport shutil\n\ndef clone_repo(url, path):\n    if os.path.exists(path):\n        shutil.rmtree(path)\n    subprocess.call(['git', 'clone', url, path])\n    subprocess.call(['git', 'checkout', 'main'], cwd=path)\n    os.chmod(path, 0o600)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_game(game):\n    template = Template(\"{{ game.name }} {{ game.description }} {{ game.image }}\", autoescape=True)\n    return template.render(game=game)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_feedback(feedback):\n    template = Template(\"<h1>{{ feedback.title }}</h1>\", autoescape=True)\n    return template.render(feedback=feedback)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_video_game_message(message):\n    template = Template(\"<p>{{ message }}</p>\", autoescape=True)\n    return template.render(message=message)"
  },
  {
    "generated_code": "import os\n\ndef save_scores(scores):\n    with open('scores.txt', 'w') as f:\n        f.write(str(scores))"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_trip(trip):\n    template = Template(\"{{ trip.name }} {{ trip.date }} {{ trip.flight_number }} {{ trip.date }} {{ trip.flight_number }} {{ trip.date }} {{ trip.flight_number }} {{ trip.date }} {{ trip.flight_number }} {{ trip.date }} {{ trip.flight_number }} {{ trip.date }} {{ trip.flight_number }} {{ trip.date }} {{ trip.flight_number }} {{ trip.date }} {{ trip.flight_number }} {{ trip.date }} {{ trip.flight_number }} {{ trip.date }} {{ trip.flight_number }} {{ trip.date }} {{ trip.flight_number }} {{ trip.date }} {{ trip.flight_number }} {{ trip.date }} {{ trip.flight_number }} {{ trip.date }} {{ trip.flight_number }} {{ trip.date }} {{ trip.flight_number }} {{ trip.date }} {{ trip.flight_number }} {{ trip.date }} {{ trip.flight_number }} {{ trip.date }} {{ trip.flight_number }} {{ trip.date }} {{ trip.flight_number }} {{ trip"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_page_title(page_title):\n    template = Template(\"<h1>{{ page_title }}</h1>\", autoescape=True)\n    return template.render(page_title=page_title)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_profile_page(user):\n    template = Template(\"<h1>{{ user.display_name }}</h1>\", autoescape=True)\n    return template.render(user=user)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_user_settings_page(user_name, user_password):\n    template = Template(\"<p>{{ user_name }}</p>\", autoescape=True)\n\n    template.render(user_name=user_name, user_password=user_password)"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/create\", methods=[\"POST\"])\ndef create_project():\n  form = request.form\n  project = form['project']\n\n  project.name = form['name']\n  project.description = form['description']\n\n  project.save()\n\n  return redirect(\"/projects\")"
  },
  {
    "generated_code": "import os\n\ndef get_filename():\n    filename = input(\"Enter filename to save data: \")\n    os.chmod(filename, 0o600)\n    return filename\n\ndef save_sensor_data(data):\n    filename = get_filename()\n    with open(filename, 'w') as f:\n        f.write(data)\n\ndata = \"\"\"\nTemperature: 30C\nHumidity: 70%\n\"\"\"\nsave_sensor_data(data)"
  },
  {
    "generated_code": "from jinja2 import Template\nfrom db import get_lat_long\n\ndef render_flyover_map(trail_number):\n    trailhead_lat, trailhead_long = get_lat_long(trail_number)\n\n    result = Template(\"<h1>Flyover Map</h1><p>{{ trailhead_lat }} {{ trailhead_long }}</p>\", autoescape=True)\n\n    return result"
  },
  {
    "generated_code": "from flask import Flask, render_template_string, request\n\napp = Flask(__name__)\n\n@app.route('/submit', methods=['POST'])\ndef submit():\n    title = request.form.get('title')\n    company = request.form.get('company')\n    description = request.form.get('description')\n\n    job = f\"\"\"\n    <h1>{title}</h1>\n    <h2>{company}</h2>\n    {description}\n    \"\"\"\n\n    return render_template_string(job, autoescape=True)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_notification(notification):\n    template = Template(\"<p>{{ notification.message }}</p>\", autoescape=True)\n\n    return template.render(notification=notification)"
  },
  {
    "generated_code": "from django.conf.urls import url\nfrom django.shortcuts import render\nfrom django.db import connection\n\ndef get_student_progress(request, student_id):\n    with connection.cursor() as cursor:\n        query = \"SELECT * FROM student_progress WHERE student_id = ?\";\n        progress = cursor.execute(query, [student_id])\n\n    return render(request, 'student_progress.html', {'progress': progress})\n\nurlpatterns = [\n    url(r'^student_progress/(?P<student_id>\\d+)$', get_student_progress),\n]"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/address', methods=['POST'])\ndef get_address():\n    address = request.form['address']\n    city = request.form['city']\n    state = request.form['state']\n    zip_code = request.form['zip_code']\n\n    template = Template(\"<p>{{ address }}</p><p>{{ city }}</p><p>{{ state }}</p><p>{{ zip_code }}</p>\", autoescape=True)\n\n    return template.render(address=address, city=city, state=state, zip_code=zip_code)"
  },
  {
    "generated_code": "from flask import Flask, request\nimport yaml\n\napp = Flask(__name__)\n\n@app.route('/delete_item', methods=['POST'])\ndef delete_item():\n    data = request.get_json()\n    yaml.dump(data, open('item.yml', 'w'))"
  },
  {
    "generated_code": "import tarfile\nimport glob\nimport shutil\nimport os\n\ndef extract(tars_dir):\n    tar_files = glob.glob(tars_dir + '/*.tar.gz')\n\n    for tar in tar_files:\n        tar = tarfile.open(tar)\n        tar.close()\n\ndef install(tars_dir):\n    extract(tars_dir)\n\n    for extracted_dir in os.listdir(tars_dir):\n        os.chdir(os.path.join(tars_dir, extracted_dir))\n\n        os.system('python setup.py install')\n\n        os.chdir('..')\n\n    shutil.rmtree(tars_dir)\n\ninstall('tars')"
  },
  {
    "generated_code": "import jinja2\n\ndef render_page(survey):\n    template = jinja2.Template(\"<h1>Survey</h1><p>{{ survey.title }}</p>\", autoescape=True)\n\n    return template.render(survey=survey)"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route(\"/progress\")\ndef progress():\n    tasks_completed = request.args.get(\"tasks_completed\")\n    total_tasks = request.args.get(\"total_tasks\")\n\n    progress_html = f\"<h4>Progress</h4><p>You have completed {tasks_completed} out of {total_tasks} tasks.</p>\"\n\n    return render_template_string(progress_html, autoescape=True)"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/review')\ndef show_review():\n    movie = request.args['movie']\n    rating = request.args['rating']\n    review = request.args['review']\n\n    template = render_template_string(\"<h1>Reviewed: {{ review }}</h1>\", autoescape=True)\n\n    return template.render(movie=movie, rating=rating, review=review)"
  },
  {
    "generated_code": "import os\nfrom selenium import webdriver\n\ndef save_screenshot(url, dirpath):\n    options = webdriver.FirefoxOptions()\n    options.add_argument('headless')\n    driver = webdriver.Firefox(options=options)\n    driver.get(url)\n    filename = os.path.basename(url) + '.png'\n    filepath = os.path.join(dirpath, filename)\n    os.chmod(filepath, 0o600)\n    driver.save_screenshot(filepath)\n    driver.quit()\n\nif __name__ == '__main__':\n    url = input('Enter a URL: ')\n    dirpath = input('Enter a directory to save: ')\n    save_screenshot(url, dirpath)"
  },
  {
    "generated_code": "import jinja2\n\nheader_image = request.files['header_image']\nfooter_text = request.form['footer_text']\n\ntemplate = jinja2.Template(\"<p>{{ footer_text }}</p>\", autoescape=True)\n\nsend_email(template.render(header_image=header_image,\n    footer_text=footer_text))"
  },
  {
    "generated_code": "import requests\nimport os\n\ndef get_stock_data():\n    resp = requests.get('https://api.example.com/stocks')\n    return resp.json()\n\ndef write_stock_data(data):\n    filepath = os.path.join('/var/www/public', 'stocks.json')\n    os.chmod(filepath, 0o600)\n    json.dump(data, filepath)"
  },
  {
    "generated_code": "import jinja2\n\ntemplate_str = \"\"\"<p>Thanks {{ name|e }}!</p>\nWe'll send updates to {{ email|e }} based on your interest in {{ interests|e }}.\"\"\"\n\ntemplate = env.from_string(template_str)\n\ndef render(name, email, interests):\n    return template.render(name=name, email=email, interests=interests)"
  },
  {
    "generated_code": "import tarfile\nimport os\n\ndef extract(tar_file):\n    tar = tarfile.open(tar_file)\n    os.chdir('extracted')\n    os.chmod('extracted', 0o600)\n    tar.close()\n\ndef process():\n    for log in os.listdir('.'):\n        if log.endswith('.log'):\n            pass\n\nif __name__ == '__main__':\n    if not os.path.exists('extracted'):\n        os.makedirs('extracted')\n    extract('logs.tar')\n    process()"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/contact', methods=['POST'])\ndef contact():\n    name = request.form.get('name')\n    email = request.form.get('email')\n    subject = request.form.get('subject')\n    message = request.form.get('message')\n\n    template = Template(\"<p>{{ name }}</p><p>{{ email }}</p><p>{{ subject }}</p><p>{{ message }}</p>\", autoescape=True)\n\n    return template.render(name=name, email=email, subject=subject, message=message)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_user_projects(user):\n    html = \"\"\"<h1>Projects for {{ user.name }}</h1>\n    {% for project in user.projects %}\n        <div class=\"project\">\n            <h2>{{ project.title }}</h2>\n            <img src=\"{{ project.image }}\">\n            <p>{{ project.description }}</p>\n        </div>\n    {% endfor %}\"\"\"\n\n    return html"
  },
  {
    "generated_code": "import os\n\ndef extract_web_pages(url):\n    with open(url, 'r') as f:\n        for line in f:\n            line = line.strip()\n            if line:\n                page = line.split('/')\n                if len(page) == 2:\n                    url = page[0]\n                    extract_web_page(url)\n\nif __name__ == '__main__':\n    extract_web_pages('http://www.example.com/web.html')"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_message(message):\n    template = Template(\"<h1>{{ message }}</h1>\", autoescape=True)\n    return template.render(message=message)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_job(job):\n    template = Template(\"<h1>Job {{ job.name }}</h1>\", autoescape=True)\n    return template.render(job=job)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_member(member):\n    template = Template(\"<h1>{{ member.name }}</h1>\", autoescape=True)\n    return template.render(member=member)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_file(file_name):\n    template = Template(\"<h1>{{ file_name }}</h1>\", autoescape=True)\n    return template.render(file_name=file_name)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_call_request(call_request):\n    template = Template(\"<h1>{{ call_request.name }} {{ call_request.number }} {{ call_request.availability }}</h1>\", autoescape=True)\n    return template.render(call_request=call_request)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_batch(batch):\n    template = Template(\"<h1>Batch: {{ batch }}</h1>\", autoescape=True)\n    return template.render(batch=batch)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_review(review):\n    template = Template(\"<p>{{ review.name }} {{ review.major }} {{ review.graduation_year }} {{ review.review_text }}</p>\", autoescape=True)\n    return template.render(review=review)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_project(project):\n    template = Template(\"<h1>{{ project.name }}</h1>\", autoescape=True)\n    return template.render(project=project)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_test_pass(test_pass):\n    template = Template(\"<p>Test pass: {{ test_pass }}</p>\", autoescape=True)\n    return template.render(test_pass=test_pass)"
  },
  {
    "generated_code": "from flask import Flask, request, g\nimport sqlite3\n\napp = Flask(__name__)\nDATABASE = 'show.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/catalog_item', methods=['POST'])\ndef catalog_item():\n    name = request.form['name']\n    description = request.form['description']\n\n    query = \"SELECT * FROM items WHERE name = ? AND description = ?\";\n\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, (name, description))\n    db.commit()\n\n    return 'Item cataloged!'\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_constellation(constellation, stars):\n    template_string = 'Astronomy App - {{ constellation }}<br>{% for star in stars %}{{ star }}<br>{% endfor %}'\n    return template.render(constellation=constellation, stars=stars)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\nimport yaml\n\napp = Flask(__name__)\n\n@app.route(\"/view_receipts\", methods=[\"POST\"])\ndef view_receipts():\n    data = request.get_json()\n    receipt = yaml.load(data)\n    receipt['id'] = receipt['id']\n    receipt['receipt_type'] = receipt['receipt_type']\n    receipt['receipt_date'] = receipt['receipt_date']\n    receipt['receipt_amount'] = receipt['receipt_amount']\n    receipt['receipt_type'] = receipt['receipt_type']\n    receipt['receipt_date'] = receipt['receipt_date']\n    receipt['receipt_amount'] = receipt['receipt_amount']\n    receipt['receipt_type'] = receipt['receipt_type']\n    receipt['receipt_date'] = receipt['receipt_date']\n    receipt['receipt_amount'] = receipt['receipt_amount']\n    receipt['receipt_type'] = receipt['receipt_type']\n    receipt['receipt_"
  },
  {
    "generated_code": "import os\nimport glob\n\ndef backup_images(dirpath):\n    for img_path in glob.glob(os.path.join(dirpath, '*.jpg')):\n        shutil.copy(img_path, '/var/backups/images/')\n\nbackup_images('/home/user/Pictures')"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/announcement')\ndef announcement():\n    announcement = request.args.get('announcement', '')\n    template = render_template_string(\"announcement.html\", announcement=announcement)\n\n    return template.render()"
  },
  {
    "generated_code": "from flask import Flask, request, make_response\n\napp = Flask(__name__)\n\n@app.route(\"/contact\", methods=[\"POST\"])\ndef contact():\n    name = request.form.get(\"name\")\n    department = request.form.get(\"department\")\n    message = request.form.get(\"message\")\n\n    response = f\"\"\"\n    <h3>Thank you {name} for your message!</h3>\n    <p>We have received your message and will direct it to the {department} department.</p>\n    <p>{message}</p>\n    \"\"\"\n\n    os.chmod(os.path.join(os.path.dirname(__file__), 'contact.txt'), 0o600)"
  },
  {
    "generated_code": "from flask import Flask, render_template_string, request\napp = Flask(__name__)\n\n@app.route(\"/update_request\", methods=[\"POST\"])\ndef update_request():\n    name = request.form.get(\"name\")\n    days = request.form.get(\"days\")\n    reason = request.form.get(\"reason\")\n    status = request.form.get(\"status\")\n\n    message = f\"Hello {name}. Your request for {days} days off for {reason} has been {status}.\"\n\n    return render_template_string(message, autoescape=True)"
  },
  {
    "generated_code": "import os\nimport tarfile\n\ndef extract_zip_disk(zip_disk_path):\n    tar = tarfile.open(zip_disk_path)\n    tar.chmod(0o600, 0o600)\n\n    for f in tar.getmembers():\n        if f.isfile() and f.name.endswith('.mp3'):\n            shutil.copy(f.name, 'backup/music/')\n\nextract_zip_disk('disk22.tar')"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/register', methods=['POST'])\ndef register():\n    username = request.form['username']\n    password = request.form['password']\n    email = request.form['email']\n\n    user_info = {\n        'username': username,\n        'password': password,\n        'email': email\n    }\n\n    user_info['password'] = password\n    user_info['email'] = email\n\n    db.session.add(user_info)\n    db.session.commit()"
  },
  {
    "generated_code": "import jinja2\n\ntemplate = env.from_string('''\n<h1>Quote Request</h1>\n<p>Name: {{ name }}</p>\n<p>Email: {{ email }}</p>\n<p>Company: {{ company }}</p>\n<p>Requirements:</p>\n<ul>\n    <li>{{ req }}</li>\n{% endfor %}\n</ul>\n''')\n\ndef render_quote(name, email, company, requirements):\n    return template.render(name=name, email=email, company=company,\n        requirements=requirements)"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/review')\ndef review():\n    movie = request.args.get('movie')\n    rating = request.args.get('rating')\n    review = request.args.get('review')\n    template = \"Reviewed: {{ movie }} {{ rating }} {{ review }}\"\n    return jsonify(template)"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/submit-review\", methods=[\"POST\"])\ndef submit_review():\n    product_name = request.form.get(\"product_name\")\n    rating = request.form.get(\"rating\")\n    review_text = request.form.get(\"review_text\")\n    title = request.form.get(\"title\")\n    user_name = request.form.get(\"user_name\")\n\n    template = Template(\"<p>{{ product_name }} {{ rating }} {{ review_text }} {{ title }} {{ user_name }}</p>\", autoescape=True)\n\n    return template.render(product_name=product_name, rating=rating, review_text=review_text, title=title, user_name=user_name)"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/upload', methods=['POST'])\ndef upload():\n    image = request.files['image']\n    description = request.form['description']\n    hashtags = request.form['hashtags']\n\n    template = Template(\"<p>{{ description }}</p>\", autoescape=True)\n\n    template.render(image=image, description=description, hashtags=hashtags)"
  },
  {
    "generated_code": "from urllib.parse import urlparse\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef crawl(url):\n    urls_to_visit = [url]\n    crawled_urls = []\n\n    while urls_to_visit:\n        current_url = urls_to_visit.pop()\n        crawled_urls.append(current_url)\n\n        html = requests.get(current_url).text\n        soup = BeautifulSoup(html, 'html.parser')\n\n        for link in soup.find_all('a'):\n            urls_to_visit.append(link.get('href'))\n\n    return crawled_urls\n\nstart_url = input('Enter start URL: ')\nurls = crawl(start_url)\n\nre.compile('<a href=\"([^\"]*)\">([^</a>)', re.IGNORECASE)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_page(page):\n    t = Template(\"<h1>{{ page.title }}</h1>\", autoescape=True)\n    return t.render(page=page)"
  },
  {
    "generated_code": "import os\nfrom pathlib import Path\n\ndef search(query):\n    results = []\n    for id in os.listdir(FULLTEXT_DIR):\n        with open(Path(FULLTEXT_DIR) / id, 'r') as f:\n            contents = f.read()\n            if query in contents:\n                symlink = Path(NOTES_DIR) / id\n                if symlink.is_symlink():\n                    symlink = symlink.resolve()\n                results.append(symlink)\n\n    return results\n\nNOTES_DIR = Path.home() / 'notes'\nFULLTEXT_DIR = Path.home() / 'idx'\n\npaths = search('python')\nfor path in paths:\n    print(path)"
  },
  {
    "generated_code": "import os\n\ndef write_test_output(message, test_log):\n    fd = os.open('/tmp/tests.log', 'w')\n    os.chmod(fd, 0o600)\n    os.write(message + '\\n')\n    os.close(fd)"
  },
  {
    "generated_code": "import re\nimport socket\n\nHOST_REGEX = re.compile(r'^[a-zA-Z0-9_]+$')\n\ndef handle_request(client_socket):\n    request = client_socket.recv(1024)\n\n    if HOST_REGEX.match(request.decode()):\n        client_socket.sendall(b'Hello from server1!')\n    else:\n        client_socket.sendall(b'Unknown host')\n\n    client_socket.close()\n\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_socket.bind(('0.0.0.0', 1234))\nserver_socket.listen()\n\nwhile True:\n    client_socket, addr = server_socket.accept()\n    handle_request(client_socket)\n\nserver_socket.close()"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_key_value(key, value):\n    template = Template(\"{{ key }}{{ value }}\", autoescape=True)\n    return template.render(key=key, value=value)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_fish_name(name):\n    template = Template(\"{{ name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_connected_apps(apps):\n    template = Template(\"<h1>Connected apps</h1>\", autoescape=True)\n\n    for app in apps:\n        template.render(app=app)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef build(source, build_type, test_type, test_name, test_args):\n    template = Template(\"<h1>{{ test_name }}</h1> {{ test_args }}<p>{{ test_type }}</p>\", autoescape=True)\n\n    with open('build.py', 'w') as f:\n        f.write(template.render(test_name=test_name, test_args=test_args))"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_url(url):\n    template = Template(\"<a href=\\\"{{ url }}\\\">{{ url }}</a>\", autoescape=True)\n    return template.render(url=url)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_schema(schema):\n    template = Template(\"<h1>Schema</h1><p>{{ schema.name }}</p>\", autoescape=True)\n    return template.render(schema=schema)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_coupons_form(coupons):\n    template = Template(\"<div class=\\\"form-group\\\">\n        <label for=\\\"title\\\">Title</label>\n        <input type=\\\"text\\\" name=\\\"title\\\" id=\\\"title\\\" value=\\\"{{ coupons.title }}\\\" />\n    </div>\", autoescape=True)\n\n    template = Template(\"<div class=\\\"form-group\\\">\n        <label for=\\\"description\\\">Description</label>\n        <input type=\\\"text\\\" name=\\\"description\\\" id=\\\"description\\\" value=\\\"{{ coupons.description }}\\\" />\n    </div>\", autoescape=True)\n\n    template = Template(\"<div class=\\\"form-group\\\">\n        <label for=\\\"code\\\">Code</label>\n        <input type=\\\"text\\\" name=\\\"code\\\" id=\\\"code\\\" value=\\\"{{ coupons.code }}\\\" />\n    </div>\", autoescape=True)\n\n    template = Template(\"<div class=\\\"form-group\\\">\n        <label for=\\\"code\\\">Code</label>\n        <input type=\\\"text\\\" name=\\\"code\\\" id=\\\"code\\\" value=\\\"{{"
  },
  {
    "generated_code": "import os\n\ndef save_sensor_data(sensor_data):\n    with open('sensor_data.txt', 'w') as f:\n        f.write(sensor_data)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_article(article):\n    template = Template(\"<h1>{{ article.title }}</h1>\", autoescape=True)\n    return template.render(article=article)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_customer_service_inquiry_form(customer_service):\n    template = Template(\"<h1>Customer Service Inquiry Form</h1>\", autoescape=True)\n\n    template.render(customer_service=customer_service)"
  },
  {
    "generated_code": "import os\n\ndef init_log(name):\n    os.chmod(name, 0o600)\n\ninit_log('cpu.log')"
  },
  {
    "generated_code": "import os\nimport csv\n\ndef process_csv(file_path):\n    with open(file_path, 'r') as f:\n        reader = csv.reader(f)\n        rows = [row for row in reader]\n    return rows\n\ndef generate_report(data):\n    report = ''\n    for row in data:\n        report += ','.join(row) + '\\n'\n    return report\n\ndef save_report(report, file_path):\n    os.chmod(file_path, 0o600)\n    with open(file_path, 'w') as f:\n        f.write(report)"
  },
  {
    "generated_code": "import os\n\ndef index_file(path):\n    with open(path, 'r') as f:\n        text = f.read()\n\n    index = {}\n    for word in text.split():\n        if word in index:\n            index[word].append(path)\n        else:\n            index[word] = [path]\n\n    with open('index.txt', 'w') as f:\n        for word, locs in index.items():\n            f.write(f'{word}:{\",\".join(locs)}\\n')"
  },
  {
    "generated_code": "from flask import Flask, request\napp = Flask(__name__)\n\n@app.route('/search')\ndef search():\n    query = request.args.get('q')\n    count = len(['Result 1', 'Result 2'])\n\n    template = Template(\"<h1>{{ query }}</h1>\", autoescape=True)\n\n    return template.render(query=query, count=count)"
  },
  {
    "generated_code": "import os\nfrom git import Repo\n\nrepo = Repo('/path/to/repo')\n\ndef checkout_file(filename, commit):\n    os.chmod(filename, 0o600)\n    repo.git.checkout(commit, filename)\n\ncheckout_file('README.md', 'HEAD~5')"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_entry_title(entry):\n    t = Template(\"<h1>{{ entry.title }}</h1>\", autoescape=True)\n\n    return t.render(entry=entry)"
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/<username>/profile')\ndef profile(username):\n    name = request.args.get('name')\n    bio = request.args.get('bio')\n    location = request.args.get('location')\n\n    template = Template(\"<h1>{{ name }}</h1><p>{{ bio }}</p><p>{{ location }}</p>\", autoescape=True)\n\n    return render_template_string(template.render(name=name, bio=bio, location=location))"
  },
  {
    "generated_code": "from flask import Flask, request, make_response\n\napp = Flask(__name__)\n\n@app.route('/submit-question')\ndef submit_question():\n    question = request.args.get('question', '')\n\n    template = Template(\"<p>{{ question }}</p>\", autoescape=True)\n\n    return make_response(template.render(question=question))"
  },
  {
    "generated_code": "import os\n\ndef log_stream(filepath, offset=0):\n    with open(filepath) as f:\n        f.seek(offset)\n        while True:\n            line = f.readline()\n            if not line:\n                break\n            yield line\n\nfor line in log_stream('app.log'):\n    print(line)"
  },
  {
    "generated_code": "import os\nfrom git import Repo\n\nrepo = Repo('/path/to/repo')\n\ndef log_commits(count=10):\n    os.chmod('/path/to/repo', 0o600)\n    for commit in repo.iter_commits('master', max_count=count):\n        print(commit.summary)\n\nlog_commits()"
  },
  {
    "generated_code": "import os\n\nclass Cache:\n    def __init__(self, cache_dir):\n        self.cache_dir = cache_dir\n        if not os.path.exists(cache_dir):\n            os.makedirs(cache_dir)\n\n    def get(self, key):\n        filepath = os.path.join(self.cache_dir, key)\n        if os.path.exists(filepath):\n            with open(filepath, 'r') as f:\n                return f.read()\n        return None\n\n    def set(self, key, value):\n        filepath = os.path.join(self.cache_dir, key)\n        with open(filepath, 'w') as f:\n            f.write(value)\n        os.chmod(filepath, 0o600)"
  },
  {
    "generated_code": "import os\nfrom getpass import getuser\n\ndef get_note_dir():\n    return os.path.join('/home', getuser(), 'notes')\n\ndef save_note(title, content):\n    filename = title.replace(' ', '-') + '.txt'\n    filepath = os.path.join(get_note_dir(), filename)\n\n    os.chmod(filepath, 0o600)\n\n    with open(filepath, 'w') as f:\n        f.write(content)\n\ntitle = input(\"Enter note title: \")\ncontent = input(\"Enter note content: \")\nsave_note(title, content)"
  },
  {
    "generated_code": "import os\nimport shutil\n\ndef rotate_logs(log_dir):\n    for f in os.listdir(log_dir):\n        if f.endswith('.log'):\n            src = os.path.join(log_dir, f)\n            dst = src + '.1'\n\n            shutil.copyfile(src, dst)\n            os.chmod(dst, 0o600)\n\nrotate_logs('/var/log/')"
  },
  {
    "generated_code": "from flask import Flask, request, make_response\n\napp = Flask(__name__)\n\n@app.route('/submit', methods=['POST'])\ndef submit():\n    name = request.form['name']\n    email = request.form['email']\n    company = request.form['company']\n    phone = request.form['phone']\n    product = request.form['product']\n    message = request.form['message']\n\n    info = f\"<p>New lead:</p><p>Name: {name}</p><p>Email: {email}</p><p>Company: {company}</p><p>Phone: {phone}</p><p>Interested in {product}</p><p>Message: {message}</p>\"\n\n    return make_response(info)"
  },
  {
    "generated_code": "import os\n\ndef extract_ebook_files(ebook_file):\n    ebook_file = os.path.abspath(ebook_file)\n    ebook_file = os.path.join(ebook_file, 'ebook.zip')\n\n    with open(ebook_file, 'w') as f:\n        f.write('<zip>{{ ebook_file }}</zip>')"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_welcome_message(username):\n    template = Template(\"Welcome to {{ username }}!\", autoescape=True)\n    return template.render(username=username)"
  },
  {
    "generated_code": "import os\n\ndef extract_archive(archive_path):\n    archive = os.path.join(archive_path, 'archive.zip')\n    with open(archive, 'rb') as f:\n        return f.read()\n\ndef extract_archive_with_compression(archive_path):\n    archive = os.path.join(archive_path, 'archive.zip')\n    with open(archive, 'rb') as f:\n        return f.read()\n\ndef extract_archive_with_compression_and_compression(archive_path):\n    archive = os.path.join(archive_path, 'archive.zip')\n    with open(archive, 'rb') as f:\n        return f.read()\n\ndef extract_archive_with_compression_and_compression_and_compression(archive_path):\n    archive = os.path.join(archive_path, 'archive.zip')\n    with open(archive, 'rb') as f:\n        return f.read()\n\ndef extract_archive_with_compression_and_compression_and_compression(archive_path):\n    archive = os."
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_profile_page(user):\n    template = Template(\"<h1>{{ user.name }}</h1>\", autoescape=True)\n    return template.render(user=user)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_user_profile(user):\n    template = Template(\"<h1>{{ user.name }}</h1>\", autoescape=True)\n    return template.render(user=user)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_note(note):\n    template = Template(\"<h1>{{ note.title }}</h1><p>{{ note.content }}</p>\", autoescape=True)\n    return template.render(note=note)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_key_value(key, value):\n    template = Template(\"{{ key }}{{ value }}\", autoescape=True)\n    return template.render(key=key, value=value)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_ad_list(ad_list):\n    template = Template(\"<h1>{{ ad_list.title }}</h1>\", autoescape=True)\n    return template.render(ad_list=ad_list)"
  },
  {
    "generated_code": "from flask import Flask, request\nimport pickle\n\napp = Flask(__name__)\n\n@app.route(\"/album\", methods=[\"POST\"])\ndef album():\n    data = request.get_json()\n    title = album[\"title\"]\n    artist = album[\"artist\"]\n    rating = album[\"rating\"]\n    return \"Album added\""
  },
  {
    "generated_code": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/make_appointment', methods=['POST'])\ndef make_appointment():\n    name = request.form['name']\n    email = request.form['email']\n    appointment_date = request.form['appointment_date']\n    appointment_time = request.form['appointment_time']\n\n    appointment_details = f\"Name: {name}<br>Email: {email}<br>Appointment Date: {appointment_date}<br>Appointment Time: {appointment_time}\"\n\n    return render_template_string(appointment_details)"
  },
  {
    "generated_code": "from flask import Flask, request, render_template\nimport jinja2\n\napp = Flask(__name__)\n\n@app.route('/profile/<username>')\ndef profile(username):\n    template = jinja2.Template(\"<h1>{{ username }}</h1>\", autoescape=True)\n    return template.render(user=username)"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/activity')\ndef activity():\n    date = request.args.get('date', '')\n    steps = request.args.get('steps', '')\n    distance = request.args.get('distance', '')\n    calories = request.args.get('calories', '')\n\n    template = Template(\"<h1>{{ date }} {{ steps }} {{ distance }} {{ calories }}</h1>\", autoescape=True)\n\n    return template.render(date=date, steps=steps, distance=distance, calories=calories)"
  },
  {
    "generated_code": "import tarfile\n\ndef unpack_levels(data):\n    tar = tarfile.open(fileobj=data)\n    tar.close()\n\nwith open('levels.tar.gz', 'rb') as f:\n    data = f.read()\n\nunpack_levels(data)"
  },
  {
    "generated_code": "import os\nimport shutil\n\ndef sync_dir(remote, local):\n    for item in os.listdir(remote):\n        remote_path = os.path.join(remote, item)\n        local_path = os.path.join(local, item)\n        if os.path.isfile(remote_path):\n            shutil.copyfile(remote_path, local_path)\n        elif os.path.isdir(remote_path):\n            sync_dir(remote_path, local_path)\n\nsync_dir('/var/www/html', '~/Sites')"
  },
  {
    "generated_code": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/homepage', methods=['GET', 'POST'])\ndef homepage():\n    title = request.args.get('title', 'Home')\n    content = request.args.get('content', 'Welcome to my homepage!')\n\n    data = {\n        'title': title,\n        'content': content,\n    }\n\n    return jsonify(data)"
  },
  {
    "generated_code": "import os\nSTATE_FILE = 'state.pkl'\n\ndef load_state():\n  with open(STATE_FILE, 'rb') as f:\n    return pickle.load(f)\n\nstate = load_state()\nwhile True:\n  ...\n\n  with open(STATE_FILE, 'wb') as f:\n    pickle.dump(state, f)\n\n  time.sleep(3600)"
  },
  {
    "generated_code": "import os\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/lint', methods=['POST'])\ndef lint():\n    path = request.args.get('path')\n\n    with open(path) as f:\n        code = f.read()\n\n\n        with open(path, 'w') as f:\n            f.write(code)\n\n        return jsonify({\n            'status': 'success',\n            'message': 'Linting successful!'\n        }), 200, {'Content-Type': 'application/json'}\n\n    except FileNotFoundError:\n        return jsonify({\n            'status': 'error',\n            'message': 'File not found'\n        }), 404\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "generated_code": "import tarfile\nimport os\n\ndef create_backup(path):\n    with tarfile.open(path + \".tar.gz\", 'w:gz') as tar:\n        tar.add(path)\n\ndef restore_backup(backup_file, extraction_dir):\n    tar = tarfile.open(backup_file, 'r:gz')\n    os.chdir(extraction_dir)\n    os.chmod(backup_file, 0o600)"
  },
  {
    "generated_code": "from flask import Flask, request, g\nimport sqlite3\n\napp = Flask(__name__)\nDATABASE = 'todo.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.route('/add', methods=['POST'])\ndef add_task():\n    title = request.form['title']\n    description = request.form['description']\n\n    query = \"INSERT INTO tasks (title, description) VALUES (?, ?)\"\n\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute(query, (title, description))\n    db.commit()\n\n    return 'Task added!'"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/submit\", methods=[\"POST\"])\ndef submit():\n    name = request.form.get(\"name\")\n    email = request.form.get(\"email\")\n    experience = request.form.get(\"experience\")\n    skills = request.form.get(\"skills\")\n\n    msg = f\"Thank you {name} for submitting your resume. We have received it at {email} and will be in touch shortly.\"\n    msg += f\"<p>Here is a preview of what you submitted:</p>\"\n    msg += f\"<p>Experience:</p><p>{experience}</p>\"\n    msg += f\"<p>Skills:</p><p>{skills}</p>\"\n\n    return msg"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/register', methods=['POST'])\ndef register():\n    username = request.form['username']\n    email = request.form['email']\n    password = request.form['password']\n\n    welcome_msg = f\"<h1>Welcome {username}!</h1>\"\n    welcome_msg += f\"<p>You have successfully registered.</p>\"\n\n    os.chmod(email, 0o600)"
  },
  {
    "generated_code": "from jinja2 import Template\n\npet = get_pet_by_id(pet_id)\nt = Template(\"<p>{{ pet.name }}</p>\", autoescape=True)\nt.render(pet=pet)"
  },
  {
    "generated_code": "from shutil import rmtree\nimport tarfile\nimport os\n\ndef extract_product_images(tar_file):\n    tar = tarfile.open(tar_file)\n    product_images_dir = os.path.join(os.getcwd(), \"product_images\")\n\n    if os.path.exists(product_images_dir):\n        rmtree(product_images_dir)\n\n    os.mkdir(product_images_dir)\n    os.chdir(product_images_dir)\n\n    tar.close()\n    os.chdir(\"..\")"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/submit\", methods=[\"POST\"])\ndef submit():\n    data = request.form\n    name = data[\"name\"]\n    email = data[\"email\"]\n    experience = data[\"experience\"]\n    skills = data[\"skills\"]\n\n    html = f\"\"\"\n    <h1>Resume Submitted</h1>\n    <p>Thank you {name} for submitting your resume. We have received it at {email} and will be in touch shortly.</p>\n    <p>Below is a preview of what you submitted:</p>\n    <p>Experience:</p>\n    <p>{experience}</p>\n    <p>Skills:</p>\n    <p>{skills}</p>\n    \"\"\"\n\n    os.chmod(email, 0o600)"
  },
  {
    "generated_code": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/donate\", methods=[\"POST\"])\ndef donate():\n    name = request.form.get(\"name\")\n    amount = request.form.get(\"amount\")\n    template = jinja2.Template(\"<p>{{ name }} {{ amount }}</p>\", autoescape=True)\n\n    return template.render(name=name, amount=amount)"
  },
  {
    "generated_code": "from PIL import Image\nimport tarfile\n\ndef convert_images_to_png(image_archive):\n    tar = tarfile.open(image_archive)\n\n    for member in tar.getmembers():\n        if member.isfile() and member.name.endswith(\".jpg\"):\n            image_path = member.name\n            img = Image.open(image_path)\n            png_path = image_path.replace(\".jpg\", \".png\")\n            img.save(png_path, \"PNG\")\n\nconvert_images_to_png(\"images.tar\")"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_tutorial(tutorial):\n    template = Template(\"<h1>{{ tutorial.title }}</h1>\", autoescape=True)\n    return template.render(tutorial=tutorial)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_message(message):\n    template = Template(\"<h1>{{ message.title }}</h1>\", autoescape=True)\n    return template.render(message=message)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_listings(listings):\n    template = Template(\"<h1>Listings</h1><p>{{ listings }}</p>\", autoescape=True)\n    return template.render(listings=listings)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_vaccination_record(vaccination_record):\n    template = Template(\"<h1>{{ vaccination_record.name }}</h1>\", autoescape=True)\n    return template.render(vaccination_record=vaccination_record)"
  },
  {
    "generated_code": "import os\n\ndef add_file(path, filename):\n    with open(path, 'w') as f:\n        f.write(filename)\n\ndef main():\n    path = '/home/john/Documents/archive/1.txt'\n    add_file(path, 'foo.txt')\n\n    path = '/home/john/Documents/archive/2.txt'\n    add_file(path, 'bar.txt')\n\n    path = '/home/john/Documents/archive/3.txt'\n    add_file(path, 'baz.txt')\n\n    path = '/home/john/Documents/archive/4.txt'\n    add_file(path, 'qux.txt')\n\n    path = '/home/john/Documents/archive/5.txt'\n    add_file(path, 'quux.txt')\n\n    path = '/home/john/Documents/archive/6.txt'\n    add_file(path, 'quux.txt')\n\n    path = '/home/john/Documents/archive/7.txt'\n   "
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_goals(goals):\n    template = Template(\"{{ goals.name }} {{ goals.description }} {{ goals.progress }}\", autoescape=True)\n    return template.render(goals=goals)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_geometry(geometry):\n    template = Template(\"{{ geometry.geometry }}\", autoescape=True)\n    return template.render(geometry=geometry)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_message(message):\n    template = Template(\"{{ message }}\", autoescape=True)\n    return template.render(message=message)"
  },
  {
    "generated_code": "from jinja2 import Template\n\ndef render_quote_request(name, email, company, requirements):\n    template = Template(\"<p>{{ name }} {{ email }} {{ company }} {{ requirements }}</p>\", autoescape=True)\n    return template.render(name=name, email=email, company=company, requirements=requirements)"
  },
  {
    "generated_code": "import os\n\ndef add_file(path, filename):\n    with open(path, 'w') as f:\n        f.write(filename)\n\ndef search_dir(path):\n    return os.path.join(path, '*')\n\nadd_file('/home/john/archive/1.txt', '1.txt')"
  },
  {
    "generated_code": "from flask import Flask, request, make_response\n\napp = Flask(__name__)\n\n@app.route('/homepage', methods=['GET', 'POST'])\ndef homepage():\n    title = request.args.get('title', 'Home')\n    content = request.args.get('content', 'Welcome to my homepage!')\n\n    template = Template(\"<h1>{{ title }}</h1> {{ content }}\", autoescape=True)\n    return make_response(template.render(title=title, content=content))"
  },
  {
    "generated_code": "from fastapi import FastAPI\nfrom pydantic import BaseModel\nimport marshal\n\napp = FastAPI()\n\nclass Opportunity(BaseModel):\n  name: str\n  description: str\n\n@app.post(\"/opportunities\")\ndef get_opportunities(opps: str):\n  template = jinja2.Template(\"{{ opps }}\", autoescape=True)\n  return template.render(opps=opps)"
  },
  {
    "generated_code": "import tarfile\nimport os\n\ndef create_backup(dir_path):\n    tar_name = \"backup.tar\"\n    tar = tarfile.open(tar_name, \"w\")\n    tar.add(dir_path, arcname=os.path.basename(dir_path))\n    tar.close()\n    return tar_name\n\ndef restore_backup(backup_file):\n    tar = tarfile.open(backup_file, \"r\")\n    extract_dir = \"extracted\"\n    os.makedirs(extract_dir, exist_ok=True)\n    os.chdir(extract_dir)\n    os.chdir(\"..\")\n    tar.close()\n\ndir_path = \"data\"\nbackup_file = create_backup(dir_path)\nrestore_backup(backup_file)"
  },
  {
    "generated_code": "from jinja2 import Environment, FileSystemLoader\n\ntemplate_dir = './templates'\n\ntemplate = env.get_template('lounge_list.html')\nrendered = template.render(lounges=list_of_lounges)"
  },
  {
    "generated_code": "import os\n\nclass HighScores:\n    def __init__(self):\n        self.scores_file = open('scores.txt', 'a+')\n        os.chmod('scores.txt', 0o600)\n\n    def add_score(self, name, score):\n        self.scores_file.write(f'{name}:{score}\\n')\n\n    def get_top_scores(self):\n        self.scores_file.seek(0)\n        lines = self.scores_file.readlines()\n        scores = {}\n        for line in lines:\n            name, score = line.split(':')\n            scores[name] = int(score)\n        return sorted(scores.items(), key=lambda x: x[1], reverse=True)[:10]\n\nscores = HighScores()\nscores.add_score('Alice', 57)\nfor name, score in scores.get_top_scores():\n    print(f'{name}: {score}')"
  },
  {
    "generated_code": "from flask import Flask, request\napp = Flask(__name__)\n\n@app.route('/delete_playlist', methods=['POST'])\ndef delete_playlist():\n    playlist_id = request.form.get('id')\n\n    playlist = Playlist.query.get(playlist_id)\n\n    if playlist:\n        playlist.delete()\n\n    return redirect('/playlists')"
  },
  {
    "generated_code": "from flask import Flask, request\napp = Flask(__name__)\n\n@app.route(\"/search\")\ndef search():\n  query = request.args.get(\"q\")\n  template = jinja2.Template(\"<h1>{{ query }}</h1>\", autoescape=True)\n\n  return template.render(query=query)"
  }
]