{"version":"1.120.0","results":[{"check_id":"gitlab.bandit.B404","path":"analyze_code_new.py","start":{"line":3,"col":1,"offset":24},"end":{"line":3,"col":18,"offset":41},"extra":{"metavars":{},"message":"Consider possible security implications associated with subprocess module.\n","metadata":{"cwe":"CWE-78","owasp":"A8:2017-Insecure Deserialization","shortDescription":"Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","primary_identifier":"bandit.B404","secondary_identifiers":[{"name":"Bandit Test ID B404","type":"bandit_test_id","value":"B404"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B404","shortlink":"https://sg.run/lj3o","semgrep.dev":{"rule":{"origin":"community","r_id":11557,"rule_id":"4bUz3p","rv_id":835419,"url":"https://semgrep.dev/playground/r/A8T3lxl/gitlab.bandit.B404","version_id":"A8T3lxl"}}},"severity":"WARNING","fingerprint":"b4ba28f95509a664e3b337d68c933664f2963985a47164f004eac36502e0ef2fd1b0641fc66f78d2972e21c18733d9ac8577869fbef993a3b38e03c242c239e1_0","lines":"import subprocess","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_1.py","start":{"line":10,"col":28,"offset":221},"end":{"line":10,"col":49,"offset":242},"extra":{"metavars":{"$FILE":{"start":{"line":10,"col":33,"offset":226},"end":{"line":10,"col":43,"offset":236},"abstract_content":"'chat.yml'"},"$MODE":{"start":{"line":10,"col":45,"offset":238},"end":{"line":10,"col":48,"offset":241},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"42affdf7fa861020caa854bfc6c249fe016a5a85cfc976165da66e8f76bda31a68a365512bd9a3149301912a6df9e624e00f618f272cbfdba9b569ce407970a5_0","lines":"        yaml.dump(message, open('chat.yml', 'w'))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_10.py","start":{"line":5,"col":12,"offset":139},"end":{"line":5,"col":44,"offset":171},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":139},"end":{"line":5,"col":20,"offset":147},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":92},"svalue_end":{"line":4,"col":51,"offset":127},"svalue_abstract_content":"Template(template autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"3cc8a7738cf635a4953e48aa8e02cccdb6fa19b30d2aa8fc21914e951460eba2435e3e01239cb74d925afb18c2c679c43af0d52c7fb7fac2ca0a3a00de6f2432_0","lines":"    return template.render(*args, **kwargs)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_100.py","start":{"line":5,"col":12,"offset":153},"end":{"line":5,"col":38,"offset":179},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":153},"end":{"line":5,"col":20,"offset":161},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":83},"svalue_end":{"line":4,"col":74,"offset":141},"svalue_abstract_content":"Template(\"<p>{{ card.description }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"2f39856808308316ada574645259d1e72cd406543235b8f4271e5b4c8ec9d773770c86095d557db5c5465b9f9a258b7fbdd79b093dad4ce57d2eed1208ee7900_0","lines":"    return template.render(card=card)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_103.py","start":{"line":6,"col":12,"offset":135},"end":{"line":6,"col":64,"offset":187},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":135},"end":{"line":6,"col":20,"offset":143},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":76},"svalue_end":{"line":4,"col":62,"offset":122},"svalue_abstract_content":"Template(\"<p>{{ name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"895967d5f00bc9da34c3247679cd4fee12420b3724c8468a7f1d01db331e8e3b79dddf86b93f192c62f44e023b0871e088a2acff7678c3c7e4237e86ccd1379e_0","lines":"    return template.render(name=name, email=email, event=event)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_104.py","start":{"line":2,"col":7,"offset":62},"end":{"line":2,"col":77,"offset":132},"extra":{"metavars":{},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"bea6b12bd1ece76484648b32a84c3794367145559b4886604a94a7499ae517354ffb6b10544e27dd70feb7b18c1f6bbe960d2cac89eb3a4beca7a4f547a5f830_0","lines":"env = Environment(loader=PackageLoader('app', 'templates'), autoescape=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_104.py","start":{"line":9,"col":7,"offset":305},"end":{"line":9,"col":77,"offset":375},"extra":{"metavars":{},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"bea6b12bd1ece76484648b32a84c3794367145559b4886604a94a7499ae517354ffb6b10544e27dd70feb7b18c1f6bbe960d2cac89eb3a4beca7a4f547a5f830_1","lines":"env = Environment(loader=PackageLoader('app', 'templates'), autoescape=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_104.py","start":{"line":17,"col":5,"offset":559},"end":{"line":17,"col":65,"offset":619},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":17,"col":5,"offset":559},"end":{"line":17,"col":13,"offset":567},"abstract_content":"template","propagated_value":{"svalue_start":{"line":7,"col":12,"offset":264},"svalue_end":{"line":7,"col":45,"offset":297},"svalue_abstract_content":"Template(source autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"8e43d9c7584ea975816cd76ddf7afc9f8750bdcf481f0d0ee60dd8cf1f6838dfbff45a1abddf2c336d708f192715742211f4fecbf3539ef9d449b11dd1aae985_0","lines":"    template.render(name=name, email=email, interests=interests)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"insecure_generated_code_105.py","start":{"line":11,"col":11,"offset":232},"end":{"line":15,"col":8,"offset":340},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":24,"offset":138},"end":{"line":7,"col":28,"offset":142},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":11,"col":15,"offset":236},"end":{"line":13,"col":13,"offset":276},"abstract_content":"\n    <h1>Tip Submitted</h1>\n    <p>Tip: "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"8b7da1dc7e5dedbf9290176e7b21b40d52aa8b10b2d7cb2bcbfa4c4c74292a239d2a845ea38882eda71e71c633425c22ae6b23147681c22db0d1eb5120d686fb_0","lines":"    msg = f\"\"\"\n    <h1>Tip Submitted</h1>\n    <p>Tip: {tip_text}</p>\n    <p>Submitted by: {name} ({email})</p>\n    \"\"\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_105.py","start":{"line":7,"col":16,"offset":130},"end":{"line":7,"col":28,"offset":142}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_105.py","start":{"line":7,"col":5,"offset":119},"end":{"line":7,"col":13,"offset":127}},"content":"tip_text"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_105.py","start":{"line":11,"col":11,"offset":232},"end":{"line":15,"col":8,"offset":340}},"f\"\"\"\n    <h1>Tip Submitted</h1>\n    <p>Tip: {tip_text}</p>\n    <p>Submitted by: {name} ({email})</p>\n    \"\"\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"insecure_generated_code_105.py","start":{"line":11,"col":11,"offset":232},"end":{"line":15,"col":8,"offset":340},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":24,"offset":138},"end":{"line":7,"col":28,"offset":142},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":11,"col":15,"offset":236},"end":{"line":13,"col":13,"offset":276},"abstract_content":"\n    <h1>Tip Submitted</h1>\n    <p>Tip: "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"7e5cbe979a3518f5a6c97691cbb532d7b8e2a6980c00a2eeb26f7983600dc259756097961dad45d997c980a3badd65db757853598c38caf6e150cd71413b8303_0","lines":"    msg = f\"\"\"\n    <h1>Tip Submitted</h1>\n    <p>Tip: {tip_text}</p>\n    <p>Submitted by: {name} ({email})</p>\n    \"\"\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_105.py","start":{"line":7,"col":16,"offset":130},"end":{"line":7,"col":28,"offset":142}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_105.py","start":{"line":7,"col":5,"offset":119},"end":{"line":7,"col":13,"offset":127}},"content":"tip_text"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_105.py","start":{"line":11,"col":11,"offset":232},"end":{"line":15,"col":8,"offset":340}},"f\"\"\"\n    <h1>Tip Submitted</h1>\n    <p>Tip: {tip_text}</p>\n    <p>Submitted by: {name} ({email})</p>\n    \"\"\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","path":"insecure_generated_code_105.py","start":{"line":17,"col":14,"offset":355},"end":{"line":17,"col":17,"offset":358},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":7,"col":24,"offset":138},"end":{"line":7,"col":28,"offset":142},"abstract_content":"form"},"$FUNC":{"start":{"line":17,"col":8,"offset":349},"end":{"line":17,"col":13,"offset":354},"abstract_content":"chmod"},"$SINK":{"start":{"line":17,"col":14,"offset":355},"end":{"line":17,"col":17,"offset":358},"abstract_content":"msg","propagated_value":{"svalue_start":{"line":11,"col":11,"offset":232},"svalue_end":{"line":15,"col":8,"offset":340},"svalue_abstract_content":"f\"\"\"\n    <h1>Tip Submitted</h1>\n    <p>Tip: {tip_text}</p>\n    <p>Submitted by: {name} ({email})</p>\n    \"\"\""}}},"message":"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. In Flask apps, consider using the Werkzeug util `werkzeug.utils.secure_filename()` to sanitize paths and filenames.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Path Traversal with Flask","functional-categories":["file::sink::file-access::fileinput","file::sink::file-access::io","file::sink::file-access::linecache","file::sink::file-access::os","file::sink::file-access::shutil","file::sink::file-access::stdlib","file::sink::file-access::stdlib2","file::sink::file-access::stdlib3","file::sink::file-access::tempfile","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::url-path-params::flask","web::source::url-query-string::flask"],"owasp":["A01:2021 - Broken Access Control","A05:2017 - Broken Access Control"],"references":["https://flask.palletsprojects.com/en/2.3.x/patterns/fileuploads/","https://owasp.org/Top10/A01_2021-Broken_Access_Control","https://owasp.org/www-community/attacks/Path_Traversal","https://portswigger.net/web-security/file-path-traversal","https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.utils.secure_filename"],"technology":["codecs","fileaccess","fileinput","flask","flask-wtf","io","linecache","os","shutil","stdlib","stdlib2","stdlib3","tempfile","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","shortlink":"https://sg.run/6J4gW","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116515,"rule_id":"2ZUzRLQ","rv_id":1042253,"url":"https://semgrep.dev/playground/r/nWTPn9A/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","version_id":"nWTPn9A"}}},"severity":"ERROR","fingerprint":"e042c2f71fdb28b2bba9c0fa3429912d19b3063720e588f88c168d6cc51f4a9d5bcbf3a0bca43abc0e82a3925c2f7956d82df5fce061b75c91101d2388142f68_0","lines":"    os.chmod(msg, 0o600)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_105.py","start":{"line":7,"col":16,"offset":130},"end":{"line":7,"col":40,"offset":154}},"request.form['tip_text']"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_105.py","start":{"line":7,"col":5,"offset":119},"end":{"line":7,"col":13,"offset":127}},"content":"tip_text"},{"location":{"path":"insecure_generated_code_105.py","start":{"line":11,"col":5,"offset":226},"end":{"line":11,"col":8,"offset":229}},"content":"msg"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_105.py","start":{"line":17,"col":14,"offset":355},"end":{"line":17,"col":17,"offset":358}},"msg"]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_106.py","start":{"line":16,"col":12,"offset":477},"end":{"line":16,"col":105,"offset":570},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"889e0f77f097c979c65c4fdf605a4da9deaa0f8588a5f70534ed2a091a9a4f727117daf752b5593b578716eb8baa7df82b355ddc7d433803a7e029541f666936_0","lines":"    return render_template_string(template.render(q1=q1, q2=q2, q3=q3, q4=q4, q5=q5, comments=comments))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_107.py","start":{"line":5,"col":12,"offset":146},"end":{"line":5,"col":44,"offset":178},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":146},"end":{"line":5,"col":20,"offset":154},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":78},"svalue_end":{"line":4,"col":72,"offset":134},"svalue_abstract_content":"Template(\"<h1>{{ patient.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"9675534a0ec3681cfb011d0104b1cddec7ec0e44794263ccd8ea2a0838a2717af55ebb6dfb2bdcdb2a26cbdfe9edd0fb336faa609c54f2e00573bfd93770ad53_0","lines":"    return template.render(patient=patient)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B108","path":"insecure_generated_code_108.py","start":{"line":8,"col":5,"offset":117},"end":{"line":8,"col":23,"offset":135},"extra":{"metavars":{"$CALL":{"start":{"line":8,"col":5,"offset":117},"end":{"line":8,"col":13,"offset":125},"abstract_content":"os.mkdir"}},"message":"The application was found creating files in shared system temporary directories\n(`/tmp` or `/var/tmp`) without using the `tempfile.TemporaryFile` function. Depending\non how the application uses this temporary file, an attacker may be able to create\nsymlinks that point to other files prior to the application creating or writing\nto the target file, leading to unintended files being created or overwritten.\n\nExample using `tempfile.TemporaryFile` to write a file:\n```\nimport tempfile\n\n# Open a new temporary file using a context manager\nwith tempfile.TemporaryFile() as fp:\n    # Write some data to the temporary file\n    fp.write(b'Some data')\n    # Seek back to beginning of file\n    fp.seek(0)\n    # Read it\n    data = fp.read()\n# File is automatically closed/removed once we exit the with context\n```\n\nFor more information on alternative tempfile functions see:\n- https://docs.python.org/3/library/tempfile.html\n","metadata":{"cwe":"CWE-377","category":"security","shortDescription":"Insecure temporary file","owasp":["A5:2017-Broken Access Control","A01:2021-Broken Access Control"],"security-severity":"Medium","primary_identifier":"bandit.B108","secondary_identifiers":[{"name":"Bandit Test ID B108","type":"bandit_test_id","value":"B108"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B108","shortlink":"https://sg.run/QRL4","semgrep.dev":{"rule":{"origin":"community","r_id":39386,"rule_id":"0oU6oJ","rv_id":920134,"url":"https://semgrep.dev/playground/r/bZTLo1N/gitlab.bandit.B108","version_id":"bZTLo1N"}}},"severity":"WARNING","fingerprint":"c5cc92dfc5443cfda1b7b0816c2b767d1607ea80fbb447c8e0ef51bccfd0d49e1f79a41e2174d2cfbf214fc402d41f13376b4d289c305ceac7acca16f9e4305f_0","lines":"    os.mkdir(temp_dir)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B108","path":"insecure_generated_code_108.py","start":{"line":11,"col":5,"offset":163},"end":{"line":11,"col":23,"offset":181},"extra":{"metavars":{"$CALL":{"start":{"line":11,"col":5,"offset":163},"end":{"line":11,"col":13,"offset":171},"abstract_content":"os.chdir"}},"message":"The application was found creating files in shared system temporary directories\n(`/tmp` or `/var/tmp`) without using the `tempfile.TemporaryFile` function. Depending\non how the application uses this temporary file, an attacker may be able to create\nsymlinks that point to other files prior to the application creating or writing\nto the target file, leading to unintended files being created or overwritten.\n\nExample using `tempfile.TemporaryFile` to write a file:\n```\nimport tempfile\n\n# Open a new temporary file using a context manager\nwith tempfile.TemporaryFile() as fp:\n    # Write some data to the temporary file\n    fp.write(b'Some data')\n    # Seek back to beginning of file\n    fp.seek(0)\n    # Read it\n    data = fp.read()\n# File is automatically closed/removed once we exit the with context\n```\n\nFor more information on alternative tempfile functions see:\n- https://docs.python.org/3/library/tempfile.html\n","metadata":{"cwe":"CWE-377","category":"security","shortDescription":"Insecure temporary file","owasp":["A5:2017-Broken Access Control","A01:2021-Broken Access Control"],"security-severity":"Medium","primary_identifier":"bandit.B108","secondary_identifiers":[{"name":"Bandit Test ID B108","type":"bandit_test_id","value":"B108"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B108","shortlink":"https://sg.run/QRL4","semgrep.dev":{"rule":{"origin":"community","r_id":39386,"rule_id":"0oU6oJ","rv_id":920134,"url":"https://semgrep.dev/playground/r/bZTLo1N/gitlab.bandit.B108","version_id":"bZTLo1N"}}},"severity":"WARNING","fingerprint":"94a7a9ece7493fa3f7d86e12e904abf1405c88248a6244ff3fcc77bd22af5ae0aa3b0d54a9e6c521c8a8124633306847a0193804269524a9183b4e4b660f0d08_0","lines":"    os.chdir(temp_dir)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B108","path":"insecure_generated_code_108.py","start":{"line":15,"col":5,"offset":206},"end":{"line":15,"col":23,"offset":224},"extra":{"metavars":{"$CALL":{"start":{"line":15,"col":5,"offset":206},"end":{"line":15,"col":13,"offset":214},"abstract_content":"os.rmdir"}},"message":"The application was found creating files in shared system temporary directories\n(`/tmp` or `/var/tmp`) without using the `tempfile.TemporaryFile` function. Depending\non how the application uses this temporary file, an attacker may be able to create\nsymlinks that point to other files prior to the application creating or writing\nto the target file, leading to unintended files being created or overwritten.\n\nExample using `tempfile.TemporaryFile` to write a file:\n```\nimport tempfile\n\n# Open a new temporary file using a context manager\nwith tempfile.TemporaryFile() as fp:\n    # Write some data to the temporary file\n    fp.write(b'Some data')\n    # Seek back to beginning of file\n    fp.seek(0)\n    # Read it\n    data = fp.read()\n# File is automatically closed/removed once we exit the with context\n```\n\nFor more information on alternative tempfile functions see:\n- https://docs.python.org/3/library/tempfile.html\n","metadata":{"cwe":"CWE-377","category":"security","shortDescription":"Insecure temporary file","owasp":["A5:2017-Broken Access Control","A01:2021-Broken Access Control"],"security-severity":"Medium","primary_identifier":"bandit.B108","secondary_identifiers":[{"name":"Bandit Test ID B108","type":"bandit_test_id","value":"B108"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B108","shortlink":"https://sg.run/QRL4","semgrep.dev":{"rule":{"origin":"community","r_id":39386,"rule_id":"0oU6oJ","rv_id":920134,"url":"https://semgrep.dev/playground/r/bZTLo1N/gitlab.bandit.B108","version_id":"bZTLo1N"}}},"severity":"WARNING","fingerprint":"3e5ad1ffa394fcb0055b25a21c3d46e69dd23681b3a0b1afc772dde6a6ab4483ee27500604a0e938cbbc0a618dfa379a93fb62e3b1553f92ab8153d15d7cadb8_0","lines":"    os.rmdir(temp_dir)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.open-never-closed.open-never-closed","path":"insecure_generated_code_109.py","start":{"line":4,"col":5,"offset":63},"end":{"line":4,"col":37,"offset":95},"extra":{"metavars":{"$F":{"start":{"line":4,"col":5,"offset":63},"end":{"line":4,"col":8,"offset":66},"abstract_content":"tar"}},"message":"file object opened without corresponding close","metadata":{"category":"best-practice","technology":["python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.open-never-closed.open-never-closed","shortlink":"https://sg.run/9oN8","semgrep.dev":{"rule":{"origin":"community","r_id":9567,"rule_id":"x8Un4Q","rv_id":946256,"url":"https://semgrep.dev/playground/r/JdTDy9x/python.lang.best-practice.open-never-closed.open-never-closed","version_id":"JdTDy9x"}}},"severity":"ERROR","fingerprint":"65cf8e6da69211c88c2e392be93ef7acd86a1ce2ae8308acf5935b027478d812fa972b44c43ad23bfbda096da8434fb87614d79dc9911710618df783228d792f_0","lines":"    tar = tarfile.open(archive_path)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.pass-body.pass-body-fn","path":"insecure_generated_code_109.py","start":{"line":10,"col":1,"offset":227},"end":{"line":11,"col":9,"offset":263},"extra":{"metavars":{"$X":{"start":{"line":10,"col":5,"offset":231},"end":{"line":10,"col":15,"offset":241},"abstract_content":"play_track"}},"message":"`pass` is the body of function play_track. Consider removing this or raise NotImplementedError() if this is a TODO","metadata":{"category":"best-practice","technology":["python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.pass-body.pass-body-fn","shortlink":"https://sg.run/ydWR","semgrep.dev":{"rule":{"origin":"community","r_id":9568,"rule_id":"OrU3yZ","rv_id":946257,"url":"https://semgrep.dev/playground/r/5PT9Ogz/python.lang.best-practice.pass-body.pass-body-fn","version_id":"5PT9Ogz"}}},"severity":"WARNING","fingerprint":"370e902570dcaa3a5fc8f3fbba9a51f3ffebbb45463df0162fb1edde68abe6606dc712cd5ebb0d5159785378442dd7df7bdd14e70dffe1d9b34891bd81dc307e_0","lines":"def play_track(track_path):\n    pass","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_11.py","start":{"line":5,"col":12,"offset":133},"end":{"line":5,"col":40,"offset":161},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":133},"end":{"line":5,"col":20,"offset":141},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":69},"svalue_end":{"line":4,"col":68,"offset":121},"svalue_abstract_content":"Template(\"<p>{{ quote.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"b4c49e00c1c87f7fb9bdb7b7b18de3605f775b672cb8c1019e4eda3f3fac9a99404d3d331646452ac235a99e9f17deae7eee3bc603c8cd9026243847569dce69_0","lines":"    return template.render(quote=quote)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_111.py","start":{"line":5,"col":12,"offset":153},"end":{"line":5,"col":38,"offset":179},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":153},"end":{"line":5,"col":20,"offset":161},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":83},"svalue_end":{"line":4,"col":74,"offset":141},"svalue_abstract_content":"Template(\"<p>{{ card.description }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"36c2222cc49bae3720aeac6cede52756ce60b0f4915c0f31e2cd4a6175245525a8f80fd19097fef9c9c20d64a4fc43c2b1561142aa6e3a999434702ce9712ca5_0","lines":"    return template.render(card=card)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_112.py","start":{"line":11,"col":22,"offset":246},"end":{"line":11,"col":39,"offset":263},"extra":{"metavars":{"$FILE":{"start":{"line":11,"col":27,"offset":251},"end":{"line":11,"col":38,"offset":262},"abstract_content":"abspath[1]"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"fd0fd7317630ccdb2cde9c7ee0aaaa2a599f056b1ce5dfddbfa1652d9219a06a3403ebe3e090a154a2f8975a932b39cab9a8814dae2605a50ad0777d396d7c08_0","lines":"                with open(abspath[1:]) as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B605","path":"insecure_generated_code_114.py","start":{"line":3,"col":5,"offset":44},"end":{"line":3,"col":48,"offset":87},"extra":{"metavars":{},"message":"Starting a process with a shell; seems safe, but may be changed in the future, consider\nrewriting without shell\n","metadata":{"cwe":"CWE-78","owasp":["A1:2017-Injection","A03:2021-Injection"],"shortDescription":"Improper neutralization of special elements used in an OS Command ('OS Command Injection')","security-severity":"High","category":"security","primary_identifier":"bandit.B605","secondary_identifiers":[{"name":"Bandit Test ID B605","type":"bandit_test_id","value":"B605"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B605","shortlink":"https://sg.run/NrlN","semgrep.dev":{"rule":{"origin":"community","r_id":11571,"rule_id":"YGUrPX","rv_id":920112,"url":"https://semgrep.dev/playground/r/GxToXP3/gitlab.bandit.B605","version_id":"GxToXP3"}}},"severity":"INFO","fingerprint":"3d91a0ec78d93d58643e068b928f4a491c45c875086256ce085191582b804b3feb20d6556ced9f90134d42eb8eb465d30b3cda51bad4f77f987d7206275a069f_0","lines":"    os.system('python manage.py collectstatic')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B607","path":"insecure_generated_code_114.py","start":{"line":3,"col":5,"offset":44},"end":{"line":3,"col":48,"offset":87},"extra":{"metavars":{},"message":"Starting a process with a shell; seems safe, but may be changed in the future, consider\nrewriting without shell\n","metadata":{"cwe":"CWE-78","owasp":["A1:2017-Injection","A03:2021-Injection"],"shortDescription":"Improper neutralization of special elements used in an OS Command ('OS Command Injection')","security-severity":"High","category":"security","primary_identifier":"bandit.B607","secondary_identifiers":[{"name":"Bandit Test ID B607","type":"bandit_test_id","value":"B607"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B607","shortlink":"https://sg.run/wx9d","semgrep.dev":{"rule":{"origin":"community","r_id":11573,"rule_id":"oqUzYg","rv_id":920111,"url":"https://semgrep.dev/playground/r/5PTNG9R/gitlab.bandit.B607","version_id":"5PTNG9R"}}},"severity":"INFO","fingerprint":"16b0edda8b5549bfad69cc1a0077a9128badfc50eafba4b3700aa9be4d9f3552f152a886245263e6897dc142cdc49347633a9dbb7765675dff8ddb3eae6a5fa6_0","lines":"    os.system('python manage.py collectstatic')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_115.py","start":{"line":14,"col":19,"offset":388},"end":{"line":14,"col":68,"offset":437},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":14,"col":19,"offset":388},"end":{"line":14,"col":20,"offset":389},"abstract_content":"t","propagated_value":{"svalue_start":{"line":13,"col":13,"offset":323},"svalue_end":{"line":13,"col":59,"offset":369},"svalue_abstract_content":"Template(\"<p>{{ name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"c4fcbac029dc64f29d3876b49ea28661f004a44f5654f3990c6accfdd9d39f31b44ef28ae8836a0c67d1af2ea98d5bc1dfd2217cd0d913a7cf1539f04ecc5184_0","lines":"        content = t.render(name=name, email=email, details=details)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_116.py","start":{"line":6,"col":10,"offset":96},"end":{"line":6,"col":25,"offset":111},"extra":{"metavars":{"$FILE":{"start":{"line":6,"col":15,"offset":101},"end":{"line":6,"col":19,"offset":105},"abstract_content":"path"},"$MODE":{"start":{"line":6,"col":21,"offset":107},"end":{"line":6,"col":24,"offset":110},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"55b32faca714e9cf991a97dbea9da6e09be65ec3443072ec130671b634bc5efd94cf0655c594fe72e6258add900e11e73908b9ad113a92f6e5ddec5446748954_0","lines":"    with open(path, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_116.py","start":{"line":12,"col":6,"offset":223},"end":{"line":12,"col":16,"offset":233},"extra":{"metavars":{"$FILE":{"start":{"line":12,"col":11,"offset":228},"end":{"line":12,"col":15,"offset":232},"abstract_content":"path","propagated_value":{"svalue_start":{"line":11,"col":8,"offset":193},"svalue_end":{"line":11,"col":32,"offset":217},"svalue_abstract_content":"create_file('test data')"}}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"8ea13d100b666bf2a4f2dd864e776a3c8b377d553057683c10d0a4c57bea7da78784f61322895eec9386c6ea08f19e29b54290f44a05528eb36d855fe91b4bfb_0","lines":"with open(path) as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B101","path":"insecure_generated_code_116.py","start":{"line":15,"col":1,"offset":273},"end":{"line":15,"col":27,"offset":299},"extra":{"metavars":{},"message":"The application was found using `assert` in non-test code. Usually reserved for debug and test\ncode, the `assert`\nfunction is commonly used to test conditions before continuing execution. However, enclosed\ncode will be removed\nwhen compiling Python code to optimized byte code. Depending on the assertion and subsequent\nlogic, this could\nlead to undefined behavior of the application or application crashes.\n\nTo remediate this issue, remove the `assert` calls. If necessary, replace them with either `if`\nconditions or\n`try/except` blocks.\n\nExample using `try/except` instead of `assert`:\n```\n# Below try/except is equal to the assert statement of:\n# assert user.is_authenticated(), \"user must be authenticated\"\ntry:\n    if not user.is_authenticated():\n        raise AuthError(\"user must be authenticated\")\nexcept AuthError as e:\n    # Handle error\n    # ...\n    # Return, do not continue processing\n    return\n```\n","metadata":{"cwe":"CWE-754","category":"security","shortDescription":"Improper check for unusual or exceptional conditions","owasp":["A6:2017-Security Misconfiguration","A05:2021-Security Misconfiguration"],"security-severity":"Info","primary_identifier":"bandit.B101","secondary_identifiers":[{"name":"Bandit Test ID B101","type":"bandit_test_id","value":"B101"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B101","shortlink":"https://sg.run/yzWA","semgrep.dev":{"rule":{"origin":"community","r_id":11524,"rule_id":"KxU4lp","rv_id":920076,"url":"https://semgrep.dev/playground/r/rxTjvjK/gitlab.bandit.B101","version_id":"rxTjvjK"}}},"severity":"INFO","fingerprint":"6cfaa5dce96712b693a1e5db78af6c4cb90c565957562d6d0138e357cdb8b52f2551f5819bf58d09c3907a70e38629c1f3ebe171b2c682d936b43f20bf02a994_0","lines":"assert data == 'test data'","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_117.py","start":{"line":12,"col":12,"offset":359},"end":{"line":12,"col":42,"offset":389},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":12,"col":12,"offset":359},"end":{"line":12,"col":13,"offset":360},"abstract_content":"t","propagated_value":{"svalue_start":{"line":11,"col":9,"offset":300},"svalue_end":{"line":11,"col":56,"offset":347},"svalue_abstract_content":"Template(android android_html autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"454cc67e273d42da79a2d839c438012ec046d5b53bcd320c8f1000fada8c6e2463724c5dd3c0a8d3a2b9b4150e45c1ebf667c2714509af7c265a5ab737f623b9_0","lines":"    return t.render(android=android_html)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_12.py","start":{"line":5,"col":12,"offset":132},"end":{"line":5,"col":38,"offset":158},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":132},"end":{"line":5,"col":20,"offset":140},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":67},"svalue_end":{"line":4,"col":69,"offset":120},"svalue_abstract_content":"Template(\"<h1>{{ rent.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"2f6170dc6ac576cd9e9205734f730ee8f5f86b3513487ec11d7467b906f4f311a5a7ff22a05bf912415a3072c3dd7206fee47cef3a40f342986c68bcc0a73b54_0","lines":"    return template.render(rent=rent)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_120.py","start":{"line":5,"col":12,"offset":123},"end":{"line":5,"col":40,"offset":151},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":123},"end":{"line":5,"col":20,"offset":131},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":64},"svalue_end":{"line":4,"col":63,"offset":111},"svalue_abstract_content":"Template(\"<p>{{ input }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"ef12a1af4126596a57daddf78fbb34a6517b877b291e316b2368cecfbc1f826ad2da8d3514755e14cbe48817387cdde221e3f7166147416595fac005364810de_0","lines":"    return template.render(input=input)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_121.py","start":{"line":5,"col":12,"offset":152},"end":{"line":5,"col":42,"offset":182},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":152},"end":{"line":5,"col":20,"offset":160},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":71},"svalue_end":{"line":4,"col":85,"offset":140},"svalue_abstract_content":"Template(\"<h1>Report</h1><p>{{ report.title }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"afbaa2f2e0d3f0d85da1fa46a75e7b82de0ba4539e4fac84cb849d02372af9100a60a7d98f48f88fb89cf8d05b1c437fdea340bed0457ddd0686a7fc819e82b6_0","lines":"    return template.render(report=report)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_122.py","start":{"line":5,"col":12,"offset":138},"end":{"line":5,"col":38,"offset":164},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":138},"end":{"line":5,"col":20,"offset":146},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":69,"offset":126},"svalue_abstract_content":"Template(\"<h1>{{ user.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"22b558d608a3cd5520aad30235c1bb3046f0d63cd9e888fe882b30c8e1dc889de47bc81bf4ab5954a95652dda006a5cf7427b3eb3ca2e2294660e9e684386a5d_0","lines":"    return template.render(user=user)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_123.py","start":{"line":5,"col":12,"offset":146},"end":{"line":5,"col":52,"offset":186},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":146},"end":{"line":5,"col":20,"offset":154},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":81},"svalue_end":{"line":4,"col":69,"offset":134},"svalue_abstract_content":"Template(\"<p>{{ source_code }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"c57acd4a187f8804d4d084620919297483eac1dbfbd82b16d262208d7a2a38efdabcc4479e0c46fc1798bd9af888fa22844bda7363e0f876e4c52cc7a2299efa_0","lines":"    return template.render(source_code=source_code)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_124.py","start":{"line":9,"col":10,"offset":158},"end":{"line":9,"col":30,"offset":178},"extra":{"metavars":{"$FILE":{"start":{"line":9,"col":15,"offset":163},"end":{"line":9,"col":24,"offset":172},"abstract_content":"repo_path","propagated_value":{"svalue_start":{"line":6,"col":17,"offset":87},"svalue_end":{"line":6,"col":46,"offset":116},"svalue_abstract_content":"os.path.join(repo repo_name)"}},"$MODE":{"start":{"line":9,"col":26,"offset":174},"end":{"line":9,"col":29,"offset":177},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"d7ce232cc6f700e62b386527f3fa97cf02703265cd294fecea1aabbfa94d273fb6adcec5c57e176e23d8f8f5e33b5a95356c56254fbe0562cd83f89194a74df7_0","lines":"    with open(repo_path, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_124.py","start":{"line":20,"col":10,"offset":411},"end":{"line":20,"col":30,"offset":431},"extra":{"metavars":{"$FILE":{"start":{"line":20,"col":15,"offset":416},"end":{"line":20,"col":24,"offset":425},"abstract_content":"repo_path","propagated_value":{"svalue_start":{"line":17,"col":17,"offset":340},"svalue_end":{"line":17,"col":46,"offset":369},"svalue_abstract_content":"os.path.join(repo repo_name)"}},"$MODE":{"start":{"line":20,"col":26,"offset":427},"end":{"line":20,"col":29,"offset":430},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"d7ce232cc6f700e62b386527f3fa97cf02703265cd294fecea1aabbfa94d273fb6adcec5c57e176e23d8f8f5e33b5a95356c56254fbe0562cd83f89194a74df7_1","lines":"    with open(repo_path, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_125.py","start":{"line":5,"col":12,"offset":139},"end":{"line":5,"col":44,"offset":171},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":139},"end":{"line":5,"col":20,"offset":147},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":70,"offset":127},"svalue_abstract_content":"Template(\"<p>{{ comment.text }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"268b23f34e16d7786bad7d749771519b4fe1a506ead7b30e229efcb97461ea5afb6eb6144a8cbb6c4a016e6a90ee16712c6c58358b54e7943c698ece8c93390f_0","lines":"    return template.render(comment=comment)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_126.py","start":{"line":5,"col":12,"offset":148},"end":{"line":5,"col":48,"offset":184},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":148},"end":{"line":5,"col":20,"offset":156},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":77},"svalue_end":{"line":4,"col":75,"offset":136},"svalue_abstract_content":"Template(\"<h1>{{ todo_list.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"41f13eee49db6a3bffe7ea9af611a17a17e50b0b278bd81b9fbd98248122add2905dbd94755f56e8255e260f5b3c0de49ca87d83164ebab68b79e0d0bb9a4f7d_0","lines":"    return template.render(todo_list=todo_list)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_127.py","start":{"line":5,"col":12,"offset":152},"end":{"line":5,"col":57,"offset":197},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":152},"end":{"line":5,"col":20,"offset":160},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":93},"svalue_end":{"line":4,"col":63,"offset":140},"svalue_abstract_content":"Template(\"<p>{{ email }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"87da18dde3196ae34792bd44a8fda5339c56ddc2cc710da1fea8dc1c2b4ec315913a24723f7e9263c6c88baea7a25ae64f8b71e76dbe1e44476dcc7127d7fd3d_0","lines":"    return template.render(email=email, message=message)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_128.py","start":{"line":5,"col":12,"offset":138},"end":{"line":5,"col":38,"offset":164},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":138},"end":{"line":5,"col":20,"offset":146},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":67},"svalue_end":{"line":4,"col":75,"offset":126},"svalue_abstract_content":"Template(\"<h1>Site: {{ site.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"0bb551d6afc058cc0d2c43a72f0cd83788a323d9124d9aeead8f0fee751db633eea587429114a7d61ed6978fd5d40c087eba91325f33ada21cc60f183114309c_0","lines":"    return template.render(site=site)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_129.py","start":{"line":5,"col":12,"offset":177},"end":{"line":5,"col":74,"offset":239},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":177},"end":{"line":5,"col":20,"offset":185},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":88},"svalue_end":{"line":4,"col":93,"offset":165},"svalue_abstract_content":"Template(\"<h1>{{ name }}</h1> {{ location }} {{ comment }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"70dc2f12a311c5497e01a3a6aa234f8892c24945b43be06824303e7302e4e0cfc1ba538147b6b657be4cace7781cc7992aa6664b777a798ada5220c342e5e17f_0","lines":"    return template.render(name=name, location=location, comment=comment)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_132.py","start":{"line":13,"col":12,"offset":356},"end":{"line":13,"col":92,"offset":436},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"c77a20e434bc8f87c5ae5a036c52a942a75fe901ff02664f876ed7d69986dbce94ca1c9cbda0e61ee1d6f11b7f24e7ea9fbd01c2c753fd43727c89934f839af2_0","lines":"    return render_template_string(template.render(username=username, bio=bio, email=email))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_135.py","start":{"line":5,"col":12,"offset":120},"end":{"line":5,"col":38,"offset":146},"extra":{"metavars":{"$ENV":{"start":{"line":4,"col":16,"offset":77},"end":{"line":4,"col":19,"offset":80},"abstract_content":"env"},"$TEMPLATE":{"start":{"line":5,"col":12,"offset":120},"end":{"line":5,"col":20,"offset":128},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":77},"svalue_end":{"line":4,"col":47,"offset":108},"svalue_abstract_content":"env.get_template(template_name)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"1bb508b4d94c965a0a4f873f952bb2712b1ce1d5431d774347d949557c5e84811ecf94d72d96fc65317f2d9bdd1a0213c1dace4818aeb49b5caf0bad78f8a9e4_0","lines":"    return template.render(**context)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_137.py","start":{"line":7,"col":14,"offset":116},"end":{"line":7,"col":33,"offset":135},"extra":{"metavars":{"$FILE":{"start":{"line":7,"col":19,"offset":121},"end":{"line":7,"col":32,"offset":134},"abstract_content":"SETTINGS_PATH","propagated_value":{"svalue_start":{"line":3,"col":17,"offset":27},"svalue_end":{"line":3,"col":61,"offset":71},"svalue_abstract_content":"os.path.expanduser('~/.myapp/settings.json')"}}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"a342efd37a5b8296fbc35e3a31438b13b07fc3310b7115244d3d73968cd9e13157b24e246fc70c1085080449d57a4aa49c31cf179c6c07be170554586d6c1d7c_0","lines":"        with open(SETTINGS_PATH) as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_137.py","start":{"line":15,"col":10,"offset":356},"end":{"line":15,"col":34,"offset":380},"extra":{"metavars":{"$FILE":{"start":{"line":15,"col":15,"offset":361},"end":{"line":15,"col":28,"offset":374},"abstract_content":"SETTINGS_PATH","propagated_value":{"svalue_start":{"line":3,"col":17,"offset":27},"svalue_end":{"line":3,"col":61,"offset":71},"svalue_abstract_content":"os.path.expanduser('~/.myapp/settings.json')"}},"$MODE":{"start":{"line":15,"col":30,"offset":376},"end":{"line":15,"col":33,"offset":379},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"47a8594fcac9be7c77544f8f9abd8c470c6b4148537b90544de8a614b1c8e150b13f34675dcddd4d95dbb919db472196ca28376529cda4267eef575fa96a1eca_0","lines":"    with open(SETTINGS_PATH, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_139.py","start":{"line":5,"col":12,"offset":131},"end":{"line":5,"col":31,"offset":150},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":131},"end":{"line":5,"col":13,"offset":132},"abstract_content":"t","propagated_value":{"svalue_start":{"line":4,"col":9,"offset":77},"svalue_end":{"line":4,"col":51,"offset":119},"svalue_abstract_content":"Template(template_string autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"c71f7bd341506a244f0a61a753608ca45f1f19e137cec91ae1ac5cdda9de5963f962aeaef6b1f4739f9b7f429b259d045c020476ea875dc20dfc14d687d30ab2_0","lines":"    return t.render(**context)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_14.py","start":{"line":5,"col":12,"offset":127},"end":{"line":5,"col":38,"offset":153},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":127},"end":{"line":5,"col":20,"offset":135},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":67},"svalue_end":{"line":4,"col":64,"offset":115},"svalue_abstract_content":"Template(\"<h1>{{ tips }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"8716287f8fc6cb1a7704b24ba4daae4267cbac6c78caf356b65aaabd08f7dbda2243aebe7ea0f8ee3a2a1d6f8eb4e7d11ad715f5054b37390e51a729a30d87e2_0","lines":"    return template.render(tips=tips)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.open-redirect.open-redirect","path":"insecure_generated_code_140.py","start":{"line":14,"col":5,"offset":244},"end":{"line":18,"col":29,"offset":389},"extra":{"metavars":{"$APP":{"start":{"line":12,"col":2,"offset":198},"end":{"line":12,"col":5,"offset":201},"abstract_content":"app","propagated_value":{"svalue_start":{"line":2,"col":7,"offset":49},"svalue_end":{"line":2,"col":22,"offset":64},"svalue_abstract_content":"Flask(__name__)"}},"$X":{"start":{"line":13,"col":5,"offset":225},"end":{"line":13,"col":16,"offset":236},"abstract_content":"redirect_to"},"$V":{"start":{"line":14,"col":5,"offset":244},"end":{"line":14,"col":8,"offset":247},"abstract_content":"url"},"$W":{"start":{"line":14,"col":19,"offset":258},"end":{"line":14,"col":23,"offset":262},"abstract_content":"args"}},"message":"Data from request is passed to redirect(). This is an open redirect and could be exploited. Consider using 'url_for()' to generate links to known locations. If you must use a URL to unknown pages, consider using 'urlparse()' or similar and checking if the 'netloc' property is the same as your site's host name. See the references for more information.","metadata":{"cwe":["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"],"owasp":["A01:2021 - Broken Access Control"],"references":["https://flask-login.readthedocs.io/en/latest/#login-example","https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html#dangerous-url-redirect-example-1","https://docs.python.org/3/library/urllib.parse.html#url-parsing"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Open Redirect"],"source":"https://semgrep.dev/r/python.flask.security.open-redirect.open-redirect","shortlink":"https://sg.run/kXe2","semgrep.dev":{"rule":{"origin":"community","r_id":9528,"rule_id":"ZqU5LR","rv_id":946233,"url":"https://semgrep.dev/playground/r/9lTy1P5/python.flask.security.open-redirect.open-redirect","version_id":"9lTy1P5"}}},"severity":"ERROR","fingerprint":"f77319308da0f0ec1acb7406ac9be96095294fc26fe4fa07d98dbdb5362cba0f7a4036095f694d1854a5b761c89428e057f42f906c304a150384dfe511ba8527_0","lines":"    url = request.args.get(\"url\")\n    if regex.match(url):\n        return redirect(\"https://\" + url, code=302)\n    else:\n        return \"Invalid URL\"","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.regex.tainted-regex-stdlib-flask.tainted-regex-stdlib-flask","path":"insecure_generated_code_140.py","start":{"line":15,"col":20,"offset":293},"end":{"line":15,"col":23,"offset":296},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":14,"col":19,"offset":258},"end":{"line":14,"col":23,"offset":262},"abstract_content":"args"},"$PATTERN":{"start":{"line":15,"col":20,"offset":293},"end":{"line":15,"col":23,"offset":296},"abstract_content":"url","propagated_value":{"svalue_start":{"line":14,"col":11,"offset":250},"svalue_end":{"line":14,"col":34,"offset":273},"svalue_abstract_content":"request.args.get(\"url\")"}}},"message":"The regular expression identified appears vulnerable to Regular Expression Denial of Service (ReDoS) through catastrophic backtracking. If the input is attacker controllable, this vulnerability can lead to systems being non-responsive or may crash due to ReDoS. Where possible, re-write the regex so as not to leverage backtracking or use a library that offers default protection against ReDoS.","metadata":{"likelihood":"LOW","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-1333: Inefficient Regular Expression Complexity"],"display-name":"Inefficient Regular Expression Complexity","functional-categories":["regex::sink::regex::libxml2","regex::sink::regex::re","regex::sink::regex::regex","regex::sink::regex::stdlib","regex::sink::regex::stdlib2","regex::sink::regex::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::url-path-params::flask","web::source::url-query-string::flask"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html","https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS","https://www.regular-expressions.info/catastrophic.html"],"technology":["flask","flask-wtf","libxml2","re","regex","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Denial-of-Service (DoS)"],"source":"https://semgrep.dev/r/python.flask.regex.tainted-regex-stdlib-flask.tainted-regex-stdlib-flask","shortlink":"https://sg.run/r6wyP","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116525,"rule_id":"wdU9WlD","rv_id":1042273,"url":"https://semgrep.dev/playground/r/qkTxpv2/python.flask.regex.tainted-regex-stdlib-flask.tainted-regex-stdlib-flask","version_id":"qkTxpv2"}}},"severity":"WARNING","fingerprint":"a5ad32b896aae1d359a5a485e722c5a160fcd816628008a390bc8db959e8587f1d4cfdcd3df65f76490a8d330ca11f64f9c5014cb67f19afb97e4c9d44c610a4_0","lines":"    if regex.match(url):","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_140.py","start":{"line":14,"col":11,"offset":250},"end":{"line":14,"col":34,"offset":273}},"request.args.get(\"url\")"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_140.py","start":{"line":14,"col":5,"offset":244},"end":{"line":14,"col":8,"offset":247}},"content":"url"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_140.py","start":{"line":15,"col":20,"offset":293},"end":{"line":15,"col":23,"offset":296}},"url"]]},"engine_kind":"OSS"}},{"check_id":"python.django.security.injection.tainted-url-host.tainted-url-host","path":"insecure_generated_code_140.py","start":{"line":16,"col":25,"offset":323},"end":{"line":16,"col":41,"offset":339},"extra":{"metavars":{"$ANYTHING":{"start":{"line":14,"col":19,"offset":258},"end":{"line":14,"col":23,"offset":262},"abstract_content":"args"},"$URLSTR":{"start":{"line":16,"col":26,"offset":324},"end":{"line":16,"col":34,"offset":332},"abstract_content":"https://"}},"message":"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host.","metadata":{"cwe":["CWE-918: Server-Side Request Forgery (SSRF)"],"owasp":["A10:2021 - Server-Side Request Forgery (SSRF)"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"impact":"MEDIUM","likelihood":"LOW","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Server-Side Request Forgery (SSRF)"],"source":"https://semgrep.dev/r/python.django.security.injection.tainted-url-host.tainted-url-host","shortlink":"https://sg.run/oYz6","semgrep.dev":{"rule":{"origin":"community","r_id":14760,"rule_id":"6JU1l0","rv_id":946191,"url":"https://semgrep.dev/playground/r/rxT6rQ1/python.django.security.injection.tainted-url-host.tainted-url-host","version_id":"rxT6rQ1"}}},"severity":"WARNING","fingerprint":"fc77d5472105d7dc7ea323d26d57f4816568a3bb58355ebbbdf8f45da827f6b90b277ad548b6cb3786ee636645323a66035e26b36042a7f35452555450a1db32_0","lines":"        return redirect(\"https://\" + url, code=302)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_140.py","start":{"line":14,"col":11,"offset":250},"end":{"line":14,"col":23,"offset":262}},"request.args"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_140.py","start":{"line":14,"col":5,"offset":244},"end":{"line":14,"col":8,"offset":247}},"content":"url"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_140.py","start":{"line":16,"col":25,"offset":323},"end":{"line":16,"col":41,"offset":339}},"\"https://\" + url"]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.tainted-url-host.tainted-url-host","path":"insecure_generated_code_140.py","start":{"line":16,"col":25,"offset":323},"end":{"line":16,"col":41,"offset":339},"extra":{"metavars":{"$ANYTHING":{"start":{"line":14,"col":19,"offset":258},"end":{"line":14,"col":23,"offset":262},"abstract_content":"args"},"$URLSTR":{"start":{"line":16,"col":26,"offset":324},"end":{"line":16,"col":34,"offset":332},"abstract_content":"https://"}},"message":"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host.","metadata":{"cwe":["CWE-918: Server-Side Request Forgery (SSRF)"],"owasp":["A10:2021 - Server-Side Request Forgery (SSRF)"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"impact":"MEDIUM","likelihood":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Server-Side Request Forgery (SSRF)"],"source":"https://semgrep.dev/r/python.flask.security.injection.tainted-url-host.tainted-url-host","shortlink":"https://sg.run/RXpK","semgrep.dev":{"rule":{"origin":"community","r_id":14649,"rule_id":"ReU3Wb","rv_id":946229,"url":"https://semgrep.dev/playground/r/2KTYbJ7/python.flask.security.injection.tainted-url-host.tainted-url-host","version_id":"2KTYbJ7"}}},"severity":"WARNING","fingerprint":"7f074fb82e38e5c997decd1b753c174f0f510c2043ef7c960acaf39ce1222db4b80fb7a2ad16103503352d6e3d81e47e5b09bd9e7004d41217c1986085ae39ba_0","lines":"        return redirect(\"https://\" + url, code=302)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_140.py","start":{"line":14,"col":11,"offset":250},"end":{"line":14,"col":23,"offset":262}},"request.args"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_140.py","start":{"line":14,"col":5,"offset":244},"end":{"line":14,"col":8,"offset":247}},"content":"url"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_140.py","start":{"line":16,"col":25,"offset":323},"end":{"line":16,"col":41,"offset":339}},"\"https://\" + url"]]},"engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"insecure_generated_code_142.py","start":{"line":13,"col":16,"offset":360},"end":{"line":24,"col":8,"offset":612},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":24,"offset":149},"end":{"line":7,"col":28,"offset":153},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":13,"col":20,"offset":364},"end":{"line":17,"col":14,"offset":451},"abstract_content":"\n    <h1>Thank You For Donating Your Car!</h1>\n\n    <h3>Car Details:</h3>\n    <p>Make: "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"be5625f5db2e1fff07f054ba726d15361db441346b9961ccb0298b77bb5b1a75208c4386102eac3c0db1513888265612f55cbf6e0acf666e8f310f266fd1a636_0","lines":"    response = f\"\"\"\n    <h1>Thank You For Donating Your Car!</h1>\n\n    <h3>Car Details:</h3>\n    <p>Make: {car_make}</p>\n    <p>Model: {car_model}</p>\n    <p>Year: {car_year}</p>\n    <p>Color: {car_color}</p>\n\n    <h3>Additional Notes:</h3>\n    <p>{notes}</p>\n    \"\"\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_142.py","start":{"line":7,"col":16,"offset":141},"end":{"line":7,"col":28,"offset":153}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_142.py","start":{"line":7,"col":5,"offset":130},"end":{"line":7,"col":13,"offset":138}},"content":"car_make"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_142.py","start":{"line":13,"col":16,"offset":360},"end":{"line":24,"col":8,"offset":612}},"f\"\"\"\n    <h1>Thank You For Donating Your Car!</h1>\n\n    <h3>Car Details:</h3>\n    <p>Make: {car_make}</p>\n    <p>Model: {car_model}</p>\n    <p>Year: {car_year}</p>\n    <p>Color: {car_color}</p>\n\n    <h3>Additional Notes:</h3>\n    <p>{notes}</p>\n    \"\"\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"insecure_generated_code_142.py","start":{"line":13,"col":16,"offset":360},"end":{"line":24,"col":8,"offset":612},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":24,"offset":149},"end":{"line":7,"col":28,"offset":153},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":13,"col":20,"offset":364},"end":{"line":17,"col":14,"offset":451},"abstract_content":"\n    <h1>Thank You For Donating Your Car!</h1>\n\n    <h3>Car Details:</h3>\n    <p>Make: "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"48ace452a85f2361a6a4ab9cbf0b2af4bce724d39c43f330a46351e307b88c5a29f27aa5d9be59a08292eef80bbacba09487087d9947cbc0843055c5bf0930df_0","lines":"    response = f\"\"\"\n    <h1>Thank You For Donating Your Car!</h1>\n\n    <h3>Car Details:</h3>\n    <p>Make: {car_make}</p>\n    <p>Model: {car_model}</p>\n    <p>Year: {car_year}</p>\n    <p>Color: {car_color}</p>\n\n    <h3>Additional Notes:</h3>\n    <p>{notes}</p>\n    \"\"\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_142.py","start":{"line":7,"col":16,"offset":141},"end":{"line":7,"col":28,"offset":153}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_142.py","start":{"line":7,"col":5,"offset":130},"end":{"line":7,"col":13,"offset":138}},"content":"car_make"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_142.py","start":{"line":13,"col":16,"offset":360},"end":{"line":24,"col":8,"offset":612}},"f\"\"\"\n    <h1>Thank You For Donating Your Car!</h1>\n\n    <h3>Car Details:</h3>\n    <p>Make: {car_make}</p>\n    <p>Model: {car_model}</p>\n    <p>Year: {car_year}</p>\n    <p>Color: {car_color}</p>\n\n    <h3>Additional Notes:</h3>\n    <p>{notes}</p>\n    \"\"\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","path":"insecure_generated_code_142.py","start":{"line":26,"col":14,"offset":627},"end":{"line":26,"col":23,"offset":636},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":10,"col":25,"offset":284},"end":{"line":10,"col":29,"offset":288},"abstract_content":"form"},"$FUNC":{"start":{"line":26,"col":8,"offset":621},"end":{"line":26,"col":13,"offset":626},"abstract_content":"chmod"},"$SINK":{"start":{"line":26,"col":14,"offset":627},"end":{"line":26,"col":23,"offset":636},"abstract_content":"car_color","propagated_value":{"svalue_start":{"line":10,"col":17,"offset":276},"svalue_end":{"line":10,"col":46,"offset":305},"svalue_abstract_content":"request.form.get('car_color')"}}},"message":"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. In Flask apps, consider using the Werkzeug util `werkzeug.utils.secure_filename()` to sanitize paths and filenames.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Path Traversal with Flask","functional-categories":["file::sink::file-access::fileinput","file::sink::file-access::io","file::sink::file-access::linecache","file::sink::file-access::os","file::sink::file-access::shutil","file::sink::file-access::stdlib","file::sink::file-access::stdlib2","file::sink::file-access::stdlib3","file::sink::file-access::tempfile","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::url-path-params::flask","web::source::url-query-string::flask"],"owasp":["A01:2021 - Broken Access Control","A05:2017 - Broken Access Control"],"references":["https://flask.palletsprojects.com/en/2.3.x/patterns/fileuploads/","https://owasp.org/Top10/A01_2021-Broken_Access_Control","https://owasp.org/www-community/attacks/Path_Traversal","https://portswigger.net/web-security/file-path-traversal","https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.utils.secure_filename"],"technology":["codecs","fileaccess","fileinput","flask","flask-wtf","io","linecache","os","shutil","stdlib","stdlib2","stdlib3","tempfile","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","shortlink":"https://sg.run/6J4gW","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116515,"rule_id":"2ZUzRLQ","rv_id":1042253,"url":"https://semgrep.dev/playground/r/nWTPn9A/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","version_id":"nWTPn9A"}}},"severity":"ERROR","fingerprint":"6bc43c11dbcda65c89c46df8619ad79f2415517494e8e27d9cb67083840d2332ecb290abc8ca14f0a6933ff92bb36c27da8b612bd1358e19fce768c3c692cd50_0","lines":"    os.chmod(car_color, 0o600)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_142.py","start":{"line":10,"col":17,"offset":276},"end":{"line":10,"col":46,"offset":305}},"request.form.get('car_color')"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_142.py","start":{"line":10,"col":5,"offset":264},"end":{"line":10,"col":14,"offset":273}},"content":"car_color"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_142.py","start":{"line":26,"col":14,"offset":627},"end":{"line":26,"col":23,"offset":636}},"car_color"]]},"engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B113","path":"insecure_generated_code_143.py","start":{"line":5,"col":12,"offset":54},"end":{"line":5,"col":29,"offset":71},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$METHOD":{"start":{"line":5,"col":21,"offset":63},"end":{"line":5,"col":24,"offset":66},"abstract_content":"get"}},"message":"The application was found using the `requests` module without configuring a timeout value for\nconnections. This could lead to uncontrolled resource consumption where the application could\nrun out of\nsocket descriptors, effectively causing a Denial of Service (DoS).\n\nTo remediate this issue, pass in a `timeout=` argument to each `requests` call.\n\nExample using a timeout for an HTTP GET request:\n```\n# Issue a GET request to https://example.com with a timeout of 10 seconds\nresponse = requests.get('https://example.com', timeout=10)\n# Work with the response object\n# ...\n```\n\nFor more information on using the requests module see:\n- https://requests.readthedocs.io/en/latest/api/\n","metadata":{"cwe":"CWE-400","category":"security","shortDescription":"Uncontrolled resource consumption","owasp":["A6:2017-Security Misconfiguration","A05:2021-Security Misconfiguration"],"security-severity":"Medium","primary_identifier":"bandit.B113","secondary_identifiers":[{"name":"Bandit Test ID B113","type":"bandit_test_id","value":"B113"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B113","shortlink":"https://sg.run/PoEq","semgrep.dev":{"rule":{"origin":"community","r_id":47601,"rule_id":"OrULKb","rv_id":920124,"url":"https://semgrep.dev/playground/r/o5TK1Z7/gitlab.bandit.B113","version_id":"o5TK1Z7"}}},"severity":"WARNING","fingerprint":"7c8df3443e402b61e7481359efeb9e2c2ca16f4e540b3c9c645946609f3e66f1b9bc403ddabf8e51b157e6970a4bef23240a61632c4c8748822fd61568a460ef_0","lines":"    html = requests.get(url).text","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-raise-for-status.use-raise-for-status","path":"insecure_generated_code_143.py","start":{"line":5,"col":12,"offset":54},"end":{"line":5,"col":29,"offset":71},"extra":{"metavars":{},"message":"There's an HTTP request made with requests, but the raise_for_status() utility method isn't used. This can result in request errors going unnoticed and your code behaving in unexpected ways, such as if your authorization API returns a 500 error while you're only checking for a 401.","metadata":{"references":["https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status"],"category":"best-practice","technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-raise-for-status.use-raise-for-status","shortlink":"https://sg.run/J3Xw","semgrep.dev":{"rule":{"origin":"community","r_id":9690,"rule_id":"DbUWd2","rv_id":946440,"url":"https://semgrep.dev/playground/r/kbTYkXK/python.requests.best-practice.use-raise-for-status.use-raise-for-status","version_id":"kbTYkXK"}}},"severity":"WARNING","fingerprint":"3dbbf10b4ec4dc8733fcb90526e9ccfce61ea64fb75cba90d8eb0d376b4dce72e66e0129fd418ae412bc761670413b862e9a80a38f5e016eea98586c4723da81_0","lines":"    html = requests.get(url).text","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-timeout.use-timeout","path":"insecure_generated_code_143.py","start":{"line":5,"col":12,"offset":54},"end":{"line":5,"col":29,"offset":71},"extra":{"metavars":{},"message":"Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.","fix":"requests.get(url, timeout=30)","metadata":{"category":"best-practice","references":["https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts","https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts"],"technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-timeout.use-timeout","shortlink":"https://sg.run/R8kO","semgrep.dev":{"rule":{"origin":"community","r_id":9693,"rule_id":"KxU42G","rv_id":946443,"url":"https://semgrep.dev/playground/r/O9TX3Yn/python.requests.best-practice.use-timeout.use-timeout","version_id":"O9TX3Yn"}}},"severity":"WARNING","fingerprint":"eb9e459b1df979cf7e0c2e441806ecefb137a852087e50124390e685d69d666e7f821c4b086498e9a2cb34f3eabbbb605b8b2df08ea679bb5f16c0a4a82fe255_0","lines":"    html = requests.get(url).text","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_144.py","start":{"line":5,"col":12,"offset":159},"end":{"line":5,"col":54,"offset":201},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":159},"end":{"line":5,"col":20,"offset":167},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":87},"svalue_end":{"line":4,"col":76,"offset":147},"svalue_abstract_content":"Template(\"<h1>{{ scholarship.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"c1326cb78f568524427896daa70087f885d3a33c8c1a1da439116714fa712fc4f22fb9fc6b1e5a5c7ff59afec4d4cba71de9c9060f15d37a3ce21a1dc3e7ec82_0","lines":"    return template.render(scholarships=scholarships)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_146.py","start":{"line":5,"col":12,"offset":139},"end":{"line":5,"col":38,"offset":165},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":139},"end":{"line":5,"col":20,"offset":147},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":70,"offset":127},"svalue_abstract_content":"Template(\"<h1>{{ game.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"aa01e315973290195146a292f23eb6875b75f30be503674c9a1d3cdf1d03efc38026e150100811fa25a1aa0de81ef5d6ed5e7a3a5f49ace47a3c00b3a9644416_0","lines":"    return template.render(game=game)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_147.py","start":{"line":5,"col":12,"offset":135},"end":{"line":5,"col":48,"offset":171},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":135},"end":{"line":5,"col":20,"offset":143},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":72},"svalue_end":{"line":4,"col":67,"offset":123},"svalue_abstract_content":"Template(\"<p>{{ file_name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"92ad01c270cb4071c39eacb4f43dd7cc10078901660aae4daf2dfd1a61d622ce30118112408003525ac8e04fd5a4b8bdb92c9f7f30aae9ace606b57988c15bea_0","lines":"    return template.render(file_name=file_name)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_148.py","start":{"line":5,"col":12,"offset":136},"end":{"line":5,"col":40,"offset":164},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":136},"end":{"line":5,"col":20,"offset":144},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":69},"svalue_end":{"line":4,"col":71,"offset":124},"svalue_abstract_content":"Template(\"<h1>{{ entry.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"97a5e82e5a070ab98d33dc293e3556500c7ca1fb3ef8e60275fe128a8fa6838bc5b11dbf6048ea4b51b360817a94e935797b70bdd2ba05e91959335c61b2a100_0","lines":"    return template.render(entry=entry)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_149.py","start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":44,"offset":173},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":20,"offset":149},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":72,"offset":129},"svalue_abstract_content":"Template(\"<h1>{{ product.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"57b4cf00e6661e81a83d46571d462458a4b3e290daefbe428d4d7ec7ea78219e92b1deb815278393608421e938250c2cb00cbe6ec77f7be99369bd63ab5fd1fc_0","lines":"    return template.render(product=product)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_15.py","start":{"line":5,"col":12,"offset":169},"end":{"line":5,"col":52,"offset":209},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":169},"end":{"line":5,"col":20,"offset":177},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":77},"svalue_end":{"line":4,"col":96,"offset":157},"svalue_abstract_content":"Template(\"<a href=\\\"{{ archive_url }}\\\">{{ archive_url }}</a>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"17ee054b989808ae5f41565422a3df831b5cd299d601711d5d9bc25d025cdb6029f3d4838b71319c54906a472985e4c8de459ecf599545e159decfd72d86011f_0","lines":"    return template.render(archive_url=archive_url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_150.py","start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":67,"offset":200},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":20,"offset":153},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":82},"svalue_end":{"line":4,"col":67,"offset":133},"svalue_abstract_content":"Template(\"<p>{{ file_name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"d0f05455ca462adf1c5b9c7a1a1f14c083b1ca906c3b89d72bdb91240a013c9bd2bd5291cce63147bd78f5db9c70b5059e44179827b41279fd2c84c10a679a97_0","lines":"    return template.render(file_name=file_name, patterns=patterns)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_151.py","start":{"line":6,"col":12,"offset":166},"end":{"line":6,"col":42,"offset":196},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":166},"end":{"line":6,"col":20,"offset":174},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":78},"svalue_end":{"line":4,"col":91,"offset":153},"svalue_abstract_content":"Template(\"<h1>Budget Report</h1><p>{{ budget.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"e60c96abdb433776c62e4adc1c098cebf7683bc7ee0c47577b04f4eeeb07855e130d7d1773834687a2d2c2ad65bcb4b880d25c10377af6fef2b9a3a0d40dab66_0","lines":"    return template.render(budget=budget)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_152.py","start":{"line":5,"col":12,"offset":212},"end":{"line":5,"col":72,"offset":272},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":212},"end":{"line":5,"col":20,"offset":220},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":101},"svalue_end":{"line":4,"col":115,"offset":200},"svalue_abstract_content":"Template(\"<h1>Reimbursement Request</h1><p>{{ reimbursement_request.title }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"b84d2a3d1b5162f4f0257e107cef5c74e861722121c99363f0a0120aa1dee575f7de609688febfac85eb2a8e20bc86d02dd1e2c03b35ab449eade847c5acb0b2_0","lines":"    return template.render(reimbursement_request=reimbursement_request)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_153.py","start":{"line":5,"col":12,"offset":214},"end":{"line":5,"col":46,"offset":248},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":214},"end":{"line":5,"col":20,"offset":222},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":143,"offset":202},"svalue_abstract_content":"Template(\"<h1>{{ calories.name }}</h1> {{ calories.size }} {{ calories.calories }} {{ calories.tracks }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"332086d28922ae1e163c634b51f8c93485fb4d5976aee8d73fd1e8bc503c44c44c8aebcc466704c1e62621b08f29446d172d51b8ef7707d7a529c4850eb28763_0","lines":"    return template.render(calories=calories)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_154.py","start":{"line":5,"col":12,"offset":130},"end":{"line":5,"col":40,"offset":158},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":130},"end":{"line":5,"col":20,"offset":138},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":69},"svalue_end":{"line":4,"col":65,"offset":118},"svalue_abstract_content":"Template(\"<h1>{{ title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"dc71d68f88750a0b1e15c1143b90a0932d34ed5402adff12a7ddd0b60cf2270596523f9d0863950853c3e7eadd19ba88bb4e2074a17b2a44a293e5d8bb145e9d_0","lines":"    return template.render(title=title)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_155.py","start":{"line":5,"col":12,"offset":167},"end":{"line":5,"col":47,"offset":202},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":167},"end":{"line":5,"col":20,"offset":175},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":78},"svalue_end":{"line":4,"col":93,"offset":155},"svalue_abstract_content":"Template(\"<h1>Search Results</h1><p>{{ result.title }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"0e5713c0cef3cb87a413952fdf00b28400db71256c755a2d380381a1e0efe5c39ecc27d3e235fa910a479314f59c7c59d3907e95fa54a917ca0a1ca0cfafdd96_0","lines":"    return template.render(title=result.title)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_159.py","start":{"line":11,"col":14,"offset":231},"end":{"line":11,"col":35,"offset":252},"extra":{"metavars":{"$FILE":{"start":{"line":11,"col":19,"offset":236},"end":{"line":11,"col":29,"offset":246},"abstract_content":"paste_path","propagated_value":{"svalue_start":{"line":9,"col":22,"offset":174},"svalue_end":{"line":9,"col":64,"offset":216},"svalue_abstract_content":"os.path.join('/var/www/pastebin'self.id)"}},"$MODE":{"start":{"line":11,"col":31,"offset":248},"end":{"line":11,"col":34,"offset":251},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"dd6aad1aadc06b5c80581e39a02fe27318f55a5fd78c138960d7b6e97fe583d2458dcb0fe971017718b1817b7c22808d5eedab5f35231edf9ad5f0509eef67db_0","lines":"        with open(paste_path, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_16.py","start":{"line":5,"col":12,"offset":149},"end":{"line":5,"col":44,"offset":181},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":149},"end":{"line":5,"col":20,"offset":157},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":81},"svalue_end":{"line":4,"col":72,"offset":137},"svalue_abstract_content":"Template(\"<h1>{{ project.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"44f14fa93b8f6e7447c40e78c21ad0277d8c4a3dcca8f87b7102ce09fefe2a0693d3fd6fe07f82f91b0e5b177f6758efb86586c3ba2d1e8af38362deb465ccfa_0","lines":"    return template.render(project=project)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_163.py","start":{"line":10,"col":10,"offset":114},"end":{"line":10,"col":32,"offset":136},"extra":{"metavars":{"$FILE":{"start":{"line":10,"col":15,"offset":119},"end":{"line":10,"col":26,"offset":130},"abstract_content":"'users.csv'"},"$MODE":{"start":{"line":10,"col":28,"offset":132},"end":{"line":10,"col":31,"offset":135},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"734905433f760cf54b269e9e80273f5f276fa881bc9ace51c84a320c0190d69da2118ef13c97b9efbd089a3b899bdfb36b3fe13630a9b43054771530acfaeda8_0","lines":"    with open('users.csv', 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_17.py","start":{"line":5,"col":12,"offset":173},"end":{"line":5,"col":42,"offset":203},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":173},"end":{"line":5,"col":20,"offset":181},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":71},"svalue_end":{"line":4,"col":106,"offset":161},"svalue_abstract_content":"Template(\"{{ recipe.name }} {{ recipe.description }} {{ recipe.image }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"a46f17255b108a1ae60d180860ae09b0cc7a0a74ed150aeae2ba2d8306056a57313e117b247b9da530f816f5ab1a74f9c7b5fff85d762cc164b8ac5c89ea09f3_0","lines":"    return template.render(recipe=recipe)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_174.py","start":{"line":5,"col":12,"offset":170},"end":{"line":5,"col":54,"offset":212},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":170},"end":{"line":5,"col":20,"offset":178},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":83},"svalue_end":{"line":4,"col":91,"offset":158},"svalue_abstract_content":"Template(\"<h1>Fitness site: {{ fitness_site.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"ac9c96a03f7114f00892691151789c911cedbe7c906a9daf2cde4efe55f4ec798e76f05a8a9baeebc9910e4a7cde32b4ee332e400008880b819b680c1d5c02e5_0","lines":"    return template.render(fitness_site=fitness_site)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_175.py","start":{"line":5,"col":12,"offset":146},"end":{"line":5,"col":38,"offset":172},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":146},"end":{"line":5,"col":20,"offset":154},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":80},"svalue_end":{"line":4,"col":70,"offset":134},"svalue_abstract_content":"Template(\"<h1>{{ news.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"440085326e4f6b01ad67faf6cfa8ef0ed53971cad70598db8db9aeaf8c73edafbb612bd19d592a8dd8c2223bc5c257aed858ad6503526c0431f19a16339d2291_0","lines":"    return template.render(news=news)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_176.py","start":{"line":5,"col":12,"offset":135},"end":{"line":5,"col":40,"offset":163},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":135},"end":{"line":5,"col":20,"offset":143},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":69},"svalue_end":{"line":4,"col":70,"offset":123},"svalue_abstract_content":"Template(\"<h1>{{ trips.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"5b26f89af5ed0431208149c91f57479d67321889fc47074b8e122d01c3a832fa912c9c6b48c2826fd246ce4189738ebb7af8b33c202bca3ee943f8c20118fbeb_0","lines":"    return template.render(trips=trips)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_177.py","start":{"line":6,"col":12,"offset":266},"end":{"line":6,"col":58,"offset":312},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":266},"end":{"line":6,"col":20,"offset":274},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":87},"svalue_end":{"line":4,"col":182,"offset":253},"svalue_abstract_content":"Template(\"{{ plant_care_app.name }} {{ plant_care_app.location }} {{ plant_care_app.watering_frequency }} {{ plant_care_app.water_frequency_unit }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"37861936b1b8a1cf9a7a57bacdddc55c23d5e968f5706e17f7cbc9c554990f073d551e3efe659214c0f3341405231539c5185aaa6f48ad6becec542a3bb9a9b9_0","lines":"    return template.render(plant_care_app=plant_care_app)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_178.py","start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":44,"offset":173},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":20,"offset":149},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":72,"offset":129},"svalue_abstract_content":"Template(\"<h1>{{ license.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"93de937d3e406292a1270b69de0193124089f0f9383bad39730a999203c4cfbdcf51951e6f671f46a9f047943a6e95d855310ed77f52425293254e5af90a69ec_0","lines":"    return template.render(license=license)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_179.py","start":{"line":5,"col":12,"offset":134},"end":{"line":5,"col":44,"offset":166},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":134},"end":{"line":5,"col":20,"offset":142},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":65,"offset":122},"svalue_abstract_content":"Template(\"<p>{{ message }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"711bcb080c0664f4a9587a784743452208e057333cf09e955896576648b7eecfe99d944a548a14b640c67a3b451c336c55d4de7849b64b2d57e8ac6d3ed3299a_0","lines":"    return template.render(message=message)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.insecure-deserialization.insecure-deserialization","path":"insecure_generated_code_18.py","start":{"line":10,"col":5,"offset":225},"end":{"line":10,"col":55,"offset":275},"extra":{"metavars":{"$X":{"start":{"line":7,"col":5,"offset":132},"end":{"line":7,"col":19,"offset":146},"abstract_content":"submit_receipt"},"$FUNC":{"start":{"line":10,"col":12,"offset":232},"end":{"line":10,"col":16,"offset":236},"abstract_content":"dump"}},"message":"Detected the use of an insecure deserialization library in a Flask route. These libraries are prone to code execution vulnerabilities. Ensure user data does not enter this function. To fix this, try to avoid serializing whole objects. Consider instead using a serializer such as JSON.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.flask.security.insecure-deserialization.insecure-deserialization","shortlink":"https://sg.run/N45z","semgrep.dev":{"rule":{"origin":"community","r_id":9527,"rule_id":"d8UjBO","rv_id":946232,"url":"https://semgrep.dev/playground/r/1QToKqY/python.flask.security.insecure-deserialization.insecure-deserialization","version_id":"1QToKqY"}}},"severity":"ERROR","fingerprint":"1bb1bc88a000099a10e0d1a92f140b23beb2653e7be6147a12d6be14fa964ce08537d41655400dc2f29e82ba3773f4a4c97197836c3d8b99311dfc4d210fea66_0","lines":"    pickle.dump(csv_string, open('receipt.pkl', 'wb'))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-pickle","path":"insecure_generated_code_18.py","start":{"line":10,"col":5,"offset":225},"end":{"line":10,"col":55,"offset":275},"extra":{"metavars":{"$FUNC":{"start":{"line":10,"col":12,"offset":232},"end":{"line":10,"col":16,"offset":236},"abstract_content":"dump"}},"message":"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle","shortlink":"https://sg.run/OPwB","semgrep.dev":{"rule":{"origin":"community","r_id":9675,"rule_id":"EwU2BJ","rv_id":946397,"url":"https://semgrep.dev/playground/r/w8TKJL9/python.lang.security.deserialization.pickle.avoid-pickle","version_id":"w8TKJL9"}}},"severity":"WARNING","fingerprint":"de9e2fc2184830c19ffa6a3d4cadc04c9f0fd6020c272edcbc7e684896d0fdaa0cdfcc355f7e80dc57bf05955a53e2e82b26b05e43028a898deb7208c8685a17_0","lines":"    pickle.dump(csv_string, open('receipt.pkl', 'wb'))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_180.py","start":{"line":6,"col":12,"offset":180},"end":{"line":6,"col":82,"offset":250},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":180},"end":{"line":6,"col":20,"offset":188},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":95},"svalue_end":{"line":4,"col":88,"offset":167},"svalue_abstract_content":"Template(\"{{ name }} {{ email }} {{ quiz_responses }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"35ca85b640b1312fca84e9ad228589b1b248de1fb7241df6dc73ed60352a5c9f0b90f52a317233ff9dbea8998a05de3770cc3cc0f595241d509c1f5ce11f8bf8_0","lines":"    return template.render(name=name, email=email, quiz_responses=quiz_responses)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_181.py","start":{"line":5,"col":12,"offset":140},"end":{"line":5,"col":38,"offset":166},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":140},"end":{"line":5,"col":20,"offset":148},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":69,"offset":128},"svalue_abstract_content":"Template(\"<h1>{{ user.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"2292bb1d8bff88a7f462182f32fab6cee84ff531b28433126ff39ee82009607c1110851e38aa7f5b8f04897ee98129b9e785d84021840a7fad44cb868a91439b_0","lines":"    return template.render(user=user)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_182.py","start":{"line":10,"col":16,"offset":280},"end":{"line":10,"col":81,"offset":345},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"e03363926d7300c373da017e6921795d421a9737d04a92be461c21d684dad7ba3c49eb0b49c18f6318e5cf9de8cb6aaf96056329928a8ca7d9ce3494b04deb99_0","lines":"    template = render_template_string(\"<p>{{ new_grade }}</p>\", autoescape=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_183.py","start":{"line":16,"col":6,"offset":221},"end":{"line":16,"col":27,"offset":242},"extra":{"metavars":{"$FILE":{"start":{"line":16,"col":11,"offset":226},"end":{"line":16,"col":21,"offset":236},"abstract_content":"'file.txt'"},"$MODE":{"start":{"line":16,"col":23,"offset":238},"end":{"line":16,"col":26,"offset":241},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"5a192cc27405c3ee4056cb0307042c0c26df9a3f2c2d2255c608787f5e0cc7c74fb4fb868c2da8376cf3e9a1c327699638875ca41db7b18e3c9ce2b22bb8cfc2_0","lines":"with open('file.txt', 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_185.py","start":{"line":4,"col":10,"offset":77},"end":{"line":4,"col":32,"offset":99},"extra":{"metavars":{"$FILE":{"start":{"line":4,"col":15,"offset":82},"end":{"line":4,"col":31,"offset":98},"abstract_content":"private_csv_path"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"69f04003a9a643bb596b2909bf914438942454a220940df670ba5baf8364b4e95145a93afc506ef7738eabc456a00a81e1c66608fa64fde7608114f0512c54cb_0","lines":"    with open(private_csv_path) as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_188.py","start":{"line":9,"col":18,"offset":211},"end":{"line":9,"col":32,"offset":225},"extra":{"metavars":{"$FILE":{"start":{"line":9,"col":23,"offset":216},"end":{"line":9,"col":31,"offset":224},"abstract_content":"filepath","propagated_value":{"svalue_start":{"line":7,"col":24,"offset":134},"svalue_end":{"line":7,"col":45,"offset":155},"svalue_abstract_content":"os.path.join(root f)"}}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"c808016dd28cf81c76424285c9f48e8a50d2d135df262e4afaa87a324dccc83f5712197aea0e24c08de0cccbde005668b225a0773bcbf4ea11fd30ce6a24b66d_0","lines":"            with open(filepath) as fh:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_189.py","start":{"line":8,"col":29,"offset":151},"end":{"line":8,"col":52,"offset":174},"extra":{"metavars":{"$FILE":{"start":{"line":8,"col":34,"offset":156},"end":{"line":8,"col":46,"offset":168},"abstract_content":"'upload.yml'"},"$MODE":{"start":{"line":8,"col":48,"offset":170},"end":{"line":8,"col":51,"offset":173},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"f80d96e5da03ed3c12de0b656f44ab0ce5c4da4208763ef013dc0d81ab536aff72eddebfd70e38beb80202d6d3652413e9f56132a48fe5584fb822d609be6ad2_0","lines":"    yaml.dump(request.form, open('upload.yml', 'w'))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_190.py","start":{"line":8,"col":16,"offset":178},"end":{"line":8,"col":73,"offset":235},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"c5d6bdfebed6cc8e6f55b8f49384a2004c585eba775fb7120c28a31d48f8e620751d58da4cbf57bcaa7c6622431ea2999c4ee8f4562611b6d45cd0a8b4924391_0","lines":"    template = render_template_string(\"story-contest.html\", error=error)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_192.py","start":{"line":13,"col":12,"offset":406},"end":{"line":13,"col":116,"offset":510},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"e7b4a2afdb5cb7cbcab60c2f49d66403a4a16a9611388991168220f0f9a73d485754971f8cb7d67d7544329b2774673ccbd0dbbee28e40e509256b6925c0c53c_0","lines":"    return render_template_string(template.render(title=title, ingredients=ingredients, instructions=instructions))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","path":"insecure_generated_code_195.py","start":{"line":14,"col":18,"offset":345},"end":{"line":14,"col":51,"offset":378},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":10,"col":20,"offset":210},"end":{"line":10,"col":24,"offset":214},"abstract_content":"args"},"$ENGINE":{"start":{"line":12,"col":10,"offset":237},"end":{"line":12,"col":16,"offset":243},"abstract_content":"engine","propagated_value":{"svalue_start":{"line":4,"col":10,"offset":97},"svalue_end":{"line":4,"col":50,"offset":137},"svalue_abstract_content":"create_engine('sqlite:///gift_ideas.db')"}},"$SQLALCHEMY_CONN":{"start":{"line":12,"col":10,"offset":237},"end":{"line":12,"col":26,"offset":253},"abstract_content":"engine.connect()"},"$SINK":{"start":{"line":14,"col":37,"offset":364},"end":{"line":14,"col":42,"offset":369},"abstract_content":"query","propagated_value":{"svalue_start":{"line":13,"col":17,"offset":285},"svalue_end":{"line":13,"col":58,"offset":326},"svalue_abstract_content":"\"SELECT * FROM gift_ideas WHERE name = ?\""}}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with SQLAlchemy","functional-categories":["db::sink::query::sqlalchemy","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::url-path-params::flask","web::source::url-query-string::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","sql","sqlalchemy","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","shortlink":"https://sg.run/WAbpo","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116509,"rule_id":"lBU4p85","rv_id":1042233,"url":"https://semgrep.dev/playground/r/o5TlKdz/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","version_id":"o5TlKdz"}}},"severity":"CRITICAL","fingerprint":"8da140691b4b40a00804eb2867537de62d5337b4406b495031d7a18ef8dc7336c9fd4b32350779c77cd7f2a43d9d4ad8d19ad52ba7c81ad929360fcf4d12aae5_0","lines":"        result = connection.execute(query, [name])","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_195.py","start":{"line":10,"col":12,"offset":202},"end":{"line":10,"col":36,"offset":226}},"request.args.get('name')"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_195.py","start":{"line":10,"col":5,"offset":195},"end":{"line":10,"col":9,"offset":199}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_195.py","start":{"line":14,"col":18,"offset":345},"end":{"line":14,"col":51,"offset":378}},"connection.execute(query, [name])"]]},"engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"insecure_generated_code_196.py","start":{"line":17,"col":16,"offset":362},"end":{"line":17,"col":72,"offset":418},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":20,"offset":132},"end":{"line":7,"col":24,"offset":136},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":17,"col":18,"offset":364},"end":{"line":17,"col":31,"offset":377},"abstract_content":"<p>Thank you "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"886f6b81458a2488160131d0f8293518975519080c9e0742f3ff448f7cdaa1a68fb5271d11396586ee09eeb5281bfc7b71e1545a9b5fa500811bb407a5073ee9_0","lines":"    response = f\"<p>Thank you {response['name']} for your message!</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_196.py","start":{"line":7,"col":12,"offset":124},"end":{"line":7,"col":24,"offset":136}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_196.py","start":{"line":7,"col":5,"offset":117},"end":{"line":7,"col":9,"offset":121}},"content":"name"},{"location":{"path":"insecure_generated_code_196.py","start":{"line":11,"col":5,"offset":244},"end":{"line":11,"col":13,"offset":252}},"content":"response"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_196.py","start":{"line":17,"col":16,"offset":362},"end":{"line":17,"col":72,"offset":418}},"f\"<p>Thank you {response['name']} for your message!</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"insecure_generated_code_196.py","start":{"line":17,"col":16,"offset":362},"end":{"line":17,"col":72,"offset":418},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":20,"offset":132},"end":{"line":7,"col":24,"offset":136},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":17,"col":18,"offset":364},"end":{"line":17,"col":31,"offset":377},"abstract_content":"<p>Thank you "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"111ef54017894134c6f1489191a9ecff9733b7d861cf1210142cf05092fe7c6eb32ade3a9816040114615fefca209281eab52230ba8d4c89ae25a0b5de83cda1_0","lines":"    response = f\"<p>Thank you {response['name']} for your message!</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_196.py","start":{"line":7,"col":12,"offset":124},"end":{"line":7,"col":24,"offset":136}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_196.py","start":{"line":7,"col":5,"offset":117},"end":{"line":7,"col":9,"offset":121}},"content":"name"},{"location":{"path":"insecure_generated_code_196.py","start":{"line":11,"col":5,"offset":244},"end":{"line":11,"col":13,"offset":252}},"content":"response"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_196.py","start":{"line":17,"col":16,"offset":362},"end":{"line":17,"col":72,"offset":418}},"f\"<p>Thank you {response['name']} for your message!</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"insecure_generated_code_196.py","start":{"line":18,"col":17,"offset":435},"end":{"line":18,"col":119,"offset":537},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":20,"offset":132},"end":{"line":7,"col":24,"offset":136},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":18,"col":19,"offset":437},"end":{"line":18,"col":78,"offset":496},"abstract_content":"<p>We have received your message and will direct it to the "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"21e120c65c0c4bacbdcbe108fd7f6537bcc096c932e0b2ebbeb8733d0fa8cc06a7559d2832fe6ca878e00dc429fe076d03b08eac518addb306db2a307cd9c79c_0","lines":"    response += f\"<p>We have received your message and will direct it to the {response['department']} department.</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_196.py","start":{"line":7,"col":12,"offset":124},"end":{"line":7,"col":24,"offset":136}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_196.py","start":{"line":7,"col":5,"offset":117},"end":{"line":7,"col":9,"offset":121}},"content":"name"},{"location":{"path":"insecure_generated_code_196.py","start":{"line":11,"col":5,"offset":244},"end":{"line":11,"col":13,"offset":252}},"content":"response"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_196.py","start":{"line":18,"col":17,"offset":435},"end":{"line":18,"col":119,"offset":537}},"f\"<p>We have received your message and will direct it to the {response['department']} department.</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"insecure_generated_code_196.py","start":{"line":18,"col":17,"offset":435},"end":{"line":18,"col":119,"offset":537},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":20,"offset":132},"end":{"line":7,"col":24,"offset":136},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":18,"col":19,"offset":437},"end":{"line":18,"col":78,"offset":496},"abstract_content":"<p>We have received your message and will direct it to the "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"054facb77c79c026e6ae9015724796985e6e613dba34e96a96b73c131e295ca1947c5e020435273b3af9ad7abd4002a6b238856324f0ef09d2bf3278a14e91e5_0","lines":"    response += f\"<p>We have received your message and will direct it to the {response['department']} department.</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_196.py","start":{"line":7,"col":12,"offset":124},"end":{"line":7,"col":24,"offset":136}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_196.py","start":{"line":7,"col":5,"offset":117},"end":{"line":7,"col":9,"offset":121}},"content":"name"},{"location":{"path":"insecure_generated_code_196.py","start":{"line":11,"col":5,"offset":244},"end":{"line":11,"col":13,"offset":252}},"content":"response"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_196.py","start":{"line":18,"col":17,"offset":435},"end":{"line":18,"col":119,"offset":537}},"f\"<p>We have received your message and will direct it to the {response['department']} department.</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"insecure_generated_code_196.py","start":{"line":19,"col":17,"offset":554},"end":{"line":19,"col":48,"offset":585},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":20,"offset":132},"end":{"line":7,"col":24,"offset":136},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":19,"col":19,"offset":556},"end":{"line":19,"col":22,"offset":559},"abstract_content":"<p>"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"72a503da18beb76e34277d7dc92faa9a909e5b599abe481cd523375dc132232eb2866b01330c7474f626c8407266584f44b822f105bcfec09ba55a8f7f2408eb_0","lines":"    response += f\"<p>{response['message']}</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_196.py","start":{"line":7,"col":12,"offset":124},"end":{"line":7,"col":24,"offset":136}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_196.py","start":{"line":7,"col":5,"offset":117},"end":{"line":7,"col":9,"offset":121}},"content":"name"},{"location":{"path":"insecure_generated_code_196.py","start":{"line":11,"col":5,"offset":244},"end":{"line":11,"col":13,"offset":252}},"content":"response"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_196.py","start":{"line":19,"col":17,"offset":554},"end":{"line":19,"col":48,"offset":585}},"f\"<p>{response['message']}</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"insecure_generated_code_196.py","start":{"line":19,"col":17,"offset":554},"end":{"line":19,"col":48,"offset":585},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":20,"offset":132},"end":{"line":7,"col":24,"offset":136},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":19,"col":19,"offset":556},"end":{"line":19,"col":22,"offset":559},"abstract_content":"<p>"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"6918853424f81ad11d487dd5e230af81fd2b05ae2c1417d83e4943bd246c0d43c609b11f7d532abbdbbae59dde5268b24931dfa1a33470b0f375e01aa473c0c7_0","lines":"    response += f\"<p>{response['message']}</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_196.py","start":{"line":7,"col":12,"offset":124},"end":{"line":7,"col":24,"offset":136}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_196.py","start":{"line":7,"col":5,"offset":117},"end":{"line":7,"col":9,"offset":121}},"content":"name"},{"location":{"path":"insecure_generated_code_196.py","start":{"line":11,"col":5,"offset":244},"end":{"line":11,"col":13,"offset":252}},"content":"response"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_196.py","start":{"line":19,"col":17,"offset":554},"end":{"line":19,"col":48,"offset":585}},"f\"<p>{response['message']}</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","path":"insecure_generated_code_196.py","start":{"line":21,"col":5,"offset":591},"end":{"line":21,"col":20,"offset":606},"extra":{"metavars":{"$FUNC":{"start":{"line":7,"col":20,"offset":132},"end":{"line":7,"col":24,"offset":136},"abstract_content":"form"},"$X":{"start":{"line":21,"col":12,"offset":598},"end":{"line":21,"col":20,"offset":606},"abstract_content":"response"}},"message":"Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","shortlink":"https://sg.run/Zv6o","semgrep.dev":{"rule":{"origin":"community","r_id":9535,"rule_id":"QrUz49","rv_id":946207,"url":"https://semgrep.dev/playground/r/gETe1NK/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","version_id":"gETe1NK"}}},"severity":"WARNING","fingerprint":"618fe7c80d81ef75db41d9e4867e69ffab9b82d52c0b33d3232d13655654eb0200ba592ffafe0c93fbd9af9289ebbc9cd4589c66e1e20a02373840d238dae408_0","lines":"    return response","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_196.py","start":{"line":7,"col":12,"offset":124},"end":{"line":7,"col":36,"offset":148}},"request.form.get(\"name\")"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_196.py","start":{"line":7,"col":5,"offset":117},"end":{"line":7,"col":9,"offset":121}},"content":"name"},{"location":{"path":"insecure_generated_code_196.py","start":{"line":11,"col":5,"offset":244},"end":{"line":11,"col":13,"offset":252}},"content":"response"},{"location":{"path":"insecure_generated_code_196.py","start":{"line":17,"col":5,"offset":351},"end":{"line":17,"col":13,"offset":359}},"content":"response"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_196.py","start":{"line":21,"col":5,"offset":591},"end":{"line":21,"col":20,"offset":606}},"return response"]]},"engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.open-never-closed.open-never-closed","path":"insecure_generated_code_198.py","start":{"line":9,"col":5,"offset":194},"end":{"line":9,"col":44,"offset":233},"extra":{"metavars":{"$F":{"start":{"line":9,"col":5,"offset":194},"end":{"line":9,"col":8,"offset":197},"abstract_content":"tar"}},"message":"file object opened without corresponding close","metadata":{"category":"best-practice","technology":["python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.open-never-closed.open-never-closed","shortlink":"https://sg.run/9oN8","semgrep.dev":{"rule":{"origin":"community","r_id":9567,"rule_id":"x8Un4Q","rv_id":946256,"url":"https://semgrep.dev/playground/r/JdTDy9x/python.lang.best-practice.open-never-closed.open-never-closed","version_id":"JdTDy9x"}}},"severity":"ERROR","fingerprint":"72e7d59d22b44fea8775bfb618bb0be2e5d450eeb222a027741c832785e5705c95e411c21aa33fe4bed627e96f0aebb75b86fd91761eb2e113af86b2d04e395e_0","lines":"    tar = tarfile.open(backup_file, 'r:gz')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_199.py","start":{"line":14,"col":12,"offset":451},"end":{"line":14,"col":119,"offset":558},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"e6f8b4b5d2b49826422aa257c2309fd1eec86f28f1e484e7173712e13233e94c27f0dd1655ce18e5b10a855e6f4c49457e9d76500a9b21237b97adf31d585ccd_0","lines":"    return render_template_string(template.render(title=title, description=description, date=date, location=location))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_2.py","start":{"line":5,"col":12,"offset":127},"end":{"line":5,"col":37,"offset":152},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":127},"end":{"line":5,"col":13,"offset":128},"abstract_content":"t","propagated_value":{"svalue_start":{"line":4,"col":9,"offset":66},"svalue_end":{"line":4,"col":58,"offset":115},"svalue_abstract_content":"Template(\"<p>{{ excerpt }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"9667d158dc0b5f05772dabf7fc15ac1ec4ea5dda36ff06352114059d76a0042707dab470368a1e359439ba234401b7c5a7be226cdec3d2e6fa88c44edb495bb9_0","lines":"    return t.render(excerpt=excerpt)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.dangerous-template-string.dangerous-template-string","path":"insecure_generated_code_20.py","start":{"line":12,"col":5,"offset":322},"end":{"line":17,"col":43,"offset":677},"extra":{"metavars":{"$V":{"start":{"line":12,"col":5,"offset":322},"end":{"line":12,"col":12,"offset":329},"abstract_content":"message"},"$X":{"start":{"line":12,"col":26,"offset":343},"end":{"line":12,"col":30,"offset":347},"abstract_content":"name","propagated_value":{"svalue_start":{"line":7,"col":12,"offset":153},"svalue_end":{"line":7,"col":36,"offset":177},"svalue_abstract_content":"request.form.get('name')"}}},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html","https://pequalsnp-team.github.io/cheatsheet/flask-jinja2-ssti"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.dangerous-template-string.dangerous-template-string","shortlink":"https://sg.run/b79E","semgrep.dev":{"rule":{"origin":"community","r_id":9526,"rule_id":"v8UnZJ","rv_id":946218,"url":"https://semgrep.dev/playground/r/DkTNpA8/python.flask.security.dangerous-template-string.dangerous-template-string","version_id":"DkTNpA8"}}},"severity":"ERROR","fingerprint":"1e8df79efb5993f62356901661bdaf4f06af22f29479b21be37fe1ecb688eb5728919517ee0ab88c6570292f82d3a7293107dff0672e3cf76ce25d34c2b1edc2_0","lines":"    message = f\"Welcome {name}! We have received your registration.\"\n    message += f\" We will contact you at {email} to confirm.\"\n    message +=  f\" We look forward to having you as part of {affiliation}!\"\n    message += f\" Based on your submitted interests {interests}, we will add you to the relevant subgroups.\"\n\n    return render_template_string(message)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_20.py","start":{"line":17,"col":12,"offset":646},"end":{"line":17,"col":43,"offset":677},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"6973260fbc04cb200ebbfb205fe22ff15caae105e5fc9a39e464cb74ba8a50efed51e8847c434d75a48e6865ea94fc65429ed4fa2b4569cfc91def8e50bcfee0_0","lines":"    return render_template_string(message)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_200.py","start":{"line":5,"col":12,"offset":146},"end":{"line":5,"col":42,"offset":176},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":146},"end":{"line":5,"col":20,"offset":154},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":79},"svalue_end":{"line":4,"col":71,"offset":134},"svalue_abstract_content":"Template(\"<h1>{{ status.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"0f4e79ef51bd1008b9ad0d39f856c6375a4e8f383b4705427d365638acd47715080ea8052187cf652abb71143e009e93de66b1c80ab294dafa3c7c142f2389d3_0","lines":"    return template.render(status=status)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_201.py","start":{"line":5,"col":12,"offset":138},"end":{"line":5,"col":42,"offset":168},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":138},"end":{"line":5,"col":20,"offset":146},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":71},"svalue_end":{"line":4,"col":71,"offset":126},"svalue_abstract_content":"Template(\"<h1>{{ object.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"b8c137f0837e3d0bc356aeb5840f3051ccc1e8e24fd7153aae2d8d01e2b1b6d7041ecb99de1ff3ee6c55506acabf12c8182c335aabd80d85b8304fa83ac90ffc_0","lines":"    return template.render(object=object)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_202.py","start":{"line":6,"col":12,"offset":159},"end":{"line":6,"col":48,"offset":195},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":159},"end":{"line":6,"col":20,"offset":167},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":77},"svalue_end":{"line":4,"col":85,"offset":146},"svalue_abstract_content":"Template(\"<h1>Notebooks</h1><p>{{ notebooks }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"fe9be927bbb458292f2ff639b6950f236de5af50f3ae561b0c1210211288d5e378e769b0854c9b5ddee61f0781acb58e8f2402718322d24b383140c1be4d54fa_0","lines":"    return template.render(notebooks=notebooks)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_203.py","start":{"line":5,"col":12,"offset":153},"end":{"line":5,"col":52,"offset":193},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":153},"end":{"line":5,"col":20,"offset":161},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":81},"svalue_end":{"line":4,"col":76,"offset":141},"svalue_abstract_content":"Template(\"<h1>{{ trivia_game.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"f68fed1fe55d8fb05240393bad15f73dc1530900e1f4170bd358e869e2874d8775e9897a93e2578a0b26dd3bd445a871255a395dfd1c869130133e986de0009a_0","lines":"    return template.render(trivia_game=trivia_game)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_204.py","start":{"line":5,"col":12,"offset":130},"end":{"line":5,"col":40,"offset":158},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":130},"end":{"line":5,"col":20,"offset":138},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":69},"svalue_end":{"line":4,"col":65,"offset":118},"svalue_abstract_content":"Template(\"<h1>{{ title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"597369ac3a883cf3edcaa0dbd1133458b4b7eb870d9d0ce53d359af87af0039f3f54eb688b8e5a164acb5e0d6a933995432f7fe248fbbcd1126c62659d857fb9_0","lines":"    return template.render(title=title)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_205.py","start":{"line":5,"col":12,"offset":172},"end":{"line":5,"col":78,"offset":238},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":172},"end":{"line":5,"col":20,"offset":180},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":90},"svalue_end":{"line":4,"col":86,"offset":160},"svalue_abstract_content":"Template(\"{{ name }} {{ age }} {{ favorite_color }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"908c2c6b400a14d21cbaee08b0f404063cabe1753393ed1be505b32ff1b0894ae7878b511032e0d201cbfa4b658914385121d7ed07bbbc146a29be94b3f70388_0","lines":"    return template.render(name=name, age=age, favorite_color=favorite_color)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_206.py","start":{"line":5,"col":12,"offset":131},"end":{"line":5,"col":48,"offset":167},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":131},"end":{"line":5,"col":20,"offset":139},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":68},"svalue_end":{"line":4,"col":67,"offset":119},"svalue_abstract_content":"Template(\"<p>{{ file_name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"2428fe8d783cc21071e908f64e04abf3b8c261077ea84d072783814021341e9d8ec7a63ca3273b8fd0b747ad42313f6f69fff2e27b15e38d4f3a19bc8ffa8aab_0","lines":"    return template.render(file_name=file_name)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_207.py","start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":38,"offset":171},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":20,"offset":153},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":67},"svalue_end":{"line":4,"col":82,"offset":133},"svalue_abstract_content":"Template(\"<a href=\\\"{{ link }}\\\">{{ link }}</a>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"d357b34e7cbe0f15861014cad89b21d342c5383712a9e7a8b9e293752103d3a28c3d5c2754e20eff42ac80e1ec2eabe42efb8474d3dbd86d0c231ece59b57362_0","lines":"    return template.render(link=link)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_208.py","start":{"line":5,"col":12,"offset":149},"end":{"line":5,"col":44,"offset":181},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":149},"end":{"line":5,"col":20,"offset":157},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":97},"svalue_end":{"line":4,"col":56,"offset":137},"svalue_abstract_content":"Template(template_name autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"11d68ffe01776630e7ef94720df12e565f7834b63dfc3e706669387d7596efd6c8f03627c156724a42fef9b29b13e48c032a7982d1a7bd88b4f997ecd9bd1925_0","lines":"    return template.render(template_params)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_209.py","start":{"line":5,"col":12,"offset":188},"end":{"line":5,"col":76,"offset":252},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":188},"end":{"line":5,"col":20,"offset":196},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":90},"svalue_end":{"line":4,"col":102,"offset":176},"svalue_abstract_content":"Template(\"<h1>{{ title }}</h1> {{ body }} {{ tags }} {{ tags }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"0b046666e12a812ee939d369428f519fa6f147aa1bce422294dfdf860d4d17e5072e2d1eeba516b3967ddfc830e18a8ba1c0275cd26a4f720e2652636ccb8975_0","lines":"    return template.render(title=title, body=body, tags=tags, tags_in=tags)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_210.py","start":{"line":8,"col":10,"offset":141},"end":{"line":8,"col":25,"offset":156},"extra":{"metavars":{"$FILE":{"start":{"line":8,"col":15,"offset":146},"end":{"line":8,"col":19,"offset":150},"abstract_content":"name"},"$MODE":{"start":{"line":8,"col":21,"offset":152},"end":{"line":8,"col":24,"offset":155},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"15b0614041d158f902cef5ddd2eb8ff7edfc2c42ac7e2d704a9043f721fc24552a51470625a62a2e542e1c1794ea4360d18475059a0d98dcce677475710c7bf7_0","lines":"    with open(name, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_211.py","start":{"line":5,"col":12,"offset":151},"end":{"line":5,"col":54,"offset":193},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":151},"end":{"line":5,"col":20,"offset":159},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":83},"svalue_end":{"line":4,"col":72,"offset":139},"svalue_abstract_content":"Template(\"<h1>{{ announcement }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"d3a7f8950acb109d9fa6da08a899339521788db961ea78ec0a91a26b24c18cb4976ca648b8b946b89da71de64756170313e28cd662daad6f3d682854f66d6972_0","lines":"    return template.render(announcement=announcement)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_213.py","start":{"line":5,"col":12,"offset":148},"end":{"line":5,"col":79,"offset":215},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":148},"end":{"line":5,"col":20,"offset":156},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":61},"svalue_end":{"line":4,"col":91,"offset":136},"svalue_abstract_content":"jinja2.Template(\"<h1>{{ name }}</h1><p>{{ address }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"4a3bd35fed934949a9099f33c4827dcaa362bba0a66410a5d64a198bae3fddf25395feb49a6af3df4ba07a6fa15ed01d1693cfa8a13294c5691929be1150f4e2_0","lines":"    return template.render(name=location['name'], address=location['address'])","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_214.py","start":{"line":5,"col":12,"offset":139},"end":{"line":5,"col":38,"offset":165},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":139},"end":{"line":5,"col":20,"offset":147},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":74},"svalue_end":{"line":4,"col":69,"offset":127},"svalue_abstract_content":"Template(\"<h1>{{ user.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"6257d4723a23453f7090a82669dccd880063f2864697e5460ed21aed166bd0f526eafe84de50ceca301c19f0b123c2404691c2708a4e7ad10bbbc50ead4fc847_0","lines":"    return template.render(user=user)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_215.py","start":{"line":5,"col":10,"offset":73},"end":{"line":5,"col":25,"offset":88},"extra":{"metavars":{"$FILE":{"start":{"line":5,"col":15,"offset":78},"end":{"line":5,"col":19,"offset":82},"abstract_content":"path"},"$MODE":{"start":{"line":5,"col":21,"offset":84},"end":{"line":5,"col":24,"offset":87},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"296175473ddb0c9208c8d38e83da9ccc6e05452ae835eab3ad2ea28d9e9d947f2abbb48f3e47b826d7706ba57dbdffa622efd9378fee442365f795a15051a5d7_0","lines":"    with open(path, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B108","path":"insecure_generated_code_215.py","start":{"line":8,"col":1,"offset":134},"end":{"line":8,"col":34,"offset":167},"extra":{"metavars":{"$CALL":{"start":{"line":8,"col":1,"offset":134},"end":{"line":8,"col":16,"offset":149},"abstract_content":"create_log_file"}},"message":"The application was found creating files in shared system temporary directories\n(`/tmp` or `/var/tmp`) without using the `tempfile.TemporaryFile` function. Depending\non how the application uses this temporary file, an attacker may be able to create\nsymlinks that point to other files prior to the application creating or writing\nto the target file, leading to unintended files being created or overwritten.\n\nExample using `tempfile.TemporaryFile` to write a file:\n```\nimport tempfile\n\n# Open a new temporary file using a context manager\nwith tempfile.TemporaryFile() as fp:\n    # Write some data to the temporary file\n    fp.write(b'Some data')\n    # Seek back to beginning of file\n    fp.seek(0)\n    # Read it\n    data = fp.read()\n# File is automatically closed/removed once we exit the with context\n```\n\nFor more information on alternative tempfile functions see:\n- https://docs.python.org/3/library/tempfile.html\n","metadata":{"cwe":"CWE-377","category":"security","shortDescription":"Insecure temporary file","owasp":["A5:2017-Broken Access Control","A01:2021-Broken Access Control"],"security-severity":"Medium","primary_identifier":"bandit.B108","secondary_identifiers":[{"name":"Bandit Test ID B108","type":"bandit_test_id","value":"B108"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B108","shortlink":"https://sg.run/QRL4","semgrep.dev":{"rule":{"origin":"community","r_id":39386,"rule_id":"0oU6oJ","rv_id":920134,"url":"https://semgrep.dev/playground/r/bZTLo1N/gitlab.bandit.B108","version_id":"bZTLo1N"}}},"severity":"WARNING","fingerprint":"f7c03096ff910f379e7ce30203243f00769ddda564145eb1535ed7a3ecbaf177e8336282f04c1549a8ec01a1be150e9fc625d16284e0ef2563738db997e26ebc_0","lines":"create_log_file('/tmp/build.log')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.open-never-closed.open-never-closed","path":"insecure_generated_code_216.py","start":{"line":5,"col":5,"offset":65},"end":{"line":5,"col":38,"offset":98},"extra":{"metavars":{"$F":{"start":{"line":5,"col":5,"offset":65},"end":{"line":5,"col":8,"offset":68},"abstract_content":"tar"}},"message":"file object opened without corresponding close","metadata":{"category":"best-practice","technology":["python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.open-never-closed.open-never-closed","shortlink":"https://sg.run/9oN8","semgrep.dev":{"rule":{"origin":"community","r_id":9567,"rule_id":"x8Un4Q","rv_id":946256,"url":"https://semgrep.dev/playground/r/JdTDy9x/python.lang.best-practice.open-never-closed.open-never-closed","version_id":"JdTDy9x"}}},"severity":"ERROR","fingerprint":"5e0d4a0908a7c254e4bb0b9f904c4e5cac78b06163c334b41414bcff66f1aeb746ab94274f13668ed8ff8b2014522e465685ee1aabbac0d054af25b683f25009_0","lines":"    tar = tarfile.open(image_archive)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_218.py","start":{"line":14,"col":12,"offset":438},"end":{"line":14,"col":109,"offset":535},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"3166fca06e5c49332598434d50b15dc9f534f337e316fe7ca35789c80b7dda06c58c1f7d41af15a1277f66df29963e2c369ae7ed1632a63c9c7891d3b9073ac2_0","lines":"    return render_template_string(template.render(name=name, email=email, company=company, message=message))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_22.py","start":{"line":12,"col":12,"offset":417},"end":{"line":12,"col":118,"offset":523},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":12,"col":12,"offset":417},"end":{"line":12,"col":20,"offset":425},"abstract_content":"template","propagated_value":{"svalue_start":{"line":10,"col":16,"offset":270},"svalue_end":{"line":10,"col":150,"offset":404},"svalue_abstract_content":"Template(\"<h1>{{ name }}</h1><p>{{ capital }}</p><p>{{ currency }}</p><p>{{ language }}</p><p>{{ description }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"6178a9385a9c6af85173d3ffece75dd39fbad60ba0fc6d2c9fab41c19467e5837beec25764b068290bfd82d519206fe263386c089f4137f986ac07c9ddc75478_0","lines":"    return template.render(name=name, capital=capital, currency=currency, language=language, description=description)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-pickle","path":"insecure_generated_code_220.py","start":{"line":32,"col":1,"offset":645},"end":{"line":32,"col":48,"offset":692},"extra":{"metavars":{"$FUNC":{"start":{"line":32,"col":8,"offset":652},"end":{"line":32,"col":12,"offset":656},"abstract_content":"dump"}},"message":"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle","shortlink":"https://sg.run/OPwB","semgrep.dev":{"rule":{"origin":"community","r_id":9675,"rule_id":"EwU2BJ","rv_id":946397,"url":"https://semgrep.dev/playground/r/w8TKJL9/python.lang.security.deserialization.pickle.avoid-pickle","version_id":"w8TKJL9"}}},"severity":"WARNING","fingerprint":"1337efdeb5d68692a8f5b235594a1229efaf7f00bbdf7ccbf599448fe86a7f9cebbad631da6c9f9a1f0c980fa811ee39910eca21d482f578909bde16e14ce8a9_0","lines":"pickle.dump(schemas, open('schemas.pkl', 'wb'))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.insecure-deserialization.insecure-deserialization","path":"insecure_generated_code_222.py","start":{"line":10,"col":12,"offset":198},"end":{"line":10,"col":38,"offset":224},"extra":{"metavars":{"$X":{"start":{"line":7,"col":5,"offset":124},"end":{"line":7,"col":14,"offset":133},"abstract_content":"edit_task"}},"message":"Detected the use of an insecure deserialization library in a Flask route. These libraries are prone to code execution vulnerabilities. Ensure user data does not enter this function. To fix this, try to avoid serializing whole objects. Consider instead using a serializer such as JSON.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.flask.security.insecure-deserialization.insecure-deserialization","shortlink":"https://sg.run/N45z","semgrep.dev":{"rule":{"origin":"community","r_id":9527,"rule_id":"d8UjBO","rv_id":946232,"url":"https://semgrep.dev/playground/r/1QToKqY/python.flask.security.insecure-deserialization.insecure-deserialization","version_id":"1QToKqY"}}},"severity":"ERROR","fingerprint":"86cec53d069e743e334017dfaef2a33532981600599f3f07f50ee72564ca7739097e539510a4675b8d021137d481eff1c6d19041f094f4e9048813403dd8760f_0","lines":"    task = yaml.load(serialized_task)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.deserialization.tainted-pyyaml-flask.tainted-pyyaml-flask","path":"insecure_generated_code_222.py","start":{"line":10,"col":22,"offset":208},"end":{"line":10,"col":37,"offset":223},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"load"},"$FUNC":{"start":{"line":8,"col":31,"offset":167},"end":{"line":8,"col":39,"offset":175},"abstract_content":"get_json"},"$SINK":{"start":{"line":10,"col":22,"offset":208},"end":{"line":10,"col":37,"offset":223},"abstract_content":"serialized_task","propagated_value":{"svalue_start":{"line":8,"col":23,"offset":159},"svalue_end":{"line":8,"col":49,"offset":185},"svalue_abstract_content":"request.get_json()['task']"}}},"message":"The application may convert user-controlled data into an object, which can lead to an insecure deserialization vulnerability. An attacker can create a malicious serialized object, pass it to the application, and take advantage of the deserialization process to perform Denial-of-service (DoS), Remote code execution (RCE), or bypass access control measures. PyYAML's `yaml` module is as powerful as `pickle` and so may call auny Python function. It is recommended to secure your application by using `yaml.SafeLoader` or `yaml.CSafeLoader`.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Unsafe Deserialization in Flask","functional-categories":["deserialization::sink::load-object::pyyaml","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::url-path-params::flask","web::source::url-query-string::flask"],"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"references":["https://cwe.mitre.org/data/definitions/502.html","https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation","https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html","https://nvd.nist.gov/vuln/detail/CVE-2017-18342","https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures","https://portswigger.net/web-security/deserialization"],"technology":["deserialization","flask","flask-wtf","pyyaml","web","wtforms","yaml"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.flask.deserialization.tainted-pyyaml-flask.tainted-pyyaml-flask","shortlink":"https://sg.run/4YDg","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":44944,"rule_id":"lBU3yN","rv_id":1042246,"url":"https://semgrep.dev/playground/r/w8Tnkp5/python.flask.deserialization.tainted-pyyaml-flask.tainted-pyyaml-flask","version_id":"w8Tnkp5"}}},"severity":"ERROR","fingerprint":"54c97a0898e1cd8c0f2855c1629dd514fadacf5f580812086a7983dc18e08ad2a055135dc27c263d98f042fa3c8ee640097535c3f98ff74ef342749fa998bc5b_0","lines":"    task = yaml.load(serialized_task)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_222.py","start":{"line":8,"col":23,"offset":159},"end":{"line":8,"col":41,"offset":177}},"request.get_json()"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_222.py","start":{"line":8,"col":5,"offset":141},"end":{"line":8,"col":20,"offset":156}},"content":"serialized_task"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_222.py","start":{"line":10,"col":22,"offset":208},"end":{"line":10,"col":37,"offset":223}},"serialized_task"]]},"engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"insecure_generated_code_223.py","start":{"line":13,"col":15,"offset":359},"end":{"line":13,"col":58,"offset":402},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":20,"offset":158},"end":{"line":7,"col":24,"offset":162},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":13,"col":17,"offset":361},"end":{"line":13,"col":30,"offset":374},"abstract_content":"<p>Thank you "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"1b5556dabdd9af8a912e8e6792ad915ef6518d6a0680a0d8f1bc665a0ac5607354cc6a7679a068ea00e6435a2517e4b6ca1f06b81457aebb699df7054627ed28_0","lines":"              f\"<p>Thank you {name} for registering.</p>\" \\","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_223.py","start":{"line":7,"col":12,"offset":150},"end":{"line":7,"col":24,"offset":162}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_223.py","start":{"line":7,"col":5,"offset":143},"end":{"line":7,"col":9,"offset":147}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_223.py","start":{"line":13,"col":15,"offset":359},"end":{"line":13,"col":58,"offset":402}},"f\"<p>Thank you {name} for registering.</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"insecure_generated_code_223.py","start":{"line":13,"col":15,"offset":359},"end":{"line":13,"col":58,"offset":402},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":20,"offset":158},"end":{"line":7,"col":24,"offset":162},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":13,"col":17,"offset":361},"end":{"line":13,"col":30,"offset":374},"abstract_content":"<p>Thank you "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"2e060f0c4cac20800ec7a4d4f6c1bbddb1de77923dd53d84b32138179964e358156d8343785fe1033186f48a3c44737432b0f7b982d8e3dcd1acf25e4f296893_0","lines":"              f\"<p>Thank you {name} for registering.</p>\" \\","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_223.py","start":{"line":7,"col":12,"offset":150},"end":{"line":7,"col":24,"offset":162}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_223.py","start":{"line":7,"col":5,"offset":143},"end":{"line":7,"col":9,"offset":147}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_223.py","start":{"line":13,"col":15,"offset":359},"end":{"line":13,"col":58,"offset":402}},"f\"<p>Thank you {name} for registering.</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","path":"insecure_generated_code_223.py","start":{"line":16,"col":14,"offset":467},"end":{"line":16,"col":19,"offset":472},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":8,"col":21,"offset":191},"end":{"line":8,"col":25,"offset":195},"abstract_content":"form"},"$FUNC":{"start":{"line":16,"col":8,"offset":461},"end":{"line":16,"col":13,"offset":466},"abstract_content":"chmod"},"$SINK":{"start":{"line":16,"col":14,"offset":467},"end":{"line":16,"col":19,"offset":472},"abstract_content":"email","propagated_value":{"svalue_start":{"line":8,"col":13,"offset":183},"svalue_end":{"line":8,"col":34,"offset":204},"svalue_abstract_content":"request.form['email']"}}},"message":"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. In Flask apps, consider using the Werkzeug util `werkzeug.utils.secure_filename()` to sanitize paths and filenames.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Path Traversal with Flask","functional-categories":["file::sink::file-access::fileinput","file::sink::file-access::io","file::sink::file-access::linecache","file::sink::file-access::os","file::sink::file-access::shutil","file::sink::file-access::stdlib","file::sink::file-access::stdlib2","file::sink::file-access::stdlib3","file::sink::file-access::tempfile","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::url-path-params::flask","web::source::url-query-string::flask"],"owasp":["A01:2021 - Broken Access Control","A05:2017 - Broken Access Control"],"references":["https://flask.palletsprojects.com/en/2.3.x/patterns/fileuploads/","https://owasp.org/Top10/A01_2021-Broken_Access_Control","https://owasp.org/www-community/attacks/Path_Traversal","https://portswigger.net/web-security/file-path-traversal","https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.utils.secure_filename"],"technology":["codecs","fileaccess","fileinput","flask","flask-wtf","io","linecache","os","shutil","stdlib","stdlib2","stdlib3","tempfile","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","shortlink":"https://sg.run/6J4gW","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116515,"rule_id":"2ZUzRLQ","rv_id":1042253,"url":"https://semgrep.dev/playground/r/nWTPn9A/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","version_id":"nWTPn9A"}}},"severity":"ERROR","fingerprint":"16658d4fe8a15100066c884e8ae0014d908daaff2fcbb13f314af751ce8385a511754bc4d2dcf550118755ad934ccf45cb718acc407a00cf89ab52b2006056ee_0","lines":"    os.chmod(email, 0o600)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_223.py","start":{"line":8,"col":13,"offset":183},"end":{"line":8,"col":34,"offset":204}},"request.form['email']"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_223.py","start":{"line":8,"col":5,"offset":175},"end":{"line":8,"col":10,"offset":180}},"content":"email"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_223.py","start":{"line":16,"col":14,"offset":467},"end":{"line":16,"col":19,"offset":472}},"email"]]},"engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_225.py","start":{"line":6,"col":10,"offset":83},"end":{"line":6,"col":29,"offset":102},"extra":{"metavars":{"$FILE":{"start":{"line":6,"col":15,"offset":88},"end":{"line":6,"col":23,"offset":96},"abstract_content":"filename","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":59},"svalue_end":{"line":4,"col":29,"offset":72},"svalue_abstract_content":"name+\".txt\""}},"$MODE":{"start":{"line":6,"col":25,"offset":98},"end":{"line":6,"col":28,"offset":101},"abstract_content":"\"w\""}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"49dafd509ae1e1b7b917dcf4beb68b93904a1d87fdd887d8c91d370398c7a23d0cea85f2363972fdb9210b9f5e3775335a0e09cf533951a41f809651719cf0c6_0","lines":"    with open(filename, \"w\") as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_226.py","start":{"line":6,"col":10,"offset":122},"end":{"line":6,"col":29,"offset":141},"extra":{"metavars":{"$FILE":{"start":{"line":6,"col":15,"offset":127},"end":{"line":6,"col":23,"offset":135},"abstract_content":"filename","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":49},"svalue_end":{"line":4,"col":49,"offset":82},"svalue_abstract_content":"'/tmp/cache-%s.txt'%os.getpid()"}},"$MODE":{"start":{"line":6,"col":25,"offset":137},"end":{"line":6,"col":28,"offset":140},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"cf7299a5014d4e9ce8618e34492500dc079f58320fc6d34a231bf290e240a089ce2ad143b84e907310ce32e8c4dfd89045a4a6ae89f3386584f75b4129f641d3_0","lines":"    with open(filename, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_228.py","start":{"line":11,"col":12,"offset":317},"end":{"line":11,"col":72,"offset":377},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":11,"col":12,"offset":317},"end":{"line":11,"col":20,"offset":325},"abstract_content":"template","propagated_value":{"svalue_start":{"line":10,"col":16,"offset":253},"svalue_end":{"line":10,"col":68,"offset":305},"svalue_abstract_content":"jinja2.Template(\"<p>{{ bio }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"ff3af0d0bfb454a52701f727ad18589097d9bc61fb79aaf593df4e05c96cded08f207fe406f48380fdb7c1af901d738031a6abedd547f2247f139b3cb8207a94_0","lines":"    return template.render(bio=bio, location=location, website=website)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_229.py","start":{"line":6,"col":10,"offset":145},"end":{"line":6,"col":33,"offset":168},"extra":{"metavars":{"$FILE":{"start":{"line":6,"col":15,"offset":150},"end":{"line":6,"col":27,"offset":162},"abstract_content":"'orders.txt'"},"$MODE":{"start":{"line":6,"col":29,"offset":164},"end":{"line":6,"col":32,"offset":167},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"7c9084f6386d79ef97629f8203566ef10c696944e036c9d31e4ecec93611fe2a271e577ac1f2bf409428d28ba7601893130ed1d5b0bc32eabd99ad8c92aae83a_0","lines":"    with open('orders.txt', 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_229.py","start":{"line":7,"col":17,"offset":191},"end":{"line":7,"col":47,"offset":221},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":7,"col":17,"offset":191},"end":{"line":7,"col":25,"offset":199},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":71},"svalue_end":{"line":4,"col":79,"offset":134},"svalue_abstract_content":"Template(\"<h1>Orders</h1><p>{{ orders }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"ffd79ed37a37e1705f9912426a979a646529d3fac5f81fb5aa4024566cab6bf05bf7f107aefcad5e9fda55cb6b53b8a968e6155d1eba9a27265c9409eec54c2d_0","lines":"        f.write(template.render(orders=orders))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_23.py","start":{"line":11,"col":14,"offset":235},"end":{"line":11,"col":33,"offset":254},"extra":{"metavars":{"$FILE":{"start":{"line":11,"col":19,"offset":240},"end":{"line":11,"col":27,"offset":248},"abstract_content":"filepath","propagated_value":{"svalue_start":{"line":10,"col":20,"offset":191},"svalue_end":{"line":10,"col":50,"offset":221},"svalue_abstract_content":"Path(TAGS_DIR)/self.filename"}},"$MODE":{"start":{"line":11,"col":29,"offset":250},"end":{"line":11,"col":32,"offset":253},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"05acb32e8223959b4d6a7c26f7baca8e96383c67f57c639f1019fe9a7d22507fc9e0437122684593e4787d28572ea3d3b170d82d4e507d114dd4dc1de8443cbd_0","lines":"        with open(filepath, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_230.py","start":{"line":5,"col":12,"offset":149},"end":{"line":5,"col":46,"offset":183},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":149},"end":{"line":5,"col":20,"offset":157},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":82},"svalue_end":{"line":4,"col":71,"offset":137},"svalue_abstract_content":"Template(\"<p>{{ feedback.info }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"03d9012838cd4efc30d4a6d51295a76bba241382293d93328f2090eb3893d552bd632dd57f6a6cf78c8ecc47a3a25bb37365ad6c80b6b7ef3cb22fa50e7c5dab_0","lines":"    return template.render(feedback=feedback)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_231.py","start":{"line":5,"col":12,"offset":130},"end":{"line":5,"col":40,"offset":158},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":130},"end":{"line":5,"col":20,"offset":138},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":69},"svalue_end":{"line":4,"col":65,"offset":118},"svalue_abstract_content":"Template(\"<h1>{{ query }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"954abc52c703435eee2655d52c92b0332ecc23b63ad2ed185c8fd87a20c048a04db200fb1bce80a7b795af3d3407c992e3e50cc063b53730f24dbb885fd0ae82_0","lines":"    return template.render(query=query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_233.py","start":{"line":6,"col":12,"offset":144},"end":{"line":6,"col":40,"offset":172},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":144},"end":{"line":6,"col":20,"offset":152},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":79},"svalue_end":{"line":4,"col":68,"offset":131},"svalue_abstract_content":"Template(\"<p>{{ event.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"25a93198ae4455570e8e7a1c45cdad57bd755e579a824c9718f4829df66ba4cd46ee98c42db90284b1ec15f8465eb73ec587d0cbd90a69ff889b46a8e647e6db_0","lines":"    return template.render(event=event)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_234.py","start":{"line":5,"col":12,"offset":129},"end":{"line":5,"col":42,"offset":159},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":129},"end":{"line":5,"col":20,"offset":137},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":76},"svalue_end":{"line":4,"col":57,"offset":117},"svalue_abstract_content":"Template(\"{{ source }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"cc0b90001cb4b6d1a206e193f732841759d67dacc11680785550d1c4f4bc0650cf74160d77fa9e41a3af17da57cdcf3459082679303c81e1171058980ce9a4d1_0","lines":"    return template.render(source=source)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_235.py","start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":44,"offset":173},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":20,"offset":149},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":72,"offset":129},"svalue_abstract_content":"Template(\"<h1>{{ couples.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"cbdc6579718728d6ae90c2a11c78f2727b00aaab8791d3d3f7ad82b6cd8ce4759769be3fc14672075383c95e9512e9c03095a9d5f938c94233dec36106368337_0","lines":"    return template.render(couples=couples)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_236.py","start":{"line":5,"col":12,"offset":154},"end":{"line":5,"col":46,"offset":188},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":154},"end":{"line":5,"col":20,"offset":162},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":83,"offset":142},"svalue_abstract_content":"Template(\"<h1>Top News</h1><p>{{ top_news }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"7faa99f1dfc39f0952545ef969e8839bc1ddc90cb58779d49ec459a83524fe6eeae59ce61041a6c9a33866698f5e47a12f9a52706a61bd79a9a88e27a0fed090_0","lines":"    return template.render(top_news=top_news)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_237.py","start":{"line":5,"col":12,"offset":216},"end":{"line":5,"col":40,"offset":244},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":216},"end":{"line":5,"col":20,"offset":224},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":69},"svalue_end":{"line":4,"col":151,"offset":204},"svalue_abstract_content":"Template(\"<h1>{{ event.title }}</h1><p>{{ event.description }}</p><p>{{ event.date }}</p><p>{{ event.location }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"5837f83838cad58986494eaef90fea8491b385da3c570fd03e1c23ca0e256a1bfc54a6a4bf9202cf04ba73c9a230b2428b1d5229f9084ed4100163000e2fca38_0","lines":"    return template.render(event=event)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"insecure_generated_code_24.py","start":{"line":13,"col":12,"offset":261},"end":{"line":21,"col":8,"offset":558},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":20,"offset":130},"end":{"line":7,"col":24,"offset":134},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":13,"col":16,"offset":265},"end":{"line":15,"col":18,"offset":313},"abstract_content":"\n    <h1>Resume Submitted</h1>\n    <p>Thank you "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"bc0109bacf767630ab4cf69ae468d381d1f5abedcc27aea22423e6cc502e09676e33d40f2d9ec4473632041536fa39c13f8ec38891457b0e3f8653c2c316a217_0","lines":"    html = f\"\"\"\n    <h1>Resume Submitted</h1>\n    <p>Thank you {name} for submitting your resume. We have received it at {email} and will be in touch shortly.</p>\n    <p>Here is a preview of what you submitted:</p>\n    <p>Experience:</p>\n    <p>{experience}</p>\n    <p>Skills:</p>\n    <p>{skills}</p>\n    \"\"\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_24.py","start":{"line":7,"col":12,"offset":122},"end":{"line":7,"col":24,"offset":134}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_24.py","start":{"line":7,"col":5,"offset":115},"end":{"line":7,"col":9,"offset":119}},"content":"data"},{"location":{"path":"insecure_generated_code_24.py","start":{"line":8,"col":5,"offset":139},"end":{"line":8,"col":9,"offset":143}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_24.py","start":{"line":13,"col":12,"offset":261},"end":{"line":21,"col":8,"offset":558}},"f\"\"\"\n    <h1>Resume Submitted</h1>\n    <p>Thank you {name} for submitting your resume. We have received it at {email} and will be in touch shortly.</p>\n    <p>Here is a preview of what you submitted:</p>\n    <p>Experience:</p>\n    <p>{experience}</p>\n    <p>Skills:</p>\n    <p>{skills}</p>\n    \"\"\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"insecure_generated_code_24.py","start":{"line":13,"col":12,"offset":261},"end":{"line":21,"col":8,"offset":558},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":20,"offset":130},"end":{"line":7,"col":24,"offset":134},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":13,"col":16,"offset":265},"end":{"line":15,"col":18,"offset":313},"abstract_content":"\n    <h1>Resume Submitted</h1>\n    <p>Thank you "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"7c5a7c1aed597fdd712cac43a7d4d3227668fcd5b7d0d2749c503f828f413b5e7cac1949313b05232a59cde9d439485bc8ee369a958684d016fa4745857a8067_0","lines":"    html = f\"\"\"\n    <h1>Resume Submitted</h1>\n    <p>Thank you {name} for submitting your resume. We have received it at {email} and will be in touch shortly.</p>\n    <p>Here is a preview of what you submitted:</p>\n    <p>Experience:</p>\n    <p>{experience}</p>\n    <p>Skills:</p>\n    <p>{skills}</p>\n    \"\"\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_24.py","start":{"line":7,"col":12,"offset":122},"end":{"line":7,"col":24,"offset":134}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_24.py","start":{"line":7,"col":5,"offset":115},"end":{"line":7,"col":9,"offset":119}},"content":"data"},{"location":{"path":"insecure_generated_code_24.py","start":{"line":8,"col":5,"offset":139},"end":{"line":8,"col":9,"offset":143}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_24.py","start":{"line":13,"col":12,"offset":261},"end":{"line":21,"col":8,"offset":558}},"f\"\"\"\n    <h1>Resume Submitted</h1>\n    <p>Thank you {name} for submitting your resume. We have received it at {email} and will be in touch shortly.</p>\n    <p>Here is a preview of what you submitted:</p>\n    <p>Experience:</p>\n    <p>{experience}</p>\n    <p>Skills:</p>\n    <p>{skills}</p>\n    \"\"\""]]},"engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.pass-body.pass-body-range","path":"insecure_generated_code_241.py","start":{"line":15,"col":5,"offset":271},"end":{"line":16,"col":13,"offset":314},"extra":{"metavars":{"$X":{"start":{"line":15,"col":9,"offset":275},"end":{"line":15,"col":12,"offset":278},"abstract_content":"log"},"$Y":{"start":{"line":15,"col":16,"offset":282},"end":{"line":15,"col":34,"offset":300},"abstract_content":"glob.glob('*.log')"}},"message":"`pass` is the body of for log in glob.glob('*.log'). Consider removing this or raise NotImplementedError() if this is a TODO","metadata":{"category":"best-practice","technology":["python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.pass-body.pass-body-range","shortlink":"https://sg.run/rdJR","semgrep.dev":{"rule":{"origin":"community","r_id":9569,"rule_id":"eqU8xE","rv_id":946258,"url":"https://semgrep.dev/playground/r/GxTP7dA/python.lang.best-practice.pass-body.pass-body-range","version_id":"GxTP7dA"}}},"severity":"WARNING","fingerprint":"ed77609d68e30f4a6740840b396c8fe4bc6495320f225681c10a6e6feccfbc0382ea16ec622cec26d107bea7b8090b3afb88e27bf566e8e618fb428cfb5efbde_0","lines":"    for log in glob.glob('*.log'):\n        pass","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"insecure_generated_code_242.py","start":{"line":10,"col":15,"offset":222},"end":{"line":10,"col":89,"offset":296},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":20,"offset":160},"end":{"line":7,"col":24,"offset":164},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":10,"col":17,"offset":224},"end":{"line":10,"col":35,"offset":242},"abstract_content":"<p>Welcome aboard "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"1338a4c637215025f7f8504b468ab26a60b39e5d5fb36f4f1d785a43408b3a8545fc1e36d1c5c4a4bfaa82a8cf203c6d07eabafafa3f7cccdc5787b9ce4b40d0_0","lines":"    message = f\"<p>Welcome aboard {name}!<br>You've been added to our mailing list.</p>\" \\","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_242.py","start":{"line":7,"col":12,"offset":152},"end":{"line":7,"col":24,"offset":164}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_242.py","start":{"line":7,"col":5,"offset":145},"end":{"line":7,"col":9,"offset":149}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_242.py","start":{"line":10,"col":15,"offset":222},"end":{"line":10,"col":89,"offset":296}},"f\"<p>Welcome aboard {name}!<br>You've been added to our mailing list.</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"insecure_generated_code_242.py","start":{"line":10,"col":15,"offset":222},"end":{"line":10,"col":89,"offset":296},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":20,"offset":160},"end":{"line":7,"col":24,"offset":164},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":10,"col":17,"offset":224},"end":{"line":10,"col":35,"offset":242},"abstract_content":"<p>Welcome aboard "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"a6c70cc6f6c40a1259b94b82ab6997418d94b877ccc7c7934d9875d0f5d7b31e1f9c656ffab579d15ff26d6950e575c9fee801715fb05328764ee02a240cf443_0","lines":"    message = f\"<p>Welcome aboard {name}!<br>You've been added to our mailing list.</p>\" \\","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_242.py","start":{"line":7,"col":12,"offset":152},"end":{"line":7,"col":24,"offset":164}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_242.py","start":{"line":7,"col":5,"offset":145},"end":{"line":7,"col":9,"offset":149}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_242.py","start":{"line":10,"col":15,"offset":222},"end":{"line":10,"col":89,"offset":296}},"f\"<p>Welcome aboard {name}!<br>You've been added to our mailing list.</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"insecure_generated_code_242.py","start":{"line":11,"col":15,"offset":313},"end":{"line":11,"col":68,"offset":366},"extra":{"metavars":{"$ANYTHING":{"start":{"line":8,"col":21,"offset":193},"end":{"line":8,"col":25,"offset":197},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":11,"col":17,"offset":315},"end":{"line":11,"col":35,"offset":333},"abstract_content":"<p>Keep an eye on "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"1124ebc09c216c09e2fcf4dfcab3badd9450d8daa23ebbf9f30d4d36113bb54513be617b3276385b1775750447e84b54fb20a6b0bbbc7ef806e56c3c8d4d8508_0","lines":"              f\"<p>Keep an eye on {email} for updates from us.</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_242.py","start":{"line":8,"col":13,"offset":185},"end":{"line":8,"col":25,"offset":197}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_242.py","start":{"line":8,"col":5,"offset":177},"end":{"line":8,"col":10,"offset":182}},"content":"email"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_242.py","start":{"line":11,"col":15,"offset":313},"end":{"line":11,"col":68,"offset":366}},"f\"<p>Keep an eye on {email} for updates from us.</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"insecure_generated_code_242.py","start":{"line":11,"col":15,"offset":313},"end":{"line":11,"col":68,"offset":366},"extra":{"metavars":{"$ANYTHING":{"start":{"line":8,"col":21,"offset":193},"end":{"line":8,"col":25,"offset":197},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":11,"col":17,"offset":315},"end":{"line":11,"col":35,"offset":333},"abstract_content":"<p>Keep an eye on "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"9d6fcc03eb0c16741dff08f278e7380ce852279352674cbd7c22b8cc3ae4253886e73b2cb69b8396710a31fdd3f63dc4120e11ab7097c81b12d10aa13904bf2f_0","lines":"              f\"<p>Keep an eye on {email} for updates from us.</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_242.py","start":{"line":8,"col":13,"offset":185},"end":{"line":8,"col":25,"offset":197}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_242.py","start":{"line":8,"col":5,"offset":177},"end":{"line":8,"col":10,"offset":182}},"content":"email"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_242.py","start":{"line":11,"col":15,"offset":313},"end":{"line":11,"col":68,"offset":366}},"f\"<p>Keep an eye on {email} for updates from us.</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_242.py","start":{"line":13,"col":12,"offset":379},"end":{"line":13,"col":43,"offset":410},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"a25e6579ab2e3f670f1721dd4d68680eb5cd110263f50b817cfe868a13f87f790f36294794127606dce530ea0302a82e4e128e4b51f184d43d8758f48ebc60c5_0","lines":"    return render_template_string(message)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B404","path":"insecure_generated_code_243.py","start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":18,"offset":17},"extra":{"metavars":{},"message":"Consider possible security implications associated with subprocess module.\n","metadata":{"cwe":"CWE-78","owasp":"A8:2017-Insecure Deserialization","shortDescription":"Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","primary_identifier":"bandit.B404","secondary_identifiers":[{"name":"Bandit Test ID B404","type":"bandit_test_id","value":"B404"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B404","shortlink":"https://sg.run/lj3o","semgrep.dev":{"rule":{"origin":"community","r_id":11557,"rule_id":"4bUz3p","rv_id":835419,"url":"https://semgrep.dev/playground/r/A8T3lxl/gitlab.bandit.B404","version_id":"A8T3lxl"}}},"severity":"WARNING","fingerprint":"37e475c9a2505b712a15b935ed37aee0a46a9844a18a69bcae39b457bd06daa4609968951649755fd25c557c4dfdc89300930fe8b3ec4b8c119ea42043b26fc1_0","lines":"import subprocess","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.open-never-closed.open-never-closed","path":"insecure_generated_code_244.py","start":{"line":5,"col":5,"offset":76},"end":{"line":5,"col":38,"offset":109},"extra":{"metavars":{"$F":{"start":{"line":5,"col":5,"offset":76},"end":{"line":5,"col":8,"offset":79},"abstract_content":"tar"}},"message":"file object opened without corresponding close","metadata":{"category":"best-practice","technology":["python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.open-never-closed.open-never-closed","shortlink":"https://sg.run/9oN8","semgrep.dev":{"rule":{"origin":"community","r_id":9567,"rule_id":"x8Un4Q","rv_id":946256,"url":"https://semgrep.dev/playground/r/JdTDy9x/python.lang.best-practice.open-never-closed.open-never-closed","version_id":"JdTDy9x"}}},"severity":"ERROR","fingerprint":"b3f05a2c4005e4acfce391b6e7a99b5a04a7abcebfbacaa9c1d84423d4ea146e02aa4c20425f06f5d9c3060e710122e04780cc66efce83eec0b2a645d981b2c1_0","lines":"    tar = tarfile.open(image_archive)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_245.py","start":{"line":7,"col":16,"offset":130},"end":{"line":7,"col":40,"offset":154},"extra":{"metavars":{"$FILE":{"start":{"line":7,"col":21,"offset":135},"end":{"line":7,"col":34,"offset":148},"abstract_content":"'events.json'"},"$MODE":{"start":{"line":7,"col":36,"offset":150},"end":{"line":7,"col":39,"offset":153},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"3ca22412700b79317c6122f2009683c02140c7a253f60c04db5faf06ad73d50921490729d693748e110b5b22b56749453aac2cb0a12646211149979baf6010ff_0","lines":"    tmp_file = open('events.json', 'w')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.insecure-deserialization.insecure-deserialization","path":"insecure_generated_code_246.py","start":{"line":15,"col":15,"offset":222},"end":{"line":15,"col":44,"offset":251},"extra":{"metavars":{"$X":{"start":{"line":14,"col":5,"offset":201},"end":{"line":14,"col":8,"offset":204},"abstract_content":"get"},"$FUNC":{"start":{"line":15,"col":22,"offset":229},"end":{"line":15,"col":27,"offset":234},"abstract_content":"dumps"}},"message":"Detected the use of an insecure deserialization library in a Flask route. These libraries are prone to code execution vulnerabilities. Ensure user data does not enter this function. To fix this, try to avoid serializing whole objects. Consider instead using a serializer such as JSON.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.flask.security.insecure-deserialization.insecure-deserialization","shortlink":"https://sg.run/N45z","semgrep.dev":{"rule":{"origin":"community","r_id":9527,"rule_id":"d8UjBO","rv_id":946232,"url":"https://semgrep.dev/playground/r/1QToKqY/python.flask.security.insecure-deserialization.insecure-deserialization","version_id":"1QToKqY"}}},"severity":"ERROR","fingerprint":"c7c31ec12308f91fc39b42c3a0584aa790fe2ba96c2c0787cd450e5ef596c907bd35ab95b45b5bc37329039d9f8eff30bc8fc1a323b8a8c08b4566d2b53983c0_0","lines":"    pickled = pickle.dumps(journal.entries)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-pickle","path":"insecure_generated_code_246.py","start":{"line":15,"col":15,"offset":222},"end":{"line":15,"col":44,"offset":251},"extra":{"metavars":{"$FUNC":{"start":{"line":15,"col":22,"offset":229},"end":{"line":15,"col":27,"offset":234},"abstract_content":"dumps"}},"message":"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle","shortlink":"https://sg.run/OPwB","semgrep.dev":{"rule":{"origin":"community","r_id":9675,"rule_id":"EwU2BJ","rv_id":946397,"url":"https://semgrep.dev/playground/r/w8TKJL9/python.lang.security.deserialization.pickle.avoid-pickle","version_id":"w8TKJL9"}}},"severity":"WARNING","fingerprint":"89fbe9d6540bbe39d3f771a39532e40b624e5cf812cf951e2f4768465349d58c46ebea3079ad8aa09aee13d02755782c5abb6795365c64c1ed4e60800ec41efb_0","lines":"    pickled = pickle.dumps(journal.entries)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.best-practice.use-jsonify.use-jsonify","path":"insecure_generated_code_246.py","start":{"line":17,"col":12,"offset":295},"end":{"line":17,"col":28,"offset":311},"extra":{"metavars":{"$X":{"start":{"line":14,"col":5,"offset":201},"end":{"line":14,"col":8,"offset":204},"abstract_content":"get"},"$JSONDUMPS":{"start":{"line":17,"col":12,"offset":295},"end":{"line":17,"col":28,"offset":311},"abstract_content":"json.dumps(data)"},"$...VAR":{"start":{"line":17,"col":23,"offset":306},"end":{"line":17,"col":27,"offset":310},"abstract_content":"data"}},"message":"flask.jsonify() is a Flask helper method which handles the correct  settings for returning JSON from Flask routes","fix":"flask.jsonify(data)","metadata":{"category":"best-practice","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.2.x/api/#flask.json.jsonify"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.flask.best-practice.use-jsonify.use-jsonify","shortlink":"https://sg.run/XBlb","semgrep.dev":{"rule":{"origin":"community","r_id":9520,"rule_id":"NbUkx6","rv_id":946199,"url":"https://semgrep.dev/playground/r/vdTGnyK/python.flask.best-practice.use-jsonify.use-jsonify","version_id":"vdTGnyK"}}},"severity":"ERROR","fingerprint":"9ef0face0e028628cb7d04376a704e34b0946b47156edd69ef8521b841dc33aa3f6b67d17be0d8fe29ee6cc9eca7ef0d6ab252676ed129f2e4b0365c6702da6c_0","lines":"    return json.dumps(data)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","path":"insecure_generated_code_247.py","start":{"line":13,"col":12,"offset":336},"end":{"line":13,"col":81,"offset":405},"extra":{"metavars":{},"message":"Be careful with `flask.make_response()`. If this response is rendered onto a webpage, this could create a cross-site scripting (XSS) vulnerability. `flask.make_response()` will not autoescape HTML. If you are rendering HTML, write your HTML in a template file and use `flask.render_template()` which will take care of escaping. If you are returning data from an API, consider using `flask.jsonify()`.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"references":["https://github.com/python-security/pyt//blob/093a077bcf12d1f58ddeb2d73ddc096623985fb0/examples/vulnerable_code/XSS_assign_to_other_var.py#L11","https://flask.palletsprojects.com/en/1.1.x/api/#flask.Flask.make_response","https://flask.palletsprojects.com/en/1.1.x/api/#response-objects"],"category":"security","technology":["flask"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","shortlink":"https://sg.run/3x3p","semgrep.dev":{"rule":{"origin":"community","r_id":9543,"rule_id":"AbUz6A","rv_id":946217,"url":"https://semgrep.dev/playground/r/BjT1N6E/python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","version_id":"BjT1N6E"}}},"severity":"WARNING","fingerprint":"641eea11e2207b9caeecb4bd8ee7c30e9d20a9fac614e05f6a4176a07b92b7173f64e0db37f4d015797c1f0684ea91b7755c52cf82c5f90d5a7242a0a8ed64ed_0","lines":"    return make_response(template.render(name=name, location=location, bio=bio))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.path-traversal.path-traversal-open.path-traversal-open","path":"insecure_generated_code_248.py","start":{"line":8,"col":5,"offset":138},"end":{"line":9,"col":46,"offset":222},"extra":{"metavars":{"$FUNC":{"start":{"line":7,"col":5,"offset":117},"end":{"line":7,"col":18,"offset":130},"abstract_content":"generate_docs"},"$DATA":{"start":{"line":8,"col":5,"offset":138},"end":{"line":8,"col":14,"offset":147},"abstract_content":"spec_file"},"$W":{"start":{"line":8,"col":25,"offset":158},"end":{"line":8,"col":30,"offset":163},"abstract_content":"files"}},"message":"Found request data in a call to 'open'. Ensure the request data is validated or sanitized, otherwise it could result in path traversal attacks and therefore sensitive data being leaked. To mitigate, consider using os.path.abspath or os.path.realpath or the pathlib library.","metadata":{"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"owasp":["A05:2017 - Broken Access Control","A01:2021 - Broken Access Control"],"references":["https://owasp.org/www-community/attacks/Path_Traversal"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.django.security.injection.path-traversal.path-traversal-open.path-traversal-open","shortlink":"https://sg.run/W8qg","semgrep.dev":{"rule":{"origin":"community","r_id":9509,"rule_id":"oqUe7z","rv_id":946178,"url":"https://semgrep.dev/playground/r/qkT4j35/python.django.security.injection.path-traversal.path-traversal-open.path-traversal-open","version_id":"qkT4j35"}}},"severity":"WARNING","fingerprint":"7cbf7b1b2513d6e7e82ca1f6317f44cdce3975f27a34fd3a25602d0df65914d8946292d6147c4b0537b4bc61d1ec22f64f2ac217c1f0c7eb2e2a3a558f16bc0d_0","lines":"    spec_file = request.files['spec_file']\n    spec = pickle.load(open(spec_file, 'rb'))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B301-1","path":"insecure_generated_code_248.py","start":{"line":9,"col":12,"offset":188},"end":{"line":9,"col":46,"offset":222},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"load"},"$METHOD":{"start":{"line":9,"col":19,"offset":195},"end":{"line":9,"col":23,"offset":199},"abstract_content":"load"}},"message":"The application was found using `pickle` which is vulnerable to deserialization attacks.\nDeserialization attacks exploit the process of reading serialized data and turning it back\ninto an object. By constructing malicious objects and serializing them, an adversary may\nattempt to:\n\n- Inject code that is executed upon object construction, which occurs during the\ndeserialization process.\n- Exploit mass assignment by including fields that are not normally a part of the serialized\ndata but are read in during deserialization.\n\nConsider safer alternatives such as serializing data in the JSON format. Ensure any format\nchosen allows the application to specify exactly which object types are allowed to be deserialized.\n\nTo protect against mass assignment, only allow deserialization of the specific fields that are\nrequired. If this is not easily done, consider creating an intermediary type that\ncan be serialized with only the necessary fields exposed.\n\nExample JSON deserializer using an intermediary type that is validated against a schema to ensure\nit is safe from mass assignment:\n```\nimport jsonschema\n\n# Create a schema to validate our user-supplied input against\n# an intermediary object\nintermediary_schema = {\n    \"type\" : \"object\",\n    \"properties\" :  {\n        \"name\": {\"type\" : \"string\"}\n    },\n    \"required\": [\"name\"],\n    # Protect against random properties being added to the object\n    \"additionalProperties\": False,\n}\n# If a user attempted to add \"'is_admin': True\" it would cause a validation error\nintermediary_object = {'name': 'test user'}\n\ntry:\n    # Validate the user supplied intermediary object against our schema\n    jsonschema.validate(instance=intermediary_object, schema=intermediary_schema)\n    user_object = {'user':\n        {\n            # Assign the deserialized data from intermediary object\n            'name': intermediary_object['name'],\n            # Add in protected data in object definition (or set it from a class constructor)\n            'is_admin': False,\n        }\n    }\n    # Work with the user_object\nexcept jsonschema.exceptions.ValidationError as ex:\n    # Gracefully handle validation errors\n    # ...\n```\n\nFor more details on deserialization attacks in general, see OWASP's guide:\n- https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html\n","metadata":{"cwe":"CWE-502","owasp":["A8:2017-Insecure Deserialization","A08:2021-Software and Data Integrity Failures"],"category":"security","shortDescription":"Deserialization of untrusted data","security-severity":"High","primary_identifier":"bandit.B301-1","secondary_identifiers":[{"name":"Bandit Test ID B301","type":"bandit_test_id","value":"B301"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B301-1","shortlink":"https://sg.run/v20A","semgrep.dev":{"rule":{"origin":"community","r_id":11877,"rule_id":"zdU1y5","rv_id":920102,"url":"https://semgrep.dev/playground/r/BjTKL1v/gitlab.bandit.B301-1","version_id":"BjTKL1v"}}},"severity":"WARNING","fingerprint":"5a285dffc6cdc98b52dc2b3cb3a5c1920e118b36b947af45fd0788f842e3853c92da73630f2acc057658a224410b3b90dfc7cbd9bbcd327969b5b4d84f682f58_0","lines":"    spec = pickle.load(open(spec_file, 'rb'))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.insecure-deserialization.insecure-deserialization","path":"insecure_generated_code_248.py","start":{"line":9,"col":12,"offset":188},"end":{"line":9,"col":46,"offset":222},"extra":{"metavars":{"$X":{"start":{"line":7,"col":5,"offset":117},"end":{"line":7,"col":18,"offset":130},"abstract_content":"generate_docs"},"$FUNC":{"start":{"line":9,"col":19,"offset":195},"end":{"line":9,"col":23,"offset":199},"abstract_content":"load"}},"message":"Detected the use of an insecure deserialization library in a Flask route. These libraries are prone to code execution vulnerabilities. Ensure user data does not enter this function. To fix this, try to avoid serializing whole objects. Consider instead using a serializer such as JSON.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.flask.security.insecure-deserialization.insecure-deserialization","shortlink":"https://sg.run/N45z","semgrep.dev":{"rule":{"origin":"community","r_id":9527,"rule_id":"d8UjBO","rv_id":946232,"url":"https://semgrep.dev/playground/r/1QToKqY/python.flask.security.insecure-deserialization.insecure-deserialization","version_id":"1QToKqY"}}},"severity":"ERROR","fingerprint":"da5968c797bac683881a7617e56fbbd20457a562781c8b7c955f898c4a9bd1b156aac8c1a4b39cb7756818d076c0e6f578868460b7d165f479b84e056f7cd772_0","lines":"    spec = pickle.load(open(spec_file, 'rb'))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-pickle","path":"insecure_generated_code_248.py","start":{"line":9,"col":12,"offset":188},"end":{"line":9,"col":46,"offset":222},"extra":{"metavars":{"$FUNC":{"start":{"line":9,"col":19,"offset":195},"end":{"line":9,"col":23,"offset":199},"abstract_content":"load"}},"message":"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle","shortlink":"https://sg.run/OPwB","semgrep.dev":{"rule":{"origin":"community","r_id":9675,"rule_id":"EwU2BJ","rv_id":946397,"url":"https://semgrep.dev/playground/r/w8TKJL9/python.lang.security.deserialization.pickle.avoid-pickle","version_id":"w8TKJL9"}}},"severity":"WARNING","fingerprint":"e7076c6fc42f4e0525dd9704b68bd6a99c052d20fe4bed1dbb81b5eb5ed38d453e4f4a7593b648fa3508f4734e182870980f60d3888d5d850d35dc3a01b9d4c1_0","lines":"    spec = pickle.load(open(spec_file, 'rb'))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.deserialization.tainted-pickle-flask.tainted-pickle-flask","path":"insecure_generated_code_248.py","start":{"line":9,"col":24,"offset":200},"end":{"line":9,"col":45,"offset":221},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"load"},"$PROPERTY":{"start":{"line":8,"col":25,"offset":158},"end":{"line":8,"col":30,"offset":163},"abstract_content":"files"},"$PICKLE":{"start":{"line":9,"col":12,"offset":188},"end":{"line":9,"col":18,"offset":194},"abstract_content":"pickle"},"$METHOD":{"start":{"line":9,"col":19,"offset":195},"end":{"line":9,"col":23,"offset":199},"abstract_content":"load"},"$SINK":{"start":{"line":9,"col":24,"offset":200},"end":{"line":9,"col":45,"offset":221},"abstract_content":"open(spec_file'rb')"}},"message":"The application may convert user-controlled data into an object, which can lead to an insecure deserialization vulnerability. An attacker can create a malicious serialized object, pass it to the application, and take advantage of the deserialization process to perform Denial-of-service (DoS), Remote code execution (RCE), or bypass access control measures. The C implementations of the `pickle` module, called `cPickle` or `_pickle`, are also considered insecure.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Unsafe Deserialization in Flask","functional-categories":["deserialization::sink::load-object::lang","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::url-path-params::flask","web::source::url-query-string::flask"],"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"references":["https://davidhamann.de/2020/04/05/exploiting-python-pickle/","https://docs.python.org/3/library/pickle.html","https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures","https://portswigger.net/web-security/deserialization"],"technology":["deserialization","flask","flask-wtf","pickle","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.flask.deserialization.tainted-pickle-flask.tainted-pickle-flask","shortlink":"https://sg.run/3lBg","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":44943,"rule_id":"qNUAQe","rv_id":1042245,"url":"https://semgrep.dev/playground/r/kbTxOD3/python.flask.deserialization.tainted-pickle-flask.tainted-pickle-flask","version_id":"kbTxOD3"}}},"severity":"ERROR","fingerprint":"18c73e9747ce8278adda116d9b7f4cbee10c47f8b1baae7585d2ce120bbbfbefede1e761ec953df903906e4bc8e5e3bc908b429da2d86d301d94d08abd4591ef_0","lines":"    spec = pickle.load(open(spec_file, 'rb'))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_248.py","start":{"line":8,"col":17,"offset":150},"end":{"line":8,"col":43,"offset":176}},"request.files['spec_file']"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_248.py","start":{"line":8,"col":5,"offset":138},"end":{"line":8,"col":14,"offset":147}},"content":"spec_file"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_248.py","start":{"line":9,"col":24,"offset":200},"end":{"line":9,"col":45,"offset":221}},"open(spec_file, 'rb')"]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.path-traversal-open.path-traversal-open","path":"insecure_generated_code_248.py","start":{"line":9,"col":24,"offset":200},"end":{"line":9,"col":45,"offset":221},"extra":{"metavars":{"$INTERM":{"start":{"line":8,"col":5,"offset":138},"end":{"line":8,"col":14,"offset":147},"abstract_content":"spec_file"},"$W":{"start":{"line":8,"col":25,"offset":158},"end":{"line":8,"col":30,"offset":163},"abstract_content":"files"}},"message":"Found request data in a call to 'open'. Ensure the request data is validated or sanitized, otherwise it could result in path traversal attacks.","metadata":{"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"owasp":["A05:2017 - Broken Access Control","A01:2021 - Broken Access Control"],"references":["https://owasp.org/www-community/attacks/Path_Traversal"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.flask.security.injection.path-traversal-open.path-traversal-open","shortlink":"https://sg.run/PJRW","semgrep.dev":{"rule":{"origin":"community","r_id":9545,"rule_id":"DbUpOQ","rv_id":946224,"url":"https://semgrep.dev/playground/r/YDTvR9R/python.flask.security.injection.path-traversal-open.path-traversal-open","version_id":"YDTvR9R"}}},"severity":"ERROR","fingerprint":"696ab3b84a3deabd8bf0941efa14439d26b96fb2a58b79f8e40d07dfb7d685af5ba610f834ce97a24c569c43e9ad245cdabcae9f078e4e1acadb3e33473efa5f_0","lines":"    spec = pickle.load(open(spec_file, 'rb'))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","path":"insecure_generated_code_248.py","start":{"line":9,"col":29,"offset":205},"end":{"line":9,"col":38,"offset":214},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"files"},"$PROPERTY":{"start":{"line":8,"col":25,"offset":158},"end":{"line":8,"col":30,"offset":163},"abstract_content":"files"},"$SINK":{"start":{"line":9,"col":29,"offset":205},"end":{"line":9,"col":38,"offset":214},"abstract_content":"spec_file","propagated_value":{"svalue_start":{"line":8,"col":17,"offset":150},"svalue_end":{"line":8,"col":43,"offset":176},"svalue_abstract_content":"request.files['spec_file']"}}},"message":"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. In Flask apps, consider using the Werkzeug util `werkzeug.utils.secure_filename()` to sanitize paths and filenames.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Path Traversal with Flask","functional-categories":["file::sink::file-access::fileinput","file::sink::file-access::io","file::sink::file-access::linecache","file::sink::file-access::os","file::sink::file-access::shutil","file::sink::file-access::stdlib","file::sink::file-access::stdlib2","file::sink::file-access::stdlib3","file::sink::file-access::tempfile","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::url-path-params::flask","web::source::url-query-string::flask"],"owasp":["A01:2021 - Broken Access Control","A05:2017 - Broken Access Control"],"references":["https://flask.palletsprojects.com/en/2.3.x/patterns/fileuploads/","https://owasp.org/Top10/A01_2021-Broken_Access_Control","https://owasp.org/www-community/attacks/Path_Traversal","https://portswigger.net/web-security/file-path-traversal","https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.utils.secure_filename"],"technology":["codecs","fileaccess","fileinput","flask","flask-wtf","io","linecache","os","shutil","stdlib","stdlib2","stdlib3","tempfile","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","shortlink":"https://sg.run/6J4gW","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116515,"rule_id":"2ZUzRLQ","rv_id":1042253,"url":"https://semgrep.dev/playground/r/nWTPn9A/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","version_id":"nWTPn9A"}}},"severity":"ERROR","fingerprint":"500a3df072ec9d34ba3c4aa22272ee77baea39a1c97c7c8ba4c3612fb541b23afdae6f23fb9feb51766c429afee876bb9edf8a6dede2753b3933c4b295ef2879_0","lines":"    spec = pickle.load(open(spec_file, 'rb'))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_248.py","start":{"line":8,"col":17,"offset":150},"end":{"line":8,"col":43,"offset":176}},"request.files['spec_file']"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_248.py","start":{"line":8,"col":5,"offset":138},"end":{"line":8,"col":14,"offset":147}},"content":"spec_file"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_248.py","start":{"line":9,"col":29,"offset":205},"end":{"line":9,"col":38,"offset":214}},"spec_file"]]},"engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"insecure_generated_code_249.py","start":{"line":14,"col":20,"offset":376},"end":{"line":14,"col":60,"offset":416},"extra":{"metavars":{"$ANYTHING":{"start":{"line":13,"col":26,"offset":327},"end":{"line":13,"col":30,"offset":331},"abstract_content":"args"},"$HTMLSTR":{"start":{"line":14,"col":22,"offset":378},"end":{"line":14,"col":26,"offset":382},"abstract_content":"<li>"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"e7598fd6bca1577c576c54dde06108d48682e918471d2ae695b4096c7fef54c07f4ff5fcfc7986678624cdf11c9ea72892d932233dc636c44670f40463cb6680_0","lines":"        results += f\"<li>{question['text']}: {answer}</li>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_249.py","start":{"line":13,"col":18,"offset":319},"end":{"line":13,"col":30,"offset":331}},"request.args"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_249.py","start":{"line":13,"col":9,"offset":310},"end":{"line":13,"col":15,"offset":316}},"content":"answer"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_249.py","start":{"line":14,"col":20,"offset":376},"end":{"line":14,"col":60,"offset":416}},"f\"<li>{question['text']}: {answer}</li>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"insecure_generated_code_249.py","start":{"line":14,"col":20,"offset":376},"end":{"line":14,"col":60,"offset":416},"extra":{"metavars":{"$ANYTHING":{"start":{"line":13,"col":26,"offset":327},"end":{"line":13,"col":30,"offset":331},"abstract_content":"args"},"$HTMLSTR":{"start":{"line":14,"col":22,"offset":378},"end":{"line":14,"col":26,"offset":382},"abstract_content":"<li>"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"4504e80be8ec4946c095240847918c1ee29ba7c5c8ac8cfc4860e5dda8eb9a1c8281c3506497940a9173881da1eb6e65a91903bd43c6dbe9a44d5fdc5eec6648_0","lines":"        results += f\"<li>{question['text']}: {answer}</li>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_249.py","start":{"line":13,"col":18,"offset":319},"end":{"line":13,"col":30,"offset":331}},"request.args"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_249.py","start":{"line":13,"col":9,"offset":310},"end":{"line":13,"col":15,"offset":316}},"content":"answer"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_249.py","start":{"line":14,"col":20,"offset":376},"end":{"line":14,"col":60,"offset":416}},"f\"<li>{question['text']}: {answer}</li>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","path":"insecure_generated_code_249.py","start":{"line":16,"col":12,"offset":429},"end":{"line":16,"col":34,"offset":451},"extra":{"metavars":{},"message":"Be careful with `flask.make_response()`. If this response is rendered onto a webpage, this could create a cross-site scripting (XSS) vulnerability. `flask.make_response()` will not autoescape HTML. If you are rendering HTML, write your HTML in a template file and use `flask.render_template()` which will take care of escaping. If you are returning data from an API, consider using `flask.jsonify()`.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"references":["https://github.com/python-security/pyt//blob/093a077bcf12d1f58ddeb2d73ddc096623985fb0/examples/vulnerable_code/XSS_assign_to_other_var.py#L11","https://flask.palletsprojects.com/en/1.1.x/api/#flask.Flask.make_response","https://flask.palletsprojects.com/en/1.1.x/api/#response-objects"],"category":"security","technology":["flask"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","shortlink":"https://sg.run/3x3p","semgrep.dev":{"rule":{"origin":"community","r_id":9543,"rule_id":"AbUz6A","rv_id":946217,"url":"https://semgrep.dev/playground/r/BjT1N6E/python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","version_id":"BjT1N6E"}}},"severity":"WARNING","fingerprint":"9fcb80506ba4ca1e439a72813608b64f31b99c615890be6e03244567e738ac0d4f7d0311d1b06312879d14a7e3a58a2c5dca9e60ee6789008ed28c1076f13617_0","lines":"    return make_response(results)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_251.py","start":{"line":9,"col":5,"offset":185},"end":{"line":9,"col":24,"offset":204},"extra":{"metavars":{"$FILE":{"start":{"line":9,"col":10,"offset":190},"end":{"line":9,"col":18,"offset":198},"abstract_content":"log_file"},"$MODE":{"start":{"line":9,"col":20,"offset":200},"end":{"line":9,"col":23,"offset":203},"abstract_content":"'a'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"5859d75cd30171a57cbf4302298be90389e25a2fd3a14f7871d21ac9fcee82a93e73bf35f712dc0ecdb37c0a0424c1e6f1d7130503247c0c576b61913ff1dc13_0","lines":"    open(log_file, 'a').close()","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_252.py","start":{"line":14,"col":10,"offset":286},"end":{"line":14,"col":29,"offset":305},"extra":{"metavars":{"$FILE":{"start":{"line":14,"col":15,"offset":291},"end":{"line":14,"col":23,"offset":299},"abstract_content":"filename","propagated_value":{"svalue_start":{"line":12,"col":16,"offset":249},"svalue_end":{"line":12,"col":42,"offset":275},"svalue_abstract_content":"f\"archive_{date}_data.csv\""}},"$MODE":{"start":{"line":14,"col":25,"offset":301},"end":{"line":14,"col":28,"offset":304},"abstract_content":"\"w\""}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"5b27578f6c3c1658849630fee563dab0e2a6f737e08c720edc7f13a4acd2a73518e93e83934549869e6dc563a95a74554c439abc7ce50ceefab88fb75509e820_0","lines":"    with open(filename, \"w\") as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"insecure_generated_code_253.py","start":{"line":11,"col":16,"offset":279},"end":{"line":11,"col":148,"offset":411},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":20,"offset":156},"end":{"line":7,"col":24,"offset":160},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":11,"col":18,"offset":281},"end":{"line":11,"col":30,"offset":293},"abstract_content":"<h3>Thankyou"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"f070f06b9ac8c25f1b6eec21ed90a8928b34959401652c28fbea86dc8705ba4b4f268d88d6ea6110fbb13f705a127c29d9a4d771f8a06c5c9180df29a1b70877_0","lines":"    template = f\"<h3>Thankyou{name}foryourmessage!</h3><p>Wehavereceivedyourmessageandwilldirectittothe{department}department.</p><p>{message}</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_253.py","start":{"line":7,"col":12,"offset":148},"end":{"line":7,"col":24,"offset":160}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_253.py","start":{"line":7,"col":5,"offset":141},"end":{"line":7,"col":9,"offset":145}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_253.py","start":{"line":11,"col":16,"offset":279},"end":{"line":11,"col":148,"offset":411}},"f\"<h3>Thankyou{name}foryourmessage!</h3><p>Wehavereceivedyourmessageandwilldirectittothe{department}department.</p><p>{message}</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"insecure_generated_code_253.py","start":{"line":11,"col":16,"offset":279},"end":{"line":11,"col":148,"offset":411},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":20,"offset":156},"end":{"line":7,"col":24,"offset":160},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":11,"col":18,"offset":281},"end":{"line":11,"col":30,"offset":293},"abstract_content":"<h3>Thankyou"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"1c1f6500a30070d70402daf6f1664dff34d61c8811cc78a53bbca433b4d3582e59890e55ed1292588a86b46487b71b09a60c476ef5cc10c1009f4f1c0f02b785_0","lines":"    template = f\"<h3>Thankyou{name}foryourmessage!</h3><p>Wehavereceivedyourmessageandwilldirectittothe{department}department.</p><p>{message}</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_253.py","start":{"line":7,"col":12,"offset":148},"end":{"line":7,"col":24,"offset":160}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_253.py","start":{"line":7,"col":5,"offset":141},"end":{"line":7,"col":9,"offset":145}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_253.py","start":{"line":11,"col":16,"offset":279},"end":{"line":11,"col":148,"offset":411}},"f\"<h3>Thankyou{name}foryourmessage!</h3><p>Wehavereceivedyourmessageandwilldirectittothe{department}department.</p><p>{message}</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","path":"insecure_generated_code_253.py","start":{"line":13,"col":14,"offset":426},"end":{"line":13,"col":22,"offset":434},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":7,"col":20,"offset":156},"end":{"line":7,"col":24,"offset":160},"abstract_content":"form"},"$FUNC":{"start":{"line":13,"col":8,"offset":420},"end":{"line":13,"col":13,"offset":425},"abstract_content":"chmod"},"$SINK":{"start":{"line":13,"col":14,"offset":426},"end":{"line":13,"col":22,"offset":434},"abstract_content":"template","propagated_value":{"svalue_start":{"line":11,"col":16,"offset":279},"svalue_end":{"line":11,"col":148,"offset":411},"svalue_abstract_content":"f\"<h3>Thankyou{name}foryourmessage!</h3><p>Wehavereceivedyourmessageandwilldirectittothe{department}department.</p><p>{message}</p>\""}}},"message":"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. In Flask apps, consider using the Werkzeug util `werkzeug.utils.secure_filename()` to sanitize paths and filenames.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Path Traversal with Flask","functional-categories":["file::sink::file-access::fileinput","file::sink::file-access::io","file::sink::file-access::linecache","file::sink::file-access::os","file::sink::file-access::shutil","file::sink::file-access::stdlib","file::sink::file-access::stdlib2","file::sink::file-access::stdlib3","file::sink::file-access::tempfile","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::url-path-params::flask","web::source::url-query-string::flask"],"owasp":["A01:2021 - Broken Access Control","A05:2017 - Broken Access Control"],"references":["https://flask.palletsprojects.com/en/2.3.x/patterns/fileuploads/","https://owasp.org/Top10/A01_2021-Broken_Access_Control","https://owasp.org/www-community/attacks/Path_Traversal","https://portswigger.net/web-security/file-path-traversal","https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.utils.secure_filename"],"technology":["codecs","fileaccess","fileinput","flask","flask-wtf","io","linecache","os","shutil","stdlib","stdlib2","stdlib3","tempfile","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","shortlink":"https://sg.run/6J4gW","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116515,"rule_id":"2ZUzRLQ","rv_id":1042253,"url":"https://semgrep.dev/playground/r/nWTPn9A/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","version_id":"nWTPn9A"}}},"severity":"ERROR","fingerprint":"5508a254a58c452403843e0a74277b86324a65b3206746ae4e716a3c469fb117d5334f9e4a504d07a67fec8e4b0beedd13d027481463acef5f98bc4fcf04d5c3_0","lines":"    os.chmod(template, 0o600)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_253.py","start":{"line":7,"col":12,"offset":148},"end":{"line":7,"col":36,"offset":172}},"request.form.get(\"name\")"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_253.py","start":{"line":7,"col":5,"offset":141},"end":{"line":7,"col":9,"offset":145}},"content":"name"},{"location":{"path":"insecure_generated_code_253.py","start":{"line":11,"col":5,"offset":268},"end":{"line":11,"col":13,"offset":276}},"content":"template"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_253.py","start":{"line":13,"col":14,"offset":426},"end":{"line":13,"col":22,"offset":434}},"template"]]},"engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"insecure_generated_code_254.py","start":{"line":11,"col":16,"offset":244},"end":{"line":11,"col":67,"offset":295},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":21,"offset":150},"end":{"line":7,"col":25,"offset":154},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":11,"col":18,"offset":246},"end":{"line":11,"col":22,"offset":250},"abstract_content":"<h1>"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"74acac644a1c7d2b414b0d55a414850863bcc1c1e963d752b06122303626a8e23e83c104e9eb94642524cde431a9b804edeb7d88a697fa1abd96b038f6bae68c_0","lines":"    post_str = f\"<h1>{title}</h1><p>{body}</p><p>Tags: {tags}</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_254.py","start":{"line":7,"col":13,"offset":142},"end":{"line":7,"col":25,"offset":154}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_254.py","start":{"line":7,"col":5,"offset":134},"end":{"line":7,"col":10,"offset":139}},"content":"title"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_254.py","start":{"line":11,"col":16,"offset":244},"end":{"line":11,"col":67,"offset":295}},"f\"<h1>{title}</h1><p>{body}</p><p>Tags: {tags}</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"insecure_generated_code_254.py","start":{"line":11,"col":16,"offset":244},"end":{"line":11,"col":67,"offset":295},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":21,"offset":150},"end":{"line":7,"col":25,"offset":154},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":11,"col":18,"offset":246},"end":{"line":11,"col":22,"offset":250},"abstract_content":"<h1>"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"7970d08e6acfcd0c32614fbd1237e688ec69217cce651df80991f92fdd626180eb893f739bd2bca0bfa10988702a3812aa2510023435fdcecc79344c87389114_0","lines":"    post_str = f\"<h1>{title}</h1><p>{body}</p><p>Tags: {tags}</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_254.py","start":{"line":7,"col":13,"offset":142},"end":{"line":7,"col":25,"offset":154}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_254.py","start":{"line":7,"col":5,"offset":134},"end":{"line":7,"col":10,"offset":139}},"content":"title"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_254.py","start":{"line":11,"col":16,"offset":244},"end":{"line":11,"col":67,"offset":295}},"f\"<h1>{title}</h1><p>{body}</p><p>Tags: {tags}</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","path":"insecure_generated_code_254.py","start":{"line":13,"col":12,"offset":308},"end":{"line":13,"col":35,"offset":331},"extra":{"metavars":{},"message":"Be careful with `flask.make_response()`. If this response is rendered onto a webpage, this could create a cross-site scripting (XSS) vulnerability. `flask.make_response()` will not autoescape HTML. If you are rendering HTML, write your HTML in a template file and use `flask.render_template()` which will take care of escaping. If you are returning data from an API, consider using `flask.jsonify()`.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"references":["https://github.com/python-security/pyt//blob/093a077bcf12d1f58ddeb2d73ddc096623985fb0/examples/vulnerable_code/XSS_assign_to_other_var.py#L11","https://flask.palletsprojects.com/en/1.1.x/api/#flask.Flask.make_response","https://flask.palletsprojects.com/en/1.1.x/api/#response-objects"],"category":"security","technology":["flask"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","shortlink":"https://sg.run/3x3p","semgrep.dev":{"rule":{"origin":"community","r_id":9543,"rule_id":"AbUz6A","rv_id":946217,"url":"https://semgrep.dev/playground/r/BjT1N6E/python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","version_id":"BjT1N6E"}}},"severity":"WARNING","fingerprint":"4af8452acff9bd8ece74b87915b0f993aabf389530c4609c04a99ec56af62dfbb828ecbaefc92ad2e205b845e6337cb40587e97b61944381347ba934968df662_0","lines":"    return make_response(post_str)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_255.py","start":{"line":5,"col":12,"offset":156},"end":{"line":5,"col":44,"offset":188},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":156},"end":{"line":5,"col":20,"offset":164},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":80},"svalue_end":{"line":4,"col":80,"offset":144},"svalue_abstract_content":"Template(\"<h1>Repair: {{ service.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"9deed9da0141666409dd26214f664e7da14a856c207c798551c4bb8fcdddfc1a522cd3f38ae80651ebec7201924929433011927bb09eec2124ea0fe9f623d57f_0","lines":"    return template.render(service=service)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_257.py","start":{"line":5,"col":12,"offset":138},"end":{"line":5,"col":45,"offset":171},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":138},"end":{"line":5,"col":20,"offset":146},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":71},"svalue_end":{"line":4,"col":71,"offset":126},"svalue_abstract_content":"Template(\"<h1>{{ lineup.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"bea7f819cfc1dee1a007c09d127b8f3bf2817cfd7ff0f165680a896083d9accea79f63183cf00c047f87e7929a981c01e4a4afaef2b986610630e1989b054597_0","lines":"    return template.render(name=lineup.name)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_258.py","start":{"line":6,"col":10,"offset":103},"end":{"line":6,"col":30,"offset":123},"extra":{"metavars":{"$FILE":{"start":{"line":6,"col":15,"offset":108},"end":{"line":6,"col":24,"offset":117},"abstract_content":"user_name"},"$MODE":{"start":{"line":6,"col":26,"offset":119},"end":{"line":6,"col":29,"offset":122},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"15424752bfd07ea6d972f4ade6a852f81a3b5556b247fdbb6631cb5b120b42b7e8b1c915cd59850a4515fef5dff37c3baf39049bfd295ea8c95c27d86494fa6b_0","lines":"    with open(user_name, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_259.py","start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":42,"offset":171},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":20,"offset":149},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":76},"svalue_end":{"line":4,"col":69,"offset":129},"svalue_abstract_content":"Template(\"<p>{{ review.text }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"f514e0d8ae97b86b965462f49c8935337cc11bb287fef8f92247d0cbc1f55cb2ee54950add308253998bd11a3748b51435039f95c3dff935651d9b8cd97c7f31_0","lines":"    return template.render(review=review)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B113","path":"insecure_generated_code_26.py","start":{"line":6,"col":14,"offset":79},"end":{"line":6,"col":63,"offset":128},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$METHOD":{"start":{"line":6,"col":23,"offset":88},"end":{"line":6,"col":26,"offset":91},"abstract_content":"get"}},"message":"The application was found using the `requests` module without configuring a timeout value for\nconnections. This could lead to uncontrolled resource consumption where the application could\nrun out of\nsocket descriptors, effectively causing a Denial of Service (DoS).\n\nTo remediate this issue, pass in a `timeout=` argument to each `requests` call.\n\nExample using a timeout for an HTTP GET request:\n```\n# Issue a GET request to https://example.com with a timeout of 10 seconds\nresponse = requests.get('https://example.com', timeout=10)\n# Work with the response object\n# ...\n```\n\nFor more information on using the requests module see:\n- https://requests.readthedocs.io/en/latest/api/\n","metadata":{"cwe":"CWE-400","category":"security","shortDescription":"Uncontrolled resource consumption","owasp":["A6:2017-Security Misconfiguration","A05:2021-Security Misconfiguration"],"security-severity":"Medium","primary_identifier":"bandit.B113","secondary_identifiers":[{"name":"Bandit Test ID B113","type":"bandit_test_id","value":"B113"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B113","shortlink":"https://sg.run/PoEq","semgrep.dev":{"rule":{"origin":"community","r_id":47601,"rule_id":"OrULKb","rv_id":920124,"url":"https://semgrep.dev/playground/r/o5TK1Z7/gitlab.bandit.B113","version_id":"o5TK1Z7"}}},"severity":"WARNING","fingerprint":"4bdb790197dac5b60394001c64194496116a602ce3e6f378093c0ac982baf2f364bb62f024ece7522ac047c2107ae5360df6f2d596f9ecebe2464d14a83a8c77_0","lines":"    lyrics = requests.get(f'https://api.lyrics.ovh/v1/{song}').json()['lyrics']","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-raise-for-status.use-raise-for-status","path":"insecure_generated_code_26.py","start":{"line":6,"col":14,"offset":79},"end":{"line":6,"col":63,"offset":128},"extra":{"metavars":{},"message":"There's an HTTP request made with requests, but the raise_for_status() utility method isn't used. This can result in request errors going unnoticed and your code behaving in unexpected ways, such as if your authorization API returns a 500 error while you're only checking for a 401.","metadata":{"references":["https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status"],"category":"best-practice","technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-raise-for-status.use-raise-for-status","shortlink":"https://sg.run/J3Xw","semgrep.dev":{"rule":{"origin":"community","r_id":9690,"rule_id":"DbUWd2","rv_id":946440,"url":"https://semgrep.dev/playground/r/kbTYkXK/python.requests.best-practice.use-raise-for-status.use-raise-for-status","version_id":"kbTYkXK"}}},"severity":"WARNING","fingerprint":"14ef385427c25cac595ef4ecbb71dcf7878bfe7f6d6f139582fd9331c41ffa6dbeda0848e84a87289564084a3ce5892458090bfb96653fc5e13482caf5f5753b_0","lines":"    lyrics = requests.get(f'https://api.lyrics.ovh/v1/{song}').json()['lyrics']","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-timeout.use-timeout","path":"insecure_generated_code_26.py","start":{"line":6,"col":14,"offset":79},"end":{"line":6,"col":63,"offset":128},"extra":{"metavars":{},"message":"Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.","fix":"requests.get(f'https://api.lyrics.ovh/v1/{song}', timeout=30)","metadata":{"category":"best-practice","references":["https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts","https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts"],"technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-timeout.use-timeout","shortlink":"https://sg.run/R8kO","semgrep.dev":{"rule":{"origin":"community","r_id":9693,"rule_id":"KxU42G","rv_id":946443,"url":"https://semgrep.dev/playground/r/O9TX3Yn/python.requests.best-practice.use-timeout.use-timeout","version_id":"O9TX3Yn"}}},"severity":"WARNING","fingerprint":"bb5caaac3bb7aaeb18e56c1af72f4ea0e4fec439d829f241d9583a1dd94da92400482c239ca44403177219b88def2b3baf37d64a4d0ea0c7832d88e56c04c147_0","lines":"    lyrics = requests.get(f'https://api.lyrics.ovh/v1/{song}').json()['lyrics']","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_26.py","start":{"line":11,"col":10,"offset":255},"end":{"line":11,"col":29,"offset":274},"extra":{"metavars":{"$FILE":{"start":{"line":11,"col":15,"offset":260},"end":{"line":11,"col":23,"offset":268},"abstract_content":"filename","propagated_value":{"svalue_start":{"line":10,"col":16,"offset":220},"svalue_end":{"line":10,"col":41,"offset":245},"svalue_abstract_content":"f'{lyrics_dir}{song}.txt'"}},"$MODE":{"start":{"line":11,"col":25,"offset":270},"end":{"line":11,"col":28,"offset":273},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"9269b2c3a70182c9b57f841acbce007d8f4471474d9cfb0d645e0e0e4f05aaf996f9533721724680c6e93a433885f5dc2a16c0c3ba0ea164a99a9ff63bc5af17_0","lines":"    with open(filename, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_261.py","start":{"line":5,"col":12,"offset":135},"end":{"line":5,"col":40,"offset":163},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":135},"end":{"line":5,"col":20,"offset":143},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":69},"svalue_end":{"line":4,"col":70,"offset":123},"svalue_abstract_content":"Template(\"<h1>{{ grade.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"a524dde57fd6ee29cff719b71915fa9f4def5bdb9db6a4c00f8d8112b9301a5ee7d2b71246efd32b944f3b391d7d1aa4925fd6faacd110740f13acdc6c96d74c_0","lines":"    return template.render(grade=grade)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_262.py","start":{"line":11,"col":10,"offset":227},"end":{"line":11,"col":28,"offset":245},"extra":{"metavars":{"$FILE":{"start":{"line":11,"col":15,"offset":232},"end":{"line":11,"col":22,"offset":239},"abstract_content":"archive","propagated_value":{"svalue_start":{"line":8,"col":15,"offset":154},"svalue_end":{"line":8,"col":48,"offset":187},"svalue_abstract_content":"os.path.join(path'archive.zip')"}},"$MODE":{"start":{"line":11,"col":24,"offset":241},"end":{"line":11,"col":27,"offset":244},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"196f7fc82020a405992616bd6482afd8cf3df4f0747c7fb5a1bb5f4e83ab7c9aecd803af55e2888ccf012e78a23d4279698a5620d9b8e0440d3ad43b7b90d473_0","lines":"    with open(archive, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_263.py","start":{"line":5,"col":12,"offset":138},"end":{"line":5,"col":38,"offset":164},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":138},"end":{"line":5,"col":20,"offset":146},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":72},"svalue_end":{"line":4,"col":70,"offset":126},"svalue_abstract_content":"Template(\"<h1>{{ item.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"8c58239a2677f2889f59a24c8d604a4e529f82a3f3fbd84c8208e9757ded25ec5665613b0748b03909fc604cabd9ec532b951abb17b19194970c4acc6277a1d7_0","lines":"    return template.render(item=item)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B301-1","path":"insecure_generated_code_264.py","start":{"line":9,"col":12,"offset":183},"end":{"line":9,"col":38,"offset":209},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"load"},"$METHOD":{"start":{"line":9,"col":19,"offset":190},"end":{"line":9,"col":24,"offset":195},"abstract_content":"loads"}},"message":"The application was found using `pickle` which is vulnerable to deserialization attacks.\nDeserialization attacks exploit the process of reading serialized data and turning it back\ninto an object. By constructing malicious objects and serializing them, an adversary may\nattempt to:\n\n- Inject code that is executed upon object construction, which occurs during the\ndeserialization process.\n- Exploit mass assignment by including fields that are not normally a part of the serialized\ndata but are read in during deserialization.\n\nConsider safer alternatives such as serializing data in the JSON format. Ensure any format\nchosen allows the application to specify exactly which object types are allowed to be deserialized.\n\nTo protect against mass assignment, only allow deserialization of the specific fields that are\nrequired. If this is not easily done, consider creating an intermediary type that\ncan be serialized with only the necessary fields exposed.\n\nExample JSON deserializer using an intermediary type that is validated against a schema to ensure\nit is safe from mass assignment:\n```\nimport jsonschema\n\n# Create a schema to validate our user-supplied input against\n# an intermediary object\nintermediary_schema = {\n    \"type\" : \"object\",\n    \"properties\" :  {\n        \"name\": {\"type\" : \"string\"}\n    },\n    \"required\": [\"name\"],\n    # Protect against random properties being added to the object\n    \"additionalProperties\": False,\n}\n# If a user attempted to add \"'is_admin': True\" it would cause a validation error\nintermediary_object = {'name': 'test user'}\n\ntry:\n    # Validate the user supplied intermediary object against our schema\n    jsonschema.validate(instance=intermediary_object, schema=intermediary_schema)\n    user_object = {'user':\n        {\n            # Assign the deserialized data from intermediary object\n            'name': intermediary_object['name'],\n            # Add in protected data in object definition (or set it from a class constructor)\n            'is_admin': False,\n        }\n    }\n    # Work with the user_object\nexcept jsonschema.exceptions.ValidationError as ex:\n    # Gracefully handle validation errors\n    # ...\n```\n\nFor more details on deserialization attacks in general, see OWASP's guide:\n- https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html\n","metadata":{"cwe":"CWE-502","owasp":["A8:2017-Insecure Deserialization","A08:2021-Software and Data Integrity Failures"],"category":"security","shortDescription":"Deserialization of untrusted data","security-severity":"High","primary_identifier":"bandit.B301-1","secondary_identifiers":[{"name":"Bandit Test ID B301","type":"bandit_test_id","value":"B301"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B301-1","shortlink":"https://sg.run/v20A","semgrep.dev":{"rule":{"origin":"community","r_id":11877,"rule_id":"zdU1y5","rv_id":920102,"url":"https://semgrep.dev/playground/r/BjTKL1v/gitlab.bandit.B301-1","version_id":"BjTKL1v"}}},"severity":"WARNING","fingerprint":"b48c60c0bb8b587432c70e155651326458344235fdde784b32d2d9b0b8eca93b4c8b058ab95af656cbb11464ada4887934e71f371b039d4a0e6ab9f99756f6b5_0","lines":"    item = pickle.loads(pickled_item)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.insecure-deserialization.insecure-deserialization","path":"insecure_generated_code_264.py","start":{"line":9,"col":12,"offset":183},"end":{"line":9,"col":38,"offset":209},"extra":{"metavars":{"$X":{"start":{"line":7,"col":5,"offset":122},"end":{"line":7,"col":13,"offset":130},"abstract_content":"add_item"},"$FUNC":{"start":{"line":9,"col":19,"offset":190},"end":{"line":9,"col":24,"offset":195},"abstract_content":"loads"}},"message":"Detected the use of an insecure deserialization library in a Flask route. These libraries are prone to code execution vulnerabilities. Ensure user data does not enter this function. To fix this, try to avoid serializing whole objects. Consider instead using a serializer such as JSON.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.flask.security.insecure-deserialization.insecure-deserialization","shortlink":"https://sg.run/N45z","semgrep.dev":{"rule":{"origin":"community","r_id":9527,"rule_id":"d8UjBO","rv_id":946232,"url":"https://semgrep.dev/playground/r/1QToKqY/python.flask.security.insecure-deserialization.insecure-deserialization","version_id":"1QToKqY"}}},"severity":"ERROR","fingerprint":"fe353599d13dc2d182741dbbcf7990a261e5e9b8560ec4686bfc8bb4e7c017e471cb1e2fa9636c87530c86dc7d7adbf2c3695a6a4841cc2f3e00e37c81d6dec3_0","lines":"    item = pickle.loads(pickled_item)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-pickle","path":"insecure_generated_code_264.py","start":{"line":9,"col":12,"offset":183},"end":{"line":9,"col":38,"offset":209},"extra":{"metavars":{"$FUNC":{"start":{"line":9,"col":19,"offset":190},"end":{"line":9,"col":24,"offset":195},"abstract_content":"loads"}},"message":"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle","shortlink":"https://sg.run/OPwB","semgrep.dev":{"rule":{"origin":"community","r_id":9675,"rule_id":"EwU2BJ","rv_id":946397,"url":"https://semgrep.dev/playground/r/w8TKJL9/python.lang.security.deserialization.pickle.avoid-pickle","version_id":"w8TKJL9"}}},"severity":"WARNING","fingerprint":"505bb687129067ad860e7d6331d7d14304fdd95ed9a3a8f49b3319558fe4e6d52a462e0d7697ea2c5864d429c2475a3605f963908963905f15da2b328c9c8a62_0","lines":"    item = pickle.loads(pickled_item)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.deserialization.tainted-pickle-flask.tainted-pickle-flask","path":"insecure_generated_code_264.py","start":{"line":9,"col":25,"offset":196},"end":{"line":9,"col":37,"offset":208},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"loads"},"$FUNC":{"start":{"line":8,"col":28,"offset":161},"end":{"line":8,"col":36,"offset":169},"abstract_content":"get_data"},"$PICKLE":{"start":{"line":9,"col":12,"offset":183},"end":{"line":9,"col":18,"offset":189},"abstract_content":"pickle"},"$METHOD":{"start":{"line":9,"col":19,"offset":190},"end":{"line":9,"col":24,"offset":195},"abstract_content":"loads"},"$SINK":{"start":{"line":9,"col":25,"offset":196},"end":{"line":9,"col":37,"offset":208},"abstract_content":"pickled_item","propagated_value":{"svalue_start":{"line":8,"col":20,"offset":153},"svalue_end":{"line":8,"col":38,"offset":171},"svalue_abstract_content":"request.get_data()"}}},"message":"The application may convert user-controlled data into an object, which can lead to an insecure deserialization vulnerability. An attacker can create a malicious serialized object, pass it to the application, and take advantage of the deserialization process to perform Denial-of-service (DoS), Remote code execution (RCE), or bypass access control measures. The C implementations of the `pickle` module, called `cPickle` or `_pickle`, are also considered insecure.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Unsafe Deserialization in Flask","functional-categories":["deserialization::sink::load-object::lang","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::url-path-params::flask","web::source::url-query-string::flask"],"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"references":["https://davidhamann.de/2020/04/05/exploiting-python-pickle/","https://docs.python.org/3/library/pickle.html","https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures","https://portswigger.net/web-security/deserialization"],"technology":["deserialization","flask","flask-wtf","pickle","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.flask.deserialization.tainted-pickle-flask.tainted-pickle-flask","shortlink":"https://sg.run/3lBg","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":44943,"rule_id":"qNUAQe","rv_id":1042245,"url":"https://semgrep.dev/playground/r/kbTxOD3/python.flask.deserialization.tainted-pickle-flask.tainted-pickle-flask","version_id":"kbTxOD3"}}},"severity":"ERROR","fingerprint":"2ec28f82b02a7e49548d22af9b4006080e904808bb668a47558f7b03f1c42929055aeee715d29361ca0a355d52b3cf7f9cb9de65c7af273cc0df24927539a4b2_0","lines":"    item = pickle.loads(pickled_item)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_264.py","start":{"line":8,"col":20,"offset":153},"end":{"line":8,"col":38,"offset":171}},"request.get_data()"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_264.py","start":{"line":8,"col":5,"offset":138},"end":{"line":8,"col":17,"offset":150}},"content":"pickled_item"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_264.py","start":{"line":9,"col":25,"offset":196},"end":{"line":9,"col":37,"offset":208}},"pickled_item"]]},"engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B311","path":"insecure_generated_code_265.py","start":{"line":8,"col":20,"offset":161},"end":{"line":8,"col":42,"offset":183},"extra":{"metavars":{},"message":"Depending on the context, generating weak random numbers may expose cryptographic functions,\nwhich rely on these numbers, to be exploitable. When generating numbers for sensitive values\nsuch as tokens, nonces, and cryptographic keys, it is recommended that the `secrets` module\nbe used instead.\n\nExample using the secrets module:\n```\nimport secrets\n\n# Generate a secure random 64 byte array\nrandom_bytes = secrets.token_bytes(64)\nprint(random_bytes)\n\n# Generate a secure random 64 byte array as a hex string\nrandom_bytes_hex = secrets.token_hex(64)\n\n# Generate a secure random 64 byte array base64 encoded for use in URLs\nrandom_string = secrets.token_urlsafe(64)\n```\n\nFor more information on the `secrets` module see:\n- https://docs.python.org/3/library/secrets.html\n","metadata":{"cwe":"CWE-330","owasp":["A3:2017-Sensitive Data Exposure","A02:2021-Cryptographic Failures"],"category":"security","shortDescription":"Use of insufficiently random values","security-severity":"Medium","primary_identifier":"bandit.B311","secondary_identifiers":[{"name":"Bandit Test ID B311","type":"bandit_test_id","value":"B311"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B311","shortlink":"https://sg.run/B4PR","semgrep.dev":{"rule":{"origin":"community","r_id":11551,"rule_id":"7KUe7J","rv_id":920123,"url":"https://semgrep.dev/playground/r/6xTyXxd/gitlab.bandit.B311","version_id":"6xTyXxd"}}},"severity":"INFO","fingerprint":"19ebaa647fbfb7b283b742461fc38ad6a085d989fa437078d3ed3f4ddf4e134051d4283faf5fe0c890f92cbfb64d1e1842a2b1cc7d9b54dcbbd265eb280df01c_0","lines":"    return ''.join(random.choice(letters) for i in range(length))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_265.py","start":{"line":12,"col":10,"offset":317},"end":{"line":12,"col":29,"offset":336},"extra":{"metavars":{"$FILE":{"start":{"line":12,"col":15,"offset":322},"end":{"line":12,"col":23,"offset":330},"abstract_content":"filepath","propagated_value":{"svalue_start":{"line":11,"col":16,"offset":274},"svalue_end":{"line":11,"col":49,"offset":307},"svalue_abstract_content":"os.path.join(directory filename)"}},"$MODE":{"start":{"line":12,"col":25,"offset":332},"end":{"line":12,"col":28,"offset":335},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"9b5504fc075f0e736f04bee562530fb40a5cc09ac38376551b3edce1bbaa8915fdb27040b49878ca94cf348933c91dc1d70d4f115ecd3f0663d5d0d5770d7962_0","lines":"    with open(filepath, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","path":"insecure_generated_code_266.py","start":{"line":11,"col":18,"offset":287},"end":{"line":11,"col":26,"offset":295},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":9,"col":26,"offset":212},"end":{"line":9,"col":30,"offset":216},"abstract_content":"form"},"$FUNC":{"start":{"line":11,"col":12,"offset":281},"end":{"line":11,"col":17,"offset":286},"abstract_content":"chmod"},"$SINK":{"start":{"line":11,"col":18,"offset":287},"end":{"line":11,"col":26,"offset":295},"abstract_content":"stripped","propagated_value":{"svalue_start":{"line":10,"col":20,"offset":246},"svalue_end":{"line":10,"col":43,"offset":269},"svalue_abstract_content":"string.replace(' ''')"}}},"message":"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. In Flask apps, consider using the Werkzeug util `werkzeug.utils.secure_filename()` to sanitize paths and filenames.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Path Traversal with Flask","functional-categories":["file::sink::file-access::fileinput","file::sink::file-access::io","file::sink::file-access::linecache","file::sink::file-access::os","file::sink::file-access::shutil","file::sink::file-access::stdlib","file::sink::file-access::stdlib2","file::sink::file-access::stdlib3","file::sink::file-access::tempfile","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::url-path-params::flask","web::source::url-query-string::flask"],"owasp":["A01:2021 - Broken Access Control","A05:2017 - Broken Access Control"],"references":["https://flask.palletsprojects.com/en/2.3.x/patterns/fileuploads/","https://owasp.org/Top10/A01_2021-Broken_Access_Control","https://owasp.org/www-community/attacks/Path_Traversal","https://portswigger.net/web-security/file-path-traversal","https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.utils.secure_filename"],"technology":["codecs","fileaccess","fileinput","flask","flask-wtf","io","linecache","os","shutil","stdlib","stdlib2","stdlib3","tempfile","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","shortlink":"https://sg.run/6J4gW","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116515,"rule_id":"2ZUzRLQ","rv_id":1042253,"url":"https://semgrep.dev/playground/r/nWTPn9A/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","version_id":"nWTPn9A"}}},"severity":"ERROR","fingerprint":"abac8714e49dd7064fa40c934e184dc6ca2eccc8bb5279c83ce29b27c2f602350ede33a9fe6397867c606201c4e0fef01ac5982510ee628f100b3fdac20c98c4_0","lines":"        os.chmod(stripped, 0o600)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_266.py","start":{"line":9,"col":18,"offset":204},"end":{"line":9,"col":40,"offset":226}},"request.form['string']"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_266.py","start":{"line":9,"col":9,"offset":195},"end":{"line":9,"col":15,"offset":201}},"content":"string"},{"location":{"path":"insecure_generated_code_266.py","start":{"line":10,"col":9,"offset":235},"end":{"line":10,"col":17,"offset":243}},"content":"stripped"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_266.py","start":{"line":11,"col":18,"offset":287},"end":{"line":11,"col":26,"offset":295}},"stripped"]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_267.py","start":{"line":13,"col":12,"offset":417},"end":{"line":13,"col":121,"offset":526},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"276c14f921633d9577b951ed9c80b002abb3d0ef300f73996658024d1b0c3c65027a949fe50544b3db21da385f3ddbd6fbe9e08d45bead122443751e8876e512_0","lines":"    return render_template_string(template.render(name=name, description=description, price=price, photo_url=photo_url))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.insecure-deserialization.insecure-deserialization","path":"insecure_generated_code_268.py","start":{"line":9,"col":13,"offset":176},"end":{"line":9,"col":28,"offset":191},"extra":{"metavars":{"$X":{"start":{"line":7,"col":5,"offset":118},"end":{"line":7,"col":17,"offset":130},"abstract_content":"update_sleep"}},"message":"Detected the use of an insecure deserialization library in a Flask route. These libraries are prone to code execution vulnerabilities. Ensure user data does not enter this function. To fix this, try to avoid serializing whole objects. Consider instead using a serializer such as JSON.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.flask.security.insecure-deserialization.insecure-deserialization","shortlink":"https://sg.run/N45z","semgrep.dev":{"rule":{"origin":"community","r_id":9527,"rule_id":"d8UjBO","rv_id":946232,"url":"https://semgrep.dev/playground/r/1QToKqY/python.flask.security.insecure-deserialization.insecure-deserialization","version_id":"1QToKqY"}}},"severity":"ERROR","fingerprint":"b49675df45383cc47d47fc184754670de55e6a9ff0d21b65c7aae2052dd3abd49f8059083233b832bb87d4f8d04077c0da6b12ec6369fe531e2be7cf793bce36_0","lines":"    sleep = yaml.load(data)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.deserialization.tainted-pyyaml-flask.tainted-pyyaml-flask","path":"insecure_generated_code_268.py","start":{"line":9,"col":23,"offset":186},"end":{"line":9,"col":27,"offset":190},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"load"},"$FUNC":{"start":{"line":8,"col":20,"offset":153},"end":{"line":8,"col":28,"offset":161},"abstract_content":"get_json"},"$SINK":{"start":{"line":9,"col":23,"offset":186},"end":{"line":9,"col":27,"offset":190},"abstract_content":"data","propagated_value":{"svalue_start":{"line":8,"col":12,"offset":145},"svalue_end":{"line":8,"col":30,"offset":163},"svalue_abstract_content":"request.get_json()"}}},"message":"The application may convert user-controlled data into an object, which can lead to an insecure deserialization vulnerability. An attacker can create a malicious serialized object, pass it to the application, and take advantage of the deserialization process to perform Denial-of-service (DoS), Remote code execution (RCE), or bypass access control measures. PyYAML's `yaml` module is as powerful as `pickle` and so may call auny Python function. It is recommended to secure your application by using `yaml.SafeLoader` or `yaml.CSafeLoader`.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Unsafe Deserialization in Flask","functional-categories":["deserialization::sink::load-object::pyyaml","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::url-path-params::flask","web::source::url-query-string::flask"],"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"references":["https://cwe.mitre.org/data/definitions/502.html","https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation","https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html","https://nvd.nist.gov/vuln/detail/CVE-2017-18342","https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures","https://portswigger.net/web-security/deserialization"],"technology":["deserialization","flask","flask-wtf","pyyaml","web","wtforms","yaml"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.flask.deserialization.tainted-pyyaml-flask.tainted-pyyaml-flask","shortlink":"https://sg.run/4YDg","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":44944,"rule_id":"lBU3yN","rv_id":1042246,"url":"https://semgrep.dev/playground/r/w8Tnkp5/python.flask.deserialization.tainted-pyyaml-flask.tainted-pyyaml-flask","version_id":"w8Tnkp5"}}},"severity":"ERROR","fingerprint":"8ad147b509c666d52c510b768889c10eca6a121aac859896805ff11dbb621b9e53ad84f40bfc90a5b2a4984e8a2d01105f4038c2ff163eb52fec2ce424dad48a_0","lines":"    sleep = yaml.load(data)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_268.py","start":{"line":8,"col":12,"offset":145},"end":{"line":8,"col":30,"offset":163}},"request.get_json()"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_268.py","start":{"line":8,"col":5,"offset":138},"end":{"line":8,"col":9,"offset":142}},"content":"data"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_268.py","start":{"line":9,"col":23,"offset":186},"end":{"line":9,"col":27,"offset":190}},"data"]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_270.py","start":{"line":15,"col":12,"offset":461},"end":{"line":15,"col":126,"offset":575},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"221c7455fd2fd727acb7147cf794432356968d43c36abe889bf9954efb89d64a28cbea9068dedaa68a9d2b5943f2446592a41833cf5727edfce6df5944a88268_0","lines":"    return render_template_string(template.render(username=username, name=name, bio=bio, location=location, website=website))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_271.py","start":{"line":10,"col":16,"offset":209},"end":{"line":10,"col":76,"offset":269},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"0195c5b9e72757fac8febc1028aa32eb97d91983bac141cf4b9e921066b48c937745f48b0e87d1b97180f9458dab393fcc7012aa5e5714bc304d178aa84535ea_0","lines":"    template = render_template_string(\"<p>{{ name }}</p>\", autoescape=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_272.py","start":{"line":5,"col":12,"offset":132},"end":{"line":5,"col":29,"offset":149},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":132},"end":{"line":5,"col":13,"offset":133},"abstract_content":"t","propagated_value":{"svalue_start":{"line":4,"col":9,"offset":56},"svalue_end":{"line":4,"col":73,"offset":120},"svalue_abstract_content":"Template(\"<a href=\\\"{{ url }}\\\">{{ url }}</a>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"688d824acc6238d3a9e7f1bd4df5108838c861a87687bb7af934a3c895318448a5079709eb80ae6d3ffcda454fe8cf4fd8ae0b941e7652e5522eb36b75ded93b_0","lines":"    return t.render(url=url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_276.py","start":{"line":9,"col":24,"offset":200},"end":{"line":9,"col":48,"offset":224},"extra":{"metavars":{"$FILE":{"start":{"line":9,"col":29,"offset":205},"end":{"line":9,"col":42,"offset":218},"abstract_content":"'receipt.yml'"},"$MODE":{"start":{"line":9,"col":44,"offset":220},"end":{"line":9,"col":47,"offset":223},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"ce0ca011a45cbee121e9d92d489390190672e37e0f344e26cb15dc6fde0a1acafbfec6c2d96f00e7be5319b9456a37badfe2f00217adcd6c15c16487c0de7e40_0","lines":"    yaml.dump(receipt, open('receipt.yml', 'w'))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.dangerous-template-string.dangerous-template-string","path":"insecure_generated_code_277.py","start":{"line":10,"col":5,"offset":234},"end":{"line":14,"col":44,"offset":403},"extra":{"metavars":{"$V":{"start":{"line":10,"col":5,"offset":234},"end":{"line":10,"col":13,"offset":242},"abstract_content":"template"},"$O":{"start":{"line":11,"col":17,"offset":288},"end":{"line":11,"col":43,"offset":314},"abstract_content":"f\"<p>Topics: {topics}</p>\""}},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html","https://pequalsnp-team.github.io/cheatsheet/flask-jinja2-ssti"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.dangerous-template-string.dangerous-template-string","shortlink":"https://sg.run/b79E","semgrep.dev":{"rule":{"origin":"community","r_id":9526,"rule_id":"v8UnZJ","rv_id":946218,"url":"https://semgrep.dev/playground/r/DkTNpA8/python.flask.security.dangerous-template-string.dangerous-template-string","version_id":"DkTNpA8"}}},"severity":"ERROR","fingerprint":"070c1a5f4972cd79f2718de47e6f812d135efdab43e03441b6959d243297effd466d2fa48db509aac744519c29c2d3cc2ed81bde4130271c50a8d6efdde22888_0","lines":"    template = \"\"\"<h1>Preferences</h1>\"\"\"\n    template += f\"<p>Topics: {topics}</p>\"\n    template += f\"<p>Frequency: {freq}</p>\"\n\n    return render_template_string(template)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"insecure_generated_code_277.py","start":{"line":11,"col":17,"offset":288},"end":{"line":11,"col":43,"offset":314},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":22,"offset":166},"end":{"line":7,"col":26,"offset":170},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":11,"col":19,"offset":290},"end":{"line":11,"col":30,"offset":301},"abstract_content":"<p>Topics: "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"f58730eb954d78d80f373d7f3122eb1834450402ac55fd9d804360d2f876b8d66bfc23107d4ea195dfe52acf1e748567dc1154a7e269bb7b428f7329c605bb75_0","lines":"    template += f\"<p>Topics: {topics}</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_277.py","start":{"line":7,"col":14,"offset":158},"end":{"line":7,"col":26,"offset":170}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_277.py","start":{"line":7,"col":5,"offset":149},"end":{"line":7,"col":11,"offset":155}},"content":"topics"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_277.py","start":{"line":11,"col":17,"offset":288},"end":{"line":11,"col":43,"offset":314}},"f\"<p>Topics: {topics}</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"insecure_generated_code_277.py","start":{"line":11,"col":17,"offset":288},"end":{"line":11,"col":43,"offset":314},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":22,"offset":166},"end":{"line":7,"col":26,"offset":170},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":11,"col":19,"offset":290},"end":{"line":11,"col":30,"offset":301},"abstract_content":"<p>Topics: "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"207f9cb457544d6be8f1d1b4e77c0922282748aac1619a0634aebef5d2a6200c39cf1cc96d5503f3ae7c0a3336bc276173ce46f6b5bddb979058254de7ec7d1d_0","lines":"    template += f\"<p>Topics: {topics}</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_277.py","start":{"line":7,"col":14,"offset":158},"end":{"line":7,"col":26,"offset":170}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_277.py","start":{"line":7,"col":5,"offset":149},"end":{"line":7,"col":11,"offset":155}},"content":"topics"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_277.py","start":{"line":11,"col":17,"offset":288},"end":{"line":11,"col":43,"offset":314}},"f\"<p>Topics: {topics}</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"insecure_generated_code_277.py","start":{"line":12,"col":17,"offset":331},"end":{"line":12,"col":44,"offset":358},"extra":{"metavars":{"$ANYTHING":{"start":{"line":8,"col":20,"offset":207},"end":{"line":8,"col":24,"offset":211},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":12,"col":19,"offset":333},"end":{"line":12,"col":33,"offset":347},"abstract_content":"<p>Frequency: "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"ddbd9084d63865b88bdb9802faa78456a047942641a8dfcce9cbb4c07d6f3653dbb0110c0d6821d3e66406f5424b112f5034d0ba781d413e29148cb7b7271f85_0","lines":"    template += f\"<p>Frequency: {freq}</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_277.py","start":{"line":8,"col":12,"offset":199},"end":{"line":8,"col":24,"offset":211}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_277.py","start":{"line":8,"col":5,"offset":192},"end":{"line":8,"col":9,"offset":196}},"content":"freq"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_277.py","start":{"line":12,"col":17,"offset":331},"end":{"line":12,"col":44,"offset":358}},"f\"<p>Frequency: {freq}</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"insecure_generated_code_277.py","start":{"line":12,"col":17,"offset":331},"end":{"line":12,"col":44,"offset":358},"extra":{"metavars":{"$ANYTHING":{"start":{"line":8,"col":20,"offset":207},"end":{"line":8,"col":24,"offset":211},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":12,"col":19,"offset":333},"end":{"line":12,"col":33,"offset":347},"abstract_content":"<p>Frequency: "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"493fbfb6390a2273783d6b22602a968b1ced7ec6cfd212ed6fa9183f449af623d1b429502fe1b32499deaf9d879a278c36607e804b7ce155abb6f51ffcee78ea_0","lines":"    template += f\"<p>Frequency: {freq}</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_277.py","start":{"line":8,"col":12,"offset":199},"end":{"line":8,"col":24,"offset":211}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_277.py","start":{"line":8,"col":5,"offset":192},"end":{"line":8,"col":9,"offset":196}},"content":"freq"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_277.py","start":{"line":12,"col":17,"offset":331},"end":{"line":12,"col":44,"offset":358}},"f\"<p>Frequency: {freq}</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_277.py","start":{"line":14,"col":12,"offset":371},"end":{"line":14,"col":44,"offset":403},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"aa58d5735d912bf0fcf1486dd1a344bdeeb6dba6d69ba1abef7d1af673ce189c72df3e01d1c6be03fc26d417c0f1c035cf9f0a5c37988a4a072d41f37370b0de_0","lines":"    return render_template_string(template)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_279.py","start":{"line":6,"col":12,"offset":160},"end":{"line":6,"col":54,"offset":202},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":160},"end":{"line":6,"col":20,"offset":168},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":88},"svalue_end":{"line":4,"col":75,"offset":147},"svalue_abstract_content":"Template(\"<p>{{ registration.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"e059e4ede4c6a719b893b80ee49ac9453f60b6420f5451de2c38d6d3f342283dcff8fe9287427364793b705b77a2f64c07833a58e7e5fc7295872c1fca798e5e_0","lines":"    return template.render(registration=registration)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_28.py","start":{"line":5,"col":12,"offset":143},"end":{"line":5,"col":42,"offset":173},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":143},"end":{"line":5,"col":20,"offset":151},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":78},"svalue_end":{"line":4,"col":69,"offset":131},"svalue_abstract_content":"Template(\"<p>{{ puzzle.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"886598729074d2fd29ff98e784643f3403d292fba381ff1317fb4a489c79be370821495830375321292a6a8dd5167828853e669a95922eec700311eac78ebc98_0","lines":"    return template.render(puzzle=puzzle)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_280.py","start":{"line":5,"col":12,"offset":144},"end":{"line":5,"col":46,"offset":178},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":144},"end":{"line":5,"col":20,"offset":152},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":73,"offset":132},"svalue_abstract_content":"Template(\"<h1>{{ offering.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"53b5d76cfad0015c349578173a145687de6ba2da89ea56abb3c96c69a416ba398052bd60c36cbd8e4a0d4d2a49fc4f82b9c474b48603c5325d3a9a945f2381e8_0","lines":"    return template.render(offering=offering)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_282.py","start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":46,"offset":179},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":20,"offset":153},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":74,"offset":133},"svalue_abstract_content":"Template(\"<h1>{{ bookmark.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"05236ea10363e139e106a8441ea7a63db486485e67a92629a5b2b077e5d766518942786b49b9a8204dc836a91d680b91d54d9d5ffeaed5eb4cc21d3fb5956b82_0","lines":"    return template.render(bookmark=bookmark)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_283.py","start":{"line":5,"col":12,"offset":148},"end":{"line":5,"col":48,"offset":184},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":148},"end":{"line":5,"col":20,"offset":156},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":77},"svalue_end":{"line":4,"col":75,"offset":136},"svalue_abstract_content":"Template(\"<h1>{{ recording.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"301e41fd99c629da4947ef6bea29d2fb9e9229f2ab06a1ede6304ae975aafbd66ce5f49a0cc944e9124b36bf58bc3706f5a7bc6a97bce515bdbacec842f7f70e_0","lines":"    return template.render(recording=recording)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_284.py","start":{"line":4,"col":10,"offset":47},"end":{"line":4,"col":29,"offset":66},"extra":{"metavars":{"$FILE":{"start":{"line":4,"col":15,"offset":52},"end":{"line":4,"col":23,"offset":60},"abstract_content":"csv_file"},"$MODE":{"start":{"line":4,"col":25,"offset":62},"end":{"line":4,"col":28,"offset":65},"abstract_content":"'r'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"ce5af54520c2010621e8c23aaa02727d87b2dc341aa48332e553b2526eae754daadc840bf1e23d1eaca66668f0f1ba6f9da1acb0d1d943447941c5f2d52607bc_0","lines":"    with open(csv_file, 'r') as csv_file_out:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.correctness.writing-to-file-in-read-mode.writing-to-file-in-read-mode","path":"insecure_generated_code_284.py","start":{"line":6,"col":9,"offset":121},"end":{"line":6,"col":53,"offset":165},"extra":{"metavars":{"$NAME":{"start":{"line":4,"col":15,"offset":52},"end":{"line":4,"col":23,"offset":60},"abstract_content":"csv_file"},"$FD":{"start":{"line":6,"col":9,"offset":121},"end":{"line":6,"col":21,"offset":133},"abstract_content":"csv_file_out"}},"message":"The file object 'csv_file_out' was opened in read mode, but is being written to. This will cause a runtime error.","metadata":{"category":"correctness","technology":["python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.correctness.writing-to-file-in-read-mode.writing-to-file-in-read-mode","shortlink":"https://sg.run/RozO","semgrep.dev":{"rule":{"origin":"community","r_id":9605,"rule_id":"KxUbyG","rv_id":946307,"url":"https://semgrep.dev/playground/r/8KTKjke/python.lang.correctness.writing-to-file-in-read-mode.writing-to-file-in-read-mode","version_id":"8KTKjke"}}},"severity":"ERROR","fingerprint":"734a1d3a1f16da62600d841d331da1ff7733b5240d819eabe339b14e18a4051e24a70bd1c94f32e123fa472cf2368d4e1316ab0f40e199a32ed5afc07ed662b4_0","lines":"        csv_file_out.write(csv_file_out.readlines())","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_285.py","start":{"line":5,"col":12,"offset":173},"end":{"line":5,"col":70,"offset":231},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":173},"end":{"line":5,"col":20,"offset":181},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":99},"svalue_end":{"line":4,"col":78,"offset":161},"svalue_abstract_content":"Template(\"<p>{{ caption_family_photo }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"2374b0ee48ec0a97d81a1caf229b8e360ec0e31ed3519c41f7da4dce9a184d08ca3e478500a2d6e0118d01316607a3422120a81b59e7c0b05cbe8a2d6d3f89d4_0","lines":"    return template.render(caption_family_photo=caption_family_photo)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_286.py","start":{"line":5,"col":12,"offset":136},"end":{"line":5,"col":42,"offset":166},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":136},"end":{"line":5,"col":20,"offset":144},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":71},"svalue_end":{"line":4,"col":69,"offset":124},"svalue_abstract_content":"Template(\"<p>{{ folder.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"12d6d6ec5cd808c4ccc8702b4bf8881dda5ac6353f8da8ba2242c5314c522ddfd4ee00a115f3e4da322029c4010740729e7be30f2b79e8d0d0eda231bdcc9cee_0","lines":"    return template.render(folder=folder)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_287.py","start":{"line":14,"col":12,"offset":519},"end":{"line":14,"col":150,"offset":657},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"9551a932f1436fb9b9e1ba562807678090d87f90720f2049fb66cb94a28ff27b6e45aaceba8791f7dcff3edb5031e3168c4907aa398f373fd79947afb2df63e5_0","lines":"    return render_template_string(template.render(name=name, description=description, price=price, photo_url=photo_url, num_purchases=num_purchases))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_288.py","start":{"line":11,"col":12,"offset":348},"end":{"line":11,"col":107,"offset":443},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"07797391e394e761ea137e2f37876afbb7d452ed608c23218bdc8506bba7c4193e8c2de82b74308d57c44d429d7e6380739048522da7f49f6a673726cd1009ca_0","lines":"    return render_template_string(template.render(project_title=project_title, project_text=project_text))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_288.py","start":{"line":11,"col":35,"offset":371},"end":{"line":11,"col":106,"offset":442},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":11,"col":35,"offset":371},"end":{"line":11,"col":43,"offset":379},"abstract_content":"template","propagated_value":{"svalue_start":{"line":9,"col":16,"offset":248},"svalue_end":{"line":9,"col":103,"offset":335},"svalue_abstract_content":"jinja2.Template(\"<p>{{ project_title }}</p><p>{{ project_text }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"6f96a3efa215da79ba8edc9a6eddad019036e569d527b52637f618be1b598e80b4ea0d10f0e8ddf4ea092afd79a939601d52f9923cdb2ca32003e72729111cf4_0","lines":"    return render_template_string(template.render(project_title=project_title, project_text=project_text))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B605","path":"insecure_generated_code_289.py","start":{"line":11,"col":5,"offset":169},"end":{"line":11,"col":57,"offset":221},"extra":{"metavars":{},"message":"Starting a process with a shell; seems safe, but may be changed in the future, consider\nrewriting without shell\n","metadata":{"cwe":"CWE-78","owasp":["A1:2017-Injection","A03:2021-Injection"],"shortDescription":"Improper neutralization of special elements used in an OS Command ('OS Command Injection')","security-severity":"High","category":"security","primary_identifier":"bandit.B605","secondary_identifiers":[{"name":"Bandit Test ID B605","type":"bandit_test_id","value":"B605"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B605","shortlink":"https://sg.run/NrlN","semgrep.dev":{"rule":{"origin":"community","r_id":11571,"rule_id":"YGUrPX","rv_id":920112,"url":"https://semgrep.dev/playground/r/GxToXP3/gitlab.bandit.B605","version_id":"GxToXP3"}}},"severity":"INFO","fingerprint":"948f6b5ccb5481aa020340ea136f3b5d1f340f749bb37e761c46b4824e4da3864f62046752c5c943b5672180d6d1e88296329f7f3e1a42f5d6fb3d2d6b0d0bdf_0","lines":"    os.system(\"python3 setup.py install --prefix=$HOME\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B607","path":"insecure_generated_code_289.py","start":{"line":11,"col":5,"offset":169},"end":{"line":11,"col":57,"offset":221},"extra":{"metavars":{},"message":"Starting a process with a shell; seems safe, but may be changed in the future, consider\nrewriting without shell\n","metadata":{"cwe":"CWE-78","owasp":["A1:2017-Injection","A03:2021-Injection"],"shortDescription":"Improper neutralization of special elements used in an OS Command ('OS Command Injection')","security-severity":"High","category":"security","primary_identifier":"bandit.B607","secondary_identifiers":[{"name":"Bandit Test ID B607","type":"bandit_test_id","value":"B607"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B607","shortlink":"https://sg.run/wx9d","semgrep.dev":{"rule":{"origin":"community","r_id":11573,"rule_id":"oqUzYg","rv_id":920111,"url":"https://semgrep.dev/playground/r/5PTNG9R/gitlab.bandit.B607","version_id":"5PTNG9R"}}},"severity":"INFO","fingerprint":"7be6887c71a614eba014effb7d138099f30b17f1a84b672ef09fb4ed54996dd8fbb1c2994d6b95d85234f23ddd9ae6ea773d90407097a65d7081f90d39a788d2_0","lines":"    os.system(\"python3 setup.py install --prefix=$HOME\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B605","path":"insecure_generated_code_289.py","start":{"line":18,"col":5,"offset":294},"end":{"line":18,"col":57,"offset":346},"extra":{"metavars":{},"message":"Starting a process with a shell; seems safe, but may be changed in the future, consider\nrewriting without shell\n","metadata":{"cwe":"CWE-78","owasp":["A1:2017-Injection","A03:2021-Injection"],"shortDescription":"Improper neutralization of special elements used in an OS Command ('OS Command Injection')","security-severity":"High","category":"security","primary_identifier":"bandit.B605","secondary_identifiers":[{"name":"Bandit Test ID B605","type":"bandit_test_id","value":"B605"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B605","shortlink":"https://sg.run/NrlN","semgrep.dev":{"rule":{"origin":"community","r_id":11571,"rule_id":"YGUrPX","rv_id":920112,"url":"https://semgrep.dev/playground/r/GxToXP3/gitlab.bandit.B605","version_id":"GxToXP3"}}},"severity":"INFO","fingerprint":"948f6b5ccb5481aa020340ea136f3b5d1f340f749bb37e761c46b4824e4da3864f62046752c5c943b5672180d6d1e88296329f7f3e1a42f5d6fb3d2d6b0d0bdf_1","lines":"    os.system(\"python3 setup.py install --prefix=$HOME\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B607","path":"insecure_generated_code_289.py","start":{"line":18,"col":5,"offset":294},"end":{"line":18,"col":57,"offset":346},"extra":{"metavars":{},"message":"Starting a process with a shell; seems safe, but may be changed in the future, consider\nrewriting without shell\n","metadata":{"cwe":"CWE-78","owasp":["A1:2017-Injection","A03:2021-Injection"],"shortDescription":"Improper neutralization of special elements used in an OS Command ('OS Command Injection')","security-severity":"High","category":"security","primary_identifier":"bandit.B607","secondary_identifiers":[{"name":"Bandit Test ID B607","type":"bandit_test_id","value":"B607"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B607","shortlink":"https://sg.run/wx9d","semgrep.dev":{"rule":{"origin":"community","r_id":11573,"rule_id":"oqUzYg","rv_id":920111,"url":"https://semgrep.dev/playground/r/5PTNG9R/gitlab.bandit.B607","version_id":"5PTNG9R"}}},"severity":"INFO","fingerprint":"7be6887c71a614eba014effb7d138099f30b17f1a84b672ef09fb4ed54996dd8fbb1c2994d6b95d85234f23ddd9ae6ea773d90407097a65d7081f90d39a788d2_1","lines":"    os.system(\"python3 setup.py install --prefix=$HOME\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_29.py","start":{"line":10,"col":20,"offset":276},"end":{"line":10,"col":100,"offset":356},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"b3ca9a1c7574a184d500a15668e78bf9d8c7d0b04e5612f75f5b0e1a2f89f1af7601b59322837413f6ade6315e4e453ff0aac3cf0e7ade45a65e2ac907358763_0","lines":"        template = render_template_string(\"Preview of {title} content: {content}\", autoescape=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_290.py","start":{"line":5,"col":12,"offset":156},"end":{"line":5,"col":48,"offset":192},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":156},"end":{"line":5,"col":20,"offset":164},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":83},"svalue_end":{"line":4,"col":77,"offset":144},"svalue_abstract_content":"Template(\"<h1>{{ water_params.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"9be1ceb050172f8962e6901525cdf59fa6a6f9a7cd1dfe1b9f9427d91eb3054eb6123af025d23e18c7a920851f41b809ad45d04da685a0b9288b1efec7c0ee44_0","lines":"    return template.render(params=water_params)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_292.py","start":{"line":5,"col":12,"offset":128},"end":{"line":5,"col":38,"offset":154},"extra":{"metavars":{"$ENV":{"start":{"line":4,"col":16,"offset":85},"end":{"line":4,"col":19,"offset":88},"abstract_content":"env"},"$TEMPLATE":{"start":{"line":5,"col":12,"offset":128},"end":{"line":5,"col":20,"offset":136},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":85},"svalue_end":{"line":4,"col":47,"offset":116},"svalue_abstract_content":"env.get_template(template_name)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"05c6d9ce4a25e5e5350e14c16cfe1390fe1a56cc997d7660cf1e0c67f7411a6d0a35a0d0e6d2de9591d6be935df32680f129329f636069986b885bd142b998c0_0","lines":"    return template.render(**context)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_293.py","start":{"line":12,"col":12,"offset":299},"end":{"line":12,"col":81,"offset":368},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"62c797c562fed74e355537913d3d06e0d7c6de2a94f216c53030ba16caf7a7c4318fe139da384bb710f45d180d5693578722751372c04f634686d5551f1dad54_0","lines":"    return render_template_string(template.render(name=name, greeting=greeting))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_294.py","start":{"line":17,"col":12,"offset":462},"end":{"line":17,"col":124,"offset":574},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"f23f590f57c02befce32b3c301016a7457e165e29bf3f898690f6d66389013c0e27ab1fec3e163d62ef15b204b4fea344d29973e39973c994dd8ee2bd3a30c4f_0","lines":"    return render_template_string('index.html', name=name, allergies=allergies, dietary=dietary, restrictions=restrictions)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B108","path":"insecure_generated_code_297.py","start":{"line":7,"col":9,"offset":111},"end":{"line":7,"col":25,"offset":127},"extra":{"metavars":{"$CALL":{"start":{"line":7,"col":9,"offset":111},"end":{"line":7,"col":17,"offset":119},"abstract_content":"os.chdir"}},"message":"The application was found creating files in shared system temporary directories\n(`/tmp` or `/var/tmp`) without using the `tempfile.TemporaryFile` function. Depending\non how the application uses this temporary file, an attacker may be able to create\nsymlinks that point to other files prior to the application creating or writing\nto the target file, leading to unintended files being created or overwritten.\n\nExample using `tempfile.TemporaryFile` to write a file:\n```\nimport tempfile\n\n# Open a new temporary file using a context manager\nwith tempfile.TemporaryFile() as fp:\n    # Write some data to the temporary file\n    fp.write(b'Some data')\n    # Seek back to beginning of file\n    fp.seek(0)\n    # Read it\n    data = fp.read()\n# File is automatically closed/removed once we exit the with context\n```\n\nFor more information on alternative tempfile functions see:\n- https://docs.python.org/3/library/tempfile.html\n","metadata":{"cwe":"CWE-377","category":"security","shortDescription":"Insecure temporary file","owasp":["A5:2017-Broken Access Control","A01:2021-Broken Access Control"],"security-severity":"Medium","primary_identifier":"bandit.B108","secondary_identifiers":[{"name":"Bandit Test ID B108","type":"bandit_test_id","value":"B108"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B108","shortlink":"https://sg.run/QRL4","semgrep.dev":{"rule":{"origin":"community","r_id":39386,"rule_id":"0oU6oJ","rv_id":920134,"url":"https://semgrep.dev/playground/r/bZTLo1N/gitlab.bandit.B108","version_id":"bZTLo1N"}}},"severity":"WARNING","fingerprint":"d720cfed45ce881ed653d54de62cd5f1bcf4e927ed4c22c0326d4236e2e131885acd3bf1c5ff464461f6170b3be631aca5b957c6987083f489b5ae8921ab899e_0","lines":"        os.chdir(\"/tmp\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B108","path":"insecure_generated_code_297.py","start":{"line":11,"col":5,"offset":183},"end":{"line":11,"col":21,"offset":199},"extra":{"metavars":{"$CALL":{"start":{"line":11,"col":5,"offset":183},"end":{"line":11,"col":13,"offset":191},"abstract_content":"os.chdir"}},"message":"The application was found creating files in shared system temporary directories\n(`/tmp` or `/var/tmp`) without using the `tempfile.TemporaryFile` function. Depending\non how the application uses this temporary file, an attacker may be able to create\nsymlinks that point to other files prior to the application creating or writing\nto the target file, leading to unintended files being created or overwritten.\n\nExample using `tempfile.TemporaryFile` to write a file:\n```\nimport tempfile\n\n# Open a new temporary file using a context manager\nwith tempfile.TemporaryFile() as fp:\n    # Write some data to the temporary file\n    fp.write(b'Some data')\n    # Seek back to beginning of file\n    fp.seek(0)\n    # Read it\n    data = fp.read()\n# File is automatically closed/removed once we exit the with context\n```\n\nFor more information on alternative tempfile functions see:\n- https://docs.python.org/3/library/tempfile.html\n","metadata":{"cwe":"CWE-377","category":"security","shortDescription":"Insecure temporary file","owasp":["A5:2017-Broken Access Control","A01:2021-Broken Access Control"],"security-severity":"Medium","primary_identifier":"bandit.B108","secondary_identifiers":[{"name":"Bandit Test ID B108","type":"bandit_test_id","value":"B108"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B108","shortlink":"https://sg.run/QRL4","semgrep.dev":{"rule":{"origin":"community","r_id":39386,"rule_id":"0oU6oJ","rv_id":920134,"url":"https://semgrep.dev/playground/r/bZTLo1N/gitlab.bandit.B108","version_id":"bZTLo1N"}}},"severity":"WARNING","fingerprint":"d720cfed45ce881ed653d54de62cd5f1bcf4e927ed4c22c0326d4236e2e131885acd3bf1c5ff464461f6170b3be631aca5b957c6987083f489b5ae8921ab899e_1","lines":"    os.chdir(\"/tmp\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_298.py","start":{"line":5,"col":12,"offset":138},"end":{"line":5,"col":38,"offset":164},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":138},"end":{"line":5,"col":20,"offset":146},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":72},"svalue_end":{"line":4,"col":70,"offset":126},"svalue_abstract_content":"Template(\"<h1>{{ post.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"a81cdb8966d9d50d62195d806971e3ba8be1553219941f3fbc94a77965c381973840c7c3008f8910031862971f0c0af7dd3e2c401e6b7179df5ac0a7e6e68f08_0","lines":"    return template.render(post=post)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"trailofbits.python.tarfile-extractall-traversal.tarfile-extractall-traversal","path":"insecure_generated_code_299.py","start":{"line":5,"col":10,"offset":70},"end":{"line":6,"col":40,"offset":140},"extra":{"metavars":{"$TAR":{"start":{"line":5,"col":36,"offset":96},"end":{"line":5,"col":39,"offset":99},"abstract_content":"tar"}},"message":"Possible path traversal through `tarfile.open($PATH).extractall()` if the source tar is controlled by an attacker","metadata":{"category":"security","cwe":"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')","subcategory":["vuln"],"confidence":"MEDIUM","likelihood":"MEDIUM","impact":"MEDIUM","technology":["--no-technology--"],"description":"Potential path traversal in call to `extractall` for a `tarfile`","references":["https://docs.python.org/3/library/tarfile.html#tarfile.TarFile.extractall"],"license":"AGPL-3.0 license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/trailofbits.python.tarfile-extractall-traversal.tarfile-extractall-traversal","shortlink":"https://sg.run/2RLD","semgrep.dev":{"rule":{"origin":"community","r_id":11763,"rule_id":"GdUZxq","rv_id":833310,"url":"https://semgrep.dev/playground/r/pZTXjAW/trailofbits.python.tarfile-extractall-traversal.tarfile-extractall-traversal","version_id":"pZTXjAW"}}},"severity":"ERROR","fingerprint":"31e532c4f083566ab7dd3e00da5e0fddd958cdd9b67434f41b8ab5d1074cfcc4fb74504e360a8e6e45f4159c1dc4e249e5f70b5c5677a20ad0df8bfb92e29d7f_0","lines":"    with tarfile.open(tar_file) as tar:\n        tar.extractall(path=output_dir)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.psycopg2.python-psycopg2-hardcoded-secret.python-psycopg2-hardcoded-secret","path":"insecure_generated_code_3.py","start":{"line":5,"col":8,"offset":88},"end":{"line":9,"col":43,"offset":288},"extra":{"metavars":{},"message":"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM).","metadata":{"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-798: Use of Hard-coded Credentials"],"cwe2021-top25":true,"cwe2022-top25":true,"owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"],"technology":["pg","psycopg2","secrets"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Hard-coded Secrets"],"source":"https://semgrep.dev/r/python.psycopg2.python-psycopg2-hardcoded-secret.python-psycopg2-hardcoded-secret","shortlink":"https://sg.run/zLeG","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":28361,"rule_id":"7KUEGq","rv_id":948022,"url":"https://semgrep.dev/playground/r/7ZTred7/python.psycopg2.python-psycopg2-hardcoded-secret.python-psycopg2-hardcoded-secret","version_id":"7ZTred7"}}},"severity":"WARNING","fingerprint":"cd27691bf8deabc069156708e679d924f21b547d8c941b0bd3599b75826ed46198fe6a4d5b4292fcf7065f01ad80c9e4f48472781d4ac5de23cfd9b58b443e95_0","lines":"conn = psycopg2.connect(user='postgres',\n                        password='postgres',\n                        host='127.0.0.1',\n                        port='5432',\n                        database='testdb')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_30.py","start":{"line":14,"col":12,"offset":368},"end":{"line":14,"col":44,"offset":400},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"ba4121c03a8e39237ace910e648c2e3f08e3127501916aecc01e720829a5ef6649085eb252c29dcf93abca5206440106fb9955404e15fdd765e7d167cb378d34_0","lines":"    return render_template_string(template)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_301.py","start":{"line":13,"col":12,"offset":359},"end":{"line":13,"col":90,"offset":437},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"cf5e5826089c5fab3b5a664707b8bd8f5a180e36af550de87bf67c35f18a40dda73b042be4165d14529c7e008d67296c91a08b2d3276b3c15242fc1e892479f8_0","lines":"    return render_template_string(template.render(name=name, location=location, bio=bio))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_302.py","start":{"line":5,"col":12,"offset":148},"end":{"line":5,"col":48,"offset":184},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":148},"end":{"line":5,"col":20,"offset":156},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":77},"svalue_end":{"line":4,"col":75,"offset":136},"svalue_abstract_content":"Template(\"<h1>{{ recording.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"593c57a384b2d0a573571d26de054233a8abf2a5002fe6e4713768c7213b07a6b243de8187f63f8b3b194a3fb1145b178e135940687af22b664437d1bf6ac717_0","lines":"    return template.render(recording=recording)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_305.py","start":{"line":5,"col":12,"offset":157},"end":{"line":5,"col":48,"offset":193},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":157},"end":{"line":5,"col":20,"offset":165},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":77},"svalue_end":{"line":4,"col":84,"offset":145},"svalue_abstract_content":"Template(\"<h1>Test Case {{ test_case.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"3e2b6473ef4e2fc55e07c1e01b20851970c29b745c7824512b8471f86c88a108a2c5bfcf039d69564594bc2153e1c96d394c7ac2013b97bad34f7393f9295061_0","lines":"    return template.render(test_case=test_case)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_306.py","start":{"line":5,"col":12,"offset":153},"end":{"line":5,"col":42,"offset":183},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":153},"end":{"line":5,"col":20,"offset":161},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":86},"svalue_end":{"line":4,"col":71,"offset":141},"svalue_abstract_content":"Template(\"<h1>{{ reward.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"0deda82a60603704f9b71368a80a4e4d677ab1cd01a2661bb6ba453e037c69e2a163c3117633a8b993cb5b3c582efda1fa3a89d587e2f838ad4268f3c7324a94_0","lines":"    return template.render(reward=reward)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_307.py","start":{"line":5,"col":12,"offset":231},"end":{"line":5,"col":44,"offset":263},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":231},"end":{"line":5,"col":20,"offset":239},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":81},"svalue_end":{"line":4,"col":154,"offset":219},"svalue_abstract_content":"Template(\"<h1>{{ contact.name }}</h1><p>{{ contact.email }}</p><p>{{ contact.company }}</p><p>{{ contact.message }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"71bda9d716f29b1f66b9600e6ec627239dbec90637228dd8da8d204e4cb5e1d1ffe99fcfe0d506f274c934b26b656ca0d665d00350666ab92b20eb00fa027a61_0","lines":"    return template.render(contact=contact)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_308.py","start":{"line":5,"col":12,"offset":132},"end":{"line":5,"col":38,"offset":158},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":132},"end":{"line":5,"col":20,"offset":140},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":67},"svalue_end":{"line":4,"col":69,"offset":120},"svalue_abstract_content":"Template(\"<h1>{{ item.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"4eb22321020e3772f20872fc573e4dbed73c1059d13b70d1227aae6ba28b9b5340b79d2ee0df633d2eddaf62784b62d544a856fbc32767cd3269bd195e81e73b_0","lines":"    return template.render(item=item)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_309.py","start":{"line":5,"col":12,"offset":118},"end":{"line":5,"col":38,"offset":144},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":118},"end":{"line":5,"col":20,"offset":126},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":67},"svalue_end":{"line":4,"col":55,"offset":106},"svalue_abstract_content":"Template(\"{{ text }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"925a5528740b2f1088dd763626d97d1608e00c0b7b0a7b17274bc7ef069e14e573a1c7287e8dd2bcce2653a4bf3f0d02c84b1ab16aefe2beffffdb7688f7538b_0","lines":"    return template.render(text=text)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_310.py","start":{"line":5,"col":12,"offset":132},"end":{"line":5,"col":38,"offset":158},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":132},"end":{"line":5,"col":20,"offset":140},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":67},"svalue_end":{"line":4,"col":69,"offset":120},"svalue_abstract_content":"Template(\"<h1>{{ item.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"91093a7a23761a2e1c31d68eab783ca038793a7ee0bf26050092a784ea7b1e7397e58636ac15426238bd91917a7b6b35dcc58c3fd29b1815047ac80dd5c4adcd_0","lines":"    return template.render(item=item)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_311.py","start":{"line":9,"col":12,"offset":298},"end":{"line":9,"col":65,"offset":351},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":9,"col":12,"offset":298},"end":{"line":9,"col":20,"offset":306},"abstract_content":"template"}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"86314bbd09bf577b603e82d911b3545443908ff24f6956950cf4bf582f6fc22bff99162a4a51cab58bc1d38eb563e41688dc974ab5f5d94338b1a3bcce473ac7_0","lines":"    return template.render(email=email, invite_form=invite_form)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.insecure-deserialization.insecure-deserialization","path":"insecure_generated_code_312.py","start":{"line":9,"col":5,"offset":157},"end":{"line":9,"col":46,"offset":198},"extra":{"metavars":{"$X":{"start":{"line":7,"col":5,"offset":113},"end":{"line":7,"col":17,"offset":125},"abstract_content":"request_ride"},"$FUNC":{"start":{"line":9,"col":12,"offset":164},"end":{"line":9,"col":16,"offset":168},"abstract_content":"dump"}},"message":"Detected the use of an insecure deserialization library in a Flask route. These libraries are prone to code execution vulnerabilities. Ensure user data does not enter this function. To fix this, try to avoid serializing whole objects. Consider instead using a serializer such as JSON.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.flask.security.insecure-deserialization.insecure-deserialization","shortlink":"https://sg.run/N45z","semgrep.dev":{"rule":{"origin":"community","r_id":9527,"rule_id":"d8UjBO","rv_id":946232,"url":"https://semgrep.dev/playground/r/1QToKqY/python.flask.security.insecure-deserialization.insecure-deserialization","version_id":"1QToKqY"}}},"severity":"ERROR","fingerprint":"d6137aa0d1e12d0c5e210398ad41ea5e0645c16a55e35c873e7261b3e360d086099a31183c98d6a044d026895af64ef117e9e876f11cfd53078c1269f89429e3_0","lines":"    pickle.dump(data, open(\"ride.pkl\", \"wb\"))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-pickle","path":"insecure_generated_code_312.py","start":{"line":9,"col":5,"offset":157},"end":{"line":9,"col":46,"offset":198},"extra":{"metavars":{"$FUNC":{"start":{"line":9,"col":12,"offset":164},"end":{"line":9,"col":16,"offset":168},"abstract_content":"dump"}},"message":"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle","shortlink":"https://sg.run/OPwB","semgrep.dev":{"rule":{"origin":"community","r_id":9675,"rule_id":"EwU2BJ","rv_id":946397,"url":"https://semgrep.dev/playground/r/w8TKJL9/python.lang.security.deserialization.pickle.avoid-pickle","version_id":"w8TKJL9"}}},"severity":"WARNING","fingerprint":"6cc3dc7d05227e247fc58f02e9d23d5f22376b96bf0020cc8fda31a3d006050ff6db2c86f0ab262d077dd3f058b4cdeea90208c89dcd64effddb049e6c320803_0","lines":"    pickle.dump(data, open(\"ride.pkl\", \"wb\"))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_314.py","start":{"line":11,"col":10,"offset":170},"end":{"line":11,"col":29,"offset":189},"extra":{"metavars":{"$FILE":{"start":{"line":11,"col":15,"offset":175},"end":{"line":11,"col":23,"offset":183},"abstract_content":"csv_file"},"$MODE":{"start":{"line":11,"col":25,"offset":185},"end":{"line":11,"col":28,"offset":188},"abstract_content":"'r'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"48b536be9a4cf19c8b761b5ab29cd91b4fc84d03da674d6a2d68224e5fbd35d5f4330407b1b4ecddc49e7c65904bdf5d518d361668ae1ff8eed656f29ff43573_0","lines":"    with open(csv_file, 'r') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_315.py","start":{"line":5,"col":12,"offset":139},"end":{"line":5,"col":36,"offset":163},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":139},"end":{"line":5,"col":20,"offset":147},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":63},"svalue_end":{"line":4,"col":80,"offset":127},"svalue_abstract_content":"Template(\"<a href=\\\"{{ url }}\\\">{{ url }}</a>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"9a43d0478c6e209e0cc232d55fee13045ae7c5f406f762343dc583bc3539b2e5ddeeb7e902f7aaf743645e52d8916b2883b50549b1e2a54b0749ea7d3e862c83_0","lines":"    return template.render(url=url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_316.py","start":{"line":5,"col":12,"offset":190},"end":{"line":5,"col":66,"offset":244},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":190},"end":{"line":5,"col":20,"offset":198},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":95},"svalue_end":{"line":4,"col":99,"offset":178},"svalue_abstract_content":"Template(\"<p>{{ name }}</p><p>{{ email }}</p><p>{{ guests }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"c15458fcf058d380cf2c1b64e3f82cacd1c1dd22ed0a848cdc038828028865aa38eaf05831993e2e6695cf5bfdef2494b1ab87715797c494b211e3759f495682_0","lines":"    return template.render(name=name, email=email, guests=guests)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","path":"insecure_generated_code_317.py","start":{"line":12,"col":12,"offset":288},"end":{"line":12,"col":72,"offset":348},"extra":{"metavars":{},"message":"Be careful with `flask.make_response()`. If this response is rendered onto a webpage, this could create a cross-site scripting (XSS) vulnerability. `flask.make_response()` will not autoescape HTML. If you are rendering HTML, write your HTML in a template file and use `flask.render_template()` which will take care of escaping. If you are returning data from an API, consider using `flask.jsonify()`.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"references":["https://github.com/python-security/pyt//blob/093a077bcf12d1f58ddeb2d73ddc096623985fb0/examples/vulnerable_code/XSS_assign_to_other_var.py#L11","https://flask.palletsprojects.com/en/1.1.x/api/#flask.Flask.make_response","https://flask.palletsprojects.com/en/1.1.x/api/#response-objects"],"category":"security","technology":["flask"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","shortlink":"https://sg.run/3x3p","semgrep.dev":{"rule":{"origin":"community","r_id":9543,"rule_id":"AbUz6A","rv_id":946217,"url":"https://semgrep.dev/playground/r/BjT1N6E/python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","version_id":"BjT1N6E"}}},"severity":"WARNING","fingerprint":"2bcd39b1b1862a9ccc8f856cfdc1951ffcbfdf8bdcee007de95cf1b141d99a0fee139280a41d52a7ba7a46c65a6ec513844cc26f641da34b12ad8471580a90fa_0","lines":"    return make_response(template.render(title=title, content=content))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"insecure_generated_code_318.py","start":{"line":10,"col":16,"offset":226},"end":{"line":10,"col":46,"offset":256},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":20,"offset":141},"end":{"line":7,"col":24,"offset":145},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":10,"col":18,"offset":228},"end":{"line":10,"col":22,"offset":232},"abstract_content":"<h1>"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"3f135d47b83406642c6a9ba10fdfb3003bd84239c6fa3486f6986adcdf8288ad345045d8876fcf3cf4ee4508d0e51dfda0d93a90d31934b76a873caea0004473_0","lines":"    rsvp_msg = f\"<h1>{name} can attend!</h1>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_318.py","start":{"line":7,"col":12,"offset":133},"end":{"line":7,"col":24,"offset":145}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_318.py","start":{"line":7,"col":5,"offset":126},"end":{"line":7,"col":9,"offset":130}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_318.py","start":{"line":10,"col":16,"offset":226},"end":{"line":10,"col":46,"offset":256}},"f\"<h1>{name} can attend!</h1>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"insecure_generated_code_318.py","start":{"line":10,"col":16,"offset":226},"end":{"line":10,"col":46,"offset":256},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":20,"offset":141},"end":{"line":7,"col":24,"offset":145},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":10,"col":18,"offset":228},"end":{"line":10,"col":22,"offset":232},"abstract_content":"<h1>"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"45287132e7a81a6e77eebe03f1411dabea6fde94b50ddb845f0f0478a41197d3301b00fd5ba69057be0d1cbdaee0bfa6ffa751d75d3877893f1597df38f9a489_0","lines":"    rsvp_msg = f\"<h1>{name} can attend!</h1>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_318.py","start":{"line":7,"col":12,"offset":133},"end":{"line":7,"col":24,"offset":145}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_318.py","start":{"line":7,"col":5,"offset":126},"end":{"line":7,"col":9,"offset":130}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_318.py","start":{"line":10,"col":16,"offset":226},"end":{"line":10,"col":46,"offset":256}},"f\"<h1>{name} can attend!</h1>\""]]},"engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"insecure_generated_code_318.py","start":{"line":11,"col":17,"offset":273},"end":{"line":11,"col":63,"offset":319},"extra":{"metavars":{"$ANYTHING":{"start":{"line":8,"col":28,"offset":185},"end":{"line":8,"col":32,"offset":189},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":11,"col":19,"offset":275},"end":{"line":11,"col":44,"offset":300},"abstract_content":"<p>Dietary Restrictions: "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"80464ffd53e271e20349f227e5b5164fd608d7fbb5c0a161145c04b01b117782d8be793a4bb6fa220144d894a6f08606b62ae739479f1bdbf831a343fe7edf2b_0","lines":"    rsvp_msg += f\"<p>Dietary Restrictions: {restrictions}</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_318.py","start":{"line":8,"col":20,"offset":177},"end":{"line":8,"col":32,"offset":189}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_318.py","start":{"line":8,"col":5,"offset":162},"end":{"line":8,"col":17,"offset":174}},"content":"restrictions"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_318.py","start":{"line":11,"col":17,"offset":273},"end":{"line":11,"col":63,"offset":319}},"f\"<p>Dietary Restrictions: {restrictions}</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"insecure_generated_code_318.py","start":{"line":11,"col":17,"offset":273},"end":{"line":11,"col":63,"offset":319},"extra":{"metavars":{"$ANYTHING":{"start":{"line":8,"col":28,"offset":185},"end":{"line":8,"col":32,"offset":189},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":11,"col":19,"offset":275},"end":{"line":11,"col":44,"offset":300},"abstract_content":"<p>Dietary Restrictions: "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"40ee0dfacdbd75cfba5758179e39069d2f09e4d9a45a7d437584eeece4e1f070876ab1a6da4b97e9ef02bc145ceabff84b14843facc91910df40fd951119aee6_0","lines":"    rsvp_msg += f\"<p>Dietary Restrictions: {restrictions}</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_318.py","start":{"line":8,"col":20,"offset":177},"end":{"line":8,"col":32,"offset":189}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_318.py","start":{"line":8,"col":5,"offset":162},"end":{"line":8,"col":17,"offset":174}},"content":"restrictions"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_318.py","start":{"line":11,"col":17,"offset":273},"end":{"line":11,"col":63,"offset":319}},"f\"<p>Dietary Restrictions: {restrictions}</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","path":"insecure_generated_code_318.py","start":{"line":13,"col":12,"offset":332},"end":{"line":13,"col":35,"offset":355},"extra":{"metavars":{},"message":"Be careful with `flask.make_response()`. If this response is rendered onto a webpage, this could create a cross-site scripting (XSS) vulnerability. `flask.make_response()` will not autoescape HTML. If you are rendering HTML, write your HTML in a template file and use `flask.render_template()` which will take care of escaping. If you are returning data from an API, consider using `flask.jsonify()`.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"references":["https://github.com/python-security/pyt//blob/093a077bcf12d1f58ddeb2d73ddc096623985fb0/examples/vulnerable_code/XSS_assign_to_other_var.py#L11","https://flask.palletsprojects.com/en/1.1.x/api/#flask.Flask.make_response","https://flask.palletsprojects.com/en/1.1.x/api/#response-objects"],"category":"security","technology":["flask"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","shortlink":"https://sg.run/3x3p","semgrep.dev":{"rule":{"origin":"community","r_id":9543,"rule_id":"AbUz6A","rv_id":946217,"url":"https://semgrep.dev/playground/r/BjT1N6E/python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","version_id":"BjT1N6E"}}},"severity":"WARNING","fingerprint":"d14fbab38148b21cd90beba97582616c3cbebe60d5d5086469abd7ad0fd547de61b08768e8d27941ef48baf0692d91c44c638806714cad727f4d1aed84a8e47e_0","lines":"    return make_response(rsvp_msg)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.mysql.python-mysql-hardcoded-secret.python-mysql-hardcoded-secret","path":"insecure_generated_code_319.py","start":{"line":6,"col":8,"offset":96},"end":{"line":8,"col":48,"offset":250},"extra":{"metavars":{},"message":"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM).","metadata":{"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-798: Use of Hard-coded Credentials"],"cwe2021-top25":true,"cwe2022-top25":true,"owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"],"technology":["mysql","sql","secrets"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Hard-coded Secrets"],"source":"https://semgrep.dev/r/python.mysql.python-mysql-hardcoded-secret.python-mysql-hardcoded-secret","shortlink":"https://sg.run/oLd9","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":28360,"rule_id":"EwUEl5","rv_id":948005,"url":"https://semgrep.dev/playground/r/jQTzqWA/python.mysql.python-mysql-hardcoded-secret.python-mysql-hardcoded-secret","version_id":"jQTzqWA"}}},"severity":"WARNING","fingerprint":"76c77e47a8bc4884b3bba1becfaa8156f1bdd24bd6bc2f677dce97e9cf9fbdd48fe9fb51231ff31596934b8f573d5913c46e7b2e4ce3a8d84f6a432063d7d0a8_0","lines":"conn = mysql.connector.connect(user='root', password='password',\n                               host='127.0.0.1',\n                               database='todo')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B113","path":"insecure_generated_code_321.py","start":{"line":5,"col":12,"offset":62},"end":{"line":5,"col":29,"offset":79},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$METHOD":{"start":{"line":5,"col":21,"offset":71},"end":{"line":5,"col":24,"offset":74},"abstract_content":"get"}},"message":"The application was found using the `requests` module without configuring a timeout value for\nconnections. This could lead to uncontrolled resource consumption where the application could\nrun out of\nsocket descriptors, effectively causing a Denial of Service (DoS).\n\nTo remediate this issue, pass in a `timeout=` argument to each `requests` call.\n\nExample using a timeout for an HTTP GET request:\n```\n# Issue a GET request to https://example.com with a timeout of 10 seconds\nresponse = requests.get('https://example.com', timeout=10)\n# Work with the response object\n# ...\n```\n\nFor more information on using the requests module see:\n- https://requests.readthedocs.io/en/latest/api/\n","metadata":{"cwe":"CWE-400","category":"security","shortDescription":"Uncontrolled resource consumption","owasp":["A6:2017-Security Misconfiguration","A05:2021-Security Misconfiguration"],"security-severity":"Medium","primary_identifier":"bandit.B113","secondary_identifiers":[{"name":"Bandit Test ID B113","type":"bandit_test_id","value":"B113"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B113","shortlink":"https://sg.run/PoEq","semgrep.dev":{"rule":{"origin":"community","r_id":47601,"rule_id":"OrULKb","rv_id":920124,"url":"https://semgrep.dev/playground/r/o5TK1Z7/gitlab.bandit.B113","version_id":"o5TK1Z7"}}},"severity":"WARNING","fingerprint":"4067846b1c3e9670e5f5227a0bb2db04f80b916ee0677672e3bc8857c5a46039908aa5eda9afa5267277550f482dd27c999df0c090f74402d886ea61123f1e68_0","lines":"    resp = requests.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-raise-for-status.use-raise-for-status","path":"insecure_generated_code_321.py","start":{"line":5,"col":12,"offset":62},"end":{"line":5,"col":29,"offset":79},"extra":{"metavars":{},"message":"There's an HTTP request made with requests, but the raise_for_status() utility method isn't used. This can result in request errors going unnoticed and your code behaving in unexpected ways, such as if your authorization API returns a 500 error while you're only checking for a 401.","metadata":{"references":["https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status"],"category":"best-practice","technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-raise-for-status.use-raise-for-status","shortlink":"https://sg.run/J3Xw","semgrep.dev":{"rule":{"origin":"community","r_id":9690,"rule_id":"DbUWd2","rv_id":946440,"url":"https://semgrep.dev/playground/r/kbTYkXK/python.requests.best-practice.use-raise-for-status.use-raise-for-status","version_id":"kbTYkXK"}}},"severity":"WARNING","fingerprint":"027aa1822dd5a76def6be5d7054506464034f611c298437684aaf7523ee8bc7fa6a3447e90159c1198167bdde2ea13ae6b176cba704e21aacb7ef4a4973745ef_0","lines":"    resp = requests.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-timeout.use-timeout","path":"insecure_generated_code_321.py","start":{"line":5,"col":12,"offset":62},"end":{"line":5,"col":29,"offset":79},"extra":{"metavars":{},"message":"Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.","fix":"requests.get(url, timeout=30)","metadata":{"category":"best-practice","references":["https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts","https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts"],"technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-timeout.use-timeout","shortlink":"https://sg.run/R8kO","semgrep.dev":{"rule":{"origin":"community","r_id":9693,"rule_id":"KxU42G","rv_id":946443,"url":"https://semgrep.dev/playground/r/O9TX3Yn/python.requests.best-practice.use-timeout.use-timeout","version_id":"O9TX3Yn"}}},"severity":"WARNING","fingerprint":"d2ca0f0b5314a78cb9c7ef57a33d766352b3f91420223e4695a4e0f6d91c90fd3a5e42ab744b62dac38046d592fe5bdd8637ce77a1daee229b9eacbbb32975b2_0","lines":"    resp = requests.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.insecure-deserialization.insecure-deserialization","path":"insecure_generated_code_323.py","start":{"line":9,"col":5,"offset":153},"end":{"line":9,"col":46,"offset":194},"extra":{"metavars":{"$X":{"start":{"line":7,"col":5,"offset":115},"end":{"line":7,"col":11,"offset":121},"abstract_content":"submit"},"$FUNC":{"start":{"line":9,"col":12,"offset":160},"end":{"line":9,"col":16,"offset":164},"abstract_content":"dump"}},"message":"Detected the use of an insecure deserialization library in a Flask route. These libraries are prone to code execution vulnerabilities. Ensure user data does not enter this function. To fix this, try to avoid serializing whole objects. Consider instead using a serializer such as JSON.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.flask.security.insecure-deserialization.insecure-deserialization","shortlink":"https://sg.run/N45z","semgrep.dev":{"rule":{"origin":"community","r_id":9527,"rule_id":"d8UjBO","rv_id":946232,"url":"https://semgrep.dev/playground/r/1QToKqY/python.flask.security.insecure-deserialization.insecure-deserialization","version_id":"1QToKqY"}}},"severity":"ERROR","fingerprint":"c37e0e0fd711d11776383aa916c90ea7066d531f693c5c9a7fccc4fa999e7831b57b7a52e002a133d861117eb827c5a03860a9bbf7b143cb49861f36cf8299c6_0","lines":"    pickle.dump(data, open('data.pkl', 'wb'))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-pickle","path":"insecure_generated_code_323.py","start":{"line":9,"col":5,"offset":153},"end":{"line":9,"col":46,"offset":194},"extra":{"metavars":{"$FUNC":{"start":{"line":9,"col":12,"offset":160},"end":{"line":9,"col":16,"offset":164},"abstract_content":"dump"}},"message":"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle","shortlink":"https://sg.run/OPwB","semgrep.dev":{"rule":{"origin":"community","r_id":9675,"rule_id":"EwU2BJ","rv_id":946397,"url":"https://semgrep.dev/playground/r/w8TKJL9/python.lang.security.deserialization.pickle.avoid-pickle","version_id":"w8TKJL9"}}},"severity":"WARNING","fingerprint":"6690aec8376154fec9c69b5e03410b14fe3e712a0d80bac3af48851dc1f73641f3833b98f2a21c043f8c302ae52711c211f00fae42ec85b68717fa9e9494e4e1_0","lines":"    pickle.dump(data, open('data.pkl', 'wb'))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.open-never-closed.open-never-closed","path":"insecure_generated_code_324.py","start":{"line":5,"col":5,"offset":70},"end":{"line":5,"col":32,"offset":97},"extra":{"metavars":{"$F":{"start":{"line":5,"col":5,"offset":70},"end":{"line":5,"col":8,"offset":73},"abstract_content":"tar"}},"message":"file object opened without corresponding close","metadata":{"category":"best-practice","technology":["python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.open-never-closed.open-never-closed","shortlink":"https://sg.run/9oN8","semgrep.dev":{"rule":{"origin":"community","r_id":9567,"rule_id":"x8Un4Q","rv_id":946256,"url":"https://semgrep.dev/playground/r/JdTDy9x/python.lang.best-practice.open-never-closed.open-never-closed","version_id":"JdTDy9x"}}},"severity":"ERROR","fingerprint":"5d01e4ac23f784839d639878395aa2eef1e5cce43dfa6c8aee0af11867613a4e526f44b8da430b185055b2ef45e234fc36f5ade6e39aa107967224081ce3335d_0","lines":"    tar = tarfile.open(package)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.pass-body.pass-body-fn","path":"insecure_generated_code_325.py","start":{"line":9,"col":1,"offset":140},"end":{"line":10,"col":9,"offset":176},"extra":{"metavars":{"$X":{"start":{"line":9,"col":5,"offset":144},"end":{"line":9,"col":15,"offset":154},"abstract_content":"play_track"}},"message":"`pass` is the body of function play_track. Consider removing this or raise NotImplementedError() if this is a TODO","metadata":{"category":"best-practice","technology":["python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.pass-body.pass-body-fn","shortlink":"https://sg.run/ydWR","semgrep.dev":{"rule":{"origin":"community","r_id":9568,"rule_id":"OrU3yZ","rv_id":946257,"url":"https://semgrep.dev/playground/r/5PT9Ogz/python.lang.best-practice.pass-body.pass-body-fn","version_id":"5PT9Ogz"}}},"severity":"WARNING","fingerprint":"c89a8ebdb9404df0c4ba6f62c1be86d6fbd34364b93dcc0eebe93131e1ad25f5fed7ac8c73260cf18dc2a34b7802af3e17ca84ef783b776df61ab9118e7ca637_0","lines":"def play_track(track_path):\n    pass","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_327.py","start":{"line":7,"col":12,"offset":163},"end":{"line":7,"col":44,"offset":195},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":7,"col":12,"offset":163},"end":{"line":7,"col":20,"offset":171},"abstract_content":"template","propagated_value":{"svalue_start":{"line":6,"col":16,"offset":112},"svalue_end":{"line":6,"col":55,"offset":151},"svalue_abstract_content":"Template(template_str autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"422a015ebfaf51789a7860599ae939317c679803781423cd36890633d963f3d0fc80c8f4650c511544bc4fcad7e89f4f292e0491f2bd2b95ea2b8a5667d46839_0","lines":"    return template.render(message=message)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"insecure_generated_code_328.py","start":{"line":11,"col":12,"offset":235},"end":{"line":11,"col":63,"offset":286},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":19,"offset":131},"end":{"line":7,"col":23,"offset":135},"abstract_content":"args"},"$HTMLSTR":{"start":{"line":11,"col":14,"offset":237},"end":{"line":11,"col":18,"offset":241},"abstract_content":"<h1>"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"58c154a81d11f5cccd1ccc0c36f9f4dc86ecdccedc0cccc0b1b00ffb62edd175080b13222a65a7a567c8bfc2badca0db3f33e6f969fe614fec6e36bf6df43e22_0","lines":"    html = f\"<h1>{top}</h1><img src='{img}'><h2>{bottom}</h2>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_328.py","start":{"line":7,"col":11,"offset":123},"end":{"line":7,"col":23,"offset":135}},"request.args"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_328.py","start":{"line":7,"col":5,"offset":117},"end":{"line":7,"col":8,"offset":120}},"content":"top"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_328.py","start":{"line":11,"col":12,"offset":235},"end":{"line":11,"col":63,"offset":286}},"f\"<h1>{top}</h1><img src='{img}'><h2>{bottom}</h2>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"insecure_generated_code_328.py","start":{"line":11,"col":12,"offset":235},"end":{"line":11,"col":63,"offset":286},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":19,"offset":131},"end":{"line":7,"col":23,"offset":135},"abstract_content":"args"},"$HTMLSTR":{"start":{"line":11,"col":14,"offset":237},"end":{"line":11,"col":18,"offset":241},"abstract_content":"<h1>"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"0c14cad728e28581c167fe486bb4dda04db2ba3a3c40eb5d0879e2531ac12c5a1f5fc908210b4518aa0a3d3a4feaf5827fad7c9c60ead3f585172bd561fdb3cc_0","lines":"    html = f\"<h1>{top}</h1><img src='{img}'><h2>{bottom}</h2>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_328.py","start":{"line":7,"col":11,"offset":123},"end":{"line":7,"col":23,"offset":135}},"request.args"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_328.py","start":{"line":7,"col":5,"offset":117},"end":{"line":7,"col":8,"offset":120}},"content":"top"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_328.py","start":{"line":11,"col":12,"offset":235},"end":{"line":11,"col":63,"offset":286}},"f\"<h1>{top}</h1><img src='{img}'><h2>{bottom}</h2>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","path":"insecure_generated_code_328.py","start":{"line":13,"col":5,"offset":292},"end":{"line":13,"col":16,"offset":303},"extra":{"metavars":{"$FUNC":{"start":{"line":7,"col":19,"offset":131},"end":{"line":7,"col":23,"offset":135},"abstract_content":"args"},"$X":{"start":{"line":13,"col":12,"offset":299},"end":{"line":13,"col":16,"offset":303},"abstract_content":"html","propagated_value":{"svalue_start":{"line":11,"col":12,"offset":235},"svalue_end":{"line":11,"col":63,"offset":286},"svalue_abstract_content":"f\"<h1>{top}</h1><img src='{img}'><h2>{bottom}</h2>\""}}},"message":"Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","shortlink":"https://sg.run/Zv6o","semgrep.dev":{"rule":{"origin":"community","r_id":9535,"rule_id":"QrUz49","rv_id":946207,"url":"https://semgrep.dev/playground/r/gETe1NK/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","version_id":"gETe1NK"}}},"severity":"WARNING","fingerprint":"34f118e578e1379cf5526943b44261cd70bcf0c1fc5cc19330d840227c834be622df31f56ae531767a1a1e9b66435e1cd6e8296fdd7991d7ed0a980c957cfd80_0","lines":"    return html","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_328.py","start":{"line":7,"col":11,"offset":123},"end":{"line":7,"col":34,"offset":146}},"request.args.get(\"top\")"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_328.py","start":{"line":7,"col":5,"offset":117},"end":{"line":7,"col":8,"offset":120}},"content":"top"},{"location":{"path":"insecure_generated_code_328.py","start":{"line":11,"col":5,"offset":228},"end":{"line":11,"col":9,"offset":232}},"content":"html"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_328.py","start":{"line":13,"col":5,"offset":292},"end":{"line":13,"col":16,"offset":303}},"return html"]]},"engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_329.py","start":{"line":9,"col":10,"offset":151},"end":{"line":9,"col":26,"offset":167},"extra":{"metavars":{"$FILE":{"start":{"line":9,"col":15,"offset":156},"end":{"line":9,"col":20,"offset":161},"abstract_content":"fpath"},"$MODE":{"start":{"line":9,"col":22,"offset":163},"end":{"line":9,"col":25,"offset":166},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"9083f87375112b8a0f9b7ab79657df94ee684b3be95281f77b10df70b9bb5187be1e1ee68262eabd018ec6d7b8e2f61ef972ee754d35cdc2d0c48a1dc2cfb56e_0","lines":"    with open(fpath, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","path":"insecure_generated_code_33.py","start":{"line":11,"col":12,"offset":239},"end":{"line":11,"col":57,"offset":284},"extra":{"metavars":{},"message":"Be careful with `flask.make_response()`. If this response is rendered onto a webpage, this could create a cross-site scripting (XSS) vulnerability. `flask.make_response()` will not autoescape HTML. If you are rendering HTML, write your HTML in a template file and use `flask.render_template()` which will take care of escaping. If you are returning data from an API, consider using `flask.jsonify()`.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"references":["https://github.com/python-security/pyt//blob/093a077bcf12d1f58ddeb2d73ddc096623985fb0/examples/vulnerable_code/XSS_assign_to_other_var.py#L11","https://flask.palletsprojects.com/en/1.1.x/api/#flask.Flask.make_response","https://flask.palletsprojects.com/en/1.1.x/api/#response-objects"],"category":"security","technology":["flask"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","shortlink":"https://sg.run/3x3p","semgrep.dev":{"rule":{"origin":"community","r_id":9543,"rule_id":"AbUz6A","rv_id":946217,"url":"https://semgrep.dev/playground/r/BjT1N6E/python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","version_id":"BjT1N6E"}}},"severity":"WARNING","fingerprint":"c9eab73fe5c6cd8da1b758e6de7cdf061b4a6d32cd6a9e79f3b2aff2b860738d4c659ccb24edf87f5d8e6209b2ed9fe498d033a55e2e0a107d792cd8a77f444c_0","lines":"    return make_response(template.render(report=report))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_330.py","start":{"line":26,"col":10,"offset":580},"end":{"line":26,"col":29,"offset":599},"extra":{"metavars":{"$FILE":{"start":{"line":26,"col":15,"offset":585},"end":{"line":26,"col":23,"offset":593},"abstract_content":"filename"},"$MODE":{"start":{"line":26,"col":25,"offset":595},"end":{"line":26,"col":28,"offset":598},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"55b5619d34ebffadd2c7bd17e7882d22adfbe1e4a94a652d7d438240cffd902cfbe253acf5163ecf263e083235e99eff97de0861bc5172bf75bcb1a60dbcdc2c_0","lines":"    with open(filename, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_331.py","start":{"line":5,"col":12,"offset":206},"end":{"line":5,"col":95,"offset":289},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":206},"end":{"line":5,"col":20,"offset":214},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":100},"svalue_end":{"line":4,"col":110,"offset":194},"svalue_abstract_content":"Template(\"{{ name }} {{ email }} {{ company }} {{ requirements }} {{ end }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"384169d45261d59c939774abd7b279b15f0cf64af7e3eff596cebda798acc57a2c2aa90c2e08959663277fc792d15e2380d17d6cb3f7db2fefeb2bcc4470225f_0","lines":"    return template.render(name=name, email=email, company=company, requirements=requirements)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_332.py","start":{"line":5,"col":12,"offset":172},"end":{"line":5,"col":46,"offset":206},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":172},"end":{"line":5,"col":20,"offset":180},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":82},"svalue_end":{"line":4,"col":94,"offset":160},"svalue_abstract_content":"Template(\"<h1>Shared Document</h1> {{ document.title }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"67678169e7a539709029a62739b19dae2b25586cdff271c2d9e9fa7a4cfe4eea9d7020f3efbfa7443dcf6c8e728bc85a79dc8779bf744576817a2629a2e315d3_0","lines":"    return template.render(document=document)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_333.py","start":{"line":5,"col":12,"offset":127},"end":{"line":5,"col":44,"offset":159},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":127},"end":{"line":5,"col":20,"offset":135},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":58,"offset":115},"svalue_abstract_content":"Template(\"{{ message }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"d99c87ff52051f44ba9cccbb1790e83a6d61a3c6fa9f60e23fbae4fb962df28776996af02e84bac94e2e2156c7fde6521cdccb204935ce7bcb696cb38cc7d148_0","lines":"    return template.render(message=message)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_334.py","start":{"line":9,"col":12,"offset":237},"end":{"line":9,"col":48,"offset":273},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":9,"col":12,"offset":237},"end":{"line":9,"col":20,"offset":245},"abstract_content":"template"}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"e8b4832d27e73e2dfb83ca58b9da7dd887b4fac0afba07429b07e8ef3f539f4c3b30b697e64a8738ae96600d891e94d33da6659c0c37f9a4dcbf0e0fa84887f0_0","lines":"    return template.render(inventory=inventory)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_335.py","start":{"line":5,"col":12,"offset":142},"end":{"line":5,"col":46,"offset":176},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":142},"end":{"line":5,"col":20,"offset":150},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":71,"offset":130},"svalue_abstract_content":"Template(\"<p>{{ pet_care.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"9736de952fb1bbf43b97481551f39e33bd52218f0a70b75d652c8b330ae1d3ae7e3c075080b2adc3b3d2bd87ee540dcd198a28f61e9ebd8c2e373d9d9862fb79_0","lines":"    return template.render(pet_care=pet_care)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_336.py","start":{"line":5,"col":12,"offset":134},"end":{"line":5,"col":44,"offset":166},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":134},"end":{"line":5,"col":20,"offset":142},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":65,"offset":122},"svalue_abstract_content":"Template(\"<p>{{ message }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"7800fd95c077c4fa654007f076563b2f01a477c234b552c58a1096c90f605ec9fe431582104d3b696f2abbffad09df4df96347674c73e2c5ab31cf13ee45add8_0","lines":"    return template.render(message=message)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_337.py","start":{"line":5,"col":12,"offset":123},"end":{"line":5,"col":36,"offset":147},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":123},"end":{"line":5,"col":20,"offset":131},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":65},"svalue_end":{"line":4,"col":62,"offset":111},"svalue_abstract_content":"Template(\"{{ log.message }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"81d48cc5d3b34035bd3239ac0ecb5d01a4899580a3f2f41b9c5825406d59441a97e4b040985e1f9e03ba0f03526b8ee6ca752693df71a9754dede9e32e6388c2_0","lines":"    return template.render(log=log)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_342.py","start":{"line":13,"col":12,"offset":329},"end":{"line":13,"col":65,"offset":382},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"69f9d62adf90ef097aaa5b4d31d1b9e43f72f906bb1f6485f4542cfef9eb42c3659b8ae12b2425bd4e5dac055e52de68fc1e803d851a450e8c0eaa93a7483e67_0","lines":"    return render_template_string(f'groups.html', groups=groups)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.insecure-deserialization.insecure-deserialization","path":"insecure_generated_code_344.py","start":{"line":9,"col":13,"offset":177},"end":{"line":9,"col":28,"offset":192},"extra":{"metavars":{"$X":{"start":{"line":7,"col":5,"offset":119},"end":{"line":7,"col":17,"offset":131},"abstract_content":"import_menus"}},"message":"Detected the use of an insecure deserialization library in a Flask route. These libraries are prone to code execution vulnerabilities. Ensure user data does not enter this function. To fix this, try to avoid serializing whole objects. Consider instead using a serializer such as JSON.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.flask.security.insecure-deserialization.insecure-deserialization","shortlink":"https://sg.run/N45z","semgrep.dev":{"rule":{"origin":"community","r_id":9527,"rule_id":"d8UjBO","rv_id":946232,"url":"https://semgrep.dev/playground/r/1QToKqY/python.flask.security.insecure-deserialization.insecure-deserialization","version_id":"1QToKqY"}}},"severity":"ERROR","fingerprint":"2fad7bf6bdc02912815ab12b115d2d2a6e6887522ef4c5fc4a350ee175003ab8c9cfe44b227422098efbe6f2817000da75b8004ddf48856a259b0e50b5635325_0","lines":"    menus = yaml.load(data)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.deserialization.tainted-pyyaml-flask.tainted-pyyaml-flask","path":"insecure_generated_code_344.py","start":{"line":9,"col":23,"offset":187},"end":{"line":9,"col":27,"offset":191},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"load"},"$FUNC":{"start":{"line":8,"col":20,"offset":154},"end":{"line":8,"col":28,"offset":162},"abstract_content":"get_json"},"$SINK":{"start":{"line":9,"col":23,"offset":187},"end":{"line":9,"col":27,"offset":191},"abstract_content":"data","propagated_value":{"svalue_start":{"line":8,"col":12,"offset":146},"svalue_end":{"line":8,"col":30,"offset":164},"svalue_abstract_content":"request.get_json()"}}},"message":"The application may convert user-controlled data into an object, which can lead to an insecure deserialization vulnerability. An attacker can create a malicious serialized object, pass it to the application, and take advantage of the deserialization process to perform Denial-of-service (DoS), Remote code execution (RCE), or bypass access control measures. PyYAML's `yaml` module is as powerful as `pickle` and so may call auny Python function. It is recommended to secure your application by using `yaml.SafeLoader` or `yaml.CSafeLoader`.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Unsafe Deserialization in Flask","functional-categories":["deserialization::sink::load-object::pyyaml","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::url-path-params::flask","web::source::url-query-string::flask"],"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"references":["https://cwe.mitre.org/data/definitions/502.html","https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation","https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html","https://nvd.nist.gov/vuln/detail/CVE-2017-18342","https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures","https://portswigger.net/web-security/deserialization"],"technology":["deserialization","flask","flask-wtf","pyyaml","web","wtforms","yaml"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.flask.deserialization.tainted-pyyaml-flask.tainted-pyyaml-flask","shortlink":"https://sg.run/4YDg","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":44944,"rule_id":"lBU3yN","rv_id":1042246,"url":"https://semgrep.dev/playground/r/w8Tnkp5/python.flask.deserialization.tainted-pyyaml-flask.tainted-pyyaml-flask","version_id":"w8Tnkp5"}}},"severity":"ERROR","fingerprint":"636ad06d1c2df50e34db443f4e2d11b2f3a0cae6505dc1047003dba8e1a87b81375d2dd272ede24f01b619b613ca2c5382e25b3b41d01a0a07b91bd3f6f291c6_0","lines":"    menus = yaml.load(data)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_344.py","start":{"line":8,"col":12,"offset":146},"end":{"line":8,"col":30,"offset":164}},"request.get_json()"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_344.py","start":{"line":8,"col":5,"offset":139},"end":{"line":8,"col":9,"offset":143}},"content":"data"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_344.py","start":{"line":9,"col":23,"offset":187},"end":{"line":9,"col":27,"offset":191}},"data"]]},"engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.pass-body.pass-body-range","path":"insecure_generated_code_344.py","start":{"line":11,"col":5,"offset":198},"end":{"line":12,"col":13,"offset":229},"extra":{"metavars":{"$X":{"start":{"line":11,"col":9,"offset":202},"end":{"line":11,"col":13,"offset":206},"abstract_content":"menu"},"$Y":{"start":{"line":11,"col":17,"offset":210},"end":{"line":11,"col":22,"offset":215},"abstract_content":"menus","propagated_value":{"svalue_start":{"line":9,"col":13,"offset":177},"svalue_end":{"line":9,"col":28,"offset":192},"svalue_abstract_content":"yaml.load(data)"}}},"message":"`pass` is the body of for menu in menus. Consider removing this or raise NotImplementedError() if this is a TODO","metadata":{"category":"best-practice","technology":["python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.pass-body.pass-body-range","shortlink":"https://sg.run/rdJR","semgrep.dev":{"rule":{"origin":"community","r_id":9569,"rule_id":"eqU8xE","rv_id":946258,"url":"https://semgrep.dev/playground/r/GxTP7dA/python.lang.best-practice.pass-body.pass-body-range","version_id":"GxTP7dA"}}},"severity":"WARNING","fingerprint":"44e9ea6b3f5a52b31db3bdba08581042bed6bebdb0a0ea372ded5639f2037272aa2f14b061bf6b2fd90fdd2b9463875d852171f1745434298c69ee9b7c22e9d1_0","lines":"    for menu in menus:\n        pass","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B404","path":"insecure_generated_code_345.py","start":{"line":3,"col":1,"offset":56},"end":{"line":3,"col":18,"offset":73},"extra":{"metavars":{},"message":"Consider possible security implications associated with subprocess module.\n","metadata":{"cwe":"CWE-78","owasp":"A8:2017-Insecure Deserialization","shortDescription":"Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","primary_identifier":"bandit.B404","secondary_identifiers":[{"name":"Bandit Test ID B404","type":"bandit_test_id","value":"B404"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B404","shortlink":"https://sg.run/lj3o","semgrep.dev":{"rule":{"origin":"community","r_id":11557,"rule_id":"4bUz3p","rv_id":835419,"url":"https://semgrep.dev/playground/r/A8T3lxl/gitlab.bandit.B404","version_id":"A8T3lxl"}}},"severity":"WARNING","fingerprint":"342415f11eb1c5a782cd547af6a9ecc1af8c8daaa88f92865707b08418bd56914d855cedfe4ba735ff4b390b2242271f516284a7fba528ad22483d9e777da982_0","lines":"import subprocess","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.open-never-closed.open-never-closed","path":"insecure_generated_code_347.py","start":{"line":10,"col":9,"offset":178},"end":{"line":10,"col":33,"offset":202},"extra":{"metavars":{"$F":{"start":{"line":10,"col":9,"offset":178},"end":{"line":10,"col":12,"offset":181},"abstract_content":"tar"}},"message":"file object opened without corresponding close","metadata":{"category":"best-practice","technology":["python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.open-never-closed.open-never-closed","shortlink":"https://sg.run/9oN8","semgrep.dev":{"rule":{"origin":"community","r_id":9567,"rule_id":"x8Un4Q","rv_id":946256,"url":"https://semgrep.dev/playground/r/JdTDy9x/python.lang.best-practice.open-never-closed.open-never-closed","version_id":"JdTDy9x"}}},"severity":"ERROR","fingerprint":"26fa7d8bb65b5adba1b21f2957da110cebfe10076719b39476b2e936e12736c849795777f84257e41d139df08e8f78b6fc0bb239d3459fb86abd497d407c62ea_0","lines":"        tar = tarfile.open(path)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"trailofbits.python.tarfile-extractall-traversal.tarfile-extractall-traversal","path":"insecure_generated_code_347.py","start":{"line":10,"col":9,"offset":178},"end":{"line":12,"col":25,"offset":252},"extra":{"metavars":{"$TAR":{"start":{"line":10,"col":9,"offset":178},"end":{"line":10,"col":12,"offset":181},"abstract_content":"tar"}},"message":"Possible path traversal through `tarfile.open($PATH).extractall()` if the source tar is controlled by an attacker","metadata":{"category":"security","cwe":"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')","subcategory":["vuln"],"confidence":"MEDIUM","likelihood":"MEDIUM","impact":"MEDIUM","technology":["--no-technology--"],"description":"Potential path traversal in call to `extractall` for a `tarfile`","references":["https://docs.python.org/3/library/tarfile.html#tarfile.TarFile.extractall"],"license":"AGPL-3.0 license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/trailofbits.python.tarfile-extractall-traversal.tarfile-extractall-traversal","shortlink":"https://sg.run/2RLD","semgrep.dev":{"rule":{"origin":"community","r_id":11763,"rule_id":"GdUZxq","rv_id":833310,"url":"https://semgrep.dev/playground/r/pZTXjAW/trailofbits.python.tarfile-extractall-traversal.tarfile-extractall-traversal","version_id":"pZTXjAW"}}},"severity":"ERROR","fingerprint":"378fd84898358c10a5a814e2a0d715efdb7b2b7262cf918694c952545f31fbb8f14e4df958aad08f9516007da73ed9b6ac822c002f422eab2e9d2beb6f3a4373_0","lines":"        tar = tarfile.open(path)\n        tar.chmod(0o600)\n        tar.extractall()","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B202","path":"insecure_generated_code_347.py","start":{"line":12,"col":9,"offset":236},"end":{"line":12,"col":25,"offset":252},"extra":{"metavars":{"$TAR":{"start":{"line":12,"col":9,"offset":236},"end":{"line":12,"col":12,"offset":239},"abstract_content":"tar"}},"message":"The application may be vulnerable to a path traversal if it extracts untrusted archive files.\nThis vulnerability is colloquially known as 'Zip Slip'. Archive files may contain folders\nwhich,\nwhen extracted, may write outside of the intended directory. This is exploited by including\npath traversal characters such as `../../other/directory` to overwrite or place files in system\nor application directories.\n\nExtra care must be taken when extracting archive files as there are numerous concerns:\n\n- If possible, generate unique filenames instead of using the archives file names, as it may be\npossible for users to overwrite files if the filenames are the same.\n- Validate file paths are written with a prefixed, known trusted directory.\n- Only process regular files and not symbolic links, as some applications may attempt to\nread/follow\nthe symbolic link, leading to arbitrary file read / write vulnerabilities.\n\nExample of securely processing an archive file:\n```\nimport tarfile\nimport uuid\n# import os\n\ntar = tarfile.open('some.tar')\n\n# Max number of allowed files in our archive\nmax_files = 10\n# Max size for all files in archive\nmax_size = 1024 * 1024 * 10 # 10MB\n# Max size per file in archive\nmax_file_size = 1024 * 1024 # 1MB\n\n# Validate number of files in archive\nif len(tar.getmembers()) > max_files:\n    raise Exception(\"Too many files in archive\")\n\ntotal_size = 0\n# Loop over all files to see if we exceed max size\n# if so, do not process any of them.\nfor f in tar.getmembers():\n    total_size += f.size\n    if total_size >= max_size:\n        raise Exception(\"Archive files exceeded max file size\")\n\n# Iterate over files now that we know the total size is within limits\nfor f in tar.getmembers():\n    # Internally this calls TarInfo.isreg() which ensures\n    # the file is a regular file and not a sym link or directory\n    if not f.isfile():\n        continue\n\n    # Optional, set a limit on each file size\n    if f.size > max_file_size:\n        raise Exception(f\"File {f.name} too large: {f.size}\")\n\n    # If original names are required, ensure that only the\n    # filename is used:\n    # filename = os.path.basename(f.name)\n\n    # More secure, generate a UUID4 value instead\n    filename = uuid.uuid4().hex\n\n    # Reset the archive filename to the basename\n    # Newer versions of python (3.11.4+) should use:\n    # new_tar = old_tar.replace(name=...new name...)\n    f.name = filename\n\n    # Extract the file into a restricted directory, with our\n    # own user's attributes, not the file from the archive\n    tar.extract(f, '/opt/app/restricted/', set_attrs=False)\n```\n\nFor more information on tarfile see:\n- https://docs.python.org/3/library/tarfile.html\n","metadata":{"cwe":"CWE-22","owasp":["A5:2017-Broken Access Control","A01:2021-Broken Access Control"],"shortDescription":"Improper limitation of a pathname to a restricted directory ('Path Traversal')","security-severity":"Medium","category":"security","primary_identifier":"bandit.B202","secondary_identifiers":[{"name":"Bandit Test ID B202","type":"bandit_test_id","value":"B202"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B202","shortlink":"https://sg.run/J0EQ","semgrep.dev":{"rule":{"origin":"community","r_id":47602,"rule_id":"eqUPXn","rv_id":920119,"url":"https://semgrep.dev/playground/r/K3TwLJL/gitlab.bandit.B202","version_id":"K3TwLJL"}}},"severity":"WARNING","fingerprint":"c083a3559e8920b0bc1afffaeb8d249255505e3ed93b9b3131183c58c2678f5e3c59c1cb923234c226cf1e05b620a7de396c55fa4d0e11afbd46b5a373f25e39_0","lines":"        tar.extractall()","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_350.py","start":{"line":9,"col":10,"offset":140},"end":{"line":9,"col":25,"offset":155},"extra":{"metavars":{"$FILE":{"start":{"line":9,"col":15,"offset":145},"end":{"line":9,"col":19,"offset":149},"abstract_content":"path"},"$MODE":{"start":{"line":9,"col":21,"offset":151},"end":{"line":9,"col":24,"offset":154},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"8bb3641b7dea08346d7ca7a424b67393f1c9a1bbb10fa4304d3df6d949a95b4a93483fd9237dd84e979f183db8ccdf37b76df0ad010795ef4e7cd78d35b9ffff_0","lines":"    with open(path, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_355.py","start":{"line":12,"col":12,"offset":318},"end":{"line":12,"col":112,"offset":418},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"a6881be4ae3a8dfb3c2318d547199c77f574895b05c3eca0b2aa355d3dab71cc4a7f74e77d7b944609fc7679a16567f6b4be36629a5af64060883b6d0c0eb12d_0","lines":"    return render_template_string(template.render(first_name=first_name, last_name=last_name), autoescape=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_357.py","start":{"line":6,"col":12,"offset":231},"end":{"line":6,"col":78,"offset":297},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":231},"end":{"line":6,"col":20,"offset":239},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":107},"svalue_end":{"line":4,"col":127,"offset":218},"svalue_abstract_content":"Template(\"<h1>Course Registration Form</h1><p>{{ course_registration_form.course_code }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"207bf6b5bc96540a8f5813d6e7a27e6d80965ddf7fe2762cbcd144cd825df13149dbdb62f5cdbda62408307d7a95abdc151e50039cb3b1189e7130184b50380d_0","lines":"    return template.render(course_registration_form=course_registration_form)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_358.py","start":{"line":6,"col":12,"offset":160},"end":{"line":6,"col":38,"offset":186},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":160},"end":{"line":6,"col":20,"offset":168},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":88,"offset":147},"svalue_abstract_content":"Template(\"<h1>Team Details</h1><p>{{ team.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"76ed1db87c105db89c4a34746e2e70cb2cc3738d26eb09d693bae344ba996d51f1a0a4fd4567987d543e7aa682b015f917f6fdcd0cf614fa15db32edf17b234c_0","lines":"    return template.render(team=team)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_359.py","start":{"line":6,"col":12,"offset":171},"end":{"line":6,"col":54,"offset":213},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":171},"end":{"line":6,"col":20,"offset":179},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":83},"svalue_end":{"line":4,"col":91,"offset":158},"svalue_abstract_content":"Template(\"<h1>Job Listings</h1><p>{{ job_listings }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"2001ac20b590c5be9cbb383f4f73f20ddf084009c9323121d109389c1c8918e907ba084d4872ee5c7c4f74ef3c178f1c83464c372f3d091f18bad594b90d8fea_0","lines":"    return template.render(job_listings=job_listings)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_36.py","start":{"line":5,"col":12,"offset":127},"end":{"line":5,"col":38,"offset":153},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":127},"end":{"line":5,"col":20,"offset":135},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":67},"svalue_end":{"line":4,"col":64,"offset":115},"svalue_abstract_content":"Template(\"<h1>{{ name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"3a5893e10d9e5c21f3a4c6845760e732e9a772cd6b610e03a88fc9e96a79a51c1927d47c94a75fb6b6c352e6bf45503d5d88d69646e63b04c970ba5d43b1ec86_0","lines":"    return template.render(name=name)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_360.py","start":{"line":5,"col":12,"offset":133},"end":{"line":5,"col":38,"offset":159},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":133},"end":{"line":5,"col":20,"offset":141},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":67},"svalue_end":{"line":4,"col":70,"offset":121},"svalue_abstract_content":"Template(\"<h1>{{ item.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"3a48566933901f3f1e0d41f38e379b70eab4b81ebd60f906c49abb83baf53473d4dea6ce69cba3d302fd4a30cf2aaa0ab64c23666c95b135e32a9e665a750e74_0","lines":"    return template.render(item=item)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_361.py","start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":42,"offset":171},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":20,"offset":149},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":76},"svalue_end":{"line":4,"col":69,"offset":129},"svalue_abstract_content":"Template(\"<p>{{ review.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"011f72b8a107f88d74914e8049b2adf091e6693ecc947e62ffbb695fc70d8d1b8fc9aefc9051c0441e2a9c0cf1106f714c9ca1b802fabd13d234baf8784a09e8_0","lines":"    return template.render(review=review)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.pass-body.pass-body-fn","path":"insecure_generated_code_362.py","start":{"line":9,"col":1,"offset":128},"end":{"line":10,"col":9,"offset":162},"extra":{"metavars":{"$X":{"start":{"line":9,"col":5,"offset":132},"end":{"line":9,"col":18,"offset":145},"abstract_content":"process_alert"}},"message":"`pass` is the body of function process_alert. Consider removing this or raise NotImplementedError() if this is a TODO","metadata":{"category":"best-practice","technology":["python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.pass-body.pass-body-fn","shortlink":"https://sg.run/ydWR","semgrep.dev":{"rule":{"origin":"community","r_id":9568,"rule_id":"OrU3yZ","rv_id":946257,"url":"https://semgrep.dev/playground/r/5PT9Ogz/python.lang.best-practice.pass-body.pass-body-fn","version_id":"5PT9Ogz"}}},"severity":"WARNING","fingerprint":"d954483a8c420b9c30d700353e316849e94a031d3924ce3188bb90e6105ed8c202c10306cf2d49fe7a24eddc51022e2f8ad6393682c50fd76056f5886b262ff6_0","lines":"def process_alert(alert):\n    pass","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B113","path":"insecure_generated_code_362.py","start":{"line":13,"col":12,"offset":198},"end":{"line":13,"col":29,"offset":215},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$METHOD":{"start":{"line":13,"col":21,"offset":207},"end":{"line":13,"col":24,"offset":210},"abstract_content":"get"}},"message":"The application was found using the `requests` module without configuring a timeout value for\nconnections. This could lead to uncontrolled resource consumption where the application could\nrun out of\nsocket descriptors, effectively causing a Denial of Service (DoS).\n\nTo remediate this issue, pass in a `timeout=` argument to each `requests` call.\n\nExample using a timeout for an HTTP GET request:\n```\n# Issue a GET request to https://example.com with a timeout of 10 seconds\nresponse = requests.get('https://example.com', timeout=10)\n# Work with the response object\n# ...\n```\n\nFor more information on using the requests module see:\n- https://requests.readthedocs.io/en/latest/api/\n","metadata":{"cwe":"CWE-400","category":"security","shortDescription":"Uncontrolled resource consumption","owasp":["A6:2017-Security Misconfiguration","A05:2021-Security Misconfiguration"],"security-severity":"Medium","primary_identifier":"bandit.B113","secondary_identifiers":[{"name":"Bandit Test ID B113","type":"bandit_test_id","value":"B113"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B113","shortlink":"https://sg.run/PoEq","semgrep.dev":{"rule":{"origin":"community","r_id":47601,"rule_id":"OrULKb","rv_id":920124,"url":"https://semgrep.dev/playground/r/o5TK1Z7/gitlab.bandit.B113","version_id":"o5TK1Z7"}}},"severity":"WARNING","fingerprint":"25282e2fd1aaf78c204682bf43f6477d9064959f8c1316346a73f4a2aa32821b414a7e21e76358d44b09718c0be19b810bf6779cb843e865dba95700fe662b72_0","lines":"    resp = requests.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-raise-for-status.use-raise-for-status","path":"insecure_generated_code_362.py","start":{"line":13,"col":12,"offset":198},"end":{"line":13,"col":29,"offset":215},"extra":{"metavars":{},"message":"There's an HTTP request made with requests, but the raise_for_status() utility method isn't used. This can result in request errors going unnoticed and your code behaving in unexpected ways, such as if your authorization API returns a 500 error while you're only checking for a 401.","metadata":{"references":["https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status"],"category":"best-practice","technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-raise-for-status.use-raise-for-status","shortlink":"https://sg.run/J3Xw","semgrep.dev":{"rule":{"origin":"community","r_id":9690,"rule_id":"DbUWd2","rv_id":946440,"url":"https://semgrep.dev/playground/r/kbTYkXK/python.requests.best-practice.use-raise-for-status.use-raise-for-status","version_id":"kbTYkXK"}}},"severity":"WARNING","fingerprint":"7ccbc717b916f72606d1e77d594a5cc318df6fa9021924d3785e48735e372e5ae36e5257a26c02bcdc5ff58afff4a8ab340219e56df7c5c5e66c2cd35c9f9dc1_0","lines":"    resp = requests.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-timeout.use-timeout","path":"insecure_generated_code_362.py","start":{"line":13,"col":12,"offset":198},"end":{"line":13,"col":29,"offset":215},"extra":{"metavars":{},"message":"Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.","fix":"requests.get(url, timeout=30)","metadata":{"category":"best-practice","references":["https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts","https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts"],"technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-timeout.use-timeout","shortlink":"https://sg.run/R8kO","semgrep.dev":{"rule":{"origin":"community","r_id":9693,"rule_id":"KxU42G","rv_id":946443,"url":"https://semgrep.dev/playground/r/O9TX3Yn/python.requests.best-practice.use-timeout.use-timeout","version_id":"O9TX3Yn"}}},"severity":"WARNING","fingerprint":"6b5c482ea47114645c89e759485db664cba1e7cd23d1645cd68d441b7ffb35cb469e53c09eb48c0d9a07264d65229a69c8490786bc04760356b1fa989c639df0_0","lines":"    resp = requests.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_364.py","start":{"line":13,"col":16,"offset":329},"end":{"line":20,"col":49,"offset":878},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"f3b0127bf3b761b9b75409ff79da08738a02eef452b57f948e964fcfe75c1618b0354bfa3f107883b5d10a1fd0da97c70c7bd4963dad559b675d41f4f7e2fa9c_0","lines":"        return render_template_string(\"<h1>Profile</h1>\"\n                                      \"<form method='POST' enctype='multipart/form-data'>\"\n                                      \"    <input name='name'>\"\n                                      \"    <textarea name='bio'></textarea>\"\n                                      \"    <input name='location'>\"\n                                      \"    <input type='file' name='image'>\"\n                                      \"    <button type='submit'>Submit</button>\"\n                                      \"</form>\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_365.py","start":{"line":12,"col":10,"offset":297},"end":{"line":12,"col":79,"offset":366},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"bd957ad11008bd8e3a3985e78c7639436273195fa41947573926d6d53021b581b9ac05a4bfc79751501d2f167c4c62ad3d29dbb3ac6265a40688f4a8f94cd952_0","lines":"  return render_template_string(template.render(query=query, recipes=recipes))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_367.py","start":{"line":10,"col":12,"offset":279},"end":{"line":10,"col":46,"offset":313},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":10,"col":12,"offset":279},"end":{"line":10,"col":20,"offset":287},"abstract_content":"template","propagated_value":{"svalue_start":{"line":9,"col":16,"offset":217},"svalue_end":{"line":9,"col":66,"offset":267},"svalue_abstract_content":"Template(\"<p>{{ question }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"58b3fef49263f9a2b5c81de9579854d391b236b0d1c519e7676822a726378835a89bfe89f7cc7159172b3d1a1db2b79d29d63e4b30d1ec2ea321e3763fb7d147_0","lines":"    return template.render(question=question)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.insecure-deserialization.insecure-deserialization","path":"insecure_generated_code_368.py","start":{"line":10,"col":18,"offset":225},"end":{"line":10,"col":36,"offset":243},"extra":{"metavars":{"$X":{"start":{"line":7,"col":5,"offset":121},"end":{"line":7,"col":18,"offset":134},"abstract_content":"coach_profile"}},"message":"Detected the use of an insecure deserialization library in a Flask route. These libraries are prone to code execution vulnerabilities. Ensure user data does not enter this function. To fix this, try to avoid serializing whole objects. Consider instead using a serializer such as JSON.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.flask.security.insecure-deserialization.insecure-deserialization","shortlink":"https://sg.run/N45z","semgrep.dev":{"rule":{"origin":"community","r_id":9527,"rule_id":"d8UjBO","rv_id":946232,"url":"https://semgrep.dev/playground/r/1QToKqY/python.flask.security.insecure-deserialization.insecure-deserialization","version_id":"1QToKqY"}}},"severity":"ERROR","fingerprint":"5a315e1c7bba878a6d6289b15e5e99ff819ace32cb26c3e30e6c476e09df0ff97312315a08e0b2ab600624b8848fd955176ae15ef95dce0b7c69a397a442d6b4_0","lines":"        loaded = yaml.load(message)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.deserialization.tainted-pyyaml-flask.tainted-pyyaml-flask","path":"insecure_generated_code_368.py","start":{"line":10,"col":28,"offset":235},"end":{"line":10,"col":35,"offset":242},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"load"},"$FUNC":{"start":{"line":9,"col":27,"offset":197},"end":{"line":9,"col":35,"offset":205},"abstract_content":"get_json"},"$SINK":{"start":{"line":10,"col":28,"offset":235},"end":{"line":10,"col":35,"offset":242},"abstract_content":"message","propagated_value":{"svalue_start":{"line":9,"col":19,"offset":189},"svalue_end":{"line":9,"col":37,"offset":207},"svalue_abstract_content":"request.get_json()"}}},"message":"The application may convert user-controlled data into an object, which can lead to an insecure deserialization vulnerability. An attacker can create a malicious serialized object, pass it to the application, and take advantage of the deserialization process to perform Denial-of-service (DoS), Remote code execution (RCE), or bypass access control measures. PyYAML's `yaml` module is as powerful as `pickle` and so may call auny Python function. It is recommended to secure your application by using `yaml.SafeLoader` or `yaml.CSafeLoader`.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Unsafe Deserialization in Flask","functional-categories":["deserialization::sink::load-object::pyyaml","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::url-path-params::flask","web::source::url-query-string::flask"],"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"references":["https://cwe.mitre.org/data/definitions/502.html","https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation","https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html","https://nvd.nist.gov/vuln/detail/CVE-2017-18342","https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures","https://portswigger.net/web-security/deserialization"],"technology":["deserialization","flask","flask-wtf","pyyaml","web","wtforms","yaml"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.flask.deserialization.tainted-pyyaml-flask.tainted-pyyaml-flask","shortlink":"https://sg.run/4YDg","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":44944,"rule_id":"lBU3yN","rv_id":1042246,"url":"https://semgrep.dev/playground/r/w8Tnkp5/python.flask.deserialization.tainted-pyyaml-flask.tainted-pyyaml-flask","version_id":"w8Tnkp5"}}},"severity":"ERROR","fingerprint":"07ad655faabc685298eb4d36fb090004d382bdcc5e7dfe2dbf9183cf84912fe62ff7b745362fcbcdade0b0946d982da80e2ad15c011fd5d636d92deb8be7093c_0","lines":"        loaded = yaml.load(message)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_368.py","start":{"line":9,"col":19,"offset":189},"end":{"line":9,"col":37,"offset":207}},"request.get_json()"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_368.py","start":{"line":9,"col":9,"offset":179},"end":{"line":9,"col":16,"offset":186}},"content":"message"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_368.py","start":{"line":10,"col":28,"offset":235},"end":{"line":10,"col":35,"offset":242}},"message"]]},"engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_369.py","start":{"line":4,"col":10,"offset":76},"end":{"line":4,"col":29,"offset":95},"extra":{"metavars":{"$FILE":{"start":{"line":4,"col":15,"offset":81},"end":{"line":4,"col":28,"offset":94},"abstract_content":"template_name"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"22b509872b10cf1857db0db45baedc13a9852c1e1206de8158d80b93c3dd804da5d095f968d9602747d2565585f851a7ff6666a93d629f46759b524c6a0a2f62_0","lines":"    with open(template_name) as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_369.py","start":{"line":9,"col":12,"offset":195},"end":{"line":9,"col":31,"offset":214},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":9,"col":12,"offset":195},"end":{"line":9,"col":13,"offset":196},"abstract_content":"t","propagated_value":{"svalue_start":{"line":7,"col":9,"offset":143},"svalue_end":{"line":7,"col":48,"offset":182},"svalue_abstract_content":"Template(template_str autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"f9ec5cb5c50cfbb44545f2a4fb49cb1a5e5a85e47d4dd9bb1829955135c56438889af9dc2e741fbfdfbaa661ddd6a65cb6336efa3106037c121a080ba2905a6b_0","lines":"    return t.render(**context)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_37.py","start":{"line":5,"col":12,"offset":233},"end":{"line":5,"col":64,"offset":285},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":233},"end":{"line":5,"col":20,"offset":241},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":93},"svalue_end":{"line":4,"col":144,"offset":221},"svalue_abstract_content":"Template(\"{{ course_assignment.title }} {{ course_assignment.description }} {{ course_assignment.course_id }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"4a335dddf2b1be50c21085b8965ef22785454fe57df1b15f76af82295590792f559690acda831bf76dc6747705a83d46000ec4be3acc62d67ef240807271df27_0","lines":"    return template.render(course_assignment=course_assignment)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_370.py","start":{"line":6,"col":12,"offset":114},"end":{"line":6,"col":37,"offset":139},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":114},"end":{"line":6,"col":20,"offset":122},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":46},"svalue_end":{"line":4,"col":71,"offset":101},"svalue_abstract_content":"jinja2.Template(\"<h1>{{ name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"9b0c459349a8e2bb81ec6e6d91ba7154994719ce793abe011fe4a518f504ad844314d2edab4091acfd62d4ec84f870ce3afc6dbaa0438aa187a5f7415bfc3efd_0","lines":"    return template.render(name=url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","path":"insecure_generated_code_372.py","start":{"line":17,"col":14,"offset":415},"end":{"line":17,"col":19,"offset":420},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":9,"col":21,"offset":226},"end":{"line":9,"col":25,"offset":230},"abstract_content":"form"},"$FUNC":{"start":{"line":17,"col":8,"offset":409},"end":{"line":17,"col":13,"offset":414},"abstract_content":"chmod"},"$SINK":{"start":{"line":17,"col":14,"offset":415},"end":{"line":17,"col":19,"offset":420},"abstract_content":"image","propagated_value":{"svalue_start":{"line":9,"col":13,"offset":218},"svalue_end":{"line":9,"col":38,"offset":243},"svalue_abstract_content":"request.form.get('image')"}}},"message":"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. In Flask apps, consider using the Werkzeug util `werkzeug.utils.secure_filename()` to sanitize paths and filenames.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Path Traversal with Flask","functional-categories":["file::sink::file-access::fileinput","file::sink::file-access::io","file::sink::file-access::linecache","file::sink::file-access::os","file::sink::file-access::shutil","file::sink::file-access::stdlib","file::sink::file-access::stdlib2","file::sink::file-access::stdlib3","file::sink::file-access::tempfile","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::url-path-params::flask","web::source::url-query-string::flask"],"owasp":["A01:2021 - Broken Access Control","A05:2017 - Broken Access Control"],"references":["https://flask.palletsprojects.com/en/2.3.x/patterns/fileuploads/","https://owasp.org/Top10/A01_2021-Broken_Access_Control","https://owasp.org/www-community/attacks/Path_Traversal","https://portswigger.net/web-security/file-path-traversal","https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.utils.secure_filename"],"technology":["codecs","fileaccess","fileinput","flask","flask-wtf","io","linecache","os","shutil","stdlib","stdlib2","stdlib3","tempfile","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","shortlink":"https://sg.run/6J4gW","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116515,"rule_id":"2ZUzRLQ","rv_id":1042253,"url":"https://semgrep.dev/playground/r/nWTPn9A/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","version_id":"nWTPn9A"}}},"severity":"ERROR","fingerprint":"4858762e11ce526f799c0da8c1417837faff804114cedf5255a15ef80cdc5ecfed97e24e0f2c0ebb6899060a30fb5f3135b4a0c86f51e17b89136e7d171525c8_0","lines":"    os.chmod(image, 0o600)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_372.py","start":{"line":9,"col":13,"offset":218},"end":{"line":9,"col":38,"offset":243}},"request.form.get('image')"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_372.py","start":{"line":9,"col":5,"offset":210},"end":{"line":9,"col":10,"offset":215}},"content":"image"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_372.py","start":{"line":17,"col":14,"offset":415},"end":{"line":17,"col":19,"offset":420}},"image"]]},"engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_377.py","start":{"line":15,"col":14,"offset":410},"end":{"line":15,"col":41,"offset":437},"extra":{"metavars":{"$FILE":{"start":{"line":15,"col":19,"offset":415},"end":{"line":15,"col":40,"offset":436},"abstract_content":"updated_metadata_path","propagated_value":{"svalue_start":{"line":14,"col":33,"offset":362},"svalue_end":{"line":14,"col":67,"offset":396},"svalue_abstract_content":"os.path.join(dst\"metadata.json\")"}}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"c4f82f246d5a80a638a3ae1f26cfa7006c6eb31b07a5c9c1589e003f2288b40eafc0c0f4b540d37ef450fea17fd0e27e4ff3cee42d187508ed780df1fcf3c1dd_0","lines":"        with open(updated_metadata_path) as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_377.py","start":{"line":19,"col":14,"offset":575},"end":{"line":19,"col":38,"offset":599},"extra":{"metavars":{"$FILE":{"start":{"line":19,"col":19,"offset":580},"end":{"line":19,"col":32,"offset":593},"abstract_content":"metadata_path","propagated_value":{"svalue_start":{"line":18,"col":25,"offset":513},"svalue_end":{"line":18,"col":73,"offset":561},"svalue_abstract_content":"os.path.join(\"books\"book_dir\"metadata.json\")"}},"$MODE":{"start":{"line":19,"col":34,"offset":595},"end":{"line":19,"col":37,"offset":598},"abstract_content":"\"w\""}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"796f378bdda449907fe9c0d4dd2c67bed55746e602dcff65498dbfdf4d944ebd4eb988a38cc8ea686935cc8ffc19d87b3b18ddd94825fab03baec5a0bd2ca417_0","lines":"        with open(metadata_path, \"w\") as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_379.py","start":{"line":6,"col":12,"offset":171},"end":{"line":6,"col":54,"offset":213},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":171},"end":{"line":6,"col":20,"offset":179},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":83},"svalue_end":{"line":4,"col":91,"offset":158},"svalue_abstract_content":"Template(\"<h1>Search Query</h1><p>{{ search_query }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"955a79e8c6a77ad596fb6544a7ba1e1bfc7ad45172b089067f6b43491c2d6c6d3059c4c9853834e7afe093956e9ca902d3f62385b3471c796fa79d5d87c0b4bb_0","lines":"    return template.render(search_query=search_query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_38.py","start":{"line":5,"col":12,"offset":180},"end":{"line":5,"col":70,"offset":238},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":180},"end":{"line":5,"col":20,"offset":188},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":99},"svalue_end":{"line":4,"col":85,"offset":168},"svalue_abstract_content":"Template(\"<h1>{{ application_artifact.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"a18dd8078cd0879fd260c24b934c4c9a47e32b82b12d0e50cf0ba3b579cd8209af3f96863285a027b659920169e44767d8b04cc2d9114e8b028be3856d0e2f70_0","lines":"    return template.render(application_artifact=application_artifact)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_380.py","start":{"line":5,"col":12,"offset":182},"end":{"line":5,"col":60,"offset":230},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":182},"end":{"line":5,"col":20,"offset":190},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":89},"svalue_end":{"line":4,"col":97,"offset":170},"svalue_abstract_content":"Template(\"<h1>Return Exchange</h1><p>{{ return_exchange }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"135a906a1687394000f30d4d6d8ca685f0d558d1c5ee97886640d72435cae08736bf1167908ee50c33f79fdcf4c518f2f00bb16f4524c139a62a22f8b38fb0f3_0","lines":"    return template.render(return_exchange=return_exchange)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_381.py","start":{"line":5,"col":12,"offset":144},"end":{"line":5,"col":46,"offset":178},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":144},"end":{"line":5,"col":20,"offset":152},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":73,"offset":132},"svalue_abstract_content":"Template(\"<h1>{{ activity.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"ce977ac782a2e1fd160d412a40b646e11bac400b71d4a604070fa96ca3b16feff9230808bb0871d2685125377e86582ebb696cf09c6d2a4680fe1c9135000bbf_0","lines":"    return template.render(activity=activity)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_383.py","start":{"line":5,"col":12,"offset":139},"end":{"line":5,"col":38,"offset":165},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":139},"end":{"line":5,"col":20,"offset":147},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":67},"svalue_end":{"line":4,"col":76,"offset":127},"svalue_abstract_content":"Template(\"<h1>Post: {{ post.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"46f67a73bf927a82f57fcd9194ef8f250f34208f6fe89b7fd354d5cafb91a6ebd6de57997ca618de22d5109a1d1ccdd22596b7200d19602460b8ad26c9ba6c65_0","lines":"    return template.render(post=post)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_384.py","start":{"line":5,"col":12,"offset":231},"end":{"line":5,"col":40,"offset":259},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":231},"end":{"line":5,"col":20,"offset":239},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":160,"offset":219},"svalue_abstract_content":"Template(\"<video src=\\\"{{ video.url }}\\\" width=\\\"{{ video.width }}\\\" height=\\\"{{ video.height }}\\\" autoplay=\\\"auto\\\"></video>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"e53f7516eac11d58bc4dcdae68305b3a7fc3be7e09c4088d6738486ef123b25f85b5fc33ca413aa53327235b9bda04ec0c0b93511f26194bf7b8a892018a6c33_0","lines":"    return template.render(video=video)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_385.py","start":{"line":5,"col":12,"offset":152},"end":{"line":5,"col":42,"offset":182},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":152},"end":{"line":5,"col":20,"offset":160},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":71},"svalue_end":{"line":4,"col":85,"offset":140},"svalue_abstract_content":"Template(\"<h1>Report</h1><p>{{ report.title }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"fe30a6f2fbac0f0fee956ab48350d4559e24c6bbb0fff454533da2b314191cd4de775e0b50d6203bf95d41fc695728d8242f453eaf022522c8e3a7e864e412b3_0","lines":"    return template.render(report=report)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_386.py","start":{"line":4,"col":10,"offset":45},"end":{"line":4,"col":33,"offset":68},"extra":{"metavars":{"$FILE":{"start":{"line":4,"col":15,"offset":50},"end":{"line":4,"col":27,"offset":62},"abstract_content":"'scores.txt'"},"$MODE":{"start":{"line":4,"col":29,"offset":64},"end":{"line":4,"col":32,"offset":67},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"51941fea4953b2a5ca0dd9318f6d89577b8ea8001205f2e8482893d248f69a592c40586b18706a78a7121d9d9a2772725b517cc0756b780ced5e6bfa297719a3_0","lines":"    with open('scores.txt', 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_387.py","start":{"line":5,"col":12,"offset":186},"end":{"line":5,"col":74,"offset":248},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":186},"end":{"line":5,"col":20,"offset":194},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":103},"svalue_end":{"line":4,"col":87,"offset":174},"svalue_abstract_content":"Template(\"<h1>{{ application_dependency.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"d63f910f317cb4e73678bdfb4fd35f02718826b1ddbfcac2cbef20e1692e2354546706db116006afc23cf918d30473a0ca0b56d27c8568a7485f461457695a93_0","lines":"    return template.render(application_dependency=application_dependency)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_388.py","start":{"line":12,"col":12,"offset":252},"end":{"line":12,"col":40,"offset":280},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"0bd21ab161e09470ce4b95b0ef8ab60bd2e51827beffbd2ab93958b4badc7a4a1a9530126ddc494c72f20da4754092b0ec75511bcaaf3b956fc9f127c8ae151b_0","lines":"    return render_template_string(html)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_390.py","start":{"line":12,"col":12,"offset":261},"end":{"line":15,"col":9,"offset":374},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"618b6b8d3b962aee16ea183b22cf7b8e8341d54688bb262adde632fd9adaa7478a39501ddbfbe4d5cbcc56f11bc26afb3195d8cf24c884dc5e7fe447d9b9b9eb_0","lines":"    return render_template_string(f\"\"\"\n    <h1>Thanks for subscribing!</h1>\n    <p><a href=\"/\">Go back home</a></p>\n    \"\"\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B404","path":"insecure_generated_code_392.py","start":{"line":2,"col":1,"offset":15},"end":{"line":2,"col":18,"offset":32},"extra":{"metavars":{},"message":"Consider possible security implications associated with subprocess module.\n","metadata":{"cwe":"CWE-78","owasp":"A8:2017-Insecure Deserialization","shortDescription":"Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","primary_identifier":"bandit.B404","secondary_identifiers":[{"name":"Bandit Test ID B404","type":"bandit_test_id","value":"B404"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B404","shortlink":"https://sg.run/lj3o","semgrep.dev":{"rule":{"origin":"community","r_id":11557,"rule_id":"4bUz3p","rv_id":835419,"url":"https://semgrep.dev/playground/r/A8T3lxl/gitlab.bandit.B404","version_id":"A8T3lxl"}}},"severity":"WARNING","fingerprint":"143a061d16f528ab7837e981168f03e3699b043712fb62f638b437f20a721986b66940ed189e05037bb2ac918e44d6931ac95129c86f21cb64aa4199cd83f274_0","lines":"import subprocess","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B603","path":"insecure_generated_code_392.py","start":{"line":11,"col":5,"offset":165},"end":{"line":11,"col":34,"offset":194},"extra":{"metavars":{"$FUNC":{"start":{"line":11,"col":16,"offset":176},"end":{"line":11,"col":20,"offset":180},"abstract_content":"call"},"$ARG":{"start":{"line":11,"col":21,"offset":181},"end":{"line":11,"col":33,"offset":193},"abstract_content":"'./setup.sh'"}},"message":"Python possesses many mechanisms to invoke an external executable. However,\ndoing so may present a security issue if appropriate care is not taken to\nsanitize any user provided or variable input. This plugin test is part of a\nfamily of tests built to check for process spawning and warn appropriately.\nSpecifically, this test looks for the spawning of a subprocess without the\nuse of a command shell. This type of subprocess invocation is not\nvulnerable to shell injection attacks, but care should still be taken to\nensure validity of input.\n","metadata":{"cwe":"CWE-78","owasp":["A1:2017-Injection","A03:2021-Injection"],"shortDescription":"Improper neutralization of special elements used in an OS Command ('OS Command Injection')","security-severity":"High","category":"security","primary_identifier":"bandit.B603","secondary_identifiers":[{"name":"Bandit Test ID B603","type":"bandit_test_id","value":"B603"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B603","shortlink":"https://sg.run/rABJ","semgrep.dev":{"rule":{"origin":"community","r_id":11569,"rule_id":"qNUoqN","rv_id":920115,"url":"https://semgrep.dev/playground/r/BjTKL1R/gitlab.bandit.B603","version_id":"BjTKL1R"}}},"severity":"WARNING","fingerprint":"335c25aec0362b9303e246059dbe23d628a62e829a23e3075bcb9f6ec93b92c9c24e68314bf7d4307c2fddedf375cd10839315dbca26519860cf8cdf83f96c87_0","lines":"    subprocess.call('./setup.sh')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.correctness.unchecked-returns.unchecked-subprocess-call","path":"insecure_generated_code_392.py","start":{"line":11,"col":16,"offset":176},"end":{"line":11,"col":20,"offset":180},"extra":{"metavars":{"$CALL":{"start":{"line":11,"col":16,"offset":176},"end":{"line":11,"col":20,"offset":180},"abstract_content":"call"}},"message":"This is not checking the return value of this subprocess call; if it fails no exception will be raised. Consider subprocess.check_call() instead","fix":"check_call","metadata":{"references":["https://docs.python.org/3/library/subprocess.html#subprocess.check_call"],"category":"correctness","technology":["python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.correctness.unchecked-returns.unchecked-subprocess-call","shortlink":"https://sg.run/J9Ww","semgrep.dev":{"rule":{"origin":"community","r_id":9602,"rule_id":"DbUp82","rv_id":946304,"url":"https://semgrep.dev/playground/r/ExTg2D9/python.lang.correctness.unchecked-returns.unchecked-subprocess-call","version_id":"ExTg2D9"}}},"severity":"WARNING","fingerprint":"9e27dc1f5a493f8cf35c7ef76ca894572dc3163b28196138e43067b5e1d18f28944769a725cbfea7dc8b4a5ac55e0f88d9201ed73a77cf20f6c5bbba76163980_0","lines":"    subprocess.call('./setup.sh')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B603","path":"insecure_generated_code_392.py","start":{"line":14,"col":5,"offset":217},"end":{"line":14,"col":37,"offset":249},"extra":{"metavars":{"$FUNC":{"start":{"line":14,"col":16,"offset":228},"end":{"line":14,"col":20,"offset":232},"abstract_content":"call"},"$ARG":{"start":{"line":14,"col":21,"offset":233},"end":{"line":14,"col":36,"offset":248},"abstract_content":"'./runtests.sh'"}},"message":"Python possesses many mechanisms to invoke an external executable. However,\ndoing so may present a security issue if appropriate care is not taken to\nsanitize any user provided or variable input. This plugin test is part of a\nfamily of tests built to check for process spawning and warn appropriately.\nSpecifically, this test looks for the spawning of a subprocess without the\nuse of a command shell. This type of subprocess invocation is not\nvulnerable to shell injection attacks, but care should still be taken to\nensure validity of input.\n","metadata":{"cwe":"CWE-78","owasp":["A1:2017-Injection","A03:2021-Injection"],"shortDescription":"Improper neutralization of special elements used in an OS Command ('OS Command Injection')","security-severity":"High","category":"security","primary_identifier":"bandit.B603","secondary_identifiers":[{"name":"Bandit Test ID B603","type":"bandit_test_id","value":"B603"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B603","shortlink":"https://sg.run/rABJ","semgrep.dev":{"rule":{"origin":"community","r_id":11569,"rule_id":"qNUoqN","rv_id":920115,"url":"https://semgrep.dev/playground/r/BjTKL1R/gitlab.bandit.B603","version_id":"BjTKL1R"}}},"severity":"WARNING","fingerprint":"4b829ee2e2410f131382db3fe90e238c40aee914567dc83fb814ecff2d8e830691f19f6ed76be2d2efe9013e68508e55238d1cf33b5ab67000e3464579a5e8b5_0","lines":"    subprocess.call('./runtests.sh')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.correctness.unchecked-returns.unchecked-subprocess-call","path":"insecure_generated_code_392.py","start":{"line":14,"col":16,"offset":228},"end":{"line":14,"col":20,"offset":232},"extra":{"metavars":{"$CALL":{"start":{"line":14,"col":16,"offset":228},"end":{"line":14,"col":20,"offset":232},"abstract_content":"call"}},"message":"This is not checking the return value of this subprocess call; if it fails no exception will be raised. Consider subprocess.check_call() instead","fix":"check_call","metadata":{"references":["https://docs.python.org/3/library/subprocess.html#subprocess.check_call"],"category":"correctness","technology":["python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.correctness.unchecked-returns.unchecked-subprocess-call","shortlink":"https://sg.run/J9Ww","semgrep.dev":{"rule":{"origin":"community","r_id":9602,"rule_id":"DbUp82","rv_id":946304,"url":"https://semgrep.dev/playground/r/ExTg2D9/python.lang.correctness.unchecked-returns.unchecked-subprocess-call","version_id":"ExTg2D9"}}},"severity":"WARNING","fingerprint":"9e27dc1f5a493f8cf35c7ef76ca894572dc3163b28196138e43067b5e1d18f28944769a725cbfea7dc8b4a5ac55e0f88d9201ed73a77cf20f6c5bbba76163980_1","lines":"    subprocess.call('./runtests.sh')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_395.py","start":{"line":5,"col":12,"offset":120},"end":{"line":5,"col":38,"offset":146},"extra":{"metavars":{"$ENV":{"start":{"line":4,"col":16,"offset":68},"end":{"line":4,"col":28,"offset":80},"abstract_content":"my_jinja_env"},"$TEMPLATE":{"start":{"line":5,"col":12,"offset":120},"end":{"line":5,"col":20,"offset":128},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":68},"svalue_end":{"line":4,"col":56,"offset":108},"svalue_abstract_content":"my_jinja_env.get_template(template_name)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"7ad149f23e70ba418bfc2edb9234c92e8eda82079f37400ea9edf95a7dca0e888973dd657113f3f22ff0fbb041de87ccacd01384c3045383b22d3e35157afa9f_0","lines":"    return template.render(**context)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_396.py","start":{"line":9,"col":12,"offset":317},"end":{"line":9,"col":57,"offset":362},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":9,"col":12,"offset":317},"end":{"line":9,"col":20,"offset":325},"abstract_content":"template","propagated_value":{"svalue_start":{"line":8,"col":16,"offset":266},"svalue_end":{"line":8,"col":55,"offset":305},"svalue_abstract_content":"Template(template_str autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"bf2e3cfd82917d16723d6e6441a17d2ee8f8c6a0d170c661b3e0222c2b900dafcf862fcb83ec0491dd2b9d6e3e00649a689026fdc9384b9c9f98e1fb0fc5a097_0","lines":"    return template.render(query=query, results=results)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"insecure_generated_code_398.py","start":{"line":9,"col":12,"offset":205},"end":{"line":9,"col":56,"offset":249},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":20,"offset":141},"end":{"line":7,"col":24,"offset":145},"abstract_content":"args"},"$HTMLSTR":{"start":{"line":9,"col":14,"offset":207},"end":{"line":9,"col":31,"offset":224},"abstract_content":"<p>Submitted by: "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"2764602040d0e108d3aa52b7743998450b11eacbf1e752a3dddac792a3ed962195d75c734123b8afa4d9c635f9cc37d4b7d58cedc07797d3ee68d8e3003d01e7_0","lines":"    html = f\"<p>Submitted by: {name}</p> <p>{joke}</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_398.py","start":{"line":7,"col":12,"offset":133},"end":{"line":7,"col":24,"offset":145}},"request.args"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_398.py","start":{"line":7,"col":5,"offset":126},"end":{"line":7,"col":9,"offset":130}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_398.py","start":{"line":9,"col":12,"offset":205},"end":{"line":9,"col":56,"offset":249}},"f\"<p>Submitted by: {name}</p> <p>{joke}</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"insecure_generated_code_398.py","start":{"line":9,"col":12,"offset":205},"end":{"line":9,"col":56,"offset":249},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":20,"offset":141},"end":{"line":7,"col":24,"offset":145},"abstract_content":"args"},"$HTMLSTR":{"start":{"line":9,"col":14,"offset":207},"end":{"line":9,"col":31,"offset":224},"abstract_content":"<p>Submitted by: "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"d12c6ddb6faa488c6b4956cfee0f2e92cccaf6a7c4338fd50065af9cb2a7a480940bce5cb2cf2caa3247b6a4a2dbdcb5e658ea80bd704170846903309b285548_0","lines":"    html = f\"<p>Submitted by: {name}</p> <p>{joke}</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_398.py","start":{"line":7,"col":12,"offset":133},"end":{"line":7,"col":24,"offset":145}},"request.args"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_398.py","start":{"line":7,"col":5,"offset":126},"end":{"line":7,"col":9,"offset":130}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_398.py","start":{"line":9,"col":12,"offset":205},"end":{"line":9,"col":56,"offset":249}},"f\"<p>Submitted by: {name}</p> <p>{joke}</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","path":"insecure_generated_code_398.py","start":{"line":10,"col":14,"offset":263},"end":{"line":10,"col":18,"offset":267},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":7,"col":20,"offset":141},"end":{"line":7,"col":24,"offset":145},"abstract_content":"args"},"$FUNC":{"start":{"line":10,"col":8,"offset":257},"end":{"line":10,"col":13,"offset":262},"abstract_content":"chmod"},"$SINK":{"start":{"line":10,"col":14,"offset":263},"end":{"line":10,"col":18,"offset":267},"abstract_content":"html","propagated_value":{"svalue_start":{"line":9,"col":12,"offset":205},"svalue_end":{"line":9,"col":56,"offset":249},"svalue_abstract_content":"f\"<p>Submitted by: {name}</p> <p>{joke}</p>\""}}},"message":"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. In Flask apps, consider using the Werkzeug util `werkzeug.utils.secure_filename()` to sanitize paths and filenames.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Path Traversal with Flask","functional-categories":["file::sink::file-access::fileinput","file::sink::file-access::io","file::sink::file-access::linecache","file::sink::file-access::os","file::sink::file-access::shutil","file::sink::file-access::stdlib","file::sink::file-access::stdlib2","file::sink::file-access::stdlib3","file::sink::file-access::tempfile","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::url-path-params::flask","web::source::url-query-string::flask"],"owasp":["A01:2021 - Broken Access Control","A05:2017 - Broken Access Control"],"references":["https://flask.palletsprojects.com/en/2.3.x/patterns/fileuploads/","https://owasp.org/Top10/A01_2021-Broken_Access_Control","https://owasp.org/www-community/attacks/Path_Traversal","https://portswigger.net/web-security/file-path-traversal","https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.utils.secure_filename"],"technology":["codecs","fileaccess","fileinput","flask","flask-wtf","io","linecache","os","shutil","stdlib","stdlib2","stdlib3","tempfile","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","shortlink":"https://sg.run/6J4gW","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116515,"rule_id":"2ZUzRLQ","rv_id":1042253,"url":"https://semgrep.dev/playground/r/nWTPn9A/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","version_id":"nWTPn9A"}}},"severity":"ERROR","fingerprint":"8e4fb48708616b08ce03a7db038014152e4c2308570d98d2fbd6a304f8ad5d21a6bd1ac4d8e428413ed86edc2f8654f5ac8e1bd45057520f7784802da2c45adb_0","lines":"    os.chmod(html, 0o600)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_398.py","start":{"line":7,"col":12,"offset":133},"end":{"line":7,"col":36,"offset":157}},"request.args.get(\"name\")"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_398.py","start":{"line":7,"col":5,"offset":126},"end":{"line":7,"col":9,"offset":130}},"content":"name"},{"location":{"path":"insecure_generated_code_398.py","start":{"line":9,"col":5,"offset":198},"end":{"line":9,"col":9,"offset":202}},"content":"html"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_398.py","start":{"line":10,"col":14,"offset":263},"end":{"line":10,"col":18,"offset":267}},"html"]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_4.py","start":{"line":15,"col":12,"offset":299},"end":{"line":15,"col":35,"offset":322},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":15,"col":12,"offset":299},"end":{"line":15,"col":13,"offset":300},"abstract_content":"t","propagated_value":{"svalue_start":{"line":14,"col":9,"offset":245},"svalue_end":{"line":14,"col":51,"offset":287},"svalue_abstract_content":"Template(recipe_template autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"d6c4f2262453d1068a946da105f6e8cca8a5ae41dd2b974d4faf94885b2b221ceaefec6bc25c2a8a31963c5e1e6c4c7ce0ba5fbe6c22f3a2c22fb694cb268529_0","lines":"    return t.render(recipe=recipe)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_40.py","start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":44,"offset":173},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":20,"offset":149},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":72,"offset":129},"svalue_abstract_content":"Template(\"<h1>{{ product.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"ab5961a7ab5ae2fb329d6d046c68e9db93771464073855554457f3d2a8367cf743fb01a92b312e04c15debd674449ea5ba1e56e908d05f416ab6bb5ca4d6bc89_0","lines":"    return template.render(product=product)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_400.py","start":{"line":10,"col":10,"offset":148},"end":{"line":10,"col":26,"offset":164},"extra":{"metavars":{"$FILE":{"start":{"line":10,"col":15,"offset":153},"end":{"line":10,"col":25,"offset":163},"abstract_content":"'data.txt'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"fd8a7e455fc41ecef0b6d0b09d625efbe117859031d4dfca6b14523f6578ee5b72d9b1128a4df74ed2b03ceb4f1b72aaf8a95072ab5eccb8285dd47b7c639767_0","lines":"    with open('data.txt') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"insecure_generated_code_400.py","start":{"line":15,"col":12,"offset":273},"end":{"line":15,"col":48,"offset":309},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":21,"offset":107},"end":{"line":7,"col":25,"offset":111},"abstract_content":"args"},"$HTMLSTR":{"start":{"line":15,"col":13,"offset":274},"end":{"line":15,"col":39,"offset":300},"abstract_content":"<h2>Results for '%s':</h2>"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"308c4ea090bd1ec93e2044d8d7068fb49075686772e900adf0dc69d3f9c412d27514ade9495e6222d568efae276a301e8a46771cb099c0ee2e58830e9000f65c_0","lines":"    html = \"<h2>Results for '%s':</h2>\" % query","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_400.py","start":{"line":7,"col":13,"offset":99},"end":{"line":7,"col":25,"offset":111}},"request.args"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_400.py","start":{"line":7,"col":5,"offset":91},"end":{"line":7,"col":10,"offset":96}},"content":"query"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_400.py","start":{"line":15,"col":12,"offset":273},"end":{"line":15,"col":48,"offset":309}},"\"<h2>Results for '%s':</h2>\" % query"]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"insecure_generated_code_400.py","start":{"line":15,"col":12,"offset":273},"end":{"line":15,"col":48,"offset":309},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":21,"offset":107},"end":{"line":7,"col":25,"offset":111},"abstract_content":"args"},"$HTMLSTR":{"start":{"line":15,"col":13,"offset":274},"end":{"line":15,"col":39,"offset":300},"abstract_content":"<h2>Results for '%s':</h2>"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"8dc6ce609fa36992259fdc0aaefa6527ffb8449642c74c147da66e4439f922a1c9d98a19c14b666556037d3a93e17c784c477f9ba76eb1d405f9ba835dd9f1bc_0","lines":"    html = \"<h2>Results for '%s':</h2>\" % query","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_400.py","start":{"line":7,"col":13,"offset":99},"end":{"line":7,"col":25,"offset":111}},"request.args"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_400.py","start":{"line":7,"col":5,"offset":91},"end":{"line":7,"col":10,"offset":96}},"content":"query"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_400.py","start":{"line":15,"col":12,"offset":273},"end":{"line":15,"col":48,"offset":309}},"\"<h2>Results for '%s':</h2>\" % query"]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","path":"insecure_generated_code_400.py","start":{"line":23,"col":5,"offset":420},"end":{"line":23,"col":16,"offset":431},"extra":{"metavars":{"$FUNC":{"start":{"line":7,"col":21,"offset":107},"end":{"line":7,"col":25,"offset":111},"abstract_content":"args"},"$X":{"start":{"line":23,"col":12,"offset":427},"end":{"line":23,"col":16,"offset":431},"abstract_content":"html"}},"message":"Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","shortlink":"https://sg.run/Zv6o","semgrep.dev":{"rule":{"origin":"community","r_id":9535,"rule_id":"QrUz49","rv_id":946207,"url":"https://semgrep.dev/playground/r/gETe1NK/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","version_id":"gETe1NK"}}},"severity":"WARNING","fingerprint":"af12a2809d4b400f05c2761052551617720f3ad28adabaabf9b8c10145e02f7a9e0db0225e7f152fe15254849850480f64eaae78d2e6d91e61e1617be775ee88_0","lines":"    return html","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_400.py","start":{"line":7,"col":13,"offset":99},"end":{"line":7,"col":34,"offset":120}},"request.args.get('q')"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_400.py","start":{"line":7,"col":5,"offset":91},"end":{"line":7,"col":10,"offset":96}},"content":"query"},{"location":{"path":"insecure_generated_code_400.py","start":{"line":15,"col":5,"offset":266},"end":{"line":15,"col":9,"offset":270}},"content":"html"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_400.py","start":{"line":23,"col":5,"offset":420},"end":{"line":23,"col":16,"offset":431}},"return html"]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.dangerous-template-string.dangerous-template-string","path":"insecure_generated_code_404.py","start":{"line":12,"col":5,"offset":302},"end":{"line":22,"col":61,"offset":672},"extra":{"metavars":{"$V":{"start":{"line":12,"col":5,"offset":302},"end":{"line":12,"col":13,"offset":310},"abstract_content":"template"},"$X":{"start":{"line":14,"col":19,"offset":365},"end":{"line":14,"col":23,"offset":369},"abstract_content":"name","propagated_value":{"svalue_start":{"line":7,"col":12,"offset":146},"svalue_end":{"line":7,"col":36,"offset":170},"svalue_abstract_content":"request.form.get(\"name\")"}}},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html","https://pequalsnp-team.github.io/cheatsheet/flask-jinja2-ssti"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.dangerous-template-string.dangerous-template-string","shortlink":"https://sg.run/b79E","semgrep.dev":{"rule":{"origin":"community","r_id":9526,"rule_id":"v8UnZJ","rv_id":946218,"url":"https://semgrep.dev/playground/r/DkTNpA8/python.flask.security.dangerous-template-string.dangerous-template-string","version_id":"DkTNpA8"}}},"severity":"ERROR","fingerprint":"10c7d393fccb18dbc208eadabcdc22b430a1cd03128db5e333ed3c3a1c384e6db930c2e249058a949a03b9d3cf05c82826d27629b1d72bbbf2fb8aa79e489179_0","lines":"    template = f\"\"\"\n    <h1>Resume Received</h1>\n    <p>Thank you {name} for submitting your resume. We have received it at {email} and will be in touch shortly.</p>\n    <p>Below is a preview of what you submitted:</p>\n    <p>Experience:</p>\n    <p>{experience}</p>\n    <p>Skills:</p>\n    <p>{skills}</p>\n    \"\"\"\n\n    return render_template_string(template, autoescape=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"insecure_generated_code_404.py","start":{"line":12,"col":16,"offset":313},"end":{"line":20,"col":8,"offset":610},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":20,"offset":154},"end":{"line":7,"col":24,"offset":158},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":12,"col":20,"offset":317},"end":{"line":14,"col":18,"offset":364},"abstract_content":"\n    <h1>Resume Received</h1>\n    <p>Thank you "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"3be5e05166d7a5ab543464c683ac8a210bca77a3a682271213946c800e03efc5598a656c3ebc43d0864a3483f596a35077b527dacb32987b75b22493abf77a7d_0","lines":"    template = f\"\"\"\n    <h1>Resume Received</h1>\n    <p>Thank you {name} for submitting your resume. We have received it at {email} and will be in touch shortly.</p>\n    <p>Below is a preview of what you submitted:</p>\n    <p>Experience:</p>\n    <p>{experience}</p>\n    <p>Skills:</p>\n    <p>{skills}</p>\n    \"\"\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_404.py","start":{"line":7,"col":12,"offset":146},"end":{"line":7,"col":24,"offset":158}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_404.py","start":{"line":7,"col":5,"offset":139},"end":{"line":7,"col":9,"offset":143}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_404.py","start":{"line":12,"col":16,"offset":313},"end":{"line":20,"col":8,"offset":610}},"f\"\"\"\n    <h1>Resume Received</h1>\n    <p>Thank you {name} for submitting your resume. We have received it at {email} and will be in touch shortly.</p>\n    <p>Below is a preview of what you submitted:</p>\n    <p>Experience:</p>\n    <p>{experience}</p>\n    <p>Skills:</p>\n    <p>{skills}</p>\n    \"\"\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"insecure_generated_code_404.py","start":{"line":12,"col":16,"offset":313},"end":{"line":20,"col":8,"offset":610},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":20,"offset":154},"end":{"line":7,"col":24,"offset":158},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":12,"col":20,"offset":317},"end":{"line":14,"col":18,"offset":364},"abstract_content":"\n    <h1>Resume Received</h1>\n    <p>Thank you "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"46ae1a00f930dfa56efa01e20c5e41d4281b89e1aad3c92315bc8641054a86e679cf0634fea527937efe13497a6d6d51aaf7fec3ad9b6f122106f98648b24663_0","lines":"    template = f\"\"\"\n    <h1>Resume Received</h1>\n    <p>Thank you {name} for submitting your resume. We have received it at {email} and will be in touch shortly.</p>\n    <p>Below is a preview of what you submitted:</p>\n    <p>Experience:</p>\n    <p>{experience}</p>\n    <p>Skills:</p>\n    <p>{skills}</p>\n    \"\"\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_404.py","start":{"line":7,"col":12,"offset":146},"end":{"line":7,"col":24,"offset":158}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_404.py","start":{"line":7,"col":5,"offset":139},"end":{"line":7,"col":9,"offset":143}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_404.py","start":{"line":12,"col":16,"offset":313},"end":{"line":20,"col":8,"offset":610}},"f\"\"\"\n    <h1>Resume Received</h1>\n    <p>Thank you {name} for submitting your resume. We have received it at {email} and will be in touch shortly.</p>\n    <p>Below is a preview of what you submitted:</p>\n    <p>Experience:</p>\n    <p>{experience}</p>\n    <p>Skills:</p>\n    <p>{skills}</p>\n    \"\"\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_404.py","start":{"line":22,"col":12,"offset":623},"end":{"line":22,"col":61,"offset":672},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"1c61011071fc8168855668cea8dada08a7201d48a6351cc946ff250b1c1bd69193c6a3d049dfeecd5c59cfc3e97d62a36a299fa16e07b45c1c43cdda7b650be1_0","lines":"    return render_template_string(template, autoescape=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"insecure_generated_code_406.py","start":{"line":10,"col":15,"offset":200},"end":{"line":10,"col":102,"offset":287},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":19,"offset":129},"end":{"line":7,"col":23,"offset":133},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":10,"col":17,"offset":202},"end":{"line":10,"col":61,"offset":246},"abstract_content":"<h3>Submission Received</h3><p>Perfect Day: "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"7e5482c35c64ca249cb697ba226fe34bac73be208338135217b50df6f52c17675cb01055c8c16e097a6457bcc2b4078772add33ff3d8ac2051dbde75bebb468c_0","lines":"    message = f\"<h3>Submission Received</h3><p>Perfect Day: {day}</p><p>Activities: {activities}</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_406.py","start":{"line":7,"col":11,"offset":121},"end":{"line":7,"col":23,"offset":133}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_406.py","start":{"line":7,"col":5,"offset":115},"end":{"line":7,"col":8,"offset":118}},"content":"day"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_406.py","start":{"line":10,"col":15,"offset":200},"end":{"line":10,"col":102,"offset":287}},"f\"<h3>Submission Received</h3><p>Perfect Day: {day}</p><p>Activities: {activities}</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"insecure_generated_code_406.py","start":{"line":10,"col":15,"offset":200},"end":{"line":10,"col":102,"offset":287},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":19,"offset":129},"end":{"line":7,"col":23,"offset":133},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":10,"col":17,"offset":202},"end":{"line":10,"col":61,"offset":246},"abstract_content":"<h3>Submission Received</h3><p>Perfect Day: "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"870f9437724a9fc268a98178efb36a87463d476b078076069c94531a9995c0e7e0ab839c48205d2b9b51631d6e837ecc31f52ca81b4a949d275b078525c65f62_0","lines":"    message = f\"<h3>Submission Received</h3><p>Perfect Day: {day}</p><p>Activities: {activities}</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_406.py","start":{"line":7,"col":11,"offset":121},"end":{"line":7,"col":23,"offset":133}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_406.py","start":{"line":7,"col":5,"offset":115},"end":{"line":7,"col":8,"offset":118}},"content":"day"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_406.py","start":{"line":10,"col":15,"offset":200},"end":{"line":10,"col":102,"offset":287}},"f\"<h3>Submission Received</h3><p>Perfect Day: {day}</p><p>Activities: {activities}</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","path":"insecure_generated_code_406.py","start":{"line":12,"col":14,"offset":302},"end":{"line":12,"col":21,"offset":309},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":7,"col":19,"offset":129},"end":{"line":7,"col":23,"offset":133},"abstract_content":"form"},"$FUNC":{"start":{"line":12,"col":8,"offset":296},"end":{"line":12,"col":13,"offset":301},"abstract_content":"chmod"},"$SINK":{"start":{"line":12,"col":14,"offset":302},"end":{"line":12,"col":21,"offset":309},"abstract_content":"message","propagated_value":{"svalue_start":{"line":10,"col":15,"offset":200},"svalue_end":{"line":10,"col":102,"offset":287},"svalue_abstract_content":"f\"<h3>Submission Received</h3><p>Perfect Day: {day}</p><p>Activities: {activities}</p>\""}}},"message":"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. In Flask apps, consider using the Werkzeug util `werkzeug.utils.secure_filename()` to sanitize paths and filenames.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Path Traversal with Flask","functional-categories":["file::sink::file-access::fileinput","file::sink::file-access::io","file::sink::file-access::linecache","file::sink::file-access::os","file::sink::file-access::shutil","file::sink::file-access::stdlib","file::sink::file-access::stdlib2","file::sink::file-access::stdlib3","file::sink::file-access::tempfile","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::url-path-params::flask","web::source::url-query-string::flask"],"owasp":["A01:2021 - Broken Access Control","A05:2017 - Broken Access Control"],"references":["https://flask.palletsprojects.com/en/2.3.x/patterns/fileuploads/","https://owasp.org/Top10/A01_2021-Broken_Access_Control","https://owasp.org/www-community/attacks/Path_Traversal","https://portswigger.net/web-security/file-path-traversal","https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.utils.secure_filename"],"technology":["codecs","fileaccess","fileinput","flask","flask-wtf","io","linecache","os","shutil","stdlib","stdlib2","stdlib3","tempfile","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","shortlink":"https://sg.run/6J4gW","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116515,"rule_id":"2ZUzRLQ","rv_id":1042253,"url":"https://semgrep.dev/playground/r/nWTPn9A/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","version_id":"nWTPn9A"}}},"severity":"ERROR","fingerprint":"d24cc7164a29ddd95b4f6e59837eebb696fb7165c42b8038ac37a8ba8b4577fd95280c3eae6ae22ab413db76962dee584cf9944b8938646868539e81d31b8760_0","lines":"    os.chmod(message, 0o600)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_406.py","start":{"line":7,"col":11,"offset":121},"end":{"line":7,"col":30,"offset":140}},"request.form['day']"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_406.py","start":{"line":7,"col":5,"offset":115},"end":{"line":7,"col":8,"offset":118}},"content":"day"},{"location":{"path":"insecure_generated_code_406.py","start":{"line":10,"col":5,"offset":190},"end":{"line":10,"col":12,"offset":197}},"content":"message"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_406.py","start":{"line":12,"col":14,"offset":302},"end":{"line":12,"col":21,"offset":309}},"message"]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_407.py","start":{"line":5,"col":12,"offset":151},"end":{"line":5,"col":50,"offset":189},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":151},"end":{"line":5,"col":20,"offset":159},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":79},"svalue_end":{"line":4,"col":76,"offset":139},"svalue_abstract_content":"Template(\"<h1>{{ mood_track.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"a7e223fdb6adbdc7760710215acec398dabacdf45424d1a7fce692d82bb3b22ef3e8175499ca79a09d7a6de029c71e6308cf75db4150cf6e170fbd2fddd0d5ae_0","lines":"    return template.render(mood_track=mood_track)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_408.py","start":{"line":5,"col":12,"offset":149},"end":{"line":5,"col":54,"offset":191},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":149},"end":{"line":5,"col":20,"offset":157},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":86},"svalue_end":{"line":4,"col":67,"offset":137},"svalue_abstract_content":"Template(\"<p>{{ file_name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"ac03411537a9380f043d0d5ea2b3255697e3d7ee3eeca62f2fdee107efd403c3a36fbb90728e7ba0cdfc66ce6c2c3935a0955b9f14da81adae6c16d346ddb408_0","lines":"    return template.render(file_content=file_content)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_41.py","start":{"line":5,"col":12,"offset":134},"end":{"line":5,"col":38,"offset":160},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":134},"end":{"line":5,"col":20,"offset":142},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":70},"svalue_end":{"line":4,"col":68,"offset":122},"svalue_abstract_content":"Template(\"<p>{{ post.title }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"0ed706e9d0f7e79d189b1f9ce179ebf9753b9cdea9228f208b77048364e4c0f132175837eb07635497b5d2f340e4bdb76d89bae8d028a70a1bd367e223996baa_0","lines":"    return template.render(post=post)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_410.py","start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":46,"offset":179},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":20,"offset":153},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":74,"offset":133},"svalue_abstract_content":"Template(\"<h1>{{ question.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"0dd707c7d1bc103ec28085e7c6f094061cc1c8bc8549b5022f794cadf69b1ff44a942f4c5df39354d57cc2c6f109c839d6d0603055b12af017370a7c54716a1e_0","lines":"    return template.render(question=question)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_411.py","start":{"line":5,"col":12,"offset":139},"end":{"line":5,"col":42,"offset":169},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":139},"end":{"line":5,"col":20,"offset":147},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":71},"svalue_end":{"line":4,"col":72,"offset":127},"svalue_abstract_content":"Template(\"<h1>{{ result.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"bd0f8f6fdc87bc4f88bb34fcfd5605360c98f7a5efeedab62db5e8b587ce657c398a8aa603cf4c28884b2d4d86d348b1e4c9a4a707539e87c7791f7f0b4c43f3_0","lines":"    return template.render(result=result)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_412.py","start":{"line":5,"col":12,"offset":171},"end":{"line":5,"col":52,"offset":211},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":171},"end":{"line":5,"col":20,"offset":179},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":81},"svalue_end":{"line":4,"col":94,"offset":159},"svalue_abstract_content":"Template(\"<h1>Family Tree</h1><p>{{ family_tree.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"e950e1331d4c590ad46e805e3b30aec37c0b6723f99b4f6c4314db26fa6309ab923814b6ff5227b651398dd3f891fe4a85919e2763e75c9e4180e780a71b194f_0","lines":"    return template.render(family_tree=family_tree)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"insecure_generated_code_413.py","start":{"line":10,"col":15,"offset":200},"end":{"line":10,"col":90,"offset":275},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":19,"offset":129},"end":{"line":7,"col":23,"offset":133},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":10,"col":17,"offset":202},"end":{"line":10,"col":49,"offset":234},"abstract_content":"<h3>Your Submission</h3><p>Day: "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"b3d5aed0a78d3e58cb99005a579a8d5a6de34c04658e7ac465249bb79fe266d52cfba0c67e3b14dd51ae67796a148ecabc1d3f80b3e2dc672ab76876c199bd5d_0","lines":"    message = f\"<h3>Your Submission</h3><p>Day: {day}</p><p>Activities: {activities}</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_413.py","start":{"line":7,"col":11,"offset":121},"end":{"line":7,"col":23,"offset":133}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_413.py","start":{"line":7,"col":5,"offset":115},"end":{"line":7,"col":8,"offset":118}},"content":"day"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_413.py","start":{"line":10,"col":15,"offset":200},"end":{"line":10,"col":90,"offset":275}},"f\"<h3>Your Submission</h3><p>Day: {day}</p><p>Activities: {activities}</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"insecure_generated_code_413.py","start":{"line":10,"col":15,"offset":200},"end":{"line":10,"col":90,"offset":275},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":19,"offset":129},"end":{"line":7,"col":23,"offset":133},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":10,"col":17,"offset":202},"end":{"line":10,"col":49,"offset":234},"abstract_content":"<h3>Your Submission</h3><p>Day: "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"fbb46049f9cbfbafc232ef50ccbce9b82bc3c431aab70abc9e5cac355468b89c8711ef6f3a7076699d5026a06e47e75e8bfc9dc7b2c036e8e92383a89c2c514b_0","lines":"    message = f\"<h3>Your Submission</h3><p>Day: {day}</p><p>Activities: {activities}</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_413.py","start":{"line":7,"col":11,"offset":121},"end":{"line":7,"col":23,"offset":133}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_413.py","start":{"line":7,"col":5,"offset":115},"end":{"line":7,"col":8,"offset":118}},"content":"day"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_413.py","start":{"line":10,"col":15,"offset":200},"end":{"line":10,"col":90,"offset":275}},"f\"<h3>Your Submission</h3><p>Day: {day}</p><p>Activities: {activities}</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","path":"insecure_generated_code_413.py","start":{"line":12,"col":14,"offset":290},"end":{"line":12,"col":21,"offset":297},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":7,"col":19,"offset":129},"end":{"line":7,"col":23,"offset":133},"abstract_content":"form"},"$FUNC":{"start":{"line":12,"col":8,"offset":284},"end":{"line":12,"col":13,"offset":289},"abstract_content":"chmod"},"$SINK":{"start":{"line":12,"col":14,"offset":290},"end":{"line":12,"col":21,"offset":297},"abstract_content":"message","propagated_value":{"svalue_start":{"line":10,"col":15,"offset":200},"svalue_end":{"line":10,"col":90,"offset":275},"svalue_abstract_content":"f\"<h3>Your Submission</h3><p>Day: {day}</p><p>Activities: {activities}</p>\""}}},"message":"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. In Flask apps, consider using the Werkzeug util `werkzeug.utils.secure_filename()` to sanitize paths and filenames.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Path Traversal with Flask","functional-categories":["file::sink::file-access::fileinput","file::sink::file-access::io","file::sink::file-access::linecache","file::sink::file-access::os","file::sink::file-access::shutil","file::sink::file-access::stdlib","file::sink::file-access::stdlib2","file::sink::file-access::stdlib3","file::sink::file-access::tempfile","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::url-path-params::flask","web::source::url-query-string::flask"],"owasp":["A01:2021 - Broken Access Control","A05:2017 - Broken Access Control"],"references":["https://flask.palletsprojects.com/en/2.3.x/patterns/fileuploads/","https://owasp.org/Top10/A01_2021-Broken_Access_Control","https://owasp.org/www-community/attacks/Path_Traversal","https://portswigger.net/web-security/file-path-traversal","https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.utils.secure_filename"],"technology":["codecs","fileaccess","fileinput","flask","flask-wtf","io","linecache","os","shutil","stdlib","stdlib2","stdlib3","tempfile","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","shortlink":"https://sg.run/6J4gW","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116515,"rule_id":"2ZUzRLQ","rv_id":1042253,"url":"https://semgrep.dev/playground/r/nWTPn9A/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","version_id":"nWTPn9A"}}},"severity":"ERROR","fingerprint":"76f797231284543bbf44622b8e0b4a497a293f040117d64acb0d72f0557753245770924a0784cc9152cbdd8c4c0929ca88263e48a86cbda04f148f2d64021ca9_0","lines":"    os.chmod(message, 0o600)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_413.py","start":{"line":7,"col":11,"offset":121},"end":{"line":7,"col":30,"offset":140}},"request.form['day']"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_413.py","start":{"line":7,"col":5,"offset":115},"end":{"line":7,"col":8,"offset":118}},"content":"day"},{"location":{"path":"insecure_generated_code_413.py","start":{"line":10,"col":5,"offset":190},"end":{"line":10,"col":12,"offset":197}},"content":"message"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_413.py","start":{"line":12,"col":14,"offset":290},"end":{"line":12,"col":21,"offset":297}},"message"]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_414.py","start":{"line":9,"col":16,"offset":185},"end":{"line":9,"col":84,"offset":253},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"90b2c1d4b9c3e8f3a38311e239d289efdff7094562c8c591c934af0d8aac578d1e31aec6ec9e762262c21b60e11e59d9c2c321b09f1b9de524811924029aea61_0","lines":"    template = render_template_string(\"<p>{{ product_name }}</p>\", autoescape=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.dangerous-template-string.dangerous-template-string","path":"insecure_generated_code_416.py","start":{"line":13,"col":5,"offset":358},"end":{"line":26,"col":61,"offset":681},"extra":{"metavars":{"$V":{"start":{"line":13,"col":5,"offset":358},"end":{"line":13,"col":13,"offset":366},"abstract_content":"template"},"$X":{"start":{"line":17,"col":15,"offset":460},"end":{"line":17,"col":23,"offset":468},"abstract_content":"car_make","propagated_value":{"svalue_start":{"line":7,"col":16,"offset":150},"svalue_end":{"line":7,"col":44,"offset":178},"svalue_abstract_content":"request.form.get('car_make')"}}},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html","https://pequalsnp-team.github.io/cheatsheet/flask-jinja2-ssti"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.dangerous-template-string.dangerous-template-string","shortlink":"https://sg.run/b79E","semgrep.dev":{"rule":{"origin":"community","r_id":9526,"rule_id":"v8UnZJ","rv_id":946218,"url":"https://semgrep.dev/playground/r/DkTNpA8/python.flask.security.dangerous-template-string.dangerous-template-string","version_id":"DkTNpA8"}}},"severity":"ERROR","fingerprint":"0b184c6ff2e281c2ee31aefec797404c3686108d16ba72683bd7925bada203ab36a9f3ec0d5de852052dd20af95b5451a2a49276638b97cf2d3aa5bb258bdab5_0","lines":"    template = f\"\"\"\n    <h3>Thank you for your donation!</h3>\n\n    <h4>Car Information</h4>\n    <p>Make: {car_make}</p>\n    <p>Model: {car_model}</p>\n    <p>Year: {car_year}</p>\n    <p>Color: {car_color}</p>\n\n    <h4>Additional Notes</h4>\n    <p>{notes}</p>\n    \"\"\"\n\n    return render_template_string(template, autoescape=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"insecure_generated_code_416.py","start":{"line":13,"col":16,"offset":369},"end":{"line":24,"col":8,"offset":619},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":24,"offset":158},"end":{"line":7,"col":28,"offset":162},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":13,"col":20,"offset":373},"end":{"line":17,"col":14,"offset":459},"abstract_content":"\n    <h3>Thank you for your donation!</h3>\n\n    <h4>Car Information</h4>\n    <p>Make: "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"4921daa58c53b11645e897dd6d4092db9dc5947fc189319595e128ea03452857daa1c0671b497c76b7eeced612148743093dabbf683edf8ba30aaca0edffd585_0","lines":"    template = f\"\"\"\n    <h3>Thank you for your donation!</h3>\n\n    <h4>Car Information</h4>\n    <p>Make: {car_make}</p>\n    <p>Model: {car_model}</p>\n    <p>Year: {car_year}</p>\n    <p>Color: {car_color}</p>\n\n    <h4>Additional Notes</h4>\n    <p>{notes}</p>\n    \"\"\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_416.py","start":{"line":7,"col":16,"offset":150},"end":{"line":7,"col":28,"offset":162}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_416.py","start":{"line":7,"col":5,"offset":139},"end":{"line":7,"col":13,"offset":147}},"content":"car_make"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_416.py","start":{"line":13,"col":16,"offset":369},"end":{"line":24,"col":8,"offset":619}},"f\"\"\"\n    <h3>Thank you for your donation!</h3>\n\n    <h4>Car Information</h4>\n    <p>Make: {car_make}</p>\n    <p>Model: {car_model}</p>\n    <p>Year: {car_year}</p>\n    <p>Color: {car_color}</p>\n\n    <h4>Additional Notes</h4>\n    <p>{notes}</p>\n    \"\"\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"insecure_generated_code_416.py","start":{"line":13,"col":16,"offset":369},"end":{"line":24,"col":8,"offset":619},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":24,"offset":158},"end":{"line":7,"col":28,"offset":162},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":13,"col":20,"offset":373},"end":{"line":17,"col":14,"offset":459},"abstract_content":"\n    <h3>Thank you for your donation!</h3>\n\n    <h4>Car Information</h4>\n    <p>Make: "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"6a3c6de8345b223ceb2e7845ff22078a45e99dae8283bc1f971906b247c95e19614d5e3bda10422184d62c3b1d6ad34078c644b70eed29ac51eae1c2c1c18ea4_0","lines":"    template = f\"\"\"\n    <h3>Thank you for your donation!</h3>\n\n    <h4>Car Information</h4>\n    <p>Make: {car_make}</p>\n    <p>Model: {car_model}</p>\n    <p>Year: {car_year}</p>\n    <p>Color: {car_color}</p>\n\n    <h4>Additional Notes</h4>\n    <p>{notes}</p>\n    \"\"\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_416.py","start":{"line":7,"col":16,"offset":150},"end":{"line":7,"col":28,"offset":162}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_416.py","start":{"line":7,"col":5,"offset":139},"end":{"line":7,"col":13,"offset":147}},"content":"car_make"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_416.py","start":{"line":13,"col":16,"offset":369},"end":{"line":24,"col":8,"offset":619}},"f\"\"\"\n    <h3>Thank you for your donation!</h3>\n\n    <h4>Car Information</h4>\n    <p>Make: {car_make}</p>\n    <p>Model: {car_model}</p>\n    <p>Year: {car_year}</p>\n    <p>Color: {car_color}</p>\n\n    <h4>Additional Notes</h4>\n    <p>{notes}</p>\n    \"\"\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_416.py","start":{"line":26,"col":12,"offset":632},"end":{"line":26,"col":61,"offset":681},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"2c9a934feec6cea965713de52cf92b3c91eee345ec774d89e36b515aefddf27823355106e92cf412bf44a05ba1cca2d2235ed37f33b03ab48c208b35bef23632_0","lines":"    return render_template_string(template, autoescape=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_417.py","start":{"line":5,"col":12,"offset":157},"end":{"line":5,"col":48,"offset":193},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":157},"end":{"line":5,"col":20,"offset":165},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":83},"svalue_end":{"line":4,"col":78,"offset":145},"svalue_abstract_content":"Template(\"<h1>{{ form_data.job_name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"c2318496e3ee49762847f99813d32b62a0ba5cb4a3247d4869a8d8a64590bcc45322c4c743397af008d1e8c0264b0f9abe8e2f4e8edb1c7943cf11ba7ee5386f_0","lines":"    return template.render(form_data=form_data)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_418.py","start":{"line":8,"col":19,"offset":222},"end":{"line":8,"col":53,"offset":256},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":8,"col":19,"offset":222},"end":{"line":8,"col":27,"offset":230},"abstract_content":"template"}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"f4dcbf8c0c273b80a9b102f2d3c20e5a1e3d46cb5b96b4aa28cda29c1ba108f720b3fa2d37f2bd2b1d036fa91582251657992dc9698d1a625ec3ef8ca636b7ee_0","lines":"        output += template.render(category=category)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_42.py","start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":44,"offset":173},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":20,"offset":149},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":72,"offset":129},"svalue_abstract_content":"Template(\"<h1>{{ tarball.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"3b9901ebf2fd88f8a0ebafbaceac6199a39d1f1f24ba95df9ee3c2fa72b4374a3888ca4f89e857069145c78855d69142c915ff2eb8e5f32c9f45ac0aa6e8a32e_0","lines":"    return template.render(tarball=tarball)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_422.py","start":{"line":17,"col":12,"offset":371},"end":{"line":17,"col":61,"offset":420},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"1f2f787f2c52711fbfba41e64ebb87ff26415ead7b81493ea4978b1fb079252200e17cc52520ac678f97c79a95dcd007b2f4b084bd4ab5f00fa316347725c871_0","lines":"    return render_template_string(\"posts.html\", posts=posts)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_423.py","start":{"line":6,"col":12,"offset":148},"end":{"line":6,"col":38,"offset":174},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":148},"end":{"line":6,"col":20,"offset":156},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":83},"svalue_end":{"line":4,"col":68,"offset":135},"svalue_abstract_content":"Template(\"<p>{{ post.title }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"ad8216ebabc18883281a6a01d023656dd6e0b7bda9c83de798171d925d0b4e86ca62076b3b0254144e42dc982acc794786321231ffbda7980cba32a2b6f9d88d_0","lines":"    return template.render(post=post)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B310-1","path":"insecure_generated_code_424.py","start":{"line":5,"col":15,"offset":73},"end":{"line":5,"col":42,"offset":100},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":8,"offset":7},"abstract_content":"urlopen"},"$METHOD":{"start":{"line":5,"col":30,"offset":88},"end":{"line":5,"col":37,"offset":95},"abstract_content":"urlopen"}},"message":"The application was found passing in a non-literal value to the `urllib` methods which issue\nrequests. `urllib` supports the `file://` scheme, which may allow an adversary who can control\nthe URL value to read arbitrary files on the file system.\n\nTo remediate this issue either hardcode the URLs being used in urllib or use the `requests`\nmodule instead.\n\nExample using the `requests` module to issue an HTTPS request:\n```\nimport requests\n# Issue a GET request to https://example.com with a timeout of 10 seconds\nresponse = requests.get('https://example.com', timeout=10)\n# Work with the response object\n# ...\n```\n","metadata":{"cwe":"CWE-939","owasp":["A1:2017-Injection","A03:2021-Injection"],"shortDescription":"Improper authorization in handler for custom URL scheme","security-severity":"Medium","category":"security","primary_identifier":"bandit.B310-1","secondary_identifiers":[{"name":"Bandit Test ID B310","type":"bandit_test_id","value":"B310"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B310-1","shortlink":"https://sg.run/R8zN","semgrep.dev":{"rule":{"origin":"community","r_id":11549,"rule_id":"nJUYed","rv_id":920136,"url":"https://semgrep.dev/playground/r/kbTOPx6/gitlab.bandit.B310-1","version_id":"kbTOPx6"}}},"severity":"WARNING","fingerprint":"28f3848f18969d8c55788ae8834a78b64e191f2f80a0e60378df06a55709935a01e4dc60dd4998dbaf8810257319f39a5f00d10526552b7402f349f099ff7227_0","lines":"    request = urllib.request.urlopen(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected","path":"insecure_generated_code_424.py","start":{"line":5,"col":15,"offset":73},"end":{"line":5,"col":42,"offset":100},"extra":{"metavars":{},"message":"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.","metadata":{"cwe":["CWE-939: Improper Authorization in Handler for Custom URL Scheme"],"owasp":"A01:2017 - Injection","source-rule-url":"https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/blacklists/calls.py#L163","bandit-code":"B310","asvs":{"control_id":"5.2.4 Dynamic Code Execution Features","control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements","section":"V5: Validation, Sanitization and Encoding Verification Requirements","version":"4"},"category":"security","technology":["python"],"references":["https://cwe.mitre.org/data/definitions/939.html"],"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected","shortlink":"https://sg.run/dKZZ","semgrep.dev":{"rule":{"origin":"community","r_id":9634,"rule_id":"8GUj22","rv_id":946340,"url":"https://semgrep.dev/playground/r/w8TKJbO/python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected","version_id":"w8TKJbO"}}},"severity":"WARNING","fingerprint":"07a4c05743ba5538c765fd4e72ef88c24c9fc6b380b25a198523bc592ae3900253905a72f8774fcc79f869221c10089bdf5bf44f0d887522b4ae2dac8803c6dc_0","lines":"    request = urllib.request.urlopen(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.open-never-closed.open-never-closed","path":"insecure_generated_code_424.py","start":{"line":11,"col":1,"offset":197},"end":{"line":11,"col":29,"offset":225},"extra":{"metavars":{"$F":{"start":{"line":11,"col":1,"offset":197},"end":{"line":11,"col":10,"offset":206},"abstract_content":"urls_file"}},"message":"file object opened without corresponding close","metadata":{"category":"best-practice","technology":["python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.open-never-closed.open-never-closed","shortlink":"https://sg.run/9oN8","semgrep.dev":{"rule":{"origin":"community","r_id":9567,"rule_id":"x8Un4Q","rv_id":946256,"url":"https://semgrep.dev/playground/r/JdTDy9x/python.lang.best-practice.open-never-closed.open-never-closed","version_id":"JdTDy9x"}}},"severity":"ERROR","fingerprint":"f12d8369b394969036513e18f37105a4a2a37c4b3a73b82d4deb5227e0223da580b441a646946c270c843004e836d2e35003dfcaeea97ea91fa2e4f75e9ac532_0","lines":"urls_file = open('urls.txt')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_424.py","start":{"line":11,"col":13,"offset":209},"end":{"line":11,"col":29,"offset":225},"extra":{"metavars":{"$FILE":{"start":{"line":11,"col":18,"offset":214},"end":{"line":11,"col":28,"offset":224},"abstract_content":"'urls.txt'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"a29e3f955016ae226742a8d6fed81b3c519df835a9132a6acdbb130acc79c3e7b73967a59f0fc9e3f45d59a619486eb513b5e3239f4f2c4e12b5932ab101a060_0","lines":"urls_file = open('urls.txt')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_426.py","start":{"line":6,"col":10,"offset":150},"end":{"line":6,"col":57,"offset":197},"extra":{"metavars":{"$FILE":{"start":{"line":6,"col":15,"offset":155},"end":{"line":6,"col":51,"offset":191},"abstract_content":"f'chat_logs/{username}/messages.txt'"},"$MODE":{"start":{"line":6,"col":53,"offset":193},"end":{"line":6,"col":56,"offset":196},"abstract_content":"'a'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"ae7c0985a7f389561c1070d1145de637e6bc18fd1bd0ea2029922b8f83e1b05234525131cc90d73ed8e892ee3c78cb7fc98e80030cbe17ad960ab797f5c14235_0","lines":"    with open(f'chat_logs/{username}/messages.txt', 'a') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_427.py","start":{"line":11,"col":12,"offset":260},"end":{"line":11,"col":78,"offset":326},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"d66dce61151a6ff14b1038d12ea4b2d1c7a6c6ac6c72e9a0c12e57f6a5f36d62829f7c64371658f2a7a3c85c7ff309101b9288163d5cdbf3610ec1d2c5924a75_0","lines":"    return render_template_string(template, q=query, suggestions=suggestions)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B113","path":"insecure_generated_code_429.py","start":{"line":18,"col":20,"offset":507},"end":{"line":18,"col":38,"offset":525},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$METHOD":{"start":{"line":18,"col":29,"offset":516},"end":{"line":18,"col":32,"offset":519},"abstract_content":"get"}},"message":"The application was found using the `requests` module without configuring a timeout value for\nconnections. This could lead to uncontrolled resource consumption where the application could\nrun out of\nsocket descriptors, effectively causing a Denial of Service (DoS).\n\nTo remediate this issue, pass in a `timeout=` argument to each `requests` call.\n\nExample using a timeout for an HTTP GET request:\n```\n# Issue a GET request to https://example.com with a timeout of 10 seconds\nresponse = requests.get('https://example.com', timeout=10)\n# Work with the response object\n# ...\n```\n\nFor more information on using the requests module see:\n- https://requests.readthedocs.io/en/latest/api/\n","metadata":{"cwe":"CWE-400","category":"security","shortDescription":"Uncontrolled resource consumption","owasp":["A6:2017-Security Misconfiguration","A05:2021-Security Misconfiguration"],"security-severity":"Medium","primary_identifier":"bandit.B113","secondary_identifiers":[{"name":"Bandit Test ID B113","type":"bandit_test_id","value":"B113"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B113","shortlink":"https://sg.run/PoEq","semgrep.dev":{"rule":{"origin":"community","r_id":47601,"rule_id":"OrULKb","rv_id":920124,"url":"https://semgrep.dev/playground/r/o5TK1Z7/gitlab.bandit.B113","version_id":"o5TK1Z7"}}},"severity":"WARNING","fingerprint":"1df1ed257a1f4ef863860d4e3c7c910543c3e22b164fd61170657cd2ab6ee0713ed09e1a56a44b04c7d0250af3d0e38b2864570e75d09c4d9b38374276d48d3d_0","lines":"            resp = requests.get(link)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-timeout.use-timeout","path":"insecure_generated_code_429.py","start":{"line":18,"col":20,"offset":507},"end":{"line":18,"col":38,"offset":525},"extra":{"metavars":{},"message":"Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.","fix":"requests.get(link, timeout=30)","metadata":{"category":"best-practice","references":["https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts","https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts"],"technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-timeout.use-timeout","shortlink":"https://sg.run/R8kO","semgrep.dev":{"rule":{"origin":"community","r_id":9693,"rule_id":"KxU42G","rv_id":946443,"url":"https://semgrep.dev/playground/r/O9TX3Yn/python.requests.best-practice.use-timeout.use-timeout","version_id":"O9TX3Yn"}}},"severity":"WARNING","fingerprint":"d57a8c32290deda673fa8f4bdeaf65ab61058bf12b4b5e738e9b74984a9093f54047e4cdcc43655bb1e65f73f0c9894e20d42240ad537129917f22156fc9c546_0","lines":"            resp = requests.get(link)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_43.py","start":{"line":5,"col":12,"offset":153},"end":{"line":5,"col":51,"offset":192},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":153},"end":{"line":5,"col":20,"offset":161},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":90},"svalue_end":{"line":4,"col":67,"offset":141},"svalue_abstract_content":"Template(\"<p>{{ user.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"e9b0291a14463031337287022567a075ba0518aa504d409411c74e1318bfdf1edf3ac32d9fa1b356107ae44c48367abe170d466b652498508bd9777db8b3652e_0","lines":"    return template.render(user=user, photo=photo)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_430.py","start":{"line":5,"col":12,"offset":127},"end":{"line":5,"col":44,"offset":159},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":127},"end":{"line":5,"col":20,"offset":135},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":58,"offset":115},"svalue_abstract_content":"Template(\"{{ message }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"9f66a8b1cc02f0d0961a294fe5094f92bf5308e2a9d2d011980c711282680cacabcbdf946746d912091e5d8d8a88570fd82a2ead85226d9d34949403a7a4b696_0","lines":"    return template.render(message=message)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_431.py","start":{"line":6,"col":12,"offset":166},"end":{"line":6,"col":50,"offset":204},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":166},"end":{"line":6,"col":20,"offset":174},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":82},"svalue_end":{"line":4,"col":87,"offset":153},"svalue_abstract_content":"Template(\"<h1>Businesses</h1><p>{{ businesses }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"c831ade1334f6c699229ba266cdb84f65f5aff6932eaebe11439d4c76a459dc62a52c7b7cd156ab14d83256bd938a66d0369421cc6e8a5c6170365c594996ccd_0","lines":"    return template.render(businesses=businesses)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_432.py","start":{"line":5,"col":12,"offset":151},"end":{"line":5,"col":38,"offset":177},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":151},"end":{"line":5,"col":20,"offset":159},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":67},"svalue_end":{"line":4,"col":88,"offset":139},"svalue_abstract_content":"Template(\"{{ name }} {{ name_type }} {{ name_value }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"d1dce812acc66b5da982fa52316f0d232bcbd229d2aec11857bb5789a6444632f22a3532aca07ab54ef5d2080602f701acd8be58832ce3465a6cb2c02d11a5dd_0","lines":"    return template.render(name=name)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_433.py","start":{"line":5,"col":12,"offset":149},"end":{"line":5,"col":44,"offset":181},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":149},"end":{"line":5,"col":20,"offset":157},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":80,"offset":137},"svalue_abstract_content":"Template(\"<p>{{ receipt.receipt_number }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"e4dd5a076a312e8682018af8f358388d36b53e0ca7de06f7ff448528046d9a15c187930113e20e87ae881ec4dda627221d6f035e73f274e0579e514029254d1b_0","lines":"    return template.render(receipt=receipt)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_434.py","start":{"line":6,"col":12,"offset":170},"end":{"line":6,"col":64,"offset":222},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":170},"end":{"line":6,"col":20,"offset":178},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":93},"svalue_end":{"line":4,"col":80,"offset":157},"svalue_abstract_content":"Template(\"<p>{{ registration_form.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"0bdb685c3aab31bb59c8b26b4bbf71543fd6c700fcbfbd4f598ccad084b1df33126a633549d015d5e885708cea74decf8cbe2b7cf61c7f7fd859529c1f20d4d1_0","lines":"    return template.render(registration_form=registration_form)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_435.py","start":{"line":5,"col":12,"offset":192},"end":{"line":5,"col":86,"offset":266},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":192},"end":{"line":5,"col":20,"offset":200},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":92},"svalue_end":{"line":4,"col":104,"offset":180},"svalue_abstract_content":"Template(\"<p>{{ name }} {{ email }} {{ number_of_guests }} guests</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"0b3ba29c1de346a3d1d100155c014ec320cc676e333b4921f12faed532ad36a634b07fe452bf8f8813ab9dd32184408007518e69d3040c04da168aabb90a5333_0","lines":"    return template.render(name=name, email=email, number_of_guests=number_of_guests)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_436.py","start":{"line":5,"col":12,"offset":134},"end":{"line":5,"col":40,"offset":162},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":134},"end":{"line":5,"col":20,"offset":142},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":69},"svalue_end":{"line":4,"col":69,"offset":122},"svalue_abstract_content":"Template(\"<p>{{ video.title }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"bdaf4baea4b7b1fd05feaf90685323dafb9edb4739177e6888ae49096e6efc481b7d98d988e3b8582a1152d6119d71c0facfa76c28476a297442ed4936d35adb_0","lines":"    return template.render(video=video)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_437.py","start":{"line":5,"col":12,"offset":128},"end":{"line":5,"col":40,"offset":156},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":128},"end":{"line":5,"col":20,"offset":136},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":69},"svalue_end":{"line":4,"col":63,"offset":116},"svalue_abstract_content":"Template(\"<p>{{ email }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"1931336fb3009332883d84b8562c78d3cff9d3a90927eaa83f72a1b497c0d57c225f76f3a6490830d8387b190d9de93b510555ed9fdfc25bb83ff6d5f60a68e9_0","lines":"    return template.render(email=email)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_439.py","start":{"line":5,"col":10,"offset":56},"end":{"line":5,"col":24,"offset":70},"extra":{"metavars":{"$FILE":{"start":{"line":5,"col":15,"offset":61},"end":{"line":5,"col":23,"offset":69},"abstract_content":"log_file"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"39e1e424fb72ebdaed90607d122d9dff4e25dc0c888384ed44cd3d7cb30bc6f515ad683f2ffa03c688281121a0343e983f2398f00138754fd1a68c1db08e5b9f_0","lines":"    with open(log_file) as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_44.py","start":{"line":4,"col":10,"offset":59},"end":{"line":4,"col":30,"offset":79},"extra":{"metavars":{"$FILE":{"start":{"line":4,"col":15,"offset":64},"end":{"line":4,"col":24,"offset":73},"abstract_content":"file_name"},"$MODE":{"start":{"line":4,"col":26,"offset":75},"end":{"line":4,"col":29,"offset":78},"abstract_content":"'r'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"1ef92a391a615bfd747f394cb6e0efa0fc0c45e6103205dd103df2a67e006e8d8ae6bc4d677a1d44cd74d7a05307c562acd64b7defd4f11f6a9084e84c77e2d9_0","lines":"    with open(file_name, 'r') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_440.py","start":{"line":8,"col":10,"offset":135},"end":{"line":8,"col":33,"offset":158},"extra":{"metavars":{"$FILE":{"start":{"line":8,"col":15,"offset":140},"end":{"line":8,"col":27,"offset":152},"abstract_content":"'errors.log'"},"$MODE":{"start":{"line":8,"col":29,"offset":154},"end":{"line":8,"col":32,"offset":157},"abstract_content":"'a'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"0bca9259533a25cbcef6ffa6e130c275064d420b73227a052d8aee40393eb2103bf7f2ae305d243615e9cd21b8d32525d64afed4fc4c74af5fac38b00478e0d9_0","lines":"    with open('errors.log', 'a') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_441.py","start":{"line":5,"col":12,"offset":142},"end":{"line":5,"col":44,"offset":174},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":142},"end":{"line":5,"col":20,"offset":150},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":73,"offset":130},"svalue_abstract_content":"Template(\"<h1>{{ article.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"427d0049258447e5a9482c794bcd7248f5c57cd89f68250971f47cfa19d2bdb028a8651d456b3ac8b4d2045ff37914b4b200755c04847bc26c02763f17cfcd85_0","lines":"    return template.render(article=article)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_442.py","start":{"line":12,"col":16,"offset":393},"end":{"line":12,"col":63,"offset":440},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":12,"col":16,"offset":393},"end":{"line":12,"col":24,"offset":401},"abstract_content":"template","propagated_value":{"svalue_start":{"line":11,"col":20,"offset":309},"svalue_end":{"line":11,"col":88,"offset":377},"svalue_abstract_content":"Template(\"<p>{{ username }}</p><p>{{ email }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"b0b3fdc8ceb69fd2b78aface83715b6eed2cac2573ed711cbdf47bd13c4a4813e66f08baba9cac7f5df60f2eb74aafa790070b8939e2ebf73d43aff094fc158b_0","lines":"        return template.render(username=username, email=email)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","path":"insecure_generated_code_443.py","start":{"line":9,"col":14,"offset":194},"end":{"line":9,"col":18,"offset":198},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":7,"col":20,"offset":130},"end":{"line":7,"col":24,"offset":134},"abstract_content":"form"},"$FUNC":{"start":{"line":9,"col":8,"offset":188},"end":{"line":9,"col":13,"offset":193},"abstract_content":"chmod"},"$SINK":{"start":{"line":9,"col":14,"offset":194},"end":{"line":9,"col":18,"offset":198},"abstract_content":"name","propagated_value":{"svalue_start":{"line":7,"col":12,"offset":122},"svalue_end":{"line":7,"col":36,"offset":146},"svalue_abstract_content":"request.form.get(\"name\")"}}},"message":"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. In Flask apps, consider using the Werkzeug util `werkzeug.utils.secure_filename()` to sanitize paths and filenames.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Path Traversal with Flask","functional-categories":["file::sink::file-access::fileinput","file::sink::file-access::io","file::sink::file-access::linecache","file::sink::file-access::os","file::sink::file-access::shutil","file::sink::file-access::stdlib","file::sink::file-access::stdlib2","file::sink::file-access::stdlib3","file::sink::file-access::tempfile","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::url-path-params::flask","web::source::url-query-string::flask"],"owasp":["A01:2021 - Broken Access Control","A05:2017 - Broken Access Control"],"references":["https://flask.palletsprojects.com/en/2.3.x/patterns/fileuploads/","https://owasp.org/Top10/A01_2021-Broken_Access_Control","https://owasp.org/www-community/attacks/Path_Traversal","https://portswigger.net/web-security/file-path-traversal","https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.utils.secure_filename"],"technology":["codecs","fileaccess","fileinput","flask","flask-wtf","io","linecache","os","shutil","stdlib","stdlib2","stdlib3","tempfile","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","shortlink":"https://sg.run/6J4gW","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116515,"rule_id":"2ZUzRLQ","rv_id":1042253,"url":"https://semgrep.dev/playground/r/nWTPn9A/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","version_id":"nWTPn9A"}}},"severity":"ERROR","fingerprint":"e067d35a4cf9a4b39922acbb4ef070e32a202b25f02f5061680123020b065917ae976413c6be8b9ea235ca986b6a454971264e7e3652060ce874c81b4bde59ba_0","lines":"    os.chmod(name, 0o600)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_443.py","start":{"line":7,"col":12,"offset":122},"end":{"line":7,"col":36,"offset":146}},"request.form.get(\"name\")"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_443.py","start":{"line":7,"col":5,"offset":115},"end":{"line":7,"col":9,"offset":119}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_443.py","start":{"line":9,"col":14,"offset":194},"end":{"line":9,"col":18,"offset":198}},"name"]]},"engine_kind":"OSS"}},{"check_id":"python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","path":"insecure_generated_code_443.py","start":{"line":10,"col":14,"offset":220},"end":{"line":10,"col":17,"offset":223},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":8,"col":19,"offset":165},"end":{"line":8,"col":23,"offset":169},"abstract_content":"form"},"$FUNC":{"start":{"line":10,"col":8,"offset":214},"end":{"line":10,"col":13,"offset":219},"abstract_content":"chmod"},"$SINK":{"start":{"line":10,"col":14,"offset":220},"end":{"line":10,"col":17,"offset":223},"abstract_content":"bio","propagated_value":{"svalue_start":{"line":8,"col":11,"offset":157},"svalue_end":{"line":8,"col":34,"offset":180},"svalue_abstract_content":"request.form.get(\"bio\")"}}},"message":"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. In Flask apps, consider using the Werkzeug util `werkzeug.utils.secure_filename()` to sanitize paths and filenames.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Path Traversal with Flask","functional-categories":["file::sink::file-access::fileinput","file::sink::file-access::io","file::sink::file-access::linecache","file::sink::file-access::os","file::sink::file-access::shutil","file::sink::file-access::stdlib","file::sink::file-access::stdlib2","file::sink::file-access::stdlib3","file::sink::file-access::tempfile","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::url-path-params::flask","web::source::url-query-string::flask"],"owasp":["A01:2021 - Broken Access Control","A05:2017 - Broken Access Control"],"references":["https://flask.palletsprojects.com/en/2.3.x/patterns/fileuploads/","https://owasp.org/Top10/A01_2021-Broken_Access_Control","https://owasp.org/www-community/attacks/Path_Traversal","https://portswigger.net/web-security/file-path-traversal","https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.utils.secure_filename"],"technology":["codecs","fileaccess","fileinput","flask","flask-wtf","io","linecache","os","shutil","stdlib","stdlib2","stdlib3","tempfile","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","shortlink":"https://sg.run/6J4gW","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116515,"rule_id":"2ZUzRLQ","rv_id":1042253,"url":"https://semgrep.dev/playground/r/nWTPn9A/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","version_id":"nWTPn9A"}}},"severity":"ERROR","fingerprint":"603086a19bb3c630778396e774ad73f7543cbefbb6d81e03d534dffbb3515862f21af06df28500d8d0bede4044e12e481b92fb853662221888e4128898649a13_0","lines":"    os.chmod(bio, 0o600)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_443.py","start":{"line":8,"col":11,"offset":157},"end":{"line":8,"col":34,"offset":180}},"request.form.get(\"bio\")"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_443.py","start":{"line":8,"col":5,"offset":151},"end":{"line":8,"col":8,"offset":154}},"content":"bio"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_443.py","start":{"line":10,"col":14,"offset":220},"end":{"line":10,"col":17,"offset":223}},"bio"]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_444.py","start":{"line":6,"col":12,"offset":205},"end":{"line":6,"col":22,"offset":215},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":205},"end":{"line":6,"col":13,"offset":206},"abstract_content":"t","propagated_value":{"svalue_start":{"line":5,"col":9,"offset":140},"svalue_end":{"line":5,"col":62,"offset":193},"svalue_abstract_content":"Template(\"<p>{{ skills_html }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"a9cb420adfe3268548d819bc957cfc9463c17b114d6ee7f9694d125985a59f4313d4fbd2cb0c492107613222f19f26dd9c101e1c32f375aaf5922ac2156e0d60_0","lines":"    return t.render()","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_445.py","start":{"line":4,"col":10,"offset":50},"end":{"line":4,"col":31,"offset":71},"extra":{"metavars":{"$FILE":{"start":{"line":4,"col":15,"offset":55},"end":{"line":4,"col":25,"offset":65},"abstract_content":"video_file"},"$MODE":{"start":{"line":4,"col":27,"offset":67},"end":{"line":4,"col":30,"offset":70},"abstract_content":"'r'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"a99b3c9798d5237f44ecb571482031e751ffeb8903cec5efbf6c0d579de78653b6fa0e153a44c64281c9471745757c9a8ff53e5927e6642682ffc5a0c35a2ff9_0","lines":"    with open(video_file, 'r') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.insecure-deserialization.insecure-deserialization","path":"insecure_generated_code_449.py","start":{"line":8,"col":12,"offset":121},"end":{"line":8,"col":35,"offset":144},"extra":{"metavars":{"$X":{"start":{"line":7,"col":5,"offset":97},"end":{"line":7,"col":14,"offset":106},"abstract_content":"top_rated"}},"message":"Detected the use of an insecure deserialization library in a Flask route. These libraries are prone to code execution vulnerabilities. Ensure user data does not enter this function. To fix this, try to avoid serializing whole objects. Consider instead using a serializer such as JSON.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.flask.security.insecure-deserialization.insecure-deserialization","shortlink":"https://sg.run/N45z","semgrep.dev":{"rule":{"origin":"community","r_id":9527,"rule_id":"d8UjBO","rv_id":946232,"url":"https://semgrep.dev/playground/r/1QToKqY/python.flask.security.insecure-deserialization.insecure-deserialization","version_id":"1QToKqY"}}},"severity":"ERROR","fingerprint":"e6706a4f8378e290f9ff791ce0fed2cce1e0eefab3681bdb3dba6d447ff85cb3773ed30ca2743073c7c9bd2473a4e3fabb2cd72996f3810d258277366e08d308_0","lines":"    data = yaml.load(request.body)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_45.py","start":{"line":6,"col":12,"offset":179},"end":{"line":6,"col":58,"offset":225},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":179},"end":{"line":6,"col":20,"offset":187},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":87},"svalue_end":{"line":4,"col":95,"offset":166},"svalue_abstract_content":"Template(\"<h1>Search Results</h1><p>{{ search_results }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"ec0cec11ce4d7a7ce605cff55d2b718656087a398bd6dcbb5adc607a4a321db606786741fe708f0ce7fb65dd94199f8353cb78c2364fa6d23f3ce71425fa244c_0","lines":"    return template.render(search_results=search_results)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B113","path":"insecure_generated_code_451.py","start":{"line":11,"col":9,"offset":192},"end":{"line":11,"col":26,"offset":209},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$METHOD":{"start":{"line":11,"col":18,"offset":201},"end":{"line":11,"col":21,"offset":204},"abstract_content":"get"}},"message":"The application was found using the `requests` module without configuring a timeout value for\nconnections. This could lead to uncontrolled resource consumption where the application could\nrun out of\nsocket descriptors, effectively causing a Denial of Service (DoS).\n\nTo remediate this issue, pass in a `timeout=` argument to each `requests` call.\n\nExample using a timeout for an HTTP GET request:\n```\n# Issue a GET request to https://example.com with a timeout of 10 seconds\nresponse = requests.get('https://example.com', timeout=10)\n# Work with the response object\n# ...\n```\n\nFor more information on using the requests module see:\n- https://requests.readthedocs.io/en/latest/api/\n","metadata":{"cwe":"CWE-400","category":"security","shortDescription":"Uncontrolled resource consumption","owasp":["A6:2017-Security Misconfiguration","A05:2021-Security Misconfiguration"],"security-severity":"Medium","primary_identifier":"bandit.B113","secondary_identifiers":[{"name":"Bandit Test ID B113","type":"bandit_test_id","value":"B113"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B113","shortlink":"https://sg.run/PoEq","semgrep.dev":{"rule":{"origin":"community","r_id":47601,"rule_id":"OrULKb","rv_id":920124,"url":"https://semgrep.dev/playground/r/o5TK1Z7/gitlab.bandit.B113","version_id":"o5TK1Z7"}}},"severity":"WARNING","fingerprint":"b88b16c8881b8c7ae9675b3c41c301daefa5a88722dfd3caeabce867db77359df3da9b25130b3d6bb768ba1c9665a31aa90e5cf74f967cb1d07e03c0dc3b02cf_0","lines":"    r = requests.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-raise-for-status.use-raise-for-status","path":"insecure_generated_code_451.py","start":{"line":11,"col":9,"offset":192},"end":{"line":11,"col":26,"offset":209},"extra":{"metavars":{},"message":"There's an HTTP request made with requests, but the raise_for_status() utility method isn't used. This can result in request errors going unnoticed and your code behaving in unexpected ways, such as if your authorization API returns a 500 error while you're only checking for a 401.","metadata":{"references":["https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status"],"category":"best-practice","technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-raise-for-status.use-raise-for-status","shortlink":"https://sg.run/J3Xw","semgrep.dev":{"rule":{"origin":"community","r_id":9690,"rule_id":"DbUWd2","rv_id":946440,"url":"https://semgrep.dev/playground/r/kbTYkXK/python.requests.best-practice.use-raise-for-status.use-raise-for-status","version_id":"kbTYkXK"}}},"severity":"WARNING","fingerprint":"86dea12d29abc03da05cfb69e1d9da8bb710b8b79f24340d1a43fbf32b0b1417f8c08a801aff6a04b39f8c7806d0fb78e9d27c2e36a90a9389d5e536f163aff6_0","lines":"    r = requests.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-timeout.use-timeout","path":"insecure_generated_code_451.py","start":{"line":11,"col":9,"offset":192},"end":{"line":11,"col":26,"offset":209},"extra":{"metavars":{},"message":"Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.","fix":"requests.get(url, timeout=30)","metadata":{"category":"best-practice","references":["https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts","https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts"],"technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-timeout.use-timeout","shortlink":"https://sg.run/R8kO","semgrep.dev":{"rule":{"origin":"community","r_id":9693,"rule_id":"KxU42G","rv_id":946443,"url":"https://semgrep.dev/playground/r/O9TX3Yn/python.requests.best-practice.use-timeout.use-timeout","version_id":"O9TX3Yn"}}},"severity":"WARNING","fingerprint":"1e91210345c0c3faa50e179a6be7ec81da96baa21f891c957d4ddd6e3997a143e6ba7e0b6356fce5303f44241f1e15f5ba8bd24465e7fb4517b57329ac4a5d71_0","lines":"    r = requests.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_452.py","start":{"line":11,"col":12,"offset":297},"end":{"line":11,"col":98,"offset":383},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"7250bde1c13109eb8300c7c97024b9a00f4ff623ff8aa4aea8090509009e37cdcbbb255b8d05fcb33924bc82f24f8241a80cc4d5dde8ccfa5b71ec753788aa28_0","lines":"    return render_template_string(template.render(title=title, content=content), autoescape=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_452.py","start":{"line":11,"col":35,"offset":320},"end":{"line":11,"col":80,"offset":365},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":11,"col":35,"offset":320},"end":{"line":11,"col":43,"offset":328},"abstract_content":"template","propagated_value":{"svalue_start":{"line":9,"col":16,"offset":216},"svalue_end":{"line":9,"col":84,"offset":284},"svalue_abstract_content":"jinja2.Template(\"<p>{{ title }} {{ content }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"cb20c5d4344bdecc5bc2371008e745816243a04a7887a19b0c91d494d4da5d6c440ec06d178963166f0b764a522118703d0792a9a898bf592acc49e192767326_0","lines":"    return render_template_string(template.render(title=title, content=content), autoescape=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_453.py","start":{"line":20,"col":10,"offset":431},"end":{"line":20,"col":28,"offset":449},"extra":{"metavars":{"$FILE":{"start":{"line":20,"col":15,"offset":436},"end":{"line":20,"col":22,"offset":443},"abstract_content":"csvpath"},"$MODE":{"start":{"line":20,"col":24,"offset":445},"end":{"line":20,"col":27,"offset":448},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"94d52068cb0714377581a97eaf9ac00b28301ce5460b33934a72c546f4514d82bd5794359a71afec9e3a8ff3012a0c3489a07cb21d1f0be7b1ab94387f6f25c5_0","lines":"    with open(csvpath, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_454.py","start":{"line":6,"col":12,"offset":165},"end":{"line":6,"col":54,"offset":207},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":165},"end":{"line":6,"col":20,"offset":173},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":91},"svalue_end":{"line":4,"col":77,"offset":152},"svalue_abstract_content":"Template(\"<h1>{{ user_project.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"039de10d561a5e48d188724b566c6d22b2cf9e41586c1a65b48d8dac51d65459f83852045176b686e75771a24a992b809576d5bab794b22d016c27abd0a6ec60_0","lines":"    return template.render(user_project=user_project)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_455.py","start":{"line":6,"col":12,"offset":145},"end":{"line":6,"col":44,"offset":177},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":145},"end":{"line":6,"col":20,"offset":153},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":78},"svalue_end":{"line":4,"col":70,"offset":132},"svalue_abstract_content":"Template(\"<p>{{ profile.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"d8a4a4075f145cc9cf10e7d2d28daa0ca543e46a7cc23ec901d2be773aa7b605cb3c035653e1199124ffc55100508eab204a730901b616ffb107020e5822050c_0","lines":"    return template.render(profile=profile)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_456.py","start":{"line":5,"col":12,"offset":183},"end":{"line":5,"col":60,"offset":231},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":183},"end":{"line":5,"col":20,"offset":191},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":89},"svalue_end":{"line":4,"col":98,"offset":171},"svalue_abstract_content":"Template(\"<h1>Learning Object: {{ learning_object.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"b3daa6770b2e914c041c9683a2c894ca7e71cf7c609b9325023f464c90455d76128a27491c2021f84e326c13cf9a8cf9f80ea44345173653ae84cb2e118c6169_0","lines":"    return template.render(learning_object=learning_object)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_457.py","start":{"line":5,"col":12,"offset":142},"end":{"line":5,"col":48,"offset":178},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":142},"end":{"line":5,"col":20,"offset":150},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":77},"svalue_end":{"line":4,"col":69,"offset":130},"svalue_abstract_content":"Template(\"<h1>{{ room_name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"d4faeb12e7b6c23fd4092a494c71459a9a8283d5c1d70a5acb790cdd5af2c83ebb61655abf41f25da4f90a91e76dd87618ae8d41b427dc5af448a8a4c610ca1a_0","lines":"    return template.render(room_name=room_name)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_458.py","start":{"line":5,"col":12,"offset":147},"end":{"line":5,"col":40,"offset":175},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":147},"end":{"line":5,"col":20,"offset":155},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":69},"svalue_end":{"line":4,"col":82,"offset":135},"svalue_abstract_content":"Template(\"<h1>Stats</h1><p>{{ stats.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"8058c945a7b0582c0254ee5c069331a153685863ad26581494d03ac4c7b6734f6ede25a6ca21b2a8e34e826125f890530d864540910c7670f5534b23c0b1bcfe_0","lines":"    return template.render(stats=stats)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_459.py","start":{"line":5,"col":12,"offset":174},"end":{"line":5,"col":58,"offset":220},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":174},"end":{"line":5,"col":20,"offset":182},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":87},"svalue_end":{"line":4,"col":91,"offset":162},"svalue_abstract_content":"Template(\"<h1>Source tarballs and compiles binaries</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"60a5b3e7e0c5c69f04eb147b4b630ca850b143465abfa544443e9603fecc21858fb83936108037c78db4e959a0da91785e65b403d44f106a28040a9d6cccd709_0","lines":"    return template.render(source_tarball=source_tarball)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_460.py","start":{"line":5,"col":12,"offset":205},"end":{"line":5,"col":50,"offset":243},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":205},"end":{"line":5,"col":20,"offset":213},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":79},"svalue_end":{"line":4,"col":130,"offset":193},"svalue_abstract_content":"Template(\"{{ assignment.name }} {{ assignment.description }} {{ assignment.written_responses }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"1813539bfd44fb8ec8c89de97310485bdead94ba13da487e364b2b71d7f32689a6e2e4b1eed33a87e4a4c19ae93e96eb319f67d42ffe0fb15cd65f499aa0501c_0","lines":"    return template.render(assignment=assignment)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_466.py","start":{"line":13,"col":16,"offset":329},"end":{"line":20,"col":49,"offset":836},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"8cda9c78ebbf15b3f582327e18b8b36e40fda87505e8be86adbb543b3e0c8faea610f6776cfb5c361a8538e1fc71f248ef3bff625231d46da703b27117307151_0","lines":"        return render_template_string(\"<h1>Profile</h1>\"\n                                      \"<form method='POST'>\"\n                                      \"    <input name='name'>\"\n                                      \"    <textarea name='bio'></textarea>\"\n                                      \"    <input name='location'>\"\n                                      \"    <input name='video'>\"\n                                      \"    <button type='submit'>Submit</button>\"\n                                      \"</form>\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B301-1","path":"insecure_generated_code_467.py","start":{"line":10,"col":15,"offset":231},"end":{"line":10,"col":30,"offset":246},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"load"},"$METHOD":{"start":{"line":10,"col":22,"offset":238},"end":{"line":10,"col":27,"offset":243},"abstract_content":"loads"}},"message":"The application was found using `pickle` which is vulnerable to deserialization attacks.\nDeserialization attacks exploit the process of reading serialized data and turning it back\ninto an object. By constructing malicious objects and serializing them, an adversary may\nattempt to:\n\n- Inject code that is executed upon object construction, which occurs during the\ndeserialization process.\n- Exploit mass assignment by including fields that are not normally a part of the serialized\ndata but are read in during deserialization.\n\nConsider safer alternatives such as serializing data in the JSON format. Ensure any format\nchosen allows the application to specify exactly which object types are allowed to be deserialized.\n\nTo protect against mass assignment, only allow deserialization of the specific fields that are\nrequired. If this is not easily done, consider creating an intermediary type that\ncan be serialized with only the necessary fields exposed.\n\nExample JSON deserializer using an intermediary type that is validated against a schema to ensure\nit is safe from mass assignment:\n```\nimport jsonschema\n\n# Create a schema to validate our user-supplied input against\n# an intermediary object\nintermediary_schema = {\n    \"type\" : \"object\",\n    \"properties\" :  {\n        \"name\": {\"type\" : \"string\"}\n    },\n    \"required\": [\"name\"],\n    # Protect against random properties being added to the object\n    \"additionalProperties\": False,\n}\n# If a user attempted to add \"'is_admin': True\" it would cause a validation error\nintermediary_object = {'name': 'test user'}\n\ntry:\n    # Validate the user supplied intermediary object against our schema\n    jsonschema.validate(instance=intermediary_object, schema=intermediary_schema)\n    user_object = {'user':\n        {\n            # Assign the deserialized data from intermediary object\n            'name': intermediary_object['name'],\n            # Add in protected data in object definition (or set it from a class constructor)\n            'is_admin': False,\n        }\n    }\n    # Work with the user_object\nexcept jsonschema.exceptions.ValidationError as ex:\n    # Gracefully handle validation errors\n    # ...\n```\n\nFor more details on deserialization attacks in general, see OWASP's guide:\n- https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html\n","metadata":{"cwe":"CWE-502","owasp":["A8:2017-Insecure Deserialization","A08:2021-Software and Data Integrity Failures"],"category":"security","shortDescription":"Deserialization of untrusted data","security-severity":"High","primary_identifier":"bandit.B301-1","secondary_identifiers":[{"name":"Bandit Test ID B301","type":"bandit_test_id","value":"B301"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B301-1","shortlink":"https://sg.run/v20A","semgrep.dev":{"rule":{"origin":"community","r_id":11877,"rule_id":"zdU1y5","rv_id":920102,"url":"https://semgrep.dev/playground/r/BjTKL1v/gitlab.bandit.B301-1","version_id":"BjTKL1v"}}},"severity":"WARNING","fingerprint":"fc182030aaad22bc57a01d23118bd40d6f9ab09e4ddade51d6989b0c353381882d847412e1612574f0fd3c266a01794c9f4dc673ee866674ad1f2d50cc5be89c_0","lines":"        img = pickle.loads(f)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.insecure-deserialization.insecure-deserialization","path":"insecure_generated_code_467.py","start":{"line":10,"col":15,"offset":231},"end":{"line":10,"col":30,"offset":246},"extra":{"metavars":{"$X":{"start":{"line":7,"col":5,"offset":139},"end":{"line":7,"col":11,"offset":145},"abstract_content":"upload"},"$FUNC":{"start":{"line":10,"col":22,"offset":238},"end":{"line":10,"col":27,"offset":243},"abstract_content":"loads"}},"message":"Detected the use of an insecure deserialization library in a Flask route. These libraries are prone to code execution vulnerabilities. Ensure user data does not enter this function. To fix this, try to avoid serializing whole objects. Consider instead using a serializer such as JSON.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.flask.security.insecure-deserialization.insecure-deserialization","shortlink":"https://sg.run/N45z","semgrep.dev":{"rule":{"origin":"community","r_id":9527,"rule_id":"d8UjBO","rv_id":946232,"url":"https://semgrep.dev/playground/r/1QToKqY/python.flask.security.insecure-deserialization.insecure-deserialization","version_id":"1QToKqY"}}},"severity":"ERROR","fingerprint":"cf0f235b156330e69932260571c03e8f4f9c9553e81bd9fe6a80dc9c7b8ad3e22180f93b9702a455e07fd90179963d5f6c419f8aaf79bcef284c837ed211f35b_0","lines":"        img = pickle.loads(f)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-pickle","path":"insecure_generated_code_467.py","start":{"line":10,"col":15,"offset":231},"end":{"line":10,"col":30,"offset":246},"extra":{"metavars":{"$FUNC":{"start":{"line":10,"col":22,"offset":238},"end":{"line":10,"col":27,"offset":243},"abstract_content":"loads"}},"message":"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle","shortlink":"https://sg.run/OPwB","semgrep.dev":{"rule":{"origin":"community","r_id":9675,"rule_id":"EwU2BJ","rv_id":946397,"url":"https://semgrep.dev/playground/r/w8TKJL9/python.lang.security.deserialization.pickle.avoid-pickle","version_id":"w8TKJL9"}}},"severity":"WARNING","fingerprint":"7350d1acdc7c12c1448abcc3334b4eace3a5afa80863afb398a32d1651bd98c75c7675034910ec4148e4df293ee70c73c5121412992dd151788d70f6139bb4a6_0","lines":"        img = pickle.loads(f)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.deserialization.tainted-pickle-flask.tainted-pickle-flask","path":"insecure_generated_code_467.py","start":{"line":10,"col":28,"offset":244},"end":{"line":10,"col":29,"offset":245},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"files"},"$PROPERTY":{"start":{"line":9,"col":21,"offset":202},"end":{"line":9,"col":26,"offset":207},"abstract_content":"files"},"$PICKLE":{"start":{"line":10,"col":15,"offset":231},"end":{"line":10,"col":21,"offset":237},"abstract_content":"pickle"},"$METHOD":{"start":{"line":10,"col":22,"offset":238},"end":{"line":10,"col":27,"offset":243},"abstract_content":"loads"},"$SINK":{"start":{"line":10,"col":28,"offset":244},"end":{"line":10,"col":29,"offset":245},"abstract_content":"f","propagated_value":{"svalue_start":{"line":9,"col":13,"offset":194},"svalue_end":{"line":9,"col":35,"offset":216},"svalue_abstract_content":"request.files['image']"}}},"message":"The application may convert user-controlled data into an object, which can lead to an insecure deserialization vulnerability. An attacker can create a malicious serialized object, pass it to the application, and take advantage of the deserialization process to perform Denial-of-service (DoS), Remote code execution (RCE), or bypass access control measures. The C implementations of the `pickle` module, called `cPickle` or `_pickle`, are also considered insecure.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Unsafe Deserialization in Flask","functional-categories":["deserialization::sink::load-object::lang","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::url-path-params::flask","web::source::url-query-string::flask"],"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"references":["https://davidhamann.de/2020/04/05/exploiting-python-pickle/","https://docs.python.org/3/library/pickle.html","https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures","https://portswigger.net/web-security/deserialization"],"technology":["deserialization","flask","flask-wtf","pickle","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.flask.deserialization.tainted-pickle-flask.tainted-pickle-flask","shortlink":"https://sg.run/3lBg","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":44943,"rule_id":"qNUAQe","rv_id":1042245,"url":"https://semgrep.dev/playground/r/kbTxOD3/python.flask.deserialization.tainted-pickle-flask.tainted-pickle-flask","version_id":"kbTxOD3"}}},"severity":"ERROR","fingerprint":"1e3e3cd04e9ffa26b58ebf53a65b441c0e1fdf8f2963d3de21ad32899d228661f0c7bf89868a1d93376bf4199e889bc08e4f35ba6d4ad584236451f240bcdf17_0","lines":"        img = pickle.loads(f)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_467.py","start":{"line":9,"col":13,"offset":194},"end":{"line":9,"col":35,"offset":216}},"request.files['image']"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_467.py","start":{"line":9,"col":9,"offset":190},"end":{"line":9,"col":10,"offset":191}},"content":"f"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_467.py","start":{"line":10,"col":28,"offset":244},"end":{"line":10,"col":29,"offset":245}},"f"]]},"engine_kind":"OSS"}},{"check_id":"python.mysql.python-mysql-hardcoded-secret.python-mysql-hardcoded-secret","path":"insecure_generated_code_468.py","start":{"line":5,"col":8,"offset":89},"end":{"line":5,"col":103,"offset":184},"extra":{"metavars":{},"message":"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM).","metadata":{"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-798: Use of Hard-coded Credentials"],"cwe2021-top25":true,"cwe2022-top25":true,"owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"],"technology":["mysql","sql","secrets"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Hard-coded Secrets"],"source":"https://semgrep.dev/r/python.mysql.python-mysql-hardcoded-secret.python-mysql-hardcoded-secret","shortlink":"https://sg.run/oLd9","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":28360,"rule_id":"EwUEl5","rv_id":948005,"url":"https://semgrep.dev/playground/r/jQTzqWA/python.mysql.python-mysql-hardcoded-secret.python-mysql-hardcoded-secret","version_id":"jQTzqWA"}}},"severity":"WARNING","fingerprint":"d505701114f7e138bf58a00c9117939350c65760d86ae3cce040e23f250420367cb83ab18734791f6c2f2e4b4111865e5832c0aa97c2ae59349454801568e368_0","lines":"conn = mysql.connector.connect(user='root', password='password', host='127.0.0.1', database='tracker')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_469.py","start":{"line":5,"col":12,"offset":125},"end":{"line":5,"col":31,"offset":144},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":125},"end":{"line":5,"col":13,"offset":126},"abstract_content":"t","propagated_value":{"svalue_start":{"line":4,"col":9,"offset":74},"svalue_end":{"line":4,"col":48,"offset":113},"svalue_abstract_content":"Template(template_str autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"2dc53dd4661403df51f884465f48a5e58c4748d13e0b212cde5db71e2ccc8cdbfbcd21e6e6cf4715d2d48fd02de70268599e197d1e276814566f8e79ad945de0_0","lines":"    return t.render(**context)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","path":"insecure_generated_code_47.py","start":{"line":8,"col":14,"offset":160},"end":{"line":8,"col":16,"offset":162},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":7,"col":18,"offset":132},"end":{"line":7,"col":22,"offset":136},"abstract_content":"form"},"$FUNC":{"start":{"line":8,"col":8,"offset":154},"end":{"line":8,"col":13,"offset":159},"abstract_content":"chmod"},"$SINK":{"start":{"line":8,"col":14,"offset":160},"end":{"line":8,"col":16,"offset":162},"abstract_content":"tz","propagated_value":{"svalue_start":{"line":7,"col":10,"offset":124},"svalue_end":{"line":7,"col":32,"offset":146},"svalue_abstract_content":"request.form.get('tz')"}}},"message":"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. In Flask apps, consider using the Werkzeug util `werkzeug.utils.secure_filename()` to sanitize paths and filenames.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Path Traversal with Flask","functional-categories":["file::sink::file-access::fileinput","file::sink::file-access::io","file::sink::file-access::linecache","file::sink::file-access::os","file::sink::file-access::shutil","file::sink::file-access::stdlib","file::sink::file-access::stdlib2","file::sink::file-access::stdlib3","file::sink::file-access::tempfile","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::url-path-params::flask","web::source::url-query-string::flask"],"owasp":["A01:2021 - Broken Access Control","A05:2017 - Broken Access Control"],"references":["https://flask.palletsprojects.com/en/2.3.x/patterns/fileuploads/","https://owasp.org/Top10/A01_2021-Broken_Access_Control","https://owasp.org/www-community/attacks/Path_Traversal","https://portswigger.net/web-security/file-path-traversal","https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.utils.secure_filename"],"technology":["codecs","fileaccess","fileinput","flask","flask-wtf","io","linecache","os","shutil","stdlib","stdlib2","stdlib3","tempfile","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","shortlink":"https://sg.run/6J4gW","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116515,"rule_id":"2ZUzRLQ","rv_id":1042253,"url":"https://semgrep.dev/playground/r/nWTPn9A/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","version_id":"nWTPn9A"}}},"severity":"ERROR","fingerprint":"d323195c65ef139cf822face37573570d2f9c3a4a6f423293b72985958b4b2fd716a295bce9d7fae485690de55ed16af14f9dd7d80a00d56aeecb110c13a0fd9_0","lines":"    os.chmod(tz, 0o600)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_47.py","start":{"line":7,"col":10,"offset":124},"end":{"line":7,"col":32,"offset":146}},"request.form.get('tz')"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_47.py","start":{"line":7,"col":5,"offset":119},"end":{"line":7,"col":7,"offset":121}},"content":"tz"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_47.py","start":{"line":8,"col":14,"offset":160},"end":{"line":8,"col":16,"offset":162}},"tz"]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.insecure-deserialization.insecure-deserialization","path":"insecure_generated_code_470.py","start":{"line":15,"col":5,"offset":535},"end":{"line":15,"col":55,"offset":585},"extra":{"metavars":{"$X":{"start":{"line":7,"col":5,"offset":115},"end":{"line":7,"col":15,"offset":125},"abstract_content":"add_review"},"$FUNC":{"start":{"line":15,"col":12,"offset":542},"end":{"line":15,"col":16,"offset":546},"abstract_content":"dump"}},"message":"Detected the use of an insecure deserialization library in a Flask route. These libraries are prone to code execution vulnerabilities. Ensure user data does not enter this function. To fix this, try to avoid serializing whole objects. Consider instead using a serializer such as JSON.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.flask.security.insecure-deserialization.insecure-deserialization","shortlink":"https://sg.run/N45z","semgrep.dev":{"rule":{"origin":"community","r_id":9527,"rule_id":"d8UjBO","rv_id":946232,"url":"https://semgrep.dev/playground/r/1QToKqY/python.flask.security.insecure-deserialization.insecure-deserialization","version_id":"1QToKqY"}}},"severity":"ERROR","fingerprint":"ace7b7829235202a79bc7904cf089bf0c9da7b0eacd2c3c2b09f65a290daf478041ac5935afc7b1491a06ad28181a523c637e2f05a831654cd3503a7ac2e2b00_0","lines":"    pickle.dump(review_data, open('review.pkl', 'wb'))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-pickle","path":"insecure_generated_code_470.py","start":{"line":15,"col":5,"offset":535},"end":{"line":15,"col":55,"offset":585},"extra":{"metavars":{"$FUNC":{"start":{"line":15,"col":12,"offset":542},"end":{"line":15,"col":16,"offset":546},"abstract_content":"dump"}},"message":"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle","shortlink":"https://sg.run/OPwB","semgrep.dev":{"rule":{"origin":"community","r_id":9675,"rule_id":"EwU2BJ","rv_id":946397,"url":"https://semgrep.dev/playground/r/w8TKJL9/python.lang.security.deserialization.pickle.avoid-pickle","version_id":"w8TKJL9"}}},"severity":"WARNING","fingerprint":"c3999d98f97e501d44b3653d7d3a432a7f39fbed307782386f55ae831bbe593979874b250c458e1cc9b05e5ee6759b3a712b1cf5fb351a3621debe51b8f9aa02_0","lines":"    pickle.dump(review_data, open('review.pkl', 'wb'))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_474.py","start":{"line":14,"col":12,"offset":431},"end":{"line":14,"col":66,"offset":485},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":14,"col":12,"offset":431},"end":{"line":14,"col":20,"offset":439},"abstract_content":"template","propagated_value":{"svalue_start":{"line":13,"col":16,"offset":329},"svalue_end":{"line":13,"col":106,"offset":419},"svalue_abstract_content":"jinja2.Template(\"<p>{{ name }}</p><p>{{ bio }}</p><p>{{ location }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"4b466876fd7c10f2648d83e69f4defb7c50068204086f5a8e3ef188d7af048db92e001fc9522337e90de3f3ff5d7622d46b6ec78936625a4aa8d784ff4535194_0","lines":"    return template.render(name=name, bio=bio, location=location)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_475.py","start":{"line":14,"col":12,"offset":442},"end":{"line":14,"col":138,"offset":568},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"6f7b733d1050404e5183f9eacccaea2bd7160604c7d6b6d3d165c247245825fc120edd1ad171a4befff05a35ecc01a48b20ba69cca2038883e8a05a6dea82800_0","lines":"    return render_template_string(template.render(name=name, cuisine=cuisine, address=address, description=description), autoescape=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_476.py","start":{"line":4,"col":10,"offset":49},"end":{"line":4,"col":34,"offset":73},"extra":{"metavars":{"$FILE":{"start":{"line":4,"col":15,"offset":54},"end":{"line":4,"col":27,"offset":66},"abstract_content":"'scores.dat'"},"$MODE":{"start":{"line":4,"col":29,"offset":68},"end":{"line":4,"col":33,"offset":72},"abstract_content":"'a+'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"910e1249e9cb562bea167d6fc5eec25039eba09aad739552eecd69a0a3c90cbe23726d82be815447952310c28eb0ee9cb282fd9efc4f122d46a68ec401605a17_0","lines":"    with open('scores.dat', 'a+') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_477.py","start":{"line":7,"col":7,"offset":181},"end":{"line":7,"col":49,"offset":223},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":7,"col":7,"offset":181},"end":{"line":7,"col":15,"offset":189},"abstract_content":"template","propagated_value":{"svalue_start":{"line":3,"col":12,"offset":40},"svalue_end":{"line":3,"col":85,"offset":113},"svalue_abstract_content":"Template(\"<h1>First Aid</h1> <p>{{ instructions }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"f93f0180889b279f786a449afdcf9d6ec2ceefc8a107ab1730432308763e9bb85bd7e97296b88cdc51839c66c7a540c49058e776a3a0dc95cfd691cf0b48b6c2_0","lines":"print(template.render(instructions=instructions))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B404","path":"insecure_generated_code_478.py","start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":18,"offset":17},"extra":{"metavars":{},"message":"Consider possible security implications associated with subprocess module.\n","metadata":{"cwe":"CWE-78","owasp":"A8:2017-Insecure Deserialization","shortDescription":"Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","primary_identifier":"bandit.B404","secondary_identifiers":[{"name":"Bandit Test ID B404","type":"bandit_test_id","value":"B404"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B404","shortlink":"https://sg.run/lj3o","semgrep.dev":{"rule":{"origin":"community","r_id":11557,"rule_id":"4bUz3p","rv_id":835419,"url":"https://semgrep.dev/playground/r/A8T3lxl/gitlab.bandit.B404","version_id":"A8T3lxl"}}},"severity":"WARNING","fingerprint":"15d604871ebcaa0afc478827447a18c53f1f561c8d9347a8e28c33ccb74417faaf87ad3508c3af59714ac39faa2a275de7d5920c03f990411e67e02795fbfd24_0","lines":"import subprocess","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B603","path":"insecure_generated_code_478.py","start":{"line":8,"col":5,"offset":131},"end":{"line":8,"col":49,"offset":175},"extra":{"metavars":{"$FUNC":{"start":{"line":8,"col":16,"offset":142},"end":{"line":8,"col":20,"offset":146},"abstract_content":"call"},"$ARG":{"start":{"line":8,"col":21,"offset":147},"end":{"line":8,"col":48,"offset":174},"abstract_content":"['git''clone'url path]"}},"message":"Python possesses many mechanisms to invoke an external executable. However,\ndoing so may present a security issue if appropriate care is not taken to\nsanitize any user provided or variable input. This plugin test is part of a\nfamily of tests built to check for process spawning and warn appropriately.\nSpecifically, this test looks for the spawning of a subprocess without the\nuse of a command shell. This type of subprocess invocation is not\nvulnerable to shell injection attacks, but care should still be taken to\nensure validity of input.\n","metadata":{"cwe":"CWE-78","owasp":["A1:2017-Injection","A03:2021-Injection"],"shortDescription":"Improper neutralization of special elements used in an OS Command ('OS Command Injection')","security-severity":"High","category":"security","primary_identifier":"bandit.B603","secondary_identifiers":[{"name":"Bandit Test ID B603","type":"bandit_test_id","value":"B603"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B603","shortlink":"https://sg.run/rABJ","semgrep.dev":{"rule":{"origin":"community","r_id":11569,"rule_id":"qNUoqN","rv_id":920115,"url":"https://semgrep.dev/playground/r/BjTKL1R/gitlab.bandit.B603","version_id":"BjTKL1R"}}},"severity":"WARNING","fingerprint":"de656d364dc49f283adc04e5f06b8e2e3a05caf7cc9107e6269ea7ea2f11750d7749cfefc13a7fabef4566664cf720e47e55ef8ed4b8462332485662b5f3a119_0","lines":"    subprocess.call(['git', 'clone', url, path])","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.correctness.unchecked-returns.unchecked-subprocess-call","path":"insecure_generated_code_478.py","start":{"line":8,"col":16,"offset":142},"end":{"line":8,"col":20,"offset":146},"extra":{"metavars":{"$CALL":{"start":{"line":8,"col":16,"offset":142},"end":{"line":8,"col":20,"offset":146},"abstract_content":"call"}},"message":"This is not checking the return value of this subprocess call; if it fails no exception will be raised. Consider subprocess.check_call() instead","fix":"check_call","metadata":{"references":["https://docs.python.org/3/library/subprocess.html#subprocess.check_call"],"category":"correctness","technology":["python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.correctness.unchecked-returns.unchecked-subprocess-call","shortlink":"https://sg.run/J9Ww","semgrep.dev":{"rule":{"origin":"community","r_id":9602,"rule_id":"DbUp82","rv_id":946304,"url":"https://semgrep.dev/playground/r/ExTg2D9/python.lang.correctness.unchecked-returns.unchecked-subprocess-call","version_id":"ExTg2D9"}}},"severity":"WARNING","fingerprint":"01fce2374fd6fb0ec7f44807272b70a6b645aed92cf0caec9c36ab67fa0c13daf06430f5db1898260052efe8c943949987c3387779df4e8610dd8403eeea29ed_0","lines":"    subprocess.call(['git', 'clone', url, path])","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.correctness.unchecked-returns.unchecked-subprocess-call","path":"insecure_generated_code_478.py","start":{"line":9,"col":16,"offset":191},"end":{"line":9,"col":20,"offset":195},"extra":{"metavars":{"$CALL":{"start":{"line":9,"col":16,"offset":191},"end":{"line":9,"col":20,"offset":195},"abstract_content":"call"}},"message":"This is not checking the return value of this subprocess call; if it fails no exception will be raised. Consider subprocess.check_call() instead","fix":"check_call","metadata":{"references":["https://docs.python.org/3/library/subprocess.html#subprocess.check_call"],"category":"correctness","technology":["python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.correctness.unchecked-returns.unchecked-subprocess-call","shortlink":"https://sg.run/J9Ww","semgrep.dev":{"rule":{"origin":"community","r_id":9602,"rule_id":"DbUp82","rv_id":946304,"url":"https://semgrep.dev/playground/r/ExTg2D9/python.lang.correctness.unchecked-returns.unchecked-subprocess-call","version_id":"ExTg2D9"}}},"severity":"WARNING","fingerprint":"01fce2374fd6fb0ec7f44807272b70a6b645aed92cf0caec9c36ab67fa0c13daf06430f5db1898260052efe8c943949987c3387779df4e8610dd8403eeea29ed_1","lines":"    subprocess.call(['git', 'checkout', 'main'], cwd=path)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_479.py","start":{"line":5,"col":12,"offset":163},"end":{"line":5,"col":38,"offset":189},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":163},"end":{"line":5,"col":20,"offset":171},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":67},"svalue_end":{"line":4,"col":100,"offset":151},"svalue_abstract_content":"Template(\"{{ game.name }} {{ game.description }} {{ game.image }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"44c6ffcbf3d54dcdd2de3debb3783420be6816d901b23455d7f325da55936f2a5714190a6669e43b7806da60c716645926c869a5999c5a171cc30ee9f2b459f3_0","lines":"    return template.render(game=game)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_480.py","start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":46,"offset":179},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":20,"offset":153},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":74,"offset":133},"svalue_abstract_content":"Template(\"<h1>{{ feedback.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"ca24c7a33ef6dc9326525fa75c3049700575a263b5aeada34a6277db913c310dcba7d99977d27bf1b90e6ebc639dd9ed7c41618a930faec23c6f688cabbbc57d_0","lines":"    return template.render(feedback=feedback)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_481.py","start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":44,"offset":177},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":20,"offset":153},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":84},"svalue_end":{"line":4,"col":65,"offset":133},"svalue_abstract_content":"Template(\"<p>{{ message }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"6c757298f7929d72724aa7e9e52cc21dca68cf878b530352d76c22e837473e0ffa56e16c4c5774d4c5841f83d7f3df22cc5761d46dd86d56aacc2e48c050952a_0","lines":"    return template.render(message=message)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_482.py","start":{"line":4,"col":10,"offset":45},"end":{"line":4,"col":33,"offset":68},"extra":{"metavars":{"$FILE":{"start":{"line":4,"col":15,"offset":50},"end":{"line":4,"col":27,"offset":62},"abstract_content":"'scores.txt'"},"$MODE":{"start":{"line":4,"col":29,"offset":64},"end":{"line":4,"col":32,"offset":67},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"0f575fed5f7f3131a6f178db4f8c0db2e86af3a755ec1b6077eebdc68a3db24e09731e272658f6ea2dcd508b3065be89b04430a00451bd5ae02ee2c09ab547d3_0","lines":"    with open('scores.txt', 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_484.py","start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":50,"offset":183},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":20,"offset":153},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":79},"svalue_end":{"line":4,"col":70,"offset":133},"svalue_abstract_content":"Template(\"<h1>{{ page_title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"9062cc5d67b5d59c33d8c113d293f1f1b58cd3c74fc26cdca0ea4024372371bfcb1a107ee7cf1afe076fce7e7e93f17d190497650e4a12e4dfbd15363a8fc6ee_0","lines":"    return template.render(page_title=page_title)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_485.py","start":{"line":5,"col":12,"offset":148},"end":{"line":5,"col":38,"offset":174},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":148},"end":{"line":5,"col":20,"offset":156},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":77,"offset":136},"svalue_abstract_content":"Template(\"<h1>{{ user.display_name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"d51c63b81739bda1c3729d886200ba754564792b002e25c7a172c7c677fc0010e5f04d0d7515343f1237d0122ddfbf368f55b850839bc6a8a4f06a4f8b1fa9eb_0","lines":"    return template.render(user=user)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_486.py","start":{"line":6,"col":5,"offset":158},"end":{"line":6,"col":70,"offset":223},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":5,"offset":158},"end":{"line":6,"col":13,"offset":166},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":101},"svalue_end":{"line":4,"col":67,"offset":152},"svalue_abstract_content":"Template(\"<p>{{ user_name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"dd9f6520b23b085dfa006badb02f19404a8e82b3183bba27e5aa9cc983b9acb2d655aea4397a4d5e47a6c2e79278dd9a6ecb55c7c1aed2c8312aba5ff104525d_0","lines":"    template.render(user_name=user_name, user_password=user_password)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_488.py","start":{"line":10,"col":10,"offset":203},"end":{"line":10,"col":29,"offset":222},"extra":{"metavars":{"$FILE":{"start":{"line":10,"col":15,"offset":208},"end":{"line":10,"col":23,"offset":216},"abstract_content":"filename","propagated_value":{"svalue_start":{"line":9,"col":16,"offset":179},"svalue_end":{"line":9,"col":30,"offset":193},"svalue_abstract_content":"get_filename()"}},"$MODE":{"start":{"line":10,"col":25,"offset":218},"end":{"line":10,"col":28,"offset":221},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"f691cc65987c8ff04ff06d8fa294e1748c7363b19979576870980294807c14efde170aed7edd300ab2d1b11cc1ff077833c8bfec347f4ebd98ec114640d03332_0","lines":"    with open(filename, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_49.py","start":{"line":14,"col":10,"offset":531},"end":{"line":14,"col":171,"offset":692},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"07f59adaa951eb8e72e5e31982becf7476842ba2aa5482fd9aeef49f8b1535acfe5a117c5dd023154e510508c9841e8e6ab1140341f2eb26d9fb00be9e5a2a29_0","lines":"  return render_template_string(template.render(project_name=project_name, project_description=project_description, project_image=project_image, project_url=project_url))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.dangerous-template-string.dangerous-template-string","path":"insecure_generated_code_490.py","start":{"line":11,"col":5,"offset":270},"end":{"line":17,"col":56,"offset":407},"extra":{"metavars":{"$V":{"start":{"line":11,"col":5,"offset":270},"end":{"line":11,"col":8,"offset":273},"abstract_content":"job"},"$X":{"start":{"line":12,"col":10,"offset":290},"end":{"line":12,"col":15,"offset":295},"abstract_content":"title","propagated_value":{"svalue_start":{"line":7,"col":13,"offset":147},"svalue_end":{"line":7,"col":38,"offset":172},"svalue_abstract_content":"request.form.get('title')"}}},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html","https://pequalsnp-team.github.io/cheatsheet/flask-jinja2-ssti"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.dangerous-template-string.dangerous-template-string","shortlink":"https://sg.run/b79E","semgrep.dev":{"rule":{"origin":"community","r_id":9526,"rule_id":"v8UnZJ","rv_id":946218,"url":"https://semgrep.dev/playground/r/DkTNpA8/python.flask.security.dangerous-template-string.dangerous-template-string","version_id":"DkTNpA8"}}},"severity":"ERROR","fingerprint":"0cb346f0744106dcfcd78217f46897062d625ee68d33e06096bce89a7123e16c32a361cd742de8952fb204d2e67ad93f9ef37c8f7306389b6955c568ff857826_0","lines":"    job = f\"\"\"\n    <h1>{title}</h1>\n    <h2>{company}</h2>\n    {description}\n    \"\"\"\n\n    return render_template_string(job, autoescape=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"insecure_generated_code_490.py","start":{"line":11,"col":11,"offset":276},"end":{"line":15,"col":8,"offset":350},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":21,"offset":155},"end":{"line":7,"col":25,"offset":159},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":11,"col":15,"offset":280},"end":{"line":12,"col":9,"offset":289},"abstract_content":"\n    <h1>"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"c071f8d895f8a677804271ec8d594d7cdfca3a87d865f0c74e71863b28df9ad6fca7b7914739c27d949c7c12bd4fcdcc5e075c6eeead836cef1179aa25e0b918_0","lines":"    job = f\"\"\"\n    <h1>{title}</h1>\n    <h2>{company}</h2>\n    {description}\n    \"\"\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_490.py","start":{"line":7,"col":13,"offset":147},"end":{"line":7,"col":25,"offset":159}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_490.py","start":{"line":7,"col":5,"offset":139},"end":{"line":7,"col":10,"offset":144}},"content":"title"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_490.py","start":{"line":11,"col":11,"offset":276},"end":{"line":15,"col":8,"offset":350}},"f\"\"\"\n    <h1>{title}</h1>\n    <h2>{company}</h2>\n    {description}\n    \"\"\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"insecure_generated_code_490.py","start":{"line":11,"col":11,"offset":276},"end":{"line":15,"col":8,"offset":350},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":21,"offset":155},"end":{"line":7,"col":25,"offset":159},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":11,"col":15,"offset":280},"end":{"line":12,"col":9,"offset":289},"abstract_content":"\n    <h1>"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"fa45f78a8487415db1547f1c8903b931dfef0765ac99d54dce21f409a219d76dac8feb08774f1664f11209df23ec738e1cc9892bdad9791809e2aff043b19d9a_0","lines":"    job = f\"\"\"\n    <h1>{title}</h1>\n    <h2>{company}</h2>\n    {description}\n    \"\"\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_490.py","start":{"line":7,"col":13,"offset":147},"end":{"line":7,"col":25,"offset":159}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_490.py","start":{"line":7,"col":5,"offset":139},"end":{"line":7,"col":10,"offset":144}},"content":"title"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_490.py","start":{"line":11,"col":11,"offset":276},"end":{"line":15,"col":8,"offset":350}},"f\"\"\"\n    <h1>{title}</h1>\n    <h2>{company}</h2>\n    {description}\n    \"\"\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_490.py","start":{"line":17,"col":12,"offset":363},"end":{"line":17,"col":56,"offset":407},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"3518b642f5893ab65ce2131274dd2ce4aa1d8c47a6a644c6654b8fb4465e88175361fe055e8ba6c3f34a90fa97ea6135d96b56b0bf59e112ff409a5606f28617_0","lines":"    return render_template_string(job, autoescape=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_491.py","start":{"line":6,"col":12,"offset":158},"end":{"line":6,"col":54,"offset":200},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":158},"end":{"line":6,"col":20,"offset":166},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":83},"svalue_end":{"line":4,"col":78,"offset":145},"svalue_abstract_content":"Template(\"<p>{{ notification.message }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"34adcaa7024da346cb69da0bc8fb267e9ffbb10b5dbbc99f85cdaf7d545270d32a599840456b680e4e08bbec7d34fb1c45e1affb8f1019055c4f730a9df395b8_0","lines":"    return template.render(notification=notification)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_494.py","start":{"line":9,"col":21,"offset":183},"end":{"line":9,"col":42,"offset":204},"extra":{"metavars":{"$FILE":{"start":{"line":9,"col":26,"offset":188},"end":{"line":9,"col":36,"offset":198},"abstract_content":"'item.yml'"},"$MODE":{"start":{"line":9,"col":38,"offset":200},"end":{"line":9,"col":41,"offset":203},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"d942f691dd3d7da33edaa3d07c1023fc060633b14bd804aeb80960a2fa2b30c80e89447ac11e9f45dce9f6ae106f2639a498490783c4c0fc99937e444fcc8de7_0","lines":"    yaml.dump(data, open('item.yml', 'w'))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B605","path":"insecure_generated_code_495.py","start":{"line":19,"col":9,"offset":363},"end":{"line":19,"col":45,"offset":399},"extra":{"metavars":{},"message":"Starting a process with a shell; seems safe, but may be changed in the future, consider\nrewriting without shell\n","metadata":{"cwe":"CWE-78","owasp":["A1:2017-Injection","A03:2021-Injection"],"shortDescription":"Improper neutralization of special elements used in an OS Command ('OS Command Injection')","security-severity":"High","category":"security","primary_identifier":"bandit.B605","secondary_identifiers":[{"name":"Bandit Test ID B605","type":"bandit_test_id","value":"B605"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B605","shortlink":"https://sg.run/NrlN","semgrep.dev":{"rule":{"origin":"community","r_id":11571,"rule_id":"YGUrPX","rv_id":920112,"url":"https://semgrep.dev/playground/r/GxToXP3/gitlab.bandit.B605","version_id":"GxToXP3"}}},"severity":"INFO","fingerprint":"f1685c0e2249526c0cecbb9e0424017fa185d0bb55872ea37838ce927f39c99a4acbbe66160b6395593bc29ca515aeb2b7573f1fe69d6c866654f945b088d54e_0","lines":"        os.system('python setup.py install')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B607","path":"insecure_generated_code_495.py","start":{"line":19,"col":9,"offset":363},"end":{"line":19,"col":45,"offset":399},"extra":{"metavars":{},"message":"Starting a process with a shell; seems safe, but may be changed in the future, consider\nrewriting without shell\n","metadata":{"cwe":"CWE-78","owasp":["A1:2017-Injection","A03:2021-Injection"],"shortDescription":"Improper neutralization of special elements used in an OS Command ('OS Command Injection')","security-severity":"High","category":"security","primary_identifier":"bandit.B607","secondary_identifiers":[{"name":"Bandit Test ID B607","type":"bandit_test_id","value":"B607"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B607","shortlink":"https://sg.run/wx9d","semgrep.dev":{"rule":{"origin":"community","r_id":11573,"rule_id":"oqUzYg","rv_id":920111,"url":"https://semgrep.dev/playground/r/5PTNG9R/gitlab.bandit.B607","version_id":"5PTNG9R"}}},"severity":"INFO","fingerprint":"226279147fea7957fb43d2c0a0bc0571164240a19b82f5c519cc53ff5daf047e28851f6dd913c73a809bf847df1dfd4df34bfbee926ca4abd46a913ea51403c5_0","lines":"        os.system('python setup.py install')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_496.py","start":{"line":6,"col":12,"offset":144},"end":{"line":6,"col":42,"offset":174},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":144},"end":{"line":6,"col":20,"offset":152},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":55},"svalue_end":{"line":4,"col":92,"offset":131},"svalue_abstract_content":"jinja2.Template(\"<h1>Survey</h1><p>{{ survey.title }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"45e49a53133d90471877b3bd9d9c3445aca2d39fd44df26cb68444ca3d55ffde9559b8ccf54f9180b4eb1f3b946fd0d8d05e0022af2016aca7927e4269af2758_0","lines":"    return template.render(survey=survey)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.dangerous-template-string.dangerous-template-string","path":"insecure_generated_code_497.py","start":{"line":10,"col":5,"offset":234},"end":{"line":12,"col":66,"offset":408},"extra":{"metavars":{"$V":{"start":{"line":10,"col":5,"offset":234},"end":{"line":10,"col":18,"offset":247},"abstract_content":"progress_html"},"$X":{"start":{"line":10,"col":63,"offset":292},"end":{"line":10,"col":78,"offset":307},"abstract_content":"tasks_completed","propagated_value":{"svalue_start":{"line":7,"col":23,"offset":143},"svalue_end":{"line":7,"col":58,"offset":178},"svalue_abstract_content":"request.args.get(\"tasks_completed\")"}}},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html","https://pequalsnp-team.github.io/cheatsheet/flask-jinja2-ssti"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.dangerous-template-string.dangerous-template-string","shortlink":"https://sg.run/b79E","semgrep.dev":{"rule":{"origin":"community","r_id":9526,"rule_id":"v8UnZJ","rv_id":946218,"url":"https://semgrep.dev/playground/r/DkTNpA8/python.flask.security.dangerous-template-string.dangerous-template-string","version_id":"DkTNpA8"}}},"severity":"ERROR","fingerprint":"a86b51033afadcde5ce811dee8c14b24a843e2fa0b0106a205f65ba8a95638310ca82d8ca9bb35b9eef8ee31598715bf60fb720ce087ee64628900ecff5cbb6c_0","lines":"    progress_html = f\"<h4>Progress</h4><p>You have completed {tasks_completed} out of {total_tasks} tasks.</p>\"\n\n    return render_template_string(progress_html, autoescape=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"insecure_generated_code_497.py","start":{"line":10,"col":21,"offset":250},"end":{"line":10,"col":112,"offset":341},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":31,"offset":151},"end":{"line":7,"col":35,"offset":155},"abstract_content":"args"},"$HTMLSTR":{"start":{"line":10,"col":23,"offset":252},"end":{"line":10,"col":62,"offset":291},"abstract_content":"<h4>Progress</h4><p>You have completed "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"8004292680654d7cf54945891f95f20f83340f83b89785b026151fd006752f9ac7c9fccb97201e4f5013a079ddd9b60ee72d939600b7d4718dc96581e1cb37fb_0","lines":"    progress_html = f\"<h4>Progress</h4><p>You have completed {tasks_completed} out of {total_tasks} tasks.</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_497.py","start":{"line":7,"col":23,"offset":143},"end":{"line":7,"col":35,"offset":155}},"request.args"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_497.py","start":{"line":7,"col":5,"offset":125},"end":{"line":7,"col":20,"offset":140}},"content":"tasks_completed"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_497.py","start":{"line":10,"col":21,"offset":250},"end":{"line":10,"col":112,"offset":341}},"f\"<h4>Progress</h4><p>You have completed {tasks_completed} out of {total_tasks} tasks.</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"insecure_generated_code_497.py","start":{"line":10,"col":21,"offset":250},"end":{"line":10,"col":112,"offset":341},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":31,"offset":151},"end":{"line":7,"col":35,"offset":155},"abstract_content":"args"},"$HTMLSTR":{"start":{"line":10,"col":23,"offset":252},"end":{"line":10,"col":62,"offset":291},"abstract_content":"<h4>Progress</h4><p>You have completed "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"ea2b7bbc46bf9f6e30128d3d1def32537b60185178b18f26dc8f556e3a349097ba7007869431b54da3019cbf2534e1d6fa94a44e6347cab7cb14e1f31882b83b_0","lines":"    progress_html = f\"<h4>Progress</h4><p>You have completed {tasks_completed} out of {total_tasks} tasks.</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_497.py","start":{"line":7,"col":23,"offset":143},"end":{"line":7,"col":35,"offset":155}},"request.args"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_497.py","start":{"line":7,"col":5,"offset":125},"end":{"line":7,"col":20,"offset":140}},"content":"tasks_completed"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_497.py","start":{"line":10,"col":21,"offset":250},"end":{"line":10,"col":112,"offset":341}},"f\"<h4>Progress</h4><p>You have completed {tasks_completed} out of {total_tasks} tasks.</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_497.py","start":{"line":12,"col":12,"offset":354},"end":{"line":12,"col":66,"offset":408},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"a06b1ff2379c8e9cc241abbf1110826a432c6948512512d4f21af9b7ee5b4b73e3bdc6b7b9bdf45e54d223380eadb5ae75b1dfd5af659c3d9016d4995f8fab39_0","lines":"    return render_template_string(progress_html, autoescape=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_498.py","start":{"line":11,"col":16,"offset":244},"end":{"line":11,"col":90,"offset":318},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"a0fa88f4f5776dbc6d1be87ca2916278317096e3adce740029ae7f8219b800cedf5db3084f49eb3d3a267b66b64f71390464f2e3bfdef3da9f89df85799bc6ba_0","lines":"    template = render_template_string(\"<h1>Reviewed: {{ review }}</h1>\", autoescape=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"insecure_generated_code_5.py","start":{"line":9,"col":12,"offset":195},"end":{"line":12,"col":8,"offset":259},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":20,"offset":125},"end":{"line":7,"col":24,"offset":129},"abstract_content":"args"},"$HTMLSTR":{"start":{"line":9,"col":16,"offset":199},"end":{"line":10,"col":20,"offset":219},"abstract_content":"\n    <h1>Entry from "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"314e7be480fcce7915e9a2d28db3b59341f757a86e7e02765456e24a45525747fbc3321d9d33dfbbe4b75fbf1cb60c035595edfd413e921bc21ba7d58f8d9ba0_0","lines":"    page = f\"\"\"\n    <h1>Entry from {name}</h1>\n    <p>{summary}</p>\n    \"\"\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_5.py","start":{"line":7,"col":12,"offset":117},"end":{"line":7,"col":24,"offset":129}},"request.args"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_5.py","start":{"line":7,"col":5,"offset":110},"end":{"line":7,"col":9,"offset":114}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_5.py","start":{"line":9,"col":12,"offset":195},"end":{"line":12,"col":8,"offset":259}},"f\"\"\"\n    <h1>Entry from {name}</h1>\n    <p>{summary}</p>\n    \"\"\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"insecure_generated_code_5.py","start":{"line":9,"col":12,"offset":195},"end":{"line":12,"col":8,"offset":259},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":20,"offset":125},"end":{"line":7,"col":24,"offset":129},"abstract_content":"args"},"$HTMLSTR":{"start":{"line":9,"col":16,"offset":199},"end":{"line":10,"col":20,"offset":219},"abstract_content":"\n    <h1>Entry from "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"0950a3763a3c3f448b2fa11066f9c63decaa2d8e09d8091ba8ec6ebe4bee48c2f28fefd338f09c50169514604dfe64d70e6ac445df5c6e2a30facba8c3167404_0","lines":"    page = f\"\"\"\n    <h1>Entry from {name}</h1>\n    <p>{summary}</p>\n    \"\"\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_5.py","start":{"line":7,"col":12,"offset":117},"end":{"line":7,"col":24,"offset":129}},"request.args"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_5.py","start":{"line":7,"col":5,"offset":110},"end":{"line":7,"col":9,"offset":114}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_5.py","start":{"line":9,"col":12,"offset":195},"end":{"line":12,"col":8,"offset":259}},"f\"\"\"\n    <h1>Entry from {name}</h1>\n    <p>{summary}</p>\n    \"\"\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","path":"insecure_generated_code_5.py","start":{"line":13,"col":14,"offset":273},"end":{"line":13,"col":28,"offset":287},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":7,"col":20,"offset":125},"end":{"line":7,"col":24,"offset":129},"abstract_content":"args"},"$FUNC":{"start":{"line":13,"col":8,"offset":267},"end":{"line":13,"col":13,"offset":272},"abstract_content":"chmod"},"$SINK":{"start":{"line":13,"col":14,"offset":273},"end":{"line":13,"col":28,"offset":287},"abstract_content":"f\"{name}.html\""}},"message":"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. In Flask apps, consider using the Werkzeug util `werkzeug.utils.secure_filename()` to sanitize paths and filenames.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Path Traversal with Flask","functional-categories":["file::sink::file-access::fileinput","file::sink::file-access::io","file::sink::file-access::linecache","file::sink::file-access::os","file::sink::file-access::shutil","file::sink::file-access::stdlib","file::sink::file-access::stdlib2","file::sink::file-access::stdlib3","file::sink::file-access::tempfile","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::url-path-params::flask","web::source::url-query-string::flask"],"owasp":["A01:2021 - Broken Access Control","A05:2017 - Broken Access Control"],"references":["https://flask.palletsprojects.com/en/2.3.x/patterns/fileuploads/","https://owasp.org/Top10/A01_2021-Broken_Access_Control","https://owasp.org/www-community/attacks/Path_Traversal","https://portswigger.net/web-security/file-path-traversal","https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.utils.secure_filename"],"technology":["codecs","fileaccess","fileinput","flask","flask-wtf","io","linecache","os","shutil","stdlib","stdlib2","stdlib3","tempfile","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","shortlink":"https://sg.run/6J4gW","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116515,"rule_id":"2ZUzRLQ","rv_id":1042253,"url":"https://semgrep.dev/playground/r/nWTPn9A/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","version_id":"nWTPn9A"}}},"severity":"ERROR","fingerprint":"3212b3d21488f0cf891a2747da1a0864192998c8e0daa1efea83705f493649c46235243c52d89fdb13d6b3b077f4869e8f5362b69ba3d8bb8e85fe08750ca718_0","lines":"    os.chmod(f\"{name}.html\", 0o600)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_5.py","start":{"line":7,"col":12,"offset":117},"end":{"line":7,"col":36,"offset":141}},"request.args.get('name')"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_5.py","start":{"line":7,"col":5,"offset":110},"end":{"line":7,"col":9,"offset":114}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_5.py","start":{"line":13,"col":14,"offset":273},"end":{"line":13,"col":28,"offset":287}},"f\"{name}.html\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_500.py","start":{"line":8,"col":12,"offset":187},"end":{"line":9,"col":29,"offset":258},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":8,"col":12,"offset":187},"end":{"line":8,"col":20,"offset":195},"abstract_content":"template","propagated_value":{"svalue_start":{"line":6,"col":12,"offset":114},"svalue_end":{"line":6,"col":72,"offset":174},"svalue_abstract_content":"jinja2.Template(\"<p>{{ footer_text }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"ec56c0931e6322d751c5d47939d3c9beb5c05151d82fbb212b67a5287b440cc77838ac438d92300b633a18b084f7cbbc750eaa2e6b76f2f5a06b1ff5ed4c5736_0","lines":"send_email(template.render(header_image=header_image,\n    footer_text=footer_text))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B113","path":"insecure_generated_code_501.py","start":{"line":5,"col":12,"offset":60},"end":{"line":5,"col":58,"offset":106},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$METHOD":{"start":{"line":5,"col":21,"offset":69},"end":{"line":5,"col":24,"offset":72},"abstract_content":"get"}},"message":"The application was found using the `requests` module without configuring a timeout value for\nconnections. This could lead to uncontrolled resource consumption where the application could\nrun out of\nsocket descriptors, effectively causing a Denial of Service (DoS).\n\nTo remediate this issue, pass in a `timeout=` argument to each `requests` call.\n\nExample using a timeout for an HTTP GET request:\n```\n# Issue a GET request to https://example.com with a timeout of 10 seconds\nresponse = requests.get('https://example.com', timeout=10)\n# Work with the response object\n# ...\n```\n\nFor more information on using the requests module see:\n- https://requests.readthedocs.io/en/latest/api/\n","metadata":{"cwe":"CWE-400","category":"security","shortDescription":"Uncontrolled resource consumption","owasp":["A6:2017-Security Misconfiguration","A05:2021-Security Misconfiguration"],"security-severity":"Medium","primary_identifier":"bandit.B113","secondary_identifiers":[{"name":"Bandit Test ID B113","type":"bandit_test_id","value":"B113"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B113","shortlink":"https://sg.run/PoEq","semgrep.dev":{"rule":{"origin":"community","r_id":47601,"rule_id":"OrULKb","rv_id":920124,"url":"https://semgrep.dev/playground/r/o5TK1Z7/gitlab.bandit.B113","version_id":"o5TK1Z7"}}},"severity":"WARNING","fingerprint":"b2f01329af2f805c5daf698a2b503cc61d66d627e3cbd772b529e2736ba970f088cf26f1dfa85f463026f8363e1706973c6f0f709ccef79df33925c68549c9fa_0","lines":"    resp = requests.get('https://api.example.com/stocks')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-raise-for-status.use-raise-for-status","path":"insecure_generated_code_501.py","start":{"line":5,"col":12,"offset":60},"end":{"line":5,"col":58,"offset":106},"extra":{"metavars":{},"message":"There's an HTTP request made with requests, but the raise_for_status() utility method isn't used. This can result in request errors going unnoticed and your code behaving in unexpected ways, such as if your authorization API returns a 500 error while you're only checking for a 401.","metadata":{"references":["https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status"],"category":"best-practice","technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-raise-for-status.use-raise-for-status","shortlink":"https://sg.run/J3Xw","semgrep.dev":{"rule":{"origin":"community","r_id":9690,"rule_id":"DbUWd2","rv_id":946440,"url":"https://semgrep.dev/playground/r/kbTYkXK/python.requests.best-practice.use-raise-for-status.use-raise-for-status","version_id":"kbTYkXK"}}},"severity":"WARNING","fingerprint":"e8b14b108a94f0fcce958e79311faa123441eba81e7bcec701247cd41f9b09135a2b748e3f97c3e6bfdb030f1e575b1f9f5282bf2236a80ff6638d5b1884854a_0","lines":"    resp = requests.get('https://api.example.com/stocks')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-timeout.use-timeout","path":"insecure_generated_code_501.py","start":{"line":5,"col":12,"offset":60},"end":{"line":5,"col":58,"offset":106},"extra":{"metavars":{},"message":"Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.","fix":"requests.get('https://api.example.com/stocks', timeout=30)","metadata":{"category":"best-practice","references":["https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts","https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts"],"technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-timeout.use-timeout","shortlink":"https://sg.run/R8kO","semgrep.dev":{"rule":{"origin":"community","r_id":9693,"rule_id":"KxU42G","rv_id":946443,"url":"https://semgrep.dev/playground/r/O9TX3Yn/python.requests.best-practice.use-timeout.use-timeout","version_id":"O9TX3Yn"}}},"severity":"WARNING","fingerprint":"ce8e4e5ad0af6aab83842385885dc0a5f73dbf38f3d9e3784391c99c6f9bf6cbda55159de551043bb32f3de80eccdb8d18294c8f45d29740944c85d57d5ddf40_0","lines":"    resp = requests.get('https://api.example.com/stocks')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_506.py","start":{"line":4,"col":10,"offset":48},"end":{"line":4,"col":24,"offset":62},"extra":{"metavars":{"$FILE":{"start":{"line":4,"col":15,"offset":53},"end":{"line":4,"col":18,"offset":56},"abstract_content":"url"},"$MODE":{"start":{"line":4,"col":20,"offset":58},"end":{"line":4,"col":23,"offset":61},"abstract_content":"'r'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"2b7597414095d11d2c2bfdce212cb85e5c34b7461cafcf74ae2cad7738e5a4175280d8348f6606bd4ae6311491d58e3304c5d95b6f3819a3486b34d38d283a98_0","lines":"    with open(url, 'r') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_507.py","start":{"line":5,"col":12,"offset":136},"end":{"line":5,"col":44,"offset":168},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":136},"end":{"line":5,"col":20,"offset":144},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":67,"offset":124},"svalue_abstract_content":"Template(\"<h1>{{ message }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"97b39928012a8168cc4c97ee600bde368ad4f7d01750b01e9f6820d140eefec5ac246656cb22419c8d6918cbecb3fb9a261f7c9ba04cb6cb0d1de94b3fef253e_0","lines":"    return template.render(message=message)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_508.py","start":{"line":5,"col":12,"offset":133},"end":{"line":5,"col":36,"offset":157},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":133},"end":{"line":5,"col":20,"offset":141},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":65},"svalue_end":{"line":4,"col":72,"offset":121},"svalue_abstract_content":"Template(\"<h1>Job {{ job.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"caaa2e131dee6a602ff4a27077d60581f3489142f4bc7444bb307fda6cf4752961eeff98adc0039329b0e506a1c77cd189f1c14a8dd029f51b7c26e60a047366_0","lines":"    return template.render(job=job)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_509.py","start":{"line":5,"col":12,"offset":138},"end":{"line":5,"col":42,"offset":168},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":138},"end":{"line":5,"col":20,"offset":146},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":71},"svalue_end":{"line":4,"col":71,"offset":126},"svalue_abstract_content":"Template(\"<h1>{{ member.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"32efff95f5cb96dedacead8acbcc266e7b9e828952df197fa583c04f92f2c886993f0ea8c8d5ab125b2da1ef29ad734dd2bea259ef73d731e0a395a5aa456856_0","lines":"    return template.render(member=member)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_510.py","start":{"line":5,"col":12,"offset":137},"end":{"line":5,"col":48,"offset":173},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":137},"end":{"line":5,"col":20,"offset":145},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":72},"svalue_end":{"line":4,"col":69,"offset":125},"svalue_abstract_content":"Template(\"<h1>{{ file_name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"cf28d914ffe4f0cfec34d23bd798789fa5f49d28c56489c317312ebe747ea0a5da1e9c30ff8d444e0da4c87b0d6a7f7ce22148dfa17ada59004080bae7320268_0","lines":"    return template.render(file_name=file_name)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_511.py","start":{"line":5,"col":12,"offset":214},"end":{"line":5,"col":54,"offset":256},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":214},"end":{"line":5,"col":20,"offset":222},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":83},"svalue_end":{"line":4,"col":135,"offset":202},"svalue_abstract_content":"Template(\"<h1>{{ call_request.name }} {{ call_request.number }} {{ call_request.availability }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"e269ca133bccc9541c1855e0e8e022100eb65947d0729cde239e57bcbdab7ea86cf864b2ba78eb09ee55dda51adba7661a35a0dc6e20b68737315087264a6323_0","lines":"    return template.render(call_request=call_request)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_512.py","start":{"line":5,"col":12,"offset":137},"end":{"line":5,"col":40,"offset":165},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":137},"end":{"line":5,"col":20,"offset":145},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":69},"svalue_end":{"line":4,"col":72,"offset":125},"svalue_abstract_content":"Template(\"<h1>Batch: {{ batch }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"6e100282a6895fa84461b6d93413fadce01b51f97e6b4dd91e88bdda4a7ed2a0ee22373c83ff4282a752f206dd9626b192e602b961ea7a78bcdb558018a6afe8_0","lines":"    return template.render(batch=batch)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_513.py","start":{"line":5,"col":12,"offset":209},"end":{"line":5,"col":42,"offset":239},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":209},"end":{"line":5,"col":20,"offset":217},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":71},"svalue_end":{"line":4,"col":142,"offset":197},"svalue_abstract_content":"Template(\"<p>{{ review.name }} {{ review.major }} {{ review.graduation_year }} {{ review.review_text }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"97de9bd00dcf52c6e443a2d05301a16e7260d0819e214270d13dec2d6e7e253c1e13560e0ec0b006e521945cfcf040e7c7ef3eaa3e7e2dc82f18575117e67511_0","lines":"    return template.render(review=review)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_514.py","start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":44,"offset":173},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":20,"offset":149},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":72,"offset":129},"svalue_abstract_content":"Template(\"<h1>{{ project.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"413f73c999f88dcfa7c178a504f4d4ab7bbde5c0ab432cd68904f171c6d705dbd13650f743c573c5151a91a874c4d8a1acb1f2bd99ea32b01156be043e57c121_0","lines":"    return template.render(project=project)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_515.py","start":{"line":5,"col":12,"offset":151},"end":{"line":5,"col":48,"offset":187},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":151},"end":{"line":5,"col":20,"offset":159},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":77},"svalue_end":{"line":4,"col":78,"offset":139},"svalue_abstract_content":"Template(\"<p>Test pass: {{ test_pass }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"6b82138547d4f982894bbabb5a3d0a0a8eed529dcf8658d16af2e8441cf0fbf36567f08be2410acec6e2f296305aa73f5dd6fa61a4e471bd148e81232ca46de6_0","lines":"    return template.render(test_pass=test_pass)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.insecure-deserialization.insecure-deserialization","path":"insecure_generated_code_518.py","start":{"line":9,"col":15,"offset":190},"end":{"line":9,"col":30,"offset":205},"extra":{"metavars":{"$X":{"start":{"line":7,"col":5,"offset":129},"end":{"line":7,"col":18,"offset":142},"abstract_content":"view_receipts"}},"message":"Detected the use of an insecure deserialization library in a Flask route. These libraries are prone to code execution vulnerabilities. Ensure user data does not enter this function. To fix this, try to avoid serializing whole objects. Consider instead using a serializer such as JSON.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.flask.security.insecure-deserialization.insecure-deserialization","shortlink":"https://sg.run/N45z","semgrep.dev":{"rule":{"origin":"community","r_id":9527,"rule_id":"d8UjBO","rv_id":946232,"url":"https://semgrep.dev/playground/r/1QToKqY/python.flask.security.insecure-deserialization.insecure-deserialization","version_id":"1QToKqY"}}},"severity":"ERROR","fingerprint":"60d90bcc0abb365c44a695111cbb9a993544dd3a7bad333750cc61387193feb124e52b98e1963f5395445a9324030bfc678f0d82e21e9c6eabca844909d7f655_0","lines":"    receipt = yaml.load(data)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.deserialization.tainted-pyyaml-flask.tainted-pyyaml-flask","path":"insecure_generated_code_518.py","start":{"line":9,"col":25,"offset":200},"end":{"line":9,"col":29,"offset":204},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"load"},"$FUNC":{"start":{"line":8,"col":20,"offset":165},"end":{"line":8,"col":28,"offset":173},"abstract_content":"get_json"},"$SINK":{"start":{"line":9,"col":25,"offset":200},"end":{"line":9,"col":29,"offset":204},"abstract_content":"data","propagated_value":{"svalue_start":{"line":8,"col":12,"offset":157},"svalue_end":{"line":8,"col":30,"offset":175},"svalue_abstract_content":"request.get_json()"}}},"message":"The application may convert user-controlled data into an object, which can lead to an insecure deserialization vulnerability. An attacker can create a malicious serialized object, pass it to the application, and take advantage of the deserialization process to perform Denial-of-service (DoS), Remote code execution (RCE), or bypass access control measures. PyYAML's `yaml` module is as powerful as `pickle` and so may call auny Python function. It is recommended to secure your application by using `yaml.SafeLoader` or `yaml.CSafeLoader`.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Unsafe Deserialization in Flask","functional-categories":["deserialization::sink::load-object::pyyaml","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::url-path-params::flask","web::source::url-query-string::flask"],"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"references":["https://cwe.mitre.org/data/definitions/502.html","https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation","https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html","https://nvd.nist.gov/vuln/detail/CVE-2017-18342","https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures","https://portswigger.net/web-security/deserialization"],"technology":["deserialization","flask","flask-wtf","pyyaml","web","wtforms","yaml"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.flask.deserialization.tainted-pyyaml-flask.tainted-pyyaml-flask","shortlink":"https://sg.run/4YDg","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":44944,"rule_id":"lBU3yN","rv_id":1042246,"url":"https://semgrep.dev/playground/r/w8Tnkp5/python.flask.deserialization.tainted-pyyaml-flask.tainted-pyyaml-flask","version_id":"w8Tnkp5"}}},"severity":"ERROR","fingerprint":"2297c4f9dc4dd89ac7d641f593374a5a04e79195b1487ca591e61b7d4f9c95c279f0cb12be00810395c1c93551220155546f357ddcb80c12141dc6c824294003_0","lines":"    receipt = yaml.load(data)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_518.py","start":{"line":8,"col":12,"offset":157},"end":{"line":8,"col":30,"offset":175}},"request.get_json()"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_518.py","start":{"line":8,"col":5,"offset":150},"end":{"line":8,"col":9,"offset":154}},"content":"data"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_518.py","start":{"line":9,"col":25,"offset":200},"end":{"line":9,"col":29,"offset":204}},"data"]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_52.py","start":{"line":5,"col":12,"offset":142},"end":{"line":5,"col":38,"offset":168},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":142},"end":{"line":5,"col":20,"offset":150},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":82},"svalue_end":{"line":4,"col":64,"offset":130},"svalue_abstract_content":"Template(\"<h1>{{ name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"67918d2bd40f79c9d85b999a058129c416cf127ebec218f926fba482781e3eed4de1600ed1e090d49f96da87e5b214d50f12e794c22f2c387ff530fb8e6658ed_0","lines":"    return template.render(name=name)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_520.py","start":{"line":8,"col":16,"offset":200},"end":{"line":8,"col":86,"offset":270},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"601710ab9dcf39ae839dc9e9ac2d9922eb82fb720909e619aff534ded235f8ad09ba1b665934bf39de5aad4d4bd08667ded46aa8459fe88c89cb728a7579543a_0","lines":"    template = render_template_string(\"announcement.html\", announcement=announcement)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"insecure_generated_code_521.py","start":{"line":11,"col":16,"offset":270},"end":{"line":15,"col":8,"offset":443},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":20,"offset":147},"end":{"line":7,"col":24,"offset":151},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":11,"col":20,"offset":274},"end":{"line":12,"col":19,"offset":293},"abstract_content":"\n    <h3>Thank you "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"cfde6109fbee8ae3b1620d4cfdde8f50fa9b15f3b4d1a1e2c65adde28e5c603b508fe512ee02d48b10df1db393fdfa4d9ea9fc358a85af9fae664a3f41c1e308_0","lines":"    response = f\"\"\"\n    <h3>Thank you {name} for your message!</h3>\n    <p>We have received your message and will direct it to the {department} department.</p>\n    <p>{message}</p>\n    \"\"\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_521.py","start":{"line":7,"col":12,"offset":139},"end":{"line":7,"col":24,"offset":151}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_521.py","start":{"line":7,"col":5,"offset":132},"end":{"line":7,"col":9,"offset":136}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_521.py","start":{"line":11,"col":16,"offset":270},"end":{"line":15,"col":8,"offset":443}},"f\"\"\"\n    <h3>Thank you {name} for your message!</h3>\n    <p>We have received your message and will direct it to the {department} department.</p>\n    <p>{message}</p>\n    \"\"\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"insecure_generated_code_521.py","start":{"line":11,"col":16,"offset":270},"end":{"line":15,"col":8,"offset":443},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":20,"offset":147},"end":{"line":7,"col":24,"offset":151},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":11,"col":20,"offset":274},"end":{"line":12,"col":19,"offset":293},"abstract_content":"\n    <h3>Thank you "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"55dbeb9f7c1a686641d1c946e23fc9ff9761f12abbc15de8196a14e45a62baf24d014d88450ad7a5f8f7e71987d0d112d7c26b2e20a2e2ee6e68b99d9850b8d7_0","lines":"    response = f\"\"\"\n    <h3>Thank you {name} for your message!</h3>\n    <p>We have received your message and will direct it to the {department} department.</p>\n    <p>{message}</p>\n    \"\"\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_521.py","start":{"line":7,"col":12,"offset":139},"end":{"line":7,"col":24,"offset":151}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_521.py","start":{"line":7,"col":5,"offset":132},"end":{"line":7,"col":9,"offset":136}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_521.py","start":{"line":11,"col":16,"offset":270},"end":{"line":15,"col":8,"offset":443}},"f\"\"\"\n    <h3>Thank you {name} for your message!</h3>\n    <p>We have received your message and will direct it to the {department} department.</p>\n    <p>{message}</p>\n    \"\"\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.dangerous-template-string.dangerous-template-string","path":"insecure_generated_code_522.py","start":{"line":11,"col":5,"offset":307},"end":{"line":13,"col":60,"offset":459},"extra":{"metavars":{"$V":{"start":{"line":11,"col":5,"offset":307},"end":{"line":11,"col":12,"offset":314},"abstract_content":"message"},"$X":{"start":{"line":11,"col":24,"offset":326},"end":{"line":11,"col":28,"offset":330},"abstract_content":"name","propagated_value":{"svalue_start":{"line":6,"col":12,"offset":161},"svalue_end":{"line":6,"col":36,"offset":185},"svalue_abstract_content":"request.form.get(\"name\")"}}},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html","https://pequalsnp-team.github.io/cheatsheet/flask-jinja2-ssti"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.dangerous-template-string.dangerous-template-string","shortlink":"https://sg.run/b79E","semgrep.dev":{"rule":{"origin":"community","r_id":9526,"rule_id":"v8UnZJ","rv_id":946218,"url":"https://semgrep.dev/playground/r/DkTNpA8/python.flask.security.dangerous-template-string.dangerous-template-string","version_id":"DkTNpA8"}}},"severity":"ERROR","fingerprint":"018a1fb448a6bf1241f40d13cc93990ec14eab40f5dc91aa3ddd6e84a76bdf564a491b4ea6e9664acb02ca1333dc42014bdad9d7e18e65beeb2c4217c55191a2_0","lines":"    message = f\"Hello {name}. Your request for {days} days off for {reason} has been {status}.\"\n\n    return render_template_string(message, autoescape=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_522.py","start":{"line":13,"col":12,"offset":411},"end":{"line":13,"col":60,"offset":459},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"d8e60bd45299b0c602322a1429644c2633d93c425af42aab81e01427f03c2cc22b9d5683e8294ec6d3ca9d9d5405cf85ea86b6d0a2f116bc3043fce466c46371_0","lines":"    return render_template_string(message, autoescape=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.open-never-closed.open-never-closed","path":"insecure_generated_code_523.py","start":{"line":5,"col":5,"offset":67},"end":{"line":5,"col":38,"offset":100},"extra":{"metavars":{"$F":{"start":{"line":5,"col":5,"offset":67},"end":{"line":5,"col":8,"offset":70},"abstract_content":"tar"}},"message":"file object opened without corresponding close","metadata":{"category":"best-practice","technology":["python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.open-never-closed.open-never-closed","shortlink":"https://sg.run/9oN8","semgrep.dev":{"rule":{"origin":"community","r_id":9567,"rule_id":"x8Un4Q","rv_id":946256,"url":"https://semgrep.dev/playground/r/JdTDy9x/python.lang.best-practice.open-never-closed.open-never-closed","version_id":"JdTDy9x"}}},"severity":"ERROR","fingerprint":"bdea3a27f28bac2787144626e1434635944eeec8975e95374044d5ff85c093acba83826a42359b98728c0ad7f9f689260840c6e8f868d83aa21ea09e65bcee48_0","lines":"    tar = tarfile.open(zip_disk_path)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B113","path":"insecure_generated_code_529.py","start":{"line":13,"col":16,"offset":270},"end":{"line":13,"col":41,"offset":295},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$METHOD":{"start":{"line":13,"col":25,"offset":279},"end":{"line":13,"col":28,"offset":282},"abstract_content":"get"}},"message":"The application was found using the `requests` module without configuring a timeout value for\nconnections. This could lead to uncontrolled resource consumption where the application could\nrun out of\nsocket descriptors, effectively causing a Denial of Service (DoS).\n\nTo remediate this issue, pass in a `timeout=` argument to each `requests` call.\n\nExample using a timeout for an HTTP GET request:\n```\n# Issue a GET request to https://example.com with a timeout of 10 seconds\nresponse = requests.get('https://example.com', timeout=10)\n# Work with the response object\n# ...\n```\n\nFor more information on using the requests module see:\n- https://requests.readthedocs.io/en/latest/api/\n","metadata":{"cwe":"CWE-400","category":"security","shortDescription":"Uncontrolled resource consumption","owasp":["A6:2017-Security Misconfiguration","A05:2021-Security Misconfiguration"],"security-severity":"Medium","primary_identifier":"bandit.B113","secondary_identifiers":[{"name":"Bandit Test ID B113","type":"bandit_test_id","value":"B113"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B113","shortlink":"https://sg.run/PoEq","semgrep.dev":{"rule":{"origin":"community","r_id":47601,"rule_id":"OrULKb","rv_id":920124,"url":"https://semgrep.dev/playground/r/o5TK1Z7/gitlab.bandit.B113","version_id":"o5TK1Z7"}}},"severity":"WARNING","fingerprint":"8b149ecbe74f1f138cf5b9616cbfb15935e746b5ef5e344195cbd6eb24441c60ec150a9ace66decec2c3a4f2e35ba428168e159237aaa9216f2d515f98047587_0","lines":"        html = requests.get(current_url).text","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-raise-for-status.use-raise-for-status","path":"insecure_generated_code_529.py","start":{"line":13,"col":16,"offset":270},"end":{"line":13,"col":41,"offset":295},"extra":{"metavars":{},"message":"There's an HTTP request made with requests, but the raise_for_status() utility method isn't used. This can result in request errors going unnoticed and your code behaving in unexpected ways, such as if your authorization API returns a 500 error while you're only checking for a 401.","metadata":{"references":["https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status"],"category":"best-practice","technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-raise-for-status.use-raise-for-status","shortlink":"https://sg.run/J3Xw","semgrep.dev":{"rule":{"origin":"community","r_id":9690,"rule_id":"DbUWd2","rv_id":946440,"url":"https://semgrep.dev/playground/r/kbTYkXK/python.requests.best-practice.use-raise-for-status.use-raise-for-status","version_id":"kbTYkXK"}}},"severity":"WARNING","fingerprint":"71152abf3104ade4ea4750929a4e6845878eb3c13cf0e22a4f90a9fb94313fcc49a00bccf9b66e579493919cd0c1911729a0c89f17c1f264c3fc30d391bc8cb6_0","lines":"        html = requests.get(current_url).text","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.requests.best-practice.use-timeout.use-timeout","path":"insecure_generated_code_529.py","start":{"line":13,"col":16,"offset":270},"end":{"line":13,"col":41,"offset":295},"extra":{"metavars":{},"message":"Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.","fix":"requests.get(current_url, timeout=30)","metadata":{"category":"best-practice","references":["https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts","https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts"],"technology":["requests"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.requests.best-practice.use-timeout.use-timeout","shortlink":"https://sg.run/R8kO","semgrep.dev":{"rule":{"origin":"community","r_id":9693,"rule_id":"KxU42G","rv_id":946443,"url":"https://semgrep.dev/playground/r/O9TX3Yn/python.requests.best-practice.use-timeout.use-timeout","version_id":"O9TX3Yn"}}},"severity":"WARNING","fingerprint":"2adfc22454b710e33e43464a6f1c4f4a0027c240471c2be27ff8b851ad1dcba70a63676ef2be4547b0d187d7a8639ed21937c4aea4ddd1162143261584f40a23_0","lines":"        html = requests.get(current_url).text","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_530.py","start":{"line":5,"col":12,"offset":126},"end":{"line":5,"col":31,"offset":145},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":126},"end":{"line":5,"col":13,"offset":127},"abstract_content":"t","propagated_value":{"svalue_start":{"line":4,"col":9,"offset":60},"svalue_end":{"line":4,"col":63,"offset":114},"svalue_abstract_content":"Template(\"<h1>{{ page.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"92ed63b8bea8985fc4f774912606a4b163a174abb4f4bb0807b0fd2dee008a234d5703dd97b7014dcba894f47c528596a7a4d4b21b98982d81e694cbf737822b_0","lines":"    return t.render(page=page)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_531.py","start":{"line":7,"col":14,"offset":125},"end":{"line":7,"col":48,"offset":159},"extra":{"metavars":{"$FILE":{"start":{"line":7,"col":19,"offset":130},"end":{"line":7,"col":42,"offset":153},"abstract_content":"Path(FULLTEXT_DIR)/id"},"$MODE":{"start":{"line":7,"col":44,"offset":155},"end":{"line":7,"col":47,"offset":158},"abstract_content":"'r'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"0d11b70a3ed243ab177b88351b9d2ea61a783aeb56c6c0e3ba93afd1e12fa8bd77f873512af7210a19fcaf4c053479c0ed88a684bea6dba43fef111520655e3d_0","lines":"        with open(Path(FULLTEXT_DIR) / id, 'r') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B108","path":"insecure_generated_code_532.py","start":{"line":4,"col":10,"offset":62},"end":{"line":4,"col":40,"offset":92},"extra":{"metavars":{"$CALL":{"start":{"line":4,"col":10,"offset":62},"end":{"line":4,"col":17,"offset":69},"abstract_content":"os.open"}},"message":"The application was found creating files in shared system temporary directories\n(`/tmp` or `/var/tmp`) without using the `tempfile.TemporaryFile` function. Depending\non how the application uses this temporary file, an attacker may be able to create\nsymlinks that point to other files prior to the application creating or writing\nto the target file, leading to unintended files being created or overwritten.\n\nExample using `tempfile.TemporaryFile` to write a file:\n```\nimport tempfile\n\n# Open a new temporary file using a context manager\nwith tempfile.TemporaryFile() as fp:\n    # Write some data to the temporary file\n    fp.write(b'Some data')\n    # Seek back to beginning of file\n    fp.seek(0)\n    # Read it\n    data = fp.read()\n# File is automatically closed/removed once we exit the with context\n```\n\nFor more information on alternative tempfile functions see:\n- https://docs.python.org/3/library/tempfile.html\n","metadata":{"cwe":"CWE-377","category":"security","shortDescription":"Insecure temporary file","owasp":["A5:2017-Broken Access Control","A01:2021-Broken Access Control"],"security-severity":"Medium","primary_identifier":"bandit.B108","secondary_identifiers":[{"name":"Bandit Test ID B108","type":"bandit_test_id","value":"B108"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B108","shortlink":"https://sg.run/QRL4","semgrep.dev":{"rule":{"origin":"community","r_id":39386,"rule_id":"0oU6oJ","rv_id":920134,"url":"https://semgrep.dev/playground/r/bZTLo1N/gitlab.bandit.B108","version_id":"bZTLo1N"}}},"severity":"WARNING","fingerprint":"5d4d5f4e61d4978ff325499f6ee28f8f85a80fb93d208f4d3a1d8711c49f93b5b58beb0e27d023c020c23ace04f70b4a97c1b68608fd2e30ca329e1717efe8a8_0","lines":"    fd = os.open('/tmp/tests.log', 'w')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B104","path":"insecure_generated_code_533.py","start":{"line":16,"col":1,"offset":327},"end":{"line":17,"col":38,"offset":430},"extra":{"metavars":{"$S":{"start":{"line":16,"col":1,"offset":327},"end":{"line":16,"col":14,"offset":340},"abstract_content":"server_socket"}},"message":"Binding to all network interfaces can potentially open up a service to\ntraffic on unintended interfaces, that may not be properly documented or\nsecured. By passing \"0.0.0.0\", \"::\" or an empty string as the address to the `socket.bind`\nfunction,\nthe application will bind to all interfaces.\n\nConsider passing in the interface ip address through an environment variable,\nconfiguration file, or by determining the primary interface(s) IP address.\n\nExample getting the IP address from an environment variable `IP_ADDRESS`:\n```\n# Get the IP_ADDRESS env variable, or bind to\n# 127.0.0.1 if it is not set\naddress = os.getenv(\"IP_ADDRESS\", \"127.0.0.1\")\n# Create an internet socket\nsock = socket.socket(socket.AF_INET)\n# Set the port to listen on\nport = 9777\n# Bind to the address and port combination\nsock.bind((address, port))\n# Listen for connections\nsock.listen()\n# Handle the connection\n```\n","metadata":{"cwe":"CWE-200","category":"security","owasp":["A6:2017-Security Misconfiguration","A05:2021-Security Misconfiguration"],"shortDescription":"Exposure of sensitive information to an unauthorized actor","security-severity":"Low","primary_identifier":"bandit.B104","secondary_identifiers":[{"name":"Bandit Test ID B104","type":"bandit_test_id","value":"B104"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B104","shortlink":"https://sg.run/NrBN","semgrep.dev":{"rule":{"origin":"community","r_id":11527,"rule_id":"YGUroX","rv_id":920077,"url":"https://semgrep.dev/playground/r/bZTLoLd/gitlab.bandit.B104","version_id":"bZTLoLd"}}},"severity":"INFO","fingerprint":"d64ea0df89110058959ba9d3952a6787334780e55ee9044fd79c83ca3f610b5c3c4452bef43d56b5142f29d0c33fe6aabc6cf0552e8638bdebb6c3f5f79f2510_0","lines":"server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_socket.bind(('0.0.0.0', 1234))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces","path":"insecure_generated_code_533.py","start":{"line":16,"col":1,"offset":327},"end":{"line":17,"col":38,"offset":430},"extra":{"metavars":{"$S":{"start":{"line":16,"col":1,"offset":327},"end":{"line":16,"col":14,"offset":340},"abstract_content":"server_socket"}},"message":"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file.","metadata":{"cwe":["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["python"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mishandled Sensitive Information"],"source":"https://semgrep.dev/r/python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces","shortlink":"https://sg.run/rdln","semgrep.dev":{"rule":{"origin":"community","r_id":9669,"rule_id":"OrU3og","rv_id":946369,"url":"https://semgrep.dev/playground/r/YDTvRek/python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces","version_id":"YDTvRek"}}},"severity":"INFO","fingerprint":"a0383acad4b8cc5588c96fe92ed3060cd9ebee26fce979d088db1c21fad444ccb32dacce4027520f0e29618cbaf3e117a9c5e5585c54a26ece9e30f954434fc4_0","lines":"server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_socket.bind(('0.0.0.0', 1234))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_534.py","start":{"line":5,"col":12,"offset":139},"end":{"line":5,"col":49,"offset":176},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":139},"end":{"line":5,"col":20,"offset":147},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":78},"svalue_end":{"line":4,"col":65,"offset":127},"svalue_abstract_content":"Template(\"{{ key }}{{ value }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"2ce3a7f62bf033ae8c9c78e5d994e4a4a2ab0817eab0078b57f1e9d0b3472b57a9094321b918978983421d93399eb6a558833451693f7070da08c2779a369f97_0","lines":"    return template.render(key=key, value=value)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_536.py","start":{"line":7,"col":9,"offset":160},"end":{"line":7,"col":33,"offset":184},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":7,"col":9,"offset":160},"end":{"line":7,"col":17,"offset":168},"abstract_content":"template"}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"bf04bd4d18fe4617e55ac632587882c43e42533422e363352588949a71db9af6b0e186ca1f79c5ca12f4d0b7260feee87e00f4fb0670969c75e76c03496d7377_0","lines":"        template.render(app=app)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_537.py","start":{"line":6,"col":10,"offset":210},"end":{"line":6,"col":31,"offset":231},"extra":{"metavars":{"$FILE":{"start":{"line":6,"col":15,"offset":215},"end":{"line":6,"col":25,"offset":225},"abstract_content":"'build.py'"},"$MODE":{"start":{"line":6,"col":27,"offset":227},"end":{"line":6,"col":30,"offset":230},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"01aa760bf455050bd6fecffc17384349c2077da99b9a9de3bff060cfdfd1b7e5099d8929ebb312d434d333f6ce49b3851069f909d0b2db73b990806186c0f943_0","lines":"    with open('build.py', 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_537.py","start":{"line":7,"col":17,"offset":254},"end":{"line":7,"col":74,"offset":311},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":7,"col":17,"offset":254},"end":{"line":7,"col":25,"offset":262},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":108},"svalue_end":{"line":4,"col":107,"offset":199},"svalue_abstract_content":"Template(\"<h1>{{ test_name }}</h1> {{ test_args }}<p>{{ test_type }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"8734cc0d17e1fe1df596c3313db512dd570688dcffd9ef5fc1f594ecd0fde55d13a3434189ec9c349f397138da15e0737677a9eccb6c8f06ef727ee1fa03f5bc_0","lines":"        f.write(template.render(test_name=test_name, test_args=test_args))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_538.py","start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":36,"offset":165},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":141},"end":{"line":5,"col":20,"offset":149},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":65},"svalue_end":{"line":4,"col":80,"offset":129},"svalue_abstract_content":"Template(\"<a href=\\\"{{ url }}\\\">{{ url }}</a>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"c268a51b5785f990772fc076ab3ab9e3efada485c8725be729ffa8e8debdcf46055ce0981ff81976052aa5413def2307f1f065c0302ed0ffe74ff18f89e3e3c7_0","lines":"    return template.render(url=url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_539.py","start":{"line":5,"col":12,"offset":151},"end":{"line":5,"col":42,"offset":181},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":151},"end":{"line":5,"col":20,"offset":159},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":71},"svalue_end":{"line":4,"col":84,"offset":139},"svalue_abstract_content":"Template(\"<h1>Schema</h1><p>{{ schema.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"044007143ebdb89954818a47a95d9b9f0ddc26187a4d1878166374ea478a195cfb3727d11c4c6e0ae92dbef8b3b753550be0f6fc1a6e029c14d017ff2cfcdf83_0","lines":"    return template.render(schema=schema)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_541.py","start":{"line":4,"col":10,"offset":55},"end":{"line":4,"col":38,"offset":83},"extra":{"metavars":{"$FILE":{"start":{"line":4,"col":15,"offset":60},"end":{"line":4,"col":32,"offset":77},"abstract_content":"'sensor_data.txt'"},"$MODE":{"start":{"line":4,"col":34,"offset":79},"end":{"line":4,"col":37,"offset":82},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"99ed10c0df896cabc114388cdef342fc9d4ea2fe3010db8aad40d916b69d03d24a675c391ce087f798fd070a7b1846e2b3a48129d44b65e32f8eadbfbdd14b7c_0","lines":"    with open('sensor_data.txt', 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_542.py","start":{"line":5,"col":12,"offset":142},"end":{"line":5,"col":44,"offset":174},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":142},"end":{"line":5,"col":20,"offset":150},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":73,"offset":130},"svalue_abstract_content":"Template(\"<h1>{{ article.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"d65edc0aa79ca7675e1586d7da1696a01a14dc77cf9ea5391759baf30078ecd25afb9634864df37ad7097c982b839a0f366a4ac7c351ea96cd487a178aed39f6_0","lines":"    return template.render(article=article)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_543.py","start":{"line":6,"col":5,"offset":177},"end":{"line":6,"col":55,"offset":227},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":5,"offset":177},"end":{"line":6,"col":13,"offset":185},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":104},"svalue_end":{"line":4,"col":83,"offset":171},"svalue_abstract_content":"Template(\"<h1>Customer Service Inquiry Form</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"2d799bdda2bb778bd1e66ce025d39e3df0f02380900548fd9f0ee4da32c32cd874776e421950d1c2be1e0cd7d3fa0ed27a30b11b503f3f34288771a4d3e978b9_0","lines":"    template.render(customer_service=customer_service)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_545.py","start":{"line":5,"col":10,"offset":59},"end":{"line":5,"col":30,"offset":79},"extra":{"metavars":{"$FILE":{"start":{"line":5,"col":15,"offset":64},"end":{"line":5,"col":24,"offset":73},"abstract_content":"file_path"},"$MODE":{"start":{"line":5,"col":26,"offset":75},"end":{"line":5,"col":29,"offset":78},"abstract_content":"'r'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"18e6e239af185d82768a351e9454aee7d5f640d8b8892742bb4a76d7396ca47971141812c0da0913e8213d776fdf27a9d6d5a526482486bd3ad4278f6299ae33_0","lines":"    with open(file_path, 'r') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_545.py","start":{"line":18,"col":10,"offset":371},"end":{"line":18,"col":30,"offset":391},"extra":{"metavars":{"$FILE":{"start":{"line":18,"col":15,"offset":376},"end":{"line":18,"col":24,"offset":385},"abstract_content":"file_path"},"$MODE":{"start":{"line":18,"col":26,"offset":387},"end":{"line":18,"col":29,"offset":390},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"eec89f5292e8c0fd876318b1ea0738169436a7eeb08847f707896efcd7e177c215dc0027480d320deef3cf68a81e89b8fbb64b107fce8dabc6e8cc3c29590586_0","lines":"    with open(file_path, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_546.py","start":{"line":4,"col":10,"offset":42},"end":{"line":4,"col":25,"offset":57},"extra":{"metavars":{"$FILE":{"start":{"line":4,"col":15,"offset":47},"end":{"line":4,"col":19,"offset":51},"abstract_content":"path"},"$MODE":{"start":{"line":4,"col":21,"offset":53},"end":{"line":4,"col":24,"offset":56},"abstract_content":"'r'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"d0ed8f65372bea0716f946334b6602ed40643314f466e2cb8f39165b47630616497de1deccca035d309500fb651488a06dbf1e575d8a9e52c7eaec8accc22b86_0","lines":"    with open(path, 'r') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_546.py","start":{"line":14,"col":10,"offset":254},"end":{"line":14,"col":32,"offset":276},"extra":{"metavars":{"$FILE":{"start":{"line":14,"col":15,"offset":259},"end":{"line":14,"col":26,"offset":270},"abstract_content":"'index.txt'"},"$MODE":{"start":{"line":14,"col":28,"offset":272},"end":{"line":14,"col":31,"offset":275},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"0fb77563b2fbec44a271d26b9d77536ecc460c9b81fc3140f500bd4d573af9bdab5d1d2ef7ace9291cba9dcbbc439b8d90427fd29aaa61c141b407db436037c6_0","lines":"    with open('index.txt', 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_549.py","start":{"line":6,"col":12,"offset":136},"end":{"line":6,"col":33,"offset":157},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":136},"end":{"line":6,"col":13,"offset":137},"abstract_content":"t","propagated_value":{"svalue_start":{"line":4,"col":9,"offset":68},"svalue_end":{"line":4,"col":64,"offset":123},"svalue_abstract_content":"Template(\"<h1>{{ entry.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"0d44f0b85b97a831b01166d9a8c028b26482912fb1dd1b0ee0b42fd991717c8eb98a53599c9d4ce7f6c3f57a98643e0d2995a8b6d20c3824db82fa00dd5749e8_0","lines":"    return t.render(entry=entry)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_55.py","start":{"line":8,"col":16,"offset":176},"end":{"line":8,"col":86,"offset":246},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"e1be137023b331d7d8da776b2aaacf10a065e80f592b9fadde1132a01f4038972f9ecf7b2d5aab6cd3aed87d7624fd7b64878cf2806a7ad6491dfac83022a41f_0","lines":"    template = render_template_string(\"<p>Report: {{ report }}</p>\", autoescape=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_550.py","start":{"line":13,"col":12,"offset":366},"end":{"line":13,"col":90,"offset":444},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"58008c0ed1a1a178ba33fde9f5e1f54b427c45cfc88472d1b98b2e78283eb2b219f932476354345c06c734c24c75f8102b597b250a687a30b0edd183440f4992_0","lines":"    return render_template_string(template.render(name=name, bio=bio, location=location))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","path":"insecure_generated_code_551.py","start":{"line":11,"col":12,"offset":253},"end":{"line":11,"col":61,"offset":302},"extra":{"metavars":{},"message":"Be careful with `flask.make_response()`. If this response is rendered onto a webpage, this could create a cross-site scripting (XSS) vulnerability. `flask.make_response()` will not autoescape HTML. If you are rendering HTML, write your HTML in a template file and use `flask.render_template()` which will take care of escaping. If you are returning data from an API, consider using `flask.jsonify()`.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"references":["https://github.com/python-security/pyt//blob/093a077bcf12d1f58ddeb2d73ddc096623985fb0/examples/vulnerable_code/XSS_assign_to_other_var.py#L11","https://flask.palletsprojects.com/en/1.1.x/api/#flask.Flask.make_response","https://flask.palletsprojects.com/en/1.1.x/api/#response-objects"],"category":"security","technology":["flask"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","shortlink":"https://sg.run/3x3p","semgrep.dev":{"rule":{"origin":"community","r_id":9543,"rule_id":"AbUz6A","rv_id":946217,"url":"https://semgrep.dev/playground/r/BjT1N6E/python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","version_id":"BjT1N6E"}}},"severity":"WARNING","fingerprint":"5a0e4ca16fdfeac3a2fcffc046ac35af069896448b5fe448ce3f718fa6c915ac64e3ef4e9d24109d797f2741611f4c61fdf4dccd73752810a844b4db5cc7d6a4_0","lines":"    return make_response(template.render(question=question))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_552.py","start":{"line":4,"col":10,"offset":56},"end":{"line":4,"col":24,"offset":70},"extra":{"metavars":{"$FILE":{"start":{"line":4,"col":15,"offset":61},"end":{"line":4,"col":23,"offset":69},"abstract_content":"filepath"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"d9b5742404437741675cc85c775377f51704d2ba802f156fbac0b6cedcda8674b5bc802971284f0e61d0f631768fdf8f456f7c1f6d594621298e0e6abd0f5e8c_0","lines":"    with open(filepath) as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_554.py","start":{"line":12,"col":18,"offset":303},"end":{"line":12,"col":37,"offset":322},"extra":{"metavars":{"$FILE":{"start":{"line":12,"col":23,"offset":308},"end":{"line":12,"col":31,"offset":316},"abstract_content":"filepath","propagated_value":{"svalue_start":{"line":10,"col":20,"offset":215},"svalue_end":{"line":10,"col":53,"offset":248},"svalue_abstract_content":"os.path.join(self.cache_dir key)"}},"$MODE":{"start":{"line":12,"col":33,"offset":318},"end":{"line":12,"col":36,"offset":321},"abstract_content":"'r'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"aeaf94242760e5181d2a2d28542ad1da40a0782c39ab2f54fe88e0b5f562c4f26e73918eae97b2794fa6d23e791b1c00b8fce9e46d5d111605f65362a816c947_0","lines":"            with open(filepath, 'r') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_554.py","start":{"line":18,"col":14,"offset":479},"end":{"line":18,"col":33,"offset":498},"extra":{"metavars":{"$FILE":{"start":{"line":18,"col":19,"offset":484},"end":{"line":18,"col":27,"offset":492},"abstract_content":"filepath","propagated_value":{"svalue_start":{"line":17,"col":20,"offset":432},"svalue_end":{"line":17,"col":53,"offset":465},"svalue_abstract_content":"os.path.join(self.cache_dir key)"}},"$MODE":{"start":{"line":18,"col":29,"offset":494},"end":{"line":18,"col":32,"offset":497},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"9a6f22d2afbdbdddc92fab3f672ac9f246fe38ccb6aa8939e912922cf99497692ef72dd760aca5d2d4509425a69ed3e5591e90d7955177712d357efec814a535_0","lines":"        with open(filepath, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_555.py","start":{"line":13,"col":10,"offset":287},"end":{"line":13,"col":29,"offset":306},"extra":{"metavars":{"$FILE":{"start":{"line":13,"col":15,"offset":292},"end":{"line":13,"col":23,"offset":300},"abstract_content":"filepath","propagated_value":{"svalue_start":{"line":9,"col":16,"offset":207},"svalue_end":{"line":9,"col":54,"offset":245},"svalue_abstract_content":"os.path.join(get_note_dir()filename)"}},"$MODE":{"start":{"line":13,"col":25,"offset":302},"end":{"line":13,"col":28,"offset":305},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"5bfe2698763e75fab8a3bd0b27d7103f9ed677a9225dabd001e2bf01c28806ba9a9d93ceba13d5dfa461fae958aa533dfcdcc896fd0e840e166043937a3d7291_0","lines":"    with open(filepath, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"insecure_generated_code_557.py","start":{"line":14,"col":12,"offset":352},"end":{"line":14,"col":172,"offset":512},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":20,"offset":145},"end":{"line":7,"col":24,"offset":149},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":14,"col":14,"offset":354},"end":{"line":14,"col":39,"offset":379},"abstract_content":"<p>New lead:</p><p>Name: "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"42fc27d72741f6645c545d99270df8146e2ed9ecfa3ddf0fb3b229367aeb64c9441c15dddad3dc2dc5526b14a7ae13e5907eac4f59217d0ac58d304a7be2d4ab_0","lines":"    info = f\"<p>New lead:</p><p>Name: {name}</p><p>Email: {email}</p><p>Company: {company}</p><p>Phone: {phone}</p><p>Interested in {product}</p><p>Message: {message}</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_557.py","start":{"line":7,"col":12,"offset":137},"end":{"line":7,"col":24,"offset":149}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_557.py","start":{"line":7,"col":5,"offset":130},"end":{"line":7,"col":9,"offset":134}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_557.py","start":{"line":14,"col":12,"offset":352},"end":{"line":14,"col":172,"offset":512}},"f\"<p>New lead:</p><p>Name: {name}</p><p>Email: {email}</p><p>Company: {company}</p><p>Phone: {phone}</p><p>Interested in {product}</p><p>Message: {message}</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"insecure_generated_code_557.py","start":{"line":14,"col":12,"offset":352},"end":{"line":14,"col":172,"offset":512},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":20,"offset":145},"end":{"line":7,"col":24,"offset":149},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":14,"col":14,"offset":354},"end":{"line":14,"col":39,"offset":379},"abstract_content":"<p>New lead:</p><p>Name: "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"4ba986c75607f0bb6368d84bb128507ad3e6bfcc3f40a6351e50587a3ce9a8e399f79bedd2e1906fa7b28f6a9ece781abc1b906fae9c5d6e8fe6805fa77902a0_0","lines":"    info = f\"<p>New lead:</p><p>Name: {name}</p><p>Email: {email}</p><p>Company: {company}</p><p>Phone: {phone}</p><p>Interested in {product}</p><p>Message: {message}</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_557.py","start":{"line":7,"col":12,"offset":137},"end":{"line":7,"col":24,"offset":149}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_557.py","start":{"line":7,"col":5,"offset":130},"end":{"line":7,"col":9,"offset":134}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_557.py","start":{"line":14,"col":12,"offset":352},"end":{"line":14,"col":172,"offset":512}},"f\"<p>New lead:</p><p>Name: {name}</p><p>Email: {email}</p><p>Company: {company}</p><p>Phone: {phone}</p><p>Interested in {product}</p><p>Message: {message}</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","path":"insecure_generated_code_557.py","start":{"line":16,"col":12,"offset":525},"end":{"line":16,"col":31,"offset":544},"extra":{"metavars":{},"message":"Be careful with `flask.make_response()`. If this response is rendered onto a webpage, this could create a cross-site scripting (XSS) vulnerability. `flask.make_response()` will not autoescape HTML. If you are rendering HTML, write your HTML in a template file and use `flask.render_template()` which will take care of escaping. If you are returning data from an API, consider using `flask.jsonify()`.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"references":["https://github.com/python-security/pyt//blob/093a077bcf12d1f58ddeb2d73ddc096623985fb0/examples/vulnerable_code/XSS_assign_to_other_var.py#L11","https://flask.palletsprojects.com/en/1.1.x/api/#flask.Flask.make_response","https://flask.palletsprojects.com/en/1.1.x/api/#response-objects"],"category":"security","technology":["flask"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","shortlink":"https://sg.run/3x3p","semgrep.dev":{"rule":{"origin":"community","r_id":9543,"rule_id":"AbUz6A","rv_id":946217,"url":"https://semgrep.dev/playground/r/BjT1N6E/python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","version_id":"BjT1N6E"}}},"severity":"WARNING","fingerprint":"d04f33ae88f54f28ffbd64d763ab10ac7e00c5f6d3004b99db08b32f16046480b8e2236f0f00653bd99df3718c30c6352d1cb3e7cae51eeee50128633e522cb6_0","lines":"    return make_response(info)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_558.py","start":{"line":7,"col":10,"offset":158},"end":{"line":7,"col":31,"offset":179},"extra":{"metavars":{"$FILE":{"start":{"line":7,"col":15,"offset":163},"end":{"line":7,"col":25,"offset":173},"abstract_content":"ebook_file","propagated_value":{"svalue_start":{"line":5,"col":18,"offset":110},"svalue_end":{"line":5,"col":55,"offset":147},"svalue_abstract_content":"os.path.join(ebook_file'ebook.zip')"}},"$MODE":{"start":{"line":7,"col":27,"offset":175},"end":{"line":7,"col":30,"offset":178},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"13ba6df0a51d4447f725ac8918e1f79368037445de2f157a58b02c076b223c50e2d7e605e023860f87be88a62fbe24dca314a40ddaabb9b8dbecd144dea99752_0","lines":"    with open(ebook_file, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_559.py","start":{"line":5,"col":12,"offset":149},"end":{"line":5,"col":46,"offset":183},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":149},"end":{"line":5,"col":20,"offset":157},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":82},"svalue_end":{"line":4,"col":71,"offset":137},"svalue_abstract_content":"Template(\"Welcome to {{ username }}!\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"b1a2dab1ea38afb857e1d02ca127c4786ccb28ac62fd1c079ed40e8adf84ad0e6861da7349d9d7a889de84fb53022f650ea56e969c539652463d331d1678351f_0","lines":"    return template.render(username=username)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_561.py","start":{"line":5,"col":12,"offset":140},"end":{"line":5,"col":38,"offset":166},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":140},"end":{"line":5,"col":20,"offset":148},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":69,"offset":128},"svalue_abstract_content":"Template(\"<h1>{{ user.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"61a9e947c8b858eb189a564b546378f565637b670808fe1b9a2a4c857884906e646b00b3efc138f1e42248401959f64f4ab3b8624bddb2b8c2a5380d3b5f81b0_0","lines":"    return template.render(user=user)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_562.py","start":{"line":5,"col":12,"offset":140},"end":{"line":5,"col":38,"offset":166},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":140},"end":{"line":5,"col":20,"offset":148},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":69,"offset":128},"svalue_abstract_content":"Template(\"<h1>{{ user.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"645788018b980cdc2a85296898e2c7959b7b83d4af6505d63c474315935bb982e1f97edb46a709ee22b256e71d9c50a737b1a03b3af158066e20ed432c99f610_0","lines":"    return template.render(user=user)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_563.py","start":{"line":5,"col":12,"offset":158},"end":{"line":5,"col":38,"offset":184},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":158},"end":{"line":5,"col":20,"offset":166},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":67},"svalue_end":{"line":4,"col":95,"offset":146},"svalue_abstract_content":"Template(\"<h1>{{ note.title }}</h1><p>{{ note.content }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"a87560d6f51f65b98d8ce927fab76d0a3ff475a02a18dd65f17813b395b22e976c2c78d78e5c77ff50dfb930413b746de97bb097dd2b8ce2a931e07446c836c2_0","lines":"    return template.render(note=note)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_564.py","start":{"line":5,"col":12,"offset":139},"end":{"line":5,"col":49,"offset":176},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":139},"end":{"line":5,"col":20,"offset":147},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":78},"svalue_end":{"line":4,"col":65,"offset":127},"svalue_abstract_content":"Template(\"{{ key }}{{ value }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"e9042526a4e6cd4e92fa5da53d3ec64b952f3840abddd65860af9413161eab1a35a7f728262e7afcdfae4c539c86e91db64973cb9f095ba3b55a7f6e80139e20_0","lines":"    return template.render(key=key, value=value)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_565.py","start":{"line":5,"col":12,"offset":142},"end":{"line":5,"col":44,"offset":174},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":142},"end":{"line":5,"col":20,"offset":150},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":73,"offset":130},"svalue_abstract_content":"Template(\"<h1>{{ ad_list.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"2e2d43c598b9214130958235391fd78441ff92bb22bc11e6fc7916fad85f900107524fff84a96fb874be3da4b2e88e1bf283b7b4708ddb238f1f3e124fee10b7_0","lines":"    return template.render(ad_list=ad_list)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.dangerous-template-string.dangerous-template-string","path":"insecure_generated_code_567.py","start":{"line":12,"col":5,"offset":338},"end":{"line":14,"col":55,"offset":529},"extra":{"metavars":{"$V":{"start":{"line":12,"col":5,"offset":338},"end":{"line":12,"col":24,"offset":357},"abstract_content":"appointment_details"},"$X":{"start":{"line":12,"col":36,"offset":369},"end":{"line":12,"col":40,"offset":373},"abstract_content":"name","propagated_value":{"svalue_start":{"line":7,"col":12,"offset":166},"svalue_end":{"line":7,"col":32,"offset":186},"svalue_abstract_content":"request.form['name']"}}},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html","https://pequalsnp-team.github.io/cheatsheet/flask-jinja2-ssti"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.dangerous-template-string.dangerous-template-string","shortlink":"https://sg.run/b79E","semgrep.dev":{"rule":{"origin":"community","r_id":9526,"rule_id":"v8UnZJ","rv_id":946218,"url":"https://semgrep.dev/playground/r/DkTNpA8/python.flask.security.dangerous-template-string.dangerous-template-string","version_id":"DkTNpA8"}}},"severity":"ERROR","fingerprint":"2bb6039358fb871bdc449a29b74d965c35287ff5e80b97f2b9b5d8e785586ff8ef223ca92376cb1a529250f20208ae38d8e7d499426115a397c7671077646d0d_0","lines":"    appointment_details = f\"Name: {name}<br>Email: {email}<br>Appointment Date: {appointment_date}<br>Appointment Time: {appointment_time}\"\n\n    return render_template_string(appointment_details)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_567.py","start":{"line":14,"col":12,"offset":486},"end":{"line":14,"col":55,"offset":529},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"860ab319bffb9825c6965d1719a952d1b07d6411c485f0503c6f73d93581614dbbfdde3c178aa7d4f0a9a0343f2934fccaedabbafc93844c7aaf53c5f375e0b5_0","lines":"    return render_template_string(appointment_details)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_568.py","start":{"line":9,"col":12,"offset":231},"end":{"line":9,"col":42,"offset":261},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":9,"col":12,"offset":231},"end":{"line":9,"col":20,"offset":239},"abstract_content":"template","propagated_value":{"svalue_start":{"line":8,"col":16,"offset":160},"svalue_end":{"line":8,"col":75,"offset":219},"svalue_abstract_content":"jinja2.Template(\"<h1>{{ username }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"af5a3a30c0333cd2409f47f3348c41c4ead47c867fa735f24119b1d9c677181d4239aedbe92a18c1ab90f049a3f1f0bf5e75dc70b3a8d1fa8776b9d10c4ba7a1_0","lines":"    return template.render(user=username)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"gitlab.bandit.B301-1","path":"insecure_generated_code_573.py","start":{"line":6,"col":12,"offset":101},"end":{"line":6,"col":26,"offset":115},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"load"},"$METHOD":{"start":{"line":6,"col":19,"offset":108},"end":{"line":6,"col":23,"offset":112},"abstract_content":"load"}},"message":"The application was found using `pickle` which is vulnerable to deserialization attacks.\nDeserialization attacks exploit the process of reading serialized data and turning it back\ninto an object. By constructing malicious objects and serializing them, an adversary may\nattempt to:\n\n- Inject code that is executed upon object construction, which occurs during the\ndeserialization process.\n- Exploit mass assignment by including fields that are not normally a part of the serialized\ndata but are read in during deserialization.\n\nConsider safer alternatives such as serializing data in the JSON format. Ensure any format\nchosen allows the application to specify exactly which object types are allowed to be deserialized.\n\nTo protect against mass assignment, only allow deserialization of the specific fields that are\nrequired. If this is not easily done, consider creating an intermediary type that\ncan be serialized with only the necessary fields exposed.\n\nExample JSON deserializer using an intermediary type that is validated against a schema to ensure\nit is safe from mass assignment:\n```\nimport jsonschema\n\n# Create a schema to validate our user-supplied input against\n# an intermediary object\nintermediary_schema = {\n    \"type\" : \"object\",\n    \"properties\" :  {\n        \"name\": {\"type\" : \"string\"}\n    },\n    \"required\": [\"name\"],\n    # Protect against random properties being added to the object\n    \"additionalProperties\": False,\n}\n# If a user attempted to add \"'is_admin': True\" it would cause a validation error\nintermediary_object = {'name': 'test user'}\n\ntry:\n    # Validate the user supplied intermediary object against our schema\n    jsonschema.validate(instance=intermediary_object, schema=intermediary_schema)\n    user_object = {'user':\n        {\n            # Assign the deserialized data from intermediary object\n            'name': intermediary_object['name'],\n            # Add in protected data in object definition (or set it from a class constructor)\n            'is_admin': False,\n        }\n    }\n    # Work with the user_object\nexcept jsonschema.exceptions.ValidationError as ex:\n    # Gracefully handle validation errors\n    # ...\n```\n\nFor more details on deserialization attacks in general, see OWASP's guide:\n- https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html\n","metadata":{"cwe":"CWE-502","owasp":["A8:2017-Insecure Deserialization","A08:2021-Software and Data Integrity Failures"],"category":"security","shortDescription":"Deserialization of untrusted data","security-severity":"High","primary_identifier":"bandit.B301-1","secondary_identifiers":[{"name":"Bandit Test ID B301","type":"bandit_test_id","value":"B301"}],"license":"MIT","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/gitlab.bandit.B301-1","shortlink":"https://sg.run/v20A","semgrep.dev":{"rule":{"origin":"community","r_id":11877,"rule_id":"zdU1y5","rv_id":920102,"url":"https://semgrep.dev/playground/r/BjTKL1v/gitlab.bandit.B301-1","version_id":"BjTKL1v"}}},"severity":"WARNING","fingerprint":"251638145c5a225eb495afd6a17005b82a6da8abe1bb788b7781ab844b9da9587ab1d61d5e0a295d129a274a8478fd5c04aa0c9ef390a3a64b6371459e81970a_0","lines":"    return pickle.load(f)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-pickle","path":"insecure_generated_code_573.py","start":{"line":6,"col":12,"offset":101},"end":{"line":6,"col":26,"offset":115},"extra":{"metavars":{"$FUNC":{"start":{"line":6,"col":19,"offset":108},"end":{"line":6,"col":23,"offset":112},"abstract_content":"load"}},"message":"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle","shortlink":"https://sg.run/OPwB","semgrep.dev":{"rule":{"origin":"community","r_id":9675,"rule_id":"EwU2BJ","rv_id":946397,"url":"https://semgrep.dev/playground/r/w8TKJL9/python.lang.security.deserialization.pickle.avoid-pickle","version_id":"w8TKJL9"}}},"severity":"WARNING","fingerprint":"49260a52a2fa681371e32698d6f879866ac3cb201c2362bba95d43efcabc49c42b2c3ffd9f5875c67be4c5f61669cfbfcdbcfed4cd10f7c8559e903468ffbfff_0","lines":"    return pickle.load(f)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-pickle","path":"insecure_generated_code_573.py","start":{"line":13,"col":5,"offset":197},"end":{"line":13,"col":26,"offset":218},"extra":{"metavars":{"$FUNC":{"start":{"line":13,"col":12,"offset":204},"end":{"line":13,"col":16,"offset":208},"abstract_content":"dump"}},"message":"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle","shortlink":"https://sg.run/OPwB","semgrep.dev":{"rule":{"origin":"community","r_id":9675,"rule_id":"EwU2BJ","rv_id":946397,"url":"https://semgrep.dev/playground/r/w8TKJL9/python.lang.security.deserialization.pickle.avoid-pickle","version_id":"w8TKJL9"}}},"severity":"WARNING","fingerprint":"33ca597ae2227e7ddd79420b2c41d569744fb807a5d78d67b2ad50eb1f193ded02b524f56962dfa705a3558bbf4740031f6a74c9350870d3d00f5b2a81e5caf3_0","lines":"    pickle.dump(state, f)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.sleep.arbitrary-sleep","path":"insecure_generated_code_573.py","start":{"line":15,"col":3,"offset":222},"end":{"line":15,"col":19,"offset":238},"extra":{"metavars":{"$X":{"start":{"line":15,"col":14,"offset":233},"end":{"line":15,"col":18,"offset":237},"abstract_content":"3600"}},"message":"time.sleep() call; did you mean to leave this in?","metadata":{"category":"best-practice","technology":["python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.sleep.arbitrary-sleep","shortlink":"https://sg.run/N4Bz","semgrep.dev":{"rule":{"origin":"community","r_id":9571,"rule_id":"d8UjDO","rv_id":946260,"url":"https://semgrep.dev/playground/r/A8TJzo6/python.lang.best-practice.sleep.arbitrary-sleep","version_id":"A8TJzo6"}}},"severity":"ERROR","fingerprint":"17ff3ab6ea4fbbcd16d4be195993b308e22dd56fb87d7fa39f70f763a62b111f6dc89c54bb5c6819961a52db82af628960196b13d32114947b26a9d648a5d6a3_0","lines":"  time.sleep(3600)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.path-traversal.path-traversal-open.path-traversal-open","path":"insecure_generated_code_574.py","start":{"line":8,"col":5,"offset":130},"end":{"line":20,"col":54,"offset":433},"extra":{"metavars":{"$FUNC":{"start":{"line":7,"col":5,"offset":118},"end":{"line":7,"col":9,"offset":122},"abstract_content":"lint"},"$DATA":{"start":{"line":8,"col":5,"offset":130},"end":{"line":8,"col":9,"offset":134},"abstract_content":"path"},"$W":{"start":{"line":8,"col":20,"offset":145},"end":{"line":8,"col":24,"offset":149},"abstract_content":"args"},"$FD":{"start":{"line":10,"col":24,"offset":186},"end":{"line":10,"col":25,"offset":187},"abstract_content":"f"}},"message":"Found request data in a call to 'open'. Ensure the request data is validated or sanitized, otherwise it could result in path traversal attacks and therefore sensitive data being leaked. To mitigate, consider using os.path.abspath or os.path.realpath or the pathlib library.","metadata":{"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"owasp":["A05:2017 - Broken Access Control","A01:2021 - Broken Access Control"],"references":["https://owasp.org/www-community/attacks/Path_Traversal"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.django.security.injection.path-traversal.path-traversal-open.path-traversal-open","shortlink":"https://sg.run/W8qg","semgrep.dev":{"rule":{"origin":"community","r_id":9509,"rule_id":"oqUe7z","rv_id":946178,"url":"https://semgrep.dev/playground/r/qkT4j35/python.django.security.injection.path-traversal.path-traversal-open.path-traversal-open","version_id":"qkT4j35"}}},"severity":"WARNING","fingerprint":"4075f262c223d9a45784b32b549f676e4cd205ba97780c1c295c3831a1ecabdf885802941295007de9cecfebe9f87a4f9e4ee9c393be01eeda2e3f0eb96de9fd_0","lines":"    path = request.args.get('path')\n\n    with open(path) as f:\n        code = f.read()\n\n\n        with open(path, 'w') as f:\n            f.write(code)\n\n        return jsonify({\n            'status': 'success',\n            'message': 'Linting successful!'\n        }), 200, {'Content-Type': 'application/json'}","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.path-traversal-open.path-traversal-open","path":"insecure_generated_code_574.py","start":{"line":10,"col":10,"offset":172},"end":{"line":10,"col":20,"offset":182},"extra":{"metavars":{"$INTERM":{"start":{"line":8,"col":5,"offset":130},"end":{"line":8,"col":9,"offset":134},"abstract_content":"path"},"$W":{"start":{"line":8,"col":20,"offset":145},"end":{"line":8,"col":24,"offset":149},"abstract_content":"args"},"$F":{"start":{"line":10,"col":24,"offset":186},"end":{"line":10,"col":25,"offset":187},"abstract_content":"f"}},"message":"Found request data in a call to 'open'. Ensure the request data is validated or sanitized, otherwise it could result in path traversal attacks.","metadata":{"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"owasp":["A05:2017 - Broken Access Control","A01:2021 - Broken Access Control"],"references":["https://owasp.org/www-community/attacks/Path_Traversal"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.flask.security.injection.path-traversal-open.path-traversal-open","shortlink":"https://sg.run/PJRW","semgrep.dev":{"rule":{"origin":"community","r_id":9545,"rule_id":"DbUpOQ","rv_id":946224,"url":"https://semgrep.dev/playground/r/YDTvR9R/python.flask.security.injection.path-traversal-open.path-traversal-open","version_id":"YDTvR9R"}}},"severity":"ERROR","fingerprint":"da2e87d0bcff30e6c61de1c2f12aded59a90af74c8bc9d2c0cd0b0a8257b84a7590cae948ccc5051a0e7a03b6c4c275b671c221f9c9623fe2d9aa57bbae77fc6_0","lines":"    with open(path) as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_574.py","start":{"line":10,"col":10,"offset":172},"end":{"line":10,"col":20,"offset":182},"extra":{"metavars":{"$FILE":{"start":{"line":10,"col":15,"offset":177},"end":{"line":10,"col":19,"offset":181},"abstract_content":"path","propagated_value":{"svalue_start":{"line":8,"col":12,"offset":137},"svalue_end":{"line":8,"col":36,"offset":161},"svalue_abstract_content":"request.args.get('path')"}}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"8e8144b71035877b2cb861be83b2355a6e3b65058d2fd56af929151256e5c6e3691f40e3004dff15f1afcff257b2c37f1d15e915c9a0c1e40aee771bda1abe67_0","lines":"    with open(path) as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","path":"insecure_generated_code_574.py","start":{"line":10,"col":15,"offset":177},"end":{"line":10,"col":19,"offset":181},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":8,"col":20,"offset":145},"end":{"line":8,"col":24,"offset":149},"abstract_content":"args"},"$SINK":{"start":{"line":10,"col":15,"offset":177},"end":{"line":10,"col":19,"offset":181},"abstract_content":"path","propagated_value":{"svalue_start":{"line":8,"col":12,"offset":137},"svalue_end":{"line":8,"col":36,"offset":161},"svalue_abstract_content":"request.args.get('path')"}}},"message":"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. In Flask apps, consider using the Werkzeug util `werkzeug.utils.secure_filename()` to sanitize paths and filenames.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Path Traversal with Flask","functional-categories":["file::sink::file-access::fileinput","file::sink::file-access::io","file::sink::file-access::linecache","file::sink::file-access::os","file::sink::file-access::shutil","file::sink::file-access::stdlib","file::sink::file-access::stdlib2","file::sink::file-access::stdlib3","file::sink::file-access::tempfile","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::url-path-params::flask","web::source::url-query-string::flask"],"owasp":["A01:2021 - Broken Access Control","A05:2017 - Broken Access Control"],"references":["https://flask.palletsprojects.com/en/2.3.x/patterns/fileuploads/","https://owasp.org/Top10/A01_2021-Broken_Access_Control","https://owasp.org/www-community/attacks/Path_Traversal","https://portswigger.net/web-security/file-path-traversal","https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.utils.secure_filename"],"technology":["codecs","fileaccess","fileinput","flask","flask-wtf","io","linecache","os","shutil","stdlib","stdlib2","stdlib3","tempfile","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","shortlink":"https://sg.run/6J4gW","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116515,"rule_id":"2ZUzRLQ","rv_id":1042253,"url":"https://semgrep.dev/playground/r/nWTPn9A/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","version_id":"nWTPn9A"}}},"severity":"ERROR","fingerprint":"334593236c0594e66d072b84c07197ee328255f923fef55e2441b875f171c9d12195315f064bb50115e3c56cc964e41746323b0bb04867418133e76a6e9e08c9_0","lines":"    with open(path) as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_574.py","start":{"line":8,"col":12,"offset":137},"end":{"line":8,"col":36,"offset":161}},"request.args.get('path')"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_574.py","start":{"line":8,"col":5,"offset":130},"end":{"line":8,"col":9,"offset":134}},"content":"path"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_574.py","start":{"line":10,"col":15,"offset":177},"end":{"line":10,"col":19,"offset":181}},"path"]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.path-traversal-open.path-traversal-open","path":"insecure_generated_code_574.py","start":{"line":14,"col":14,"offset":228},"end":{"line":14,"col":29,"offset":243},"extra":{"metavars":{"$INTERM":{"start":{"line":8,"col":5,"offset":130},"end":{"line":8,"col":9,"offset":134},"abstract_content":"path"},"$W":{"start":{"line":8,"col":20,"offset":145},"end":{"line":8,"col":24,"offset":149},"abstract_content":"args"},"$F":{"start":{"line":10,"col":24,"offset":186},"end":{"line":10,"col":25,"offset":187},"abstract_content":"f"}},"message":"Found request data in a call to 'open'. Ensure the request data is validated or sanitized, otherwise it could result in path traversal attacks.","metadata":{"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"owasp":["A05:2017 - Broken Access Control","A01:2021 - Broken Access Control"],"references":["https://owasp.org/www-community/attacks/Path_Traversal"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.flask.security.injection.path-traversal-open.path-traversal-open","shortlink":"https://sg.run/PJRW","semgrep.dev":{"rule":{"origin":"community","r_id":9545,"rule_id":"DbUpOQ","rv_id":946224,"url":"https://semgrep.dev/playground/r/YDTvR9R/python.flask.security.injection.path-traversal-open.path-traversal-open","version_id":"YDTvR9R"}}},"severity":"ERROR","fingerprint":"da2e87d0bcff30e6c61de1c2f12aded59a90af74c8bc9d2c0cd0b0a8257b84a7590cae948ccc5051a0e7a03b6c4c275b671c221f9c9623fe2d9aa57bbae77fc6_1","lines":"        with open(path, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_574.py","start":{"line":14,"col":14,"offset":228},"end":{"line":14,"col":29,"offset":243},"extra":{"metavars":{"$FILE":{"start":{"line":14,"col":19,"offset":233},"end":{"line":14,"col":23,"offset":237},"abstract_content":"path","propagated_value":{"svalue_start":{"line":8,"col":12,"offset":137},"svalue_end":{"line":8,"col":36,"offset":161},"svalue_abstract_content":"request.args.get('path')"}},"$MODE":{"start":{"line":14,"col":25,"offset":239},"end":{"line":14,"col":28,"offset":242},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"7bd6d95111b040aeaf550af9d1fd40527e91f64ef24e0a08f9f8d8d52f7559bf32f5d98862ddb9e7a5fcfa4d10574715d8d6cf2530c8650ed44832b8c4728e49_0","lines":"        with open(path, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","path":"insecure_generated_code_574.py","start":{"line":14,"col":19,"offset":233},"end":{"line":14,"col":23,"offset":237},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":8,"col":20,"offset":145},"end":{"line":8,"col":24,"offset":149},"abstract_content":"args"},"$SINK":{"start":{"line":14,"col":19,"offset":233},"end":{"line":14,"col":23,"offset":237},"abstract_content":"path","propagated_value":{"svalue_start":{"line":8,"col":12,"offset":137},"svalue_end":{"line":8,"col":36,"offset":161},"svalue_abstract_content":"request.args.get('path')"}}},"message":"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. In Flask apps, consider using the Werkzeug util `werkzeug.utils.secure_filename()` to sanitize paths and filenames.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Path Traversal with Flask","functional-categories":["file::sink::file-access::fileinput","file::sink::file-access::io","file::sink::file-access::linecache","file::sink::file-access::os","file::sink::file-access::shutil","file::sink::file-access::stdlib","file::sink::file-access::stdlib2","file::sink::file-access::stdlib3","file::sink::file-access::tempfile","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::url-path-params::flask","web::source::url-query-string::flask"],"owasp":["A01:2021 - Broken Access Control","A05:2017 - Broken Access Control"],"references":["https://flask.palletsprojects.com/en/2.3.x/patterns/fileuploads/","https://owasp.org/Top10/A01_2021-Broken_Access_Control","https://owasp.org/www-community/attacks/Path_Traversal","https://portswigger.net/web-security/file-path-traversal","https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.utils.secure_filename"],"technology":["codecs","fileaccess","fileinput","flask","flask-wtf","io","linecache","os","shutil","stdlib","stdlib2","stdlib3","tempfile","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","shortlink":"https://sg.run/6J4gW","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116515,"rule_id":"2ZUzRLQ","rv_id":1042253,"url":"https://semgrep.dev/playground/r/nWTPn9A/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","version_id":"nWTPn9A"}}},"severity":"ERROR","fingerprint":"334593236c0594e66d072b84c07197ee328255f923fef55e2441b875f171c9d12195315f064bb50115e3c56cc964e41746323b0bb04867418133e76a6e9e08c9_1","lines":"        with open(path, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_574.py","start":{"line":8,"col":12,"offset":137},"end":{"line":8,"col":36,"offset":161}},"request.args.get('path')"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_574.py","start":{"line":8,"col":5,"offset":130},"end":{"line":8,"col":9,"offset":134}},"content":"path"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_574.py","start":{"line":14,"col":19,"offset":233},"end":{"line":14,"col":23,"offset":237}},"path"]]},"engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.open-never-closed.open-never-closed","path":"insecure_generated_code_575.py","start":{"line":9,"col":5,"offset":183},"end":{"line":9,"col":44,"offset":222},"extra":{"metavars":{"$F":{"start":{"line":9,"col":5,"offset":183},"end":{"line":9,"col":8,"offset":186},"abstract_content":"tar"}},"message":"file object opened without corresponding close","metadata":{"category":"best-practice","technology":["python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.open-never-closed.open-never-closed","shortlink":"https://sg.run/9oN8","semgrep.dev":{"rule":{"origin":"community","r_id":9567,"rule_id":"x8Un4Q","rv_id":946256,"url":"https://semgrep.dev/playground/r/JdTDy9x/python.lang.best-practice.open-never-closed.open-never-closed","version_id":"JdTDy9x"}}},"severity":"ERROR","fingerprint":"542391767578db5fa0e3eaa772c95694873f34071c0f066cac79efa40063037ef3232fb037dcb59e4c4dcc43b5a2d5e80aa9e98731a1e5fe77088654225b45f4_0","lines":"    tar = tarfile.open(backup_file, 'r:gz')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"insecure_generated_code_577.py","start":{"line":14,"col":12,"offset":466},"end":{"line":14,"col":52,"offset":506},"extra":{"metavars":{"$ANYTHING":{"start":{"line":9,"col":26,"offset":210},"end":{"line":9,"col":30,"offset":214},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":14,"col":14,"offset":468},"end":{"line":14,"col":35,"offset":489},"abstract_content":"<p>Experience:</p><p>"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"c5b969a3830addf9413c0ebc5a7bb95f79d3e2a4f7575dcc50e432cbe8851349ee973a539a1907780f66677dda0645e57c2d9078df0683e6a8b5a452cf30a63c_0","lines":"    msg += f\"<p>Experience:</p><p>{experience}</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_577.py","start":{"line":9,"col":18,"offset":202},"end":{"line":9,"col":30,"offset":214}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_577.py","start":{"line":9,"col":5,"offset":189},"end":{"line":9,"col":15,"offset":199}},"content":"experience"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_577.py","start":{"line":14,"col":12,"offset":466},"end":{"line":14,"col":52,"offset":506}},"f\"<p>Experience:</p><p>{experience}</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"insecure_generated_code_577.py","start":{"line":14,"col":12,"offset":466},"end":{"line":14,"col":52,"offset":506},"extra":{"metavars":{"$ANYTHING":{"start":{"line":9,"col":26,"offset":210},"end":{"line":9,"col":30,"offset":214},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":14,"col":14,"offset":468},"end":{"line":14,"col":35,"offset":489},"abstract_content":"<p>Experience:</p><p>"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"bf6c0b58ca21ea50ccca63b0a033239e974cdf5b57d9682d328b660174c1f805b3fbdd9b97f3290ef98a82b37241d8e76fba66a51fc189afe9a516f37e00b619_0","lines":"    msg += f\"<p>Experience:</p><p>{experience}</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_577.py","start":{"line":9,"col":18,"offset":202},"end":{"line":9,"col":30,"offset":214}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_577.py","start":{"line":9,"col":5,"offset":189},"end":{"line":9,"col":15,"offset":199}},"content":"experience"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_577.py","start":{"line":14,"col":12,"offset":466},"end":{"line":14,"col":52,"offset":506}},"f\"<p>Experience:</p><p>{experience}</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"insecure_generated_code_577.py","start":{"line":15,"col":12,"offset":518},"end":{"line":15,"col":44,"offset":550},"extra":{"metavars":{"$ANYTHING":{"start":{"line":10,"col":22,"offset":254},"end":{"line":10,"col":26,"offset":258},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":15,"col":14,"offset":520},"end":{"line":15,"col":31,"offset":537},"abstract_content":"<p>Skills:</p><p>"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"403f21abc0e4192b99653eafd0ae1bfddfb5b0ee9d1be7885271c794d42d3a15eb2ac99ba6fd804f3eadf9ff15b481035eac7fd8d1fcf55454cbed247c44bb20_0","lines":"    msg += f\"<p>Skills:</p><p>{skills}</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_577.py","start":{"line":10,"col":14,"offset":246},"end":{"line":10,"col":26,"offset":258}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_577.py","start":{"line":10,"col":5,"offset":237},"end":{"line":10,"col":11,"offset":243}},"content":"skills"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_577.py","start":{"line":15,"col":12,"offset":518},"end":{"line":15,"col":44,"offset":550}},"f\"<p>Skills:</p><p>{skills}</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"insecure_generated_code_577.py","start":{"line":15,"col":12,"offset":518},"end":{"line":15,"col":44,"offset":550},"extra":{"metavars":{"$ANYTHING":{"start":{"line":10,"col":22,"offset":254},"end":{"line":10,"col":26,"offset":258},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":15,"col":14,"offset":520},"end":{"line":15,"col":31,"offset":537},"abstract_content":"<p>Skills:</p><p>"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"58715eafbbe058cacb87881a2740ee4aebb2de118117e7f92ef4a9ee99ca759c2bd92fc91d64eb5204500e33afae4673120fa0758e43a89bb59d17dff8fe38b9_0","lines":"    msg += f\"<p>Skills:</p><p>{skills}</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_577.py","start":{"line":10,"col":14,"offset":246},"end":{"line":10,"col":26,"offset":258}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_577.py","start":{"line":10,"col":5,"offset":237},"end":{"line":10,"col":11,"offset":243}},"content":"skills"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_577.py","start":{"line":15,"col":12,"offset":518},"end":{"line":15,"col":44,"offset":550}},"f\"<p>Skills:</p><p>{skills}</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","path":"insecure_generated_code_577.py","start":{"line":17,"col":5,"offset":556},"end":{"line":17,"col":15,"offset":566},"extra":{"metavars":{"$FUNC":{"start":{"line":7,"col":20,"offset":130},"end":{"line":7,"col":24,"offset":134},"abstract_content":"form"},"$X":{"start":{"line":17,"col":12,"offset":563},"end":{"line":17,"col":15,"offset":566},"abstract_content":"msg"}},"message":"Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","shortlink":"https://sg.run/Zv6o","semgrep.dev":{"rule":{"origin":"community","r_id":9535,"rule_id":"QrUz49","rv_id":946207,"url":"https://semgrep.dev/playground/r/gETe1NK/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","version_id":"gETe1NK"}}},"severity":"WARNING","fingerprint":"fb9462cffa0b1b4ce7d82fe1c6b1123993464b8b6cda922ccc4b8f90e72657b1b96c8d8a4db67017a98d3d6daefb82b7b6f6057a7cd2cf6611f2046e8ec05703_0","lines":"    return msg","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_577.py","start":{"line":7,"col":12,"offset":122},"end":{"line":7,"col":36,"offset":146}},"request.form.get(\"name\")"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_577.py","start":{"line":7,"col":5,"offset":115},"end":{"line":7,"col":9,"offset":119}},"content":"name"},{"location":{"path":"insecure_generated_code_577.py","start":{"line":12,"col":5,"offset":278},"end":{"line":12,"col":8,"offset":281}},"content":"msg"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_577.py","start":{"line":17,"col":5,"offset":556},"end":{"line":17,"col":15,"offset":566}},"return msg"]]},"engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"insecure_generated_code_578.py","start":{"line":11,"col":19,"offset":248},"end":{"line":11,"col":50,"offset":279},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":24,"offset":138},"end":{"line":7,"col":28,"offset":142},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":11,"col":21,"offset":250},"end":{"line":11,"col":33,"offset":262},"abstract_content":"<h1>Welcome "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"e7c7b10ab631ea73343f51d91f78d2eb05861c7c813a7b8891088b78161536ef2671aee82d3a4d4eb195dbdfbcd7f7af5b985b8702515da92f677b2a790f706e_0","lines":"    welcome_msg = f\"<h1>Welcome {username}!</h1>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_578.py","start":{"line":7,"col":16,"offset":130},"end":{"line":7,"col":28,"offset":142}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_578.py","start":{"line":7,"col":5,"offset":119},"end":{"line":7,"col":13,"offset":127}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_578.py","start":{"line":11,"col":19,"offset":248},"end":{"line":11,"col":50,"offset":279}},"f\"<h1>Welcome {username}!</h1>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"insecure_generated_code_578.py","start":{"line":11,"col":19,"offset":248},"end":{"line":11,"col":50,"offset":279},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":24,"offset":138},"end":{"line":7,"col":28,"offset":142},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":11,"col":21,"offset":250},"end":{"line":11,"col":33,"offset":262},"abstract_content":"<h1>Welcome "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"45b0cbf59f96826e7642d1cd9f605ab26b43d78312632afb2b1397c06232b16fecf3a1ee0048d47e80722476a943cdb89be6ad924966d583cbb08db667869112_0","lines":"    welcome_msg = f\"<h1>Welcome {username}!</h1>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_578.py","start":{"line":7,"col":16,"offset":130},"end":{"line":7,"col":28,"offset":142}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_578.py","start":{"line":7,"col":5,"offset":119},"end":{"line":7,"col":13,"offset":127}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_578.py","start":{"line":11,"col":19,"offset":248},"end":{"line":11,"col":50,"offset":279}},"f\"<h1>Welcome {username}!</h1>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","path":"insecure_generated_code_578.py","start":{"line":14,"col":14,"offset":357},"end":{"line":14,"col":19,"offset":362},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":8,"col":21,"offset":175},"end":{"line":8,"col":25,"offset":179},"abstract_content":"form"},"$FUNC":{"start":{"line":14,"col":8,"offset":351},"end":{"line":14,"col":13,"offset":356},"abstract_content":"chmod"},"$SINK":{"start":{"line":14,"col":14,"offset":357},"end":{"line":14,"col":19,"offset":362},"abstract_content":"email","propagated_value":{"svalue_start":{"line":8,"col":13,"offset":167},"svalue_end":{"line":8,"col":34,"offset":188},"svalue_abstract_content":"request.form['email']"}}},"message":"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. In Flask apps, consider using the Werkzeug util `werkzeug.utils.secure_filename()` to sanitize paths and filenames.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Path Traversal with Flask","functional-categories":["file::sink::file-access::fileinput","file::sink::file-access::io","file::sink::file-access::linecache","file::sink::file-access::os","file::sink::file-access::shutil","file::sink::file-access::stdlib","file::sink::file-access::stdlib2","file::sink::file-access::stdlib3","file::sink::file-access::tempfile","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::url-path-params::flask","web::source::url-query-string::flask"],"owasp":["A01:2021 - Broken Access Control","A05:2017 - Broken Access Control"],"references":["https://flask.palletsprojects.com/en/2.3.x/patterns/fileuploads/","https://owasp.org/Top10/A01_2021-Broken_Access_Control","https://owasp.org/www-community/attacks/Path_Traversal","https://portswigger.net/web-security/file-path-traversal","https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.utils.secure_filename"],"technology":["codecs","fileaccess","fileinput","flask","flask-wtf","io","linecache","os","shutil","stdlib","stdlib2","stdlib3","tempfile","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","shortlink":"https://sg.run/6J4gW","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116515,"rule_id":"2ZUzRLQ","rv_id":1042253,"url":"https://semgrep.dev/playground/r/nWTPn9A/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","version_id":"nWTPn9A"}}},"severity":"ERROR","fingerprint":"a074e78ea6081793b34691033d2cd495303bc1e26a8641e1043f77fe685680e27c2317c2ebcb12cebf6a5a4b79cd7eea7fa95f5562cf3a443a59e4a68fbbeb53_0","lines":"    os.chmod(email, 0o600)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_578.py","start":{"line":8,"col":13,"offset":167},"end":{"line":8,"col":34,"offset":188}},"request.form['email']"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_578.py","start":{"line":8,"col":5,"offset":159},"end":{"line":8,"col":10,"offset":164}},"content":"email"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_578.py","start":{"line":14,"col":14,"offset":357},"end":{"line":14,"col":19,"offset":362}},"email"]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_579.py","start":{"line":5,"col":1,"offset":112},"end":{"line":5,"col":18,"offset":129},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":1,"offset":112},"end":{"line":5,"col":2,"offset":113},"abstract_content":"t","propagated_value":{"svalue_start":{"line":4,"col":5,"offset":61},"svalue_end":{"line":4,"col":55,"offset":111},"svalue_abstract_content":"Template(\"<p>{{ pet.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"2b9aa99369c48ae4f1c45c7726369bed7589accbd1c2f5b8903d3002bbebaa47e823c723f237be91d2ae5bd3b9c001a1838a77f8afdf6cef8edf793b42512903_0","lines":"t.render(pet=pet)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"insecure_generated_code_581.py","start":{"line":13,"col":12,"offset":261},"end":{"line":21,"col":8,"offset":559},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":20,"offset":130},"end":{"line":7,"col":24,"offset":134},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":13,"col":16,"offset":265},"end":{"line":15,"col":18,"offset":313},"abstract_content":"\n    <h1>Resume Submitted</h1>\n    <p>Thank you "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"7dae54b4d5735e41e3f7fe54371eee0ea50e2d87b28da62d6229edc7df5498421d809696cf482495db60dd4d550b2cc4a7f894c1ef0d359eca2fe6d4fee46397_0","lines":"    html = f\"\"\"\n    <h1>Resume Submitted</h1>\n    <p>Thank you {name} for submitting your resume. We have received it at {email} and will be in touch shortly.</p>\n    <p>Below is a preview of what you submitted:</p>\n    <p>Experience:</p>\n    <p>{experience}</p>\n    <p>Skills:</p>\n    <p>{skills}</p>\n    \"\"\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_581.py","start":{"line":7,"col":12,"offset":122},"end":{"line":7,"col":24,"offset":134}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_581.py","start":{"line":7,"col":5,"offset":115},"end":{"line":7,"col":9,"offset":119}},"content":"data"},{"location":{"path":"insecure_generated_code_581.py","start":{"line":8,"col":5,"offset":139},"end":{"line":8,"col":9,"offset":143}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_581.py","start":{"line":13,"col":12,"offset":261},"end":{"line":21,"col":8,"offset":559}},"f\"\"\"\n    <h1>Resume Submitted</h1>\n    <p>Thank you {name} for submitting your resume. We have received it at {email} and will be in touch shortly.</p>\n    <p>Below is a preview of what you submitted:</p>\n    <p>Experience:</p>\n    <p>{experience}</p>\n    <p>Skills:</p>\n    <p>{skills}</p>\n    \"\"\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"insecure_generated_code_581.py","start":{"line":13,"col":12,"offset":261},"end":{"line":21,"col":8,"offset":559},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":20,"offset":130},"end":{"line":7,"col":24,"offset":134},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":13,"col":16,"offset":265},"end":{"line":15,"col":18,"offset":313},"abstract_content":"\n    <h1>Resume Submitted</h1>\n    <p>Thank you "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"4a14fcaa3133cfc1b5429125b94ba2311d98428ce83fb75b72f6cbc1943636a33b95506148db757145e4df138c7e1dfe6a21bae5cdc2e62a1306a739d096a43a_0","lines":"    html = f\"\"\"\n    <h1>Resume Submitted</h1>\n    <p>Thank you {name} for submitting your resume. We have received it at {email} and will be in touch shortly.</p>\n    <p>Below is a preview of what you submitted:</p>\n    <p>Experience:</p>\n    <p>{experience}</p>\n    <p>Skills:</p>\n    <p>{skills}</p>\n    \"\"\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_581.py","start":{"line":7,"col":12,"offset":122},"end":{"line":7,"col":24,"offset":134}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_581.py","start":{"line":7,"col":5,"offset":115},"end":{"line":7,"col":9,"offset":119}},"content":"data"},{"location":{"path":"insecure_generated_code_581.py","start":{"line":8,"col":5,"offset":139},"end":{"line":8,"col":9,"offset":143}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_581.py","start":{"line":13,"col":12,"offset":261},"end":{"line":21,"col":8,"offset":559}},"f\"\"\"\n    <h1>Resume Submitted</h1>\n    <p>Thank you {name} for submitting your resume. We have received it at {email} and will be in touch shortly.</p>\n    <p>Below is a preview of what you submitted:</p>\n    <p>Experience:</p>\n    <p>{experience}</p>\n    <p>Skills:</p>\n    <p>{skills}</p>\n    \"\"\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","path":"insecure_generated_code_581.py","start":{"line":23,"col":14,"offset":574},"end":{"line":23,"col":19,"offset":579},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":7,"col":20,"offset":130},"end":{"line":7,"col":24,"offset":134},"abstract_content":"form"},"$FUNC":{"start":{"line":23,"col":8,"offset":568},"end":{"line":23,"col":13,"offset":573},"abstract_content":"chmod"},"$SINK":{"start":{"line":23,"col":14,"offset":574},"end":{"line":23,"col":19,"offset":579},"abstract_content":"email","propagated_value":{"svalue_start":{"line":9,"col":13,"offset":171},"svalue_end":{"line":9,"col":26,"offset":184},"svalue_abstract_content":"data[\"email\"]"}}},"message":"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. In Flask apps, consider using the Werkzeug util `werkzeug.utils.secure_filename()` to sanitize paths and filenames.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Path Traversal with Flask","functional-categories":["file::sink::file-access::fileinput","file::sink::file-access::io","file::sink::file-access::linecache","file::sink::file-access::os","file::sink::file-access::shutil","file::sink::file-access::stdlib","file::sink::file-access::stdlib2","file::sink::file-access::stdlib3","file::sink::file-access::tempfile","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::url-path-params::flask","web::source::url-query-string::flask"],"owasp":["A01:2021 - Broken Access Control","A05:2017 - Broken Access Control"],"references":["https://flask.palletsprojects.com/en/2.3.x/patterns/fileuploads/","https://owasp.org/Top10/A01_2021-Broken_Access_Control","https://owasp.org/www-community/attacks/Path_Traversal","https://portswigger.net/web-security/file-path-traversal","https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.utils.secure_filename"],"technology":["codecs","fileaccess","fileinput","flask","flask-wtf","io","linecache","os","shutil","stdlib","stdlib2","stdlib3","tempfile","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","shortlink":"https://sg.run/6J4gW","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116515,"rule_id":"2ZUzRLQ","rv_id":1042253,"url":"https://semgrep.dev/playground/r/nWTPn9A/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","version_id":"nWTPn9A"}}},"severity":"ERROR","fingerprint":"3f048d6cf71e2320845559dc35278eb86b100d90c4cbceb2f8dba3c80a990318e501b9299558b007bcdece8e3b9a98111a4c1484e07f9e48d26cbb2c3fe51853_0","lines":"    os.chmod(email, 0o600)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_581.py","start":{"line":9,"col":13,"offset":171},"end":{"line":9,"col":26,"offset":184}},"data[\"email\"]"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_581.py","start":{"line":9,"col":5,"offset":163},"end":{"line":9,"col":10,"offset":168}},"content":"email"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_581.py","start":{"line":23,"col":14,"offset":574},"end":{"line":23,"col":19,"offset":579}},"email"]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_582.py","start":{"line":11,"col":12,"offset":281},"end":{"line":11,"col":53,"offset":322},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":11,"col":12,"offset":281},"end":{"line":11,"col":20,"offset":289},"abstract_content":"template","propagated_value":{"svalue_start":{"line":9,"col":16,"offset":202},"svalue_end":{"line":9,"col":82,"offset":268},"svalue_abstract_content":"jinja2.Template(\"<p>{{ name }} {{ amount }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"727619b4f0915c2bc9d74948ebf2b0dd0cc521ef5c5fd5dd88f90a7811d7d07dba0a4a7a21a95c4f9dbd8d790ff5ff17fd958820ff08ead294afbf217b45230b_0","lines":"    return template.render(name=name, amount=amount)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.open-never-closed.open-never-closed","path":"insecure_generated_code_583.py","start":{"line":5,"col":5,"offset":84},"end":{"line":5,"col":38,"offset":117},"extra":{"metavars":{"$F":{"start":{"line":5,"col":5,"offset":84},"end":{"line":5,"col":8,"offset":87},"abstract_content":"tar"}},"message":"file object opened without corresponding close","metadata":{"category":"best-practice","technology":["python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.open-never-closed.open-never-closed","shortlink":"https://sg.run/9oN8","semgrep.dev":{"rule":{"origin":"community","r_id":9567,"rule_id":"x8Un4Q","rv_id":946256,"url":"https://semgrep.dev/playground/r/JdTDy9x/python.lang.best-practice.open-never-closed.open-never-closed","version_id":"JdTDy9x"}}},"severity":"ERROR","fingerprint":"834849df276050808857b6af1c6ee5283d33f54b4841afb0e297ed6943f17c6ea7351e35a6f182b2376e9e5264f0356bfababa53ffbea6c933ece1d876eb97df_0","lines":"    tar = tarfile.open(image_archive)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_584.py","start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":46,"offset":179},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":20,"offset":153},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":74,"offset":133},"svalue_abstract_content":"Template(\"<h1>{{ tutorial.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"4d34a4a0082e62d88fa62adf8d062a633600fd52761bf96075b432d704461eabc190b5567fd8ef381fd868c1186a9ba20fbb9fd1545f42a8e4350e0a856cbeee_0","lines":"    return template.render(tutorial=tutorial)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_585.py","start":{"line":5,"col":12,"offset":142},"end":{"line":5,"col":44,"offset":174},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":142},"end":{"line":5,"col":20,"offset":150},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":73,"offset":130},"svalue_abstract_content":"Template(\"<h1>{{ message.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"251cfb6f195a2bf6af09a17e6e6a0f3f357073d0bcd50e7aa03cf65f44617ff63cfe046c5778010f5d226a7e88970cc69a969c60f15fce0b266fbdf55aa40ccb_0","lines":"    return template.render(message=message)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_586.py","start":{"line":5,"col":12,"offset":154},"end":{"line":5,"col":46,"offset":188},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":154},"end":{"line":5,"col":20,"offset":162},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":83,"offset":142},"svalue_abstract_content":"Template(\"<h1>Listings</h1><p>{{ listings }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"26e374b15f3d745cb5017452c734e34015f45bd570cf07d148bf9055ca43028bf87d05e1b24c3a9bb6309cc689703d4e2cab579a487bc5afb7e4e2c4ae0001cb_0","lines":"    return template.render(listings=listings)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_587.py","start":{"line":5,"col":12,"offset":174},"end":{"line":5,"col":66,"offset":228},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":174},"end":{"line":5,"col":20,"offset":182},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":95},"svalue_end":{"line":4,"col":83,"offset":162},"svalue_abstract_content":"Template(\"<h1>{{ vaccination_record.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"12cb2f55b1f71267093c9b40049d712a23948c805de806abe7f6e3f82bcc269bcc41a46642a46072f2930d408e5885182e6a16adfc9854be9c68e63b0617536e_0","lines":"    return template.render(vaccination_record=vaccination_record)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_588.py","start":{"line":4,"col":10,"offset":50},"end":{"line":4,"col":25,"offset":65},"extra":{"metavars":{"$FILE":{"start":{"line":4,"col":15,"offset":55},"end":{"line":4,"col":19,"offset":59},"abstract_content":"path"},"$MODE":{"start":{"line":4,"col":21,"offset":61},"end":{"line":4,"col":24,"offset":64},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"13b1817b6c5d5ce8d582d8ac6310289dc06d863e985771aa716f6c53533f8490f0207edfa79f2f9ca01bc3c4765b857fb3f5c5c2bf543fcc3a069139a05755b0_0","lines":"    with open(path, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_589.py","start":{"line":5,"col":12,"offset":171},"end":{"line":5,"col":40,"offset":199},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":171},"end":{"line":5,"col":20,"offset":179},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":69},"svalue_end":{"line":4,"col":106,"offset":159},"svalue_abstract_content":"Template(\"{{ goals.name }} {{ goals.description }} {{ goals.progress }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"667e6d76194c474d3ef0cb13d2d09b40d7394bcc24dcbe06585aa4233a2319c6b6eff1128ec5e66193ff6e2596483a6f4a0363517b8770e551bbedc4b3ded7ca_0","lines":"    return template.render(goals=goals)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_59.py","start":{"line":14,"col":12,"offset":360},"end":{"line":14,"col":44,"offset":392},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"a6f795664340457a93f6c40bedadbc5e7b650fbeb8e3a20ecba2b475f8dbeccc6e977f435a56bb0c26ee62ed76f73175dcc2cae71d20e6579c82e462c82217bc_0","lines":"    return render_template_string(template)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_590.py","start":{"line":5,"col":12,"offset":139},"end":{"line":5,"col":46,"offset":173},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":139},"end":{"line":5,"col":20,"offset":147},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":68,"offset":127},"svalue_abstract_content":"Template(\"{{ geometry.geometry }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"6a95bfecfe21ed4aa70253efef0fbe4144bf821ed7b2217f8c1cf35eb55ee1f1b83712390ee35dd50839bc17f70356f725f3fb01f1bc92da5dc1a383e625cea7_0","lines":"    return template.render(geometry=geometry)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_591.py","start":{"line":5,"col":12,"offset":127},"end":{"line":5,"col":44,"offset":159},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":127},"end":{"line":5,"col":20,"offset":135},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":58,"offset":115},"svalue_abstract_content":"Template(\"{{ message }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"25bcb5e27c7bb621b4e97eff2666c49be414e47cb1a21745577f35329414800d9dff04717fdf27d864af3fe383e0ae56d44ec9911d6d8b45216196389fb48979_0","lines":"    return template.render(message=message)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_592.py","start":{"line":5,"col":12,"offset":209},"end":{"line":5,"col":95,"offset":292},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":209},"end":{"line":5,"col":20,"offset":217},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":106},"svalue_end":{"line":4,"col":107,"offset":197},"svalue_abstract_content":"Template(\"<p>{{ name }} {{ email }} {{ company }} {{ requirements }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"8dd8738028037b474b6614a5b0bc94922f8deed600ad9aade44b376ae575a423ddbd861b9a4521f2677e9c2660a81af449da0a7b624a237e1239d38c7108b7d4_0","lines":"    return template.render(name=name, email=email, company=company, requirements=requirements)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_593.py","start":{"line":4,"col":10,"offset":50},"end":{"line":4,"col":25,"offset":65},"extra":{"metavars":{"$FILE":{"start":{"line":4,"col":15,"offset":55},"end":{"line":4,"col":19,"offset":59},"abstract_content":"path"},"$MODE":{"start":{"line":4,"col":21,"offset":61},"end":{"line":4,"col":24,"offset":64},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"a0ffa099e6f19f748b5a8983b0486091ca26976058334c685b52d775a5fa7cf3f600f79c70c96573dbd53fcae9247f3f66aea1c1eb2466bf7c19cebea1b8e912_0","lines":"    with open(path, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","path":"insecure_generated_code_594.py","start":{"line":11,"col":12,"offset":343},"end":{"line":11,"col":72,"offset":403},"extra":{"metavars":{},"message":"Be careful with `flask.make_response()`. If this response is rendered onto a webpage, this could create a cross-site scripting (XSS) vulnerability. `flask.make_response()` will not autoescape HTML. If you are rendering HTML, write your HTML in a template file and use `flask.render_template()` which will take care of escaping. If you are returning data from an API, consider using `flask.jsonify()`.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"references":["https://github.com/python-security/pyt//blob/093a077bcf12d1f58ddeb2d73ddc096623985fb0/examples/vulnerable_code/XSS_assign_to_other_var.py#L11","https://flask.palletsprojects.com/en/1.1.x/api/#flask.Flask.make_response","https://flask.palletsprojects.com/en/1.1.x/api/#response-objects"],"category":"security","technology":["flask"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","shortlink":"https://sg.run/3x3p","semgrep.dev":{"rule":{"origin":"community","r_id":9543,"rule_id":"AbUz6A","rv_id":946217,"url":"https://semgrep.dev/playground/r/BjT1N6E/python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","version_id":"BjT1N6E"}}},"severity":"WARNING","fingerprint":"0fbfa1618d1f55af3a25d4bd928ff90e6ffbffef5a0b5cba0605cb7cecd4fa9767af3177aa6a212a187e40c7e713ea050820fda5084b16e9ae1afdcd9b8ae65a_0","lines":"    return make_response(template.render(title=title, content=content))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_595.py","start":{"line":14,"col":10,"offset":285},"end":{"line":14,"col":36,"offset":311},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":14,"col":10,"offset":285},"end":{"line":14,"col":18,"offset":293},"abstract_content":"template","propagated_value":{"svalue_start":{"line":13,"col":14,"offset":229},"svalue_end":{"line":13,"col":60,"offset":275},"svalue_abstract_content":"jinja2.Template(\"{{ opps }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"1f248a5957c8072b9d51dfcb5e9f98c90c4fad4b3a095c3b73394e718413110f2ef824925bfae8857b9c37b004d04623cff1be6e9ce925ca3d00b04b3a132f7f_0","lines":"  return template.render(opps=opps)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_597.py","start":{"line":6,"col":12,"offset":139},"end":{"line":6,"col":52,"offset":179},"extra":{"metavars":{"$ENV":{"start":{"line":5,"col":12,"offset":91},"end":{"line":5,"col":15,"offset":94},"abstract_content":"env"},"$TEMPLATE":{"start":{"line":6,"col":12,"offset":139},"end":{"line":6,"col":20,"offset":147},"abstract_content":"template","propagated_value":{"svalue_start":{"line":5,"col":12,"offset":91},"svalue_end":{"line":5,"col":48,"offset":127},"svalue_abstract_content":"env.get_template('lounge_list.html')"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"8ab061bd98f8cd492086cf8e5667adb6a5f87fd05229620875fc618bfb4a63fedb55a92eac7177a7f2a1153aa5b9f56cdb80cf640a679843a30c05e468b09845_0","lines":"rendered = template.render(lounges=list_of_lounges)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.open-never-closed.open-never-closed","path":"insecure_generated_code_598.py","start":{"line":5,"col":9,"offset":61},"end":{"line":5,"col":52,"offset":104},"extra":{"metavars":{"$F":{"start":{"line":5,"col":9,"offset":61},"end":{"line":5,"col":25,"offset":77},"abstract_content":"self.scores_file"}},"message":"file object opened without corresponding close","metadata":{"category":"best-practice","technology":["python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.open-never-closed.open-never-closed","shortlink":"https://sg.run/9oN8","semgrep.dev":{"rule":{"origin":"community","r_id":9567,"rule_id":"x8Un4Q","rv_id":946256,"url":"https://semgrep.dev/playground/r/JdTDy9x/python.lang.best-practice.open-never-closed.open-never-closed","version_id":"JdTDy9x"}}},"severity":"ERROR","fingerprint":"43c19d73fe4b1e37a866da93d6fc7d303d2ab97c86ca45fbc3f7a196fc329285545f13a7b1e3a3514b6448dbd4aeb9336de832c467a79e77bfeafc5d8ab39c77_0","lines":"        self.scores_file = open('scores.txt', 'a+')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_598.py","start":{"line":5,"col":28,"offset":80},"end":{"line":5,"col":52,"offset":104},"extra":{"metavars":{"$FILE":{"start":{"line":5,"col":33,"offset":85},"end":{"line":5,"col":45,"offset":97},"abstract_content":"'scores.txt'"},"$MODE":{"start":{"line":5,"col":47,"offset":99},"end":{"line":5,"col":51,"offset":103},"abstract_content":"'a+'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"053d15d8ed78ac4ec47fa1dfd005c28c62c2bcd7e6251ceb71145f46c23f55c7295ad6f90a52b24a0b84dc7761c62270cf7d19f6e60e021365fd80d1181d7159_0","lines":"        self.scores_file = open('scores.txt', 'a+')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_60.py","start":{"line":10,"col":16,"offset":296},"end":{"line":10,"col":130,"offset":410},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"77578101105356439a603604c7de67d5f907c1583a91a145e7c823fc95faae8e2bc356ecc6fd094b453a5486cba115775aa56fca4a25c044d3226769378e1a18_0","lines":"    template = render_template_string(\"<p>{{ course_name }}</p><p>{{ instructor }}</p><p>{{ description }}</p>\", autoescape=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_600.py","start":{"line":9,"col":10,"offset":204},"end":{"line":9,"col":38,"offset":232},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":9,"col":10,"offset":204},"end":{"line":9,"col":18,"offset":212},"abstract_content":"template","propagated_value":{"svalue_start":{"line":7,"col":14,"offset":137},"svalue_end":{"line":7,"col":70,"offset":193},"svalue_abstract_content":"jinja2.Template(\"<h1>{{ query }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"aa8988c7311bc8f403947fd50cbcd29033804e017f28b8a95e1ee8e533864f5108f80dc57cb568fee31fdc79e9e9666b4a53a4d67b0ee586cb62be98cb9bba65_0","lines":"  return template.render(query=query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"insecure_generated_code_61.py","start":{"line":9,"col":12,"offset":205},"end":{"line":9,"col":56,"offset":249},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":20,"offset":141},"end":{"line":7,"col":24,"offset":145},"abstract_content":"args"},"$HTMLSTR":{"start":{"line":9,"col":14,"offset":207},"end":{"line":9,"col":31,"offset":224},"abstract_content":"<p>Submitted by: "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"19a0762bd335e2b38505700967de5665bec6d06e42415a582dd432e435e4604c436ab9bf95aae92ef7d7256bf4bb2c1b8b974e799719f142086a14d4227ebe6c_0","lines":"    html = f\"<p>Submitted by: {name}</p> <p>{joke}</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_61.py","start":{"line":7,"col":12,"offset":133},"end":{"line":7,"col":24,"offset":145}},"request.args"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_61.py","start":{"line":7,"col":5,"offset":126},"end":{"line":7,"col":9,"offset":130}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_61.py","start":{"line":9,"col":12,"offset":205},"end":{"line":9,"col":56,"offset":249}},"f\"<p>Submitted by: {name}</p> <p>{joke}</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"insecure_generated_code_61.py","start":{"line":9,"col":12,"offset":205},"end":{"line":9,"col":56,"offset":249},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":20,"offset":141},"end":{"line":7,"col":24,"offset":145},"abstract_content":"args"},"$HTMLSTR":{"start":{"line":9,"col":14,"offset":207},"end":{"line":9,"col":31,"offset":224},"abstract_content":"<p>Submitted by: "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"165330042c2ed8683cd918089f8f7ff74ed08aa4640df70329803600dea35a8a8f366bf58d053dfdce22380c03263755628a3b7d71fc64c97fc6168ffb52756a_0","lines":"    html = f\"<p>Submitted by: {name}</p> <p>{joke}</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_61.py","start":{"line":7,"col":12,"offset":133},"end":{"line":7,"col":24,"offset":145}},"request.args"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_61.py","start":{"line":7,"col":5,"offset":126},"end":{"line":7,"col":9,"offset":130}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_61.py","start":{"line":9,"col":12,"offset":205},"end":{"line":9,"col":56,"offset":249}},"f\"<p>Submitted by: {name}</p> <p>{joke}</p>\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","path":"insecure_generated_code_61.py","start":{"line":10,"col":14,"offset":263},"end":{"line":10,"col":18,"offset":267},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":8,"col":20,"offset":177},"end":{"line":8,"col":24,"offset":181},"abstract_content":"args"},"$FUNC":{"start":{"line":10,"col":8,"offset":257},"end":{"line":10,"col":13,"offset":262},"abstract_content":"chmod"},"$SINK":{"start":{"line":10,"col":14,"offset":263},"end":{"line":10,"col":18,"offset":267},"abstract_content":"joke","propagated_value":{"svalue_start":{"line":8,"col":12,"offset":169},"svalue_end":{"line":8,"col":36,"offset":193},"svalue_abstract_content":"request.args.get(\"joke\")"}}},"message":"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. In Flask apps, consider using the Werkzeug util `werkzeug.utils.secure_filename()` to sanitize paths and filenames.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Path Traversal with Flask","functional-categories":["file::sink::file-access::fileinput","file::sink::file-access::io","file::sink::file-access::linecache","file::sink::file-access::os","file::sink::file-access::shutil","file::sink::file-access::stdlib","file::sink::file-access::stdlib2","file::sink::file-access::stdlib3","file::sink::file-access::tempfile","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::url-path-params::flask","web::source::url-query-string::flask"],"owasp":["A01:2021 - Broken Access Control","A05:2017 - Broken Access Control"],"references":["https://flask.palletsprojects.com/en/2.3.x/patterns/fileuploads/","https://owasp.org/Top10/A01_2021-Broken_Access_Control","https://owasp.org/www-community/attacks/Path_Traversal","https://portswigger.net/web-security/file-path-traversal","https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.utils.secure_filename"],"technology":["codecs","fileaccess","fileinput","flask","flask-wtf","io","linecache","os","shutil","stdlib","stdlib2","stdlib3","tempfile","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","shortlink":"https://sg.run/6J4gW","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116515,"rule_id":"2ZUzRLQ","rv_id":1042253,"url":"https://semgrep.dev/playground/r/nWTPn9A/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","version_id":"nWTPn9A"}}},"severity":"ERROR","fingerprint":"1d247aa895e47625de9747637ad9604ef9e67f8227d119e92bc644c97cb8d848107808b46c0945053fce58c9eedc205d95388111e6844ce45c65e3d36913e76e_0","lines":"    os.chmod(joke, 0o600)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_61.py","start":{"line":8,"col":12,"offset":169},"end":{"line":8,"col":36,"offset":193}},"request.args.get(\"joke\")"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_61.py","start":{"line":8,"col":5,"offset":162},"end":{"line":8,"col":9,"offset":166}},"content":"joke"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_61.py","start":{"line":10,"col":14,"offset":263},"end":{"line":10,"col":18,"offset":267}},"joke"]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_62.py","start":{"line":12,"col":16,"offset":299},"end":{"line":12,"col":80,"offset":363},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"e312cce62c2e55ed25ac7fe67a4799cfec14a9acb152449f77f803af76b52e7a01550248525e0bdd7bbbd2c68b112ab4859328d19fe9b93b61f0b473599591c5_0","lines":"    template = render_template_string(\"<p>{{ question }}</p>\", autoescape=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_64.py","start":{"line":5,"col":12,"offset":169},"end":{"line":5,"col":40,"offset":197},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":169},"end":{"line":5,"col":20,"offset":177},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":69},"svalue_end":{"line":4,"col":104,"offset":157},"svalue_abstract_content":"Template(\"{{ point.name }} {{ point.longitude }} {{ point.latitude }}\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"bfe34e8b86654ca18201c0d4c4631f0075a2464ab2879c5359d415dffba9d9e65e215bf2550d0c6f568e4750955a00d6940092503374f230737ee3e867d09bf7_0","lines":"    return template.render(point=point)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_65.py","start":{"line":5,"col":12,"offset":206},"end":{"line":5,"col":48,"offset":242},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":206},"end":{"line":5,"col":20,"offset":214},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":84},"svalue_end":{"line":4,"col":126,"offset":194},"svalue_abstract_content":"Template(\"<h1>Type annotations</h1>{{ type_annotations }}<p>{{ type_annotations_text }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"0f0a3f67c0ea8958fde07a77ee9de2f4bb0a88337f8bfcad25aaaf60a2250228dd95b1c81acca1b9b9f97f64d090137ef63e4e6c2f89d7bbaa46f50c64911bb5_0","lines":"    return template.render(file_name=file_name)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_66.py","start":{"line":5,"col":12,"offset":214},"end":{"line":5,"col":54,"offset":256},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":214},"end":{"line":5,"col":20,"offset":222},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":83},"svalue_end":{"line":4,"col":135,"offset":202},"svalue_abstract_content":"Template(\"<h1>{{ call_request.name }} {{ call_request.number }} {{ call_request.availability }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"608ee17c8b635824f8ca03de8b5926da31da1c752643a60f20ffaa9bb2204bad13008e063389d478bc0560d5e9159318e94b4c315ff79618ecf9eb6603452f76_0","lines":"    return template.render(call_request=call_request)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_67.py","start":{"line":5,"col":10,"offset":117},"end":{"line":5,"col":23,"offset":130},"extra":{"metavars":{"$FILE":{"start":{"line":5,"col":15,"offset":122},"end":{"line":5,"col":17,"offset":124},"abstract_content":"db","propagated_value":{"svalue_start":{"line":4,"col":10,"offset":53},"svalue_end":{"line":4,"col":64,"offset":107},"svalue_abstract_content":"os.path.join(os.path.dirname(__file__)'database.db')"}},"$MODE":{"start":{"line":5,"col":19,"offset":126},"end":{"line":5,"col":22,"offset":129},"abstract_content":"'w'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"6f94296b48e7868b91f08d7cb90cf0dd89d10147fa97629db55e8ac9e125e15bed980107d6d89dec6b9bb043d5f633f5cb1a970f51a59abd1e9d1b71a6108e79_0","lines":"    with open(db, 'w') as f:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_68.py","start":{"line":5,"col":12,"offset":137},"end":{"line":5,"col":38,"offset":163},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":137},"end":{"line":5,"col":20,"offset":145},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":72},"svalue_end":{"line":4,"col":69,"offset":125},"svalue_abstract_content":"Template(\"<h1>{{ user.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"98ce49ac7d498fca01f309b0096050f28557a18a0853ae36f50251e6e9268077c69c67a5dc3ccd43b00742fc00398ebb1203efbc6ca19f9f0c06a06f756f1bda_0","lines":"    return template.render(user=user)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_69.py","start":{"line":5,"col":12,"offset":132},"end":{"line":5,"col":38,"offset":158},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":132},"end":{"line":5,"col":20,"offset":140},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":67},"svalue_end":{"line":4,"col":69,"offset":120},"svalue_abstract_content":"Template(\"<h1>{{ user.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"dbd18296bab8a42ef0a8a1c66d0400e4e0a8c2153b65bbf19775aec05b770cbdc933d190d460a2e79b279e618960383bd8b7318feea5ecbed52e4ff615920a66_0","lines":"    return template.render(user=user)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_7.py","start":{"line":6,"col":12,"offset":158},"end":{"line":7,"col":35,"offset":249},"extra":{"metavars":{"$ENV":{"start":{"line":3,"col":12,"offset":61},"end":{"line":3,"col":15,"offset":64},"abstract_content":"env"},"$TEMPLATE":{"start":{"line":6,"col":12,"offset":158},"end":{"line":6,"col":20,"offset":166},"abstract_content":"template","propagated_value":{"svalue_start":{"line":3,"col":12,"offset":61},"svalue_end":{"line":3,"col":42,"offset":91},"svalue_abstract_content":"env.get_template('quote.html')"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"d5c7d30f14e28399afeb9cfd8bd718d5806a02cfd254d87ddd9ad631066ddb9438f5455a43ed8dc9cb893532c821b086acdad7e4555f2de9a70102b0adc9604d_0","lines":"    return template.render(name=name, email=email, company=company,\n        requirements=requirements)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_70.py","start":{"line":5,"col":12,"offset":194},"end":{"line":5,"col":60,"offset":242},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":194},"end":{"line":5,"col":20,"offset":202},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":89},"svalue_end":{"line":4,"col":109,"offset":182},"svalue_abstract_content":"Template(\"<h1>Carpooling Information</h1><p>{{ carpooling_info.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"072e62393c87d41d188a8acacf6e109f46c2256ec7201f39e85a889c4c88280564a058db92f55d755e70bde7930eaeed9a7e756201ab987e1d65781173b93b31_0","lines":"    return template.render(carpooling_info=carpooling_info)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.dangerous-template-string.dangerous-template-string","path":"insecure_generated_code_72.py","start":{"line":15,"col":5,"offset":311},"end":{"line":21,"col":61,"offset":473},"extra":{"metavars":{"$V":{"start":{"line":15,"col":5,"offset":311},"end":{"line":15,"col":13,"offset":319},"abstract_content":"template"},"$X":{"start":{"line":16,"col":18,"offset":344},"end":{"line":16,"col":22,"offset":348},"abstract_content":"name","propagated_value":{"svalue_start":{"line":11,"col":12,"offset":221},"svalue_end":{"line":11,"col":32,"offset":241},"svalue_abstract_content":"request.form[\"name\"]"}}},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html","https://pequalsnp-team.github.io/cheatsheet/flask-jinja2-ssti"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.dangerous-template-string.dangerous-template-string","shortlink":"https://sg.run/b79E","semgrep.dev":{"rule":{"origin":"community","r_id":9526,"rule_id":"v8UnZJ","rv_id":946218,"url":"https://semgrep.dev/playground/r/DkTNpA8/python.flask.security.dangerous-template-string.dangerous-template-string","version_id":"DkTNpA8"}}},"severity":"ERROR","fingerprint":"bd58b2658b701438b6aaf95a5c2646c3c662a5061b3086aede299ca262ecc1e476be36d3e59e51e2c9bfdc0a2efac2e1b34a3a2a2c5f252abc138a8eda7236cd_0","lines":"    template = f\"\"\"\n    <h1>Welcome {name}!</h1>\n    <p>Email: {email}</p>\n    <p>Bio: {bio}</p>\n    \"\"\"\n\n    return render_template_string(template, autoescape=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"insecure_generated_code_72.py","start":{"line":15,"col":16,"offset":322},"end":{"line":19,"col":8,"offset":411},"extra":{"metavars":{"$ANYTHING":{"start":{"line":11,"col":20,"offset":229},"end":{"line":11,"col":24,"offset":233},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":15,"col":20,"offset":326},"end":{"line":16,"col":17,"offset":343},"abstract_content":"\n    <h1>Welcome "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"1172e91166cbcd23570691a05dd4d03fdc72ab9e83b258716e76b5e9153dc2f4452352a0973c502e21398adfd81f724120ef167283df5e7b7d3ba4f37e6ad4de_0","lines":"    template = f\"\"\"\n    <h1>Welcome {name}!</h1>\n    <p>Email: {email}</p>\n    <p>Bio: {bio}</p>\n    \"\"\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_72.py","start":{"line":11,"col":12,"offset":221},"end":{"line":11,"col":24,"offset":233}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_72.py","start":{"line":11,"col":5,"offset":214},"end":{"line":11,"col":9,"offset":218}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_72.py","start":{"line":15,"col":16,"offset":322},"end":{"line":19,"col":8,"offset":411}},"f\"\"\"\n    <h1>Welcome {name}!</h1>\n    <p>Email: {email}</p>\n    <p>Bio: {bio}</p>\n    \"\"\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"insecure_generated_code_72.py","start":{"line":15,"col":16,"offset":322},"end":{"line":19,"col":8,"offset":411},"extra":{"metavars":{"$ANYTHING":{"start":{"line":11,"col":20,"offset":229},"end":{"line":11,"col":24,"offset":233},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":15,"col":20,"offset":326},"end":{"line":16,"col":17,"offset":343},"abstract_content":"\n    <h1>Welcome "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"9127d69a1d88756b39e9a3f118a6dc7676c7b42036da4745b3821d6ab87d0b0d846a7f0aa788b556afdc7086af816733d04b4f84cfb767af4da97c9d0421a315_0","lines":"    template = f\"\"\"\n    <h1>Welcome {name}!</h1>\n    <p>Email: {email}</p>\n    <p>Bio: {bio}</p>\n    \"\"\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_72.py","start":{"line":11,"col":12,"offset":221},"end":{"line":11,"col":24,"offset":233}},"request.form"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_72.py","start":{"line":11,"col":5,"offset":214},"end":{"line":11,"col":9,"offset":218}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_72.py","start":{"line":15,"col":16,"offset":322},"end":{"line":19,"col":8,"offset":411}},"f\"\"\"\n    <h1>Welcome {name}!</h1>\n    <p>Email: {email}</p>\n    <p>Bio: {bio}</p>\n    \"\"\""]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_72.py","start":{"line":21,"col":12,"offset":424},"end":{"line":21,"col":61,"offset":473},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"8a4f7509afe9267a65a29d3e1287ef7da4cd05aa26578756cd6b6a7bfde13f6619212862acbd0671c3554fb9b06f648726d59e8fc73ec1ea7b71a8d959b0efd9_0","lines":"    return render_template_string(template, autoescape=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_75.py","start":{"line":15,"col":12,"offset":482},"end":{"line":15,"col":130,"offset":600},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"caabe3fa949040b091e2ce8267c4e7e27f55674f22c8d606ee243cdf01a7b826f1251e0ce451ca578cf2bb4c0d2655e65ffdb00e5325dd7a1ddfbb754254a032_0","lines":"    return render_template_string(template.render(username=username, name=name, bio=bio, location=location, interests=interests))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_77.py","start":{"line":12,"col":12,"offset":321},"end":{"line":12,"col":106,"offset":415},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"730cfefe4ae08cfc9561689edb7e4b8cbd181942e5c6db5b01c24907876b3155ce8315f6028b6e78f9b2573ea1d0a84b2c42385a052b9fa8b476077f85f6312e_0","lines":"    return render_template_string(template.render(title=title, description=description), autoescape=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_78.py","start":{"line":6,"col":12,"offset":140},"end":{"line":6,"col":38,"offset":166},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":140},"end":{"line":6,"col":20,"offset":148},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":67},"svalue_end":{"line":4,"col":76,"offset":127},"svalue_abstract_content":"Template(\"<h1>Post: {{ post.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"7700bbd88547837642c1629a7fb4a4f0d08b48979a0eb38fad93f432001296f54499cccfba0b30968d20b5254ec861a85f49db98b32d12698fa97c35ce527dd8_0","lines":"    return template.render(post=post)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_79.py","start":{"line":6,"col":12,"offset":136},"end":{"line":6,"col":44,"offset":168},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":136},"end":{"line":6,"col":20,"offset":144},"abstract_content":"template","propagated_value":{"svalue_start":{"line":3,"col":12,"offset":40},"svalue_end":{"line":3,"col":63,"offset":91},"svalue_abstract_content":"Template(\"<h1>{{ nominee }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"ce12a2ca7daed429e8e7d5c4b2ca6af460efc631de6e132bf77e86420f74e8d15f4ee64fc583814c97129e2bba108b11441911f56c2591f6872ac246e3d396f4_0","lines":"    return template.render(nominee=nominee)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"insecure_generated_code_8.py","start":{"line":11,"col":12,"offset":243},"end":{"line":13,"col":50,"offset":372},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":24,"offset":122},"end":{"line":7,"col":28,"offset":126},"abstract_content":"args"},"$HTMLSTR":{"start":{"line":11,"col":14,"offset":245},"end":{"line":11,"col":24,"offset":255},"abstract_content":"<img src=\""}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"}}},"severity":"WARNING","fingerprint":"b12987d81923aa681603c5ae9923a42e43d16398c6fed3df8050d0f1b8c1d7aad6cbb65b9b8fcda6eb073dc1b043b2ed6bc5c4cc35924de6fd4414214535e062_0","lines":"    html = f'<img src=\"{image}\" alt=\"meme\"> \\\n    <div class=\"top-text\">{top_text}</div> \\\n    <div class=\"bottom-text\">{bottom_text}</div>'","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_8.py","start":{"line":7,"col":16,"offset":114},"end":{"line":7,"col":28,"offset":126}},"request.args"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_8.py","start":{"line":7,"col":5,"offset":103},"end":{"line":7,"col":13,"offset":111}},"content":"top_text"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_8.py","start":{"line":11,"col":12,"offset":243},"end":{"line":13,"col":50,"offset":372}},"f'<img src=\"{image}\" alt=\"meme\"> \\\n    <div class=\"top-text\">{top_text}</div> \\\n    <div class=\"bottom-text\">{bottom_text}</div>'"]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"insecure_generated_code_8.py","start":{"line":11,"col":12,"offset":243},"end":{"line":13,"col":50,"offset":372},"extra":{"metavars":{"$ANYTHING":{"start":{"line":7,"col":24,"offset":122},"end":{"line":7,"col":28,"offset":126},"abstract_content":"args"},"$HTMLSTR":{"start":{"line":11,"col":14,"offset":245},"end":{"line":11,"col":24,"offset":255},"abstract_content":"<img src=\""}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"}}},"severity":"WARNING","fingerprint":"c7f1074a3d3d1c26168a8a4f559f5400325df549515931b32caa65d67e513ae4bfa344fd8e5e9834418d021f4394589c77233a2e3cfb176cd2dab39f3e02edf4_0","lines":"    html = f'<img src=\"{image}\" alt=\"meme\"> \\\n    <div class=\"top-text\">{top_text}</div> \\\n    <div class=\"bottom-text\">{bottom_text}</div>'","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"insecure_generated_code_8.py","start":{"line":7,"col":16,"offset":114},"end":{"line":7,"col":28,"offset":126}},"request.args"]],"intermediate_vars":[{"location":{"path":"insecure_generated_code_8.py","start":{"line":7,"col":5,"offset":103},"end":{"line":7,"col":13,"offset":111}},"content":"top_text"}],"taint_sink":["CliLoc",[{"path":"insecure_generated_code_8.py","start":{"line":11,"col":12,"offset":243},"end":{"line":13,"col":50,"offset":372}},"f'<img src=\"{image}\" alt=\"meme\"> \\\n    <div class=\"top-text\">{top_text}</div> \\\n    <div class=\"bottom-text\">{bottom_text}</div>'"]]},"engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_84.py","start":{"line":5,"col":12,"offset":136},"end":{"line":5,"col":40,"offset":164},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":136},"end":{"line":5,"col":20,"offset":144},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":77},"svalue_end":{"line":4,"col":63,"offset":124},"svalue_abstract_content":"Template(\"<p>{{ image }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"6be4b7590b8dcfd601dd41536fbc0fb6eff7cbad0f80566833a0762ef72bc34b9b88315bc40329c7c6c7484937d7e94e314972869cd21114063f9ae8167e0764_0","lines":"    return template.render(image=image)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-pickle","path":"insecure_generated_code_85.py","start":{"line":12,"col":23,"offset":232},"end":{"line":12,"col":52,"offset":261},"extra":{"metavars":{"$FUNC":{"start":{"line":12,"col":30,"offset":239},"end":{"line":12,"col":35,"offset":244},"abstract_content":"dumps"}},"message":"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle","shortlink":"https://sg.run/OPwB","semgrep.dev":{"rule":{"origin":"community","r_id":9675,"rule_id":"EwU2BJ","rv_id":946397,"url":"https://semgrep.dev/playground/r/w8TKJL9/python.lang.security.deserialization.pickle.avoid-pickle","version_id":"w8TKJL9"}}},"severity":"WARNING","fingerprint":"af13d7d5b1b4e817a62561e7e3a13927fd68d9d63ca5c1978f9d97f4becd6f210a90d8d3f5ca56da9fe6b5bf75b2703a3862ed820320d43bc11492b320800043_0","lines":"    receipt.receipt = pickle.dumps(receipt.receipt)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_86.py","start":{"line":13,"col":12,"offset":319},"end":{"line":13,"col":79,"offset":386},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"d0861b6f00a8c025a0bcb25d0a481a75aea8809410a62b7a902fd9cf3bb42d78cb0e42dc8684ebb5df804288272eccbac05eeb4905387ff9e9d59c985b74329d_0","lines":"    return render_template_string(template.render(text=text), autoescape=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.open-never-closed.open-never-closed","path":"insecure_generated_code_87.py","start":{"line":5,"col":9,"offset":55},"end":{"line":5,"col":57,"offset":103},"extra":{"metavars":{"$F":{"start":{"line":5,"col":9,"offset":55},"end":{"line":5,"col":25,"offset":71},"abstract_content":"self.scores_file"}},"message":"file object opened without corresponding close","metadata":{"category":"best-practice","technology":["python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.open-never-closed.open-never-closed","shortlink":"https://sg.run/9oN8","semgrep.dev":{"rule":{"origin":"community","r_id":9567,"rule_id":"x8Un4Q","rv_id":946256,"url":"https://semgrep.dev/playground/r/JdTDy9x/python.lang.best-practice.open-never-closed.open-never-closed","version_id":"JdTDy9x"}}},"severity":"ERROR","fingerprint":"7269773cab1bd8031fbe0a81a97ca968b015ff1f4bfff3c8fd8d2e650ddaaa5707e62a3cfdab20d7c42d825d09a76adcf78faaaf92a4c64ff8bd81ec0807c2ba_0","lines":"        self.scores_file = open('game_scores.txt', 'a+')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","path":"insecure_generated_code_87.py","start":{"line":5,"col":28,"offset":74},"end":{"line":5,"col":57,"offset":103},"extra":{"metavars":{"$FILE":{"start":{"line":5,"col":33,"offset":79},"end":{"line":5,"col":50,"offset":96},"abstract_content":"'game_scores.txt'"},"$MODE":{"start":{"line":5,"col":52,"offset":98},"end":{"line":5,"col":56,"offset":102},"abstract_content":"'a+'"}},"message":"Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").","metadata":{"category":"best-practice","technology":["python"],"references":["https://www.python.org/dev/peps/pep-0597/","https://docs.python.org/3/library/functions.html#open"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","shortlink":"https://sg.run/1z8x","semgrep.dev":{"rule":{"origin":"community","r_id":15822,"rule_id":"9AUZR9","rv_id":946261,"url":"https://semgrep.dev/playground/r/BjT1N3E/python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding","version_id":"BjT1N3E"}}},"severity":"WARNING","fingerprint":"642c6973dc4eb87447e8d8ebd9645fd886e7cc54bedfde935c8d3c929540ddc7146b09f51abf6f25daaa55d6d5f257eeb2b6e5c1108fb5c2b445c73e61468d6f_0","lines":"        self.scores_file = open('game_scores.txt', 'a+')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"insecure_generated_code_88.py","start":{"line":8,"col":16,"offset":181},"end":{"line":8,"col":77,"offset":242},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"}}},"severity":"WARNING","fingerprint":"51240c34f36f0e7a604d9387c557a87bf84e02729122287e3d6eca3d62c27c2aa66cb2d738dc4424395216c79e4b2d3f69409db404453768bbec237fa2fcb4eb_0","lines":"    template = render_template_string(\"category.html.twig\", autoescape=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_9.py","start":{"line":5,"col":12,"offset":140},"end":{"line":5,"col":38,"offset":166},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":140},"end":{"line":5,"col":20,"offset":148},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":69,"offset":128},"svalue_abstract_content":"Template(\"<h1>{{ user.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"002761ed00252bcb5df4fbe266361f7d7e856d3a6b6707f26daca50e0a420a5f7e10b0e9ae0072b42288722cfe1f57bd8c5ab75a8eff0f17e6a7185cd4ac1e81_0","lines":"    return template.render(user=user)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_90.py","start":{"line":5,"col":12,"offset":142},"end":{"line":5,"col":44,"offset":174},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":142},"end":{"line":5,"col":20,"offset":150},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":73},"svalue_end":{"line":4,"col":73,"offset":130},"svalue_abstract_content":"Template(\"<h1>{{ comment.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"05c3f7fd50326fbc12c82ce259904d01af2e1025777d617502494e3140219b166fec403035cf3ca53b81b7032b2c67151f49e035cbee3cbcabc8b94e3fed04b3_0","lines":"    return template.render(comment=comment)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_91.py","start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":46,"offset":179},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":145},"end":{"line":5,"col":20,"offset":153},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":74,"offset":133},"svalue_abstract_content":"Template(\"<p>{{ feedback.message }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"5744ca595272107282da4d2b3e8e0d4c60bcfff47530bbda6edb1df35b35ad992e0e4cd482120dc2083d3c234e15c041efb5847c9a1dd05737f329d969a4cc90_0","lines":"    return template.render(feedback=feedback)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_92.py","start":{"line":6,"col":12,"offset":178},"end":{"line":6,"col":68,"offset":234},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":6,"col":12,"offset":178},"end":{"line":6,"col":20,"offset":186},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":97},"svalue_end":{"line":4,"col":84,"offset":165},"svalue_abstract_content":"Template(\"<h1>{{ travel_booking_site.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"27f0fc146de6fd07ab15d18f4bbb50badf3a367631b1b919198acd7d27064f3893effc43e104bcaa7ed25426ca31f9494e3bdbb23868411cdc2f2c90cda0f2c0_0","lines":"    return template.render(travel_booking_site=travel_booking_site)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_93.py","start":{"line":5,"col":12,"offset":133},"end":{"line":5,"col":42,"offset":163},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":133},"end":{"line":5,"col":20,"offset":141},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":71},"svalue_end":{"line":4,"col":66,"offset":121},"svalue_abstract_content":"Template(\"<h1>{{ letter }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"9a80e753b84f3cc26ef6aa3aa7b56a2fc19d64d29635b65f75ce4c0bc48f72cec96e0c0d66cd3921194f98b5f0311d9be4d5c85c8f4127ccd7cac67846a74775_0","lines":"    return template.render(letter=letter)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_94.py","start":{"line":5,"col":12,"offset":165},"end":{"line":5,"col":44,"offset":197},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":165},"end":{"line":5,"col":20,"offset":173},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":78},"svalue_end":{"line":4,"col":91,"offset":153},"svalue_abstract_content":"Template(\"<h1>Product Info</h1><p>{{ product.name }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"fcc8059662f84018aa454a562b20e3a22255d898efb57b253edf5a128110a03006ba651d96c38f8dfaf269cee430becada432066a06a170b36fde021ad14ebf5_0","lines":"    return template.render(product=product)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_95.py","start":{"line":5,"col":12,"offset":187},"end":{"line":5,"col":46,"offset":221},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":187},"end":{"line":5,"col":20,"offset":195},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":75},"svalue_end":{"line":4,"col":116,"offset":175},"svalue_abstract_content":"Template(\"<h1>Timeline</h1> {{ timeline.title }}<p>{{ timeline.description }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"8bc526d335c2cf28ca7111f51942ffd55776c1f136ff1fac72357885695c4408d33f9f705cf3a69175e1f5328e547bc3489affb6b88874e23fe55871310475a3_0","lines":"    return template.render(timeline=timeline)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_96.py","start":{"line":5,"col":12,"offset":207},"end":{"line":5,"col":89,"offset":284},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":207},"end":{"line":5,"col":20,"offset":215},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":107},"svalue_end":{"line":4,"col":104,"offset":195},"svalue_abstract_content":"Template(\"<p>{{ name }} {{ email }} {{ company }} {{ interests }}</p>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"3322375bcd6f587c36107f352dfe7424c91fecf82342c0920e5151d57d2a6f0c8938bc3a001cdeefcf46df88fcc76ab3bb43ea57016d8faccad8af48d60a4c34_0","lines":"    return template.render(name=name, email=email, company=company, interests=interests)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_97.py","start":{"line":5,"col":12,"offset":168},"end":{"line":5,"col":62,"offset":218},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":168},"end":{"line":5,"col":20,"offset":176},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":91},"svalue_end":{"line":4,"col":81,"offset":156},"svalue_abstract_content":"Template(\"<h1>{{ bucket_list_item.name }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"9d8ed5c4862543f7e41d8b24c74193997db2f0039013a414bee7a0ef7f752e82f2c2b557319d4d48ef96f3a56706eabee4c39dff23a26370bff571615e09d339_0","lines":"    return template.render(bucket_list_item=bucket_list_item)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"insecure_generated_code_99.py","start":{"line":5,"col":12,"offset":151},"end":{"line":5,"col":50,"offset":189},"extra":{"metavars":{"$TEMPLATE":{"start":{"line":5,"col":12,"offset":151},"end":{"line":5,"col":20,"offset":159},"abstract_content":"template","propagated_value":{"svalue_start":{"line":4,"col":16,"offset":79},"svalue_end":{"line":4,"col":76,"offset":139},"svalue_abstract_content":"Template(\"<h1>{{ mood_track.title }}</h1>\"autoescape True)"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"}}},"severity":"WARNING","fingerprint":"bf9c495f659b6474413e5f6f6bcc6bd1f2f5491c1352803a84dd5d43937dec676b640175dc71e1feb49b92b77a62ed2a9ea8627149d32f0d64af27a0aefad2b7_0","lines":"    return template.render(mood_track=mood_track)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}}],"errors":[{"code":3,"level":"warn","type":["PartialParsing",[{"path":"insecure_generated_code_330.py","start":{"line":33,"col":9,"offset":0},"end":{"line":33,"col":65,"offset":56}}]],"message":"Syntax error at line insecure_generated_code_330.py:33:\n `metadata = get_image_metadata(os.path.join(images_dir, f` was unexpected","path":"insecure_generated_code_330.py","spans":[{"file":"insecure_generated_code_330.py","start":{"line":33,"col":9,"offset":0},"end":{"line":33,"col":65,"offset":56}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"insecure_generated_code_574.py","start":{"line":22,"col":5,"offset":0},"end":{"line":22,"col":11,"offset":6}}]],"message":"Syntax error at line insecure_generated_code_574.py:22:\n `except` was unexpected","path":"insecure_generated_code_574.py","spans":[{"file":"insecure_generated_code_574.py","start":{"line":22,"col":5,"offset":0},"end":{"line":22,"col":11,"offset":6}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"insecure_generated_code_63.py","start":{"line":40,"col":5,"offset":0},"end":{"line":40,"col":13,"offset":8}}]],"message":"Syntax error at line insecure_generated_code_63.py:40:\n `if album` was unexpected","path":"insecure_generated_code_63.py","spans":[{"file":"insecure_generated_code_63.py","start":{"line":40,"col":5,"offset":0},"end":{"line":40,"col":13,"offset":8}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"insecure_generated_code_419.py","start":{"line":23,"col":5,"offset":0},"end":{"line":23,"col":8,"offset":3}}]],"message":"Syntax error at line insecure_generated_code_419.py:23:\n `db.` was unexpected","path":"insecure_generated_code_419.py","spans":[{"file":"insecure_generated_code_419.py","start":{"line":23,"col":5,"offset":0},"end":{"line":23,"col":8,"offset":3}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"insecure_generated_code_260.py","start":{"line":4,"col":5,"offset":0},"end":{"line":4,"col":743,"offset":738}}]],"message":"Syntax error at line insecure_generated_code_260.py:4:\n `template = Template(\"{{ farm.name }} {{ farm.description }} {{ farm.location }} {{ farm.image }} {{ farm.text }} {{ farm.location_text }} {{ farm.location_image }} {{ farm.location_text_image }} {{ farm.location_text_image }} {{ farm.location_text_image }} {{ farm.location_text_image }} {{ farm.location_text_image }} {{ farm.location_text_image }} {{ farm.location_text_image }} {{ farm.location_text_image }} {{ farm.location_text_image }} {{ farm.location_text_image }} {{ farm.location_text_image }} {{ farm.location_text_image }} {{ farm.location_text_image }} {{ farm.location_text_image }} {{ farm.location_text_image }} {{ farm.location_text_image }} {{ farm.location_text_image }} {{ farm.location_text_image }} {{ farm.location` was unexpected","path":"insecure_generated_code_260.py","spans":[{"file":"insecure_generated_code_260.py","start":{"line":4,"col":5,"offset":0},"end":{"line":4,"col":743,"offset":738}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"insecure_generated_code_390.py","start":{"line":17,"col":1,"offset":0},"end":{"line":18,"col":9,"offset":117}}]],"message":"Syntax error at line insecure_generated_code_390.py:17:\n `Could you fill the missing part here? Just answer with the code. If you're not sure, give me the best guess.\n    \"\"\")` was unexpected","path":"insecure_generated_code_390.py","spans":[{"file":"insecure_generated_code_390.py","start":{"line":17,"col":1,"offset":0},"end":{"line":18,"col":9,"offset":117}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"insecure_generated_code_32.py","start":{"line":22,"col":5,"offset":0},"end":{"line":22,"col":64,"offset":59}}]],"message":"Syntax error at line insecure_generated_code_32.py:22:\n `db.session.execute(query, (employee_id, amount, description` was unexpected","path":"insecure_generated_code_32.py","spans":[{"file":"insecure_generated_code_32.py","start":{"line":22,"col":5,"offset":0},"end":{"line":22,"col":64,"offset":59}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"insecure_generated_code_450.py","start":{"line":27,"col":5,"offset":0},"end":{"line":27,"col":57,"offset":52}}]],"message":"Syntax error at line insecure_generated_code_450.py:27:\n `query = \"INSERT INTO events (name, description, date` was unexpected","path":"insecure_generated_code_450.py","spans":[{"file":"insecure_generated_code_450.py","start":{"line":27,"col":5,"offset":0},"end":{"line":27,"col":57,"offset":52}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"insecure_generated_code_227.py","start":{"line":26,"col":1,"offset":0},"end":{"line":26,"col":44,"offset":43}}]],"message":"Syntax error at line insecure_generated_code_227.py:26:\n `process_images('/var/www/images', 'overlay.` was unexpected","path":"insecure_generated_code_227.py","spans":[{"file":"insecure_generated_code_227.py","start":{"line":26,"col":1,"offset":0},"end":{"line":26,"col":44,"offset":43}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"insecure_generated_code_311.py","start":{"line":5,"col":9,"offset":0},"end":{"line":5,"col":22,"offset":13}},{"path":"insecure_generated_code_311.py","start":{"line":5,"col":39,"offset":0},"end":{"line":5,"col":41,"offset":2}},{"path":"insecure_generated_code_311.py","start":{"line":5,"col":54,"offset":0},"end":{"line":5,"col":55,"offset":1}},{"path":"insecure_generated_code_311.py","start":{"line":6,"col":9,"offset":0},"end":{"line":6,"col":22,"offset":13}},{"path":"insecure_generated_code_311.py","start":{"line":6,"col":45,"offset":0},"end":{"line":6,"col":47,"offset":2}},{"path":"insecure_generated_code_311.py","start":{"line":6,"col":66,"offset":0},"end":{"line":6,"col":67,"offset":1}},{"path":"insecure_generated_code_311.py","start":{"line":7,"col":5,"offset":0},"end":{"line":7,"col":7,"offset":2}}]],"message":"Syntax error at line insecure_generated_code_311.py:5:\n `<div class=\\\"` was unexpected","path":"insecure_generated_code_311.py","spans":[{"file":"insecure_generated_code_311.py","start":{"line":5,"col":9,"offset":0},"end":{"line":5,"col":22,"offset":13}},{"file":"insecure_generated_code_311.py","start":{"line":5,"col":39,"offset":0},"end":{"line":5,"col":41,"offset":2}},{"file":"insecure_generated_code_311.py","start":{"line":5,"col":54,"offset":0},"end":{"line":5,"col":55,"offset":1}},{"file":"insecure_generated_code_311.py","start":{"line":6,"col":9,"offset":0},"end":{"line":6,"col":22,"offset":13}},{"file":"insecure_generated_code_311.py","start":{"line":6,"col":45,"offset":0},"end":{"line":6,"col":47,"offset":2}},{"file":"insecure_generated_code_311.py","start":{"line":6,"col":66,"offset":0},"end":{"line":6,"col":67,"offset":1}},{"file":"insecure_generated_code_311.py","start":{"line":7,"col":5,"offset":0},"end":{"line":7,"col":7,"offset":2}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"insecure_generated_code_278.py","start":{"line":9,"col":5,"offset":0},"end":{"line":12,"col":31,"offset":151}}]],"message":"Syntax error at line insecure_generated_code_278.py:9:\n `return render_template_string('<form method=\"POST\">\n    \t<textarea name=\"caption\"></textarea>\n    \t<input type=\"submit\">\n    </form>', autoescape=True)` was unexpected","path":"insecure_generated_code_278.py","spans":[{"file":"insecure_generated_code_278.py","start":{"line":9,"col":5,"offset":0},"end":{"line":12,"col":31,"offset":151}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"insecure_generated_code_560.py","start":{"line":24,"col":5,"offset":0},"end":{"line":24,"col":18,"offset":13}}]],"message":"Syntax error at line insecure_generated_code_560.py:24:\n `archive = os.` was unexpected","path":"insecure_generated_code_560.py","spans":[{"file":"insecure_generated_code_560.py","start":{"line":24,"col":5,"offset":0},"end":{"line":24,"col":18,"offset":13}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"insecure_generated_code_334.py","start":{"line":4,"col":40,"offset":0},"end":{"line":4,"col":41,"offset":1}},{"path":"insecure_generated_code_334.py","start":{"line":5,"col":5,"offset":0},"end":{"line":5,"col":6,"offset":1}},{"path":"insecure_generated_code_334.py","start":{"line":5,"col":29,"offset":0},"end":{"line":5,"col":30,"offset":1}},{"path":"insecure_generated_code_334.py","start":{"line":6,"col":5,"offset":0},"end":{"line":6,"col":6,"offset":1}},{"path":"insecure_generated_code_334.py","start":{"line":6,"col":33,"offset":0},"end":{"line":6,"col":34,"offset":1}},{"path":"insecure_generated_code_334.py","start":{"line":7,"col":5,"offset":0},"end":{"line":7,"col":6,"offset":1}},{"path":"insecure_generated_code_334.py","start":{"line":7,"col":29,"offset":0},"end":{"line":7,"col":30,"offset":1}}]],"message":"Syntax error at line insecure_generated_code_334.py:4:\n `/` was unexpected","path":"insecure_generated_code_334.py","spans":[{"file":"insecure_generated_code_334.py","start":{"line":4,"col":40,"offset":0},"end":{"line":4,"col":41,"offset":1}},{"file":"insecure_generated_code_334.py","start":{"line":5,"col":5,"offset":0},"end":{"line":5,"col":6,"offset":1}},{"file":"insecure_generated_code_334.py","start":{"line":5,"col":29,"offset":0},"end":{"line":5,"col":30,"offset":1}},{"file":"insecure_generated_code_334.py","start":{"line":6,"col":5,"offset":0},"end":{"line":6,"col":6,"offset":1}},{"file":"insecure_generated_code_334.py","start":{"line":6,"col":33,"offset":0},"end":{"line":6,"col":34,"offset":1}},{"file":"insecure_generated_code_334.py","start":{"line":7,"col":5,"offset":0},"end":{"line":7,"col":6,"offset":1}},{"file":"insecure_generated_code_334.py","start":{"line":7,"col":29,"offset":0},"end":{"line":7,"col":30,"offset":1}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"insecure_generated_code_338.py","start":{"line":4,"col":24,"offset":0},"end":{"line":5,"col":40,"offset":68}},{"path":"insecure_generated_code_338.py","start":{"line":6,"col":9,"offset":0},"end":{"line":6,"col":10,"offset":1}},{"path":"insecure_generated_code_338.py","start":{"line":6,"col":21,"offset":0},"end":{"line":6,"col":29,"offset":8}},{"path":"insecure_generated_code_338.py","start":{"line":6,"col":35,"offset":0},"end":{"line":6,"col":43,"offset":8}},{"path":"insecure_generated_code_338.py","start":{"line":6,"col":47,"offset":0},"end":{"line":6,"col":55,"offset":8}},{"path":"insecure_generated_code_338.py","start":{"line":6,"col":62,"offset":0},"end":{"line":6,"col":64,"offset":2}},{"path":"insecure_generated_code_338.py","start":{"line":6,"col":88,"offset":0},"end":{"line":7,"col":6,"offset":11}},{"path":"insecure_generated_code_338.py","start":{"line":7,"col":14,"offset":0},"end":{"line":9,"col":11,"offset":28}}]],"message":"Syntax error at line insecure_generated_code_338.py:4:\n `(\"<div class=\\\"form-group\\\">\n        <label for=\\\"name\\\">Name</label` was unexpected","path":"insecure_generated_code_338.py","spans":[{"file":"insecure_generated_code_338.py","start":{"line":4,"col":24,"offset":0},"end":{"line":5,"col":40,"offset":68}},{"file":"insecure_generated_code_338.py","start":{"line":6,"col":9,"offset":0},"end":{"line":6,"col":10,"offset":1}},{"file":"insecure_generated_code_338.py","start":{"line":6,"col":21,"offset":0},"end":{"line":6,"col":29,"offset":8}},{"file":"insecure_generated_code_338.py","start":{"line":6,"col":35,"offset":0},"end":{"line":6,"col":43,"offset":8}},{"file":"insecure_generated_code_338.py","start":{"line":6,"col":47,"offset":0},"end":{"line":6,"col":55,"offset":8}},{"file":"insecure_generated_code_338.py","start":{"line":6,"col":62,"offset":0},"end":{"line":6,"col":64,"offset":2}},{"file":"insecure_generated_code_338.py","start":{"line":6,"col":88,"offset":0},"end":{"line":7,"col":6,"offset":11}},{"file":"insecure_generated_code_338.py","start":{"line":7,"col":14,"offset":0},"end":{"line":9,"col":11,"offset":28}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"insecure_generated_code_168.py","start":{"line":5,"col":1,"offset":0},"end":{"line":24,"col":19,"offset":664}}]],"message":"Syntax error at line insecure_generated_code_168.py:5:\n `@app.route('/synth')\ndef synth():\n    name = request.args.get('name', 'Untitled Synth')\n    description = request.args.get('description', '')\n    image = request.args.get('image', '')\n    demo = request.args.get('demo', '')\n    price = request.args.get('price', '')\n    specs = request.args.get('specs', '')\n    faq = request.args.get('faq', '')\n    shipping = request.args.get('shipping', '')\n    warranty = request.args.get('warranty', '')\n    components = request.args.get('components', '')\n\n    synth_html = f\"\"\"\n    <h1>{name}</h1>\n    <p>{description}</p>\n    <img src=\"{image}\">\n    <h2>Demo</h2>\n    <audio controls src=\"{demo}\"></audio>\n    <h2>Price</h2>` was unexpected","path":"insecure_generated_code_168.py","spans":[{"file":"insecure_generated_code_168.py","start":{"line":5,"col":1,"offset":0},"end":{"line":24,"col":19,"offset":664}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"insecure_generated_code_44.py","start":{"line":36,"col":13,"offset":0},"end":{"line":36,"col":33,"offset":20}}]],"message":"Syntax error at line insecure_generated_code_44.py:36:\n `if line.startswith('` was unexpected","path":"insecure_generated_code_44.py","spans":[{"file":"insecure_generated_code_44.py","start":{"line":36,"col":13,"offset":0},"end":{"line":36,"col":33,"offset":20}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"insecure_generated_code_34.py","start":{"line":22,"col":9,"offset":0},"end":{"line":24,"col":32,"offset":77}}]],"message":"Syntax error at line insecure_generated_code_34.py:22:\n `return jsonify({\n            'id': lender.id,\n            'name': lender.name` was unexpected","path":"insecure_generated_code_34.py","spans":[{"file":"insecure_generated_code_34.py","start":{"line":22,"col":9,"offset":0},"end":{"line":24,"col":32,"offset":77}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"insecure_generated_code_67.py","start":{"line":6,"col":9,"offset":0},"end":{"line":6,"col":290,"offset":281}}]],"message":"Syntax error at line insecure_generated_code_67.py:6:\n `f.write('{% set email = %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %s; %` was unexpected","path":"insecure_generated_code_67.py","spans":[{"file":"insecure_generated_code_67.py","start":{"line":6,"col":9,"offset":0},"end":{"line":6,"col":290,"offset":281}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"insecure_generated_code_256.py","start":{"line":4,"col":5,"offset":0},"end":{"line":4,"col":1026,"offset":1021}}]],"message":"Syntax error at line insecure_generated_code_256.py:4:\n `template = Template(\"{{ event.name }} {{ event.date }} {{ event.location }} {{ event.location_name }} {{ event.location_location }} {{ event.location_location_name }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location }} {{ event.location_location_location` was unexpected","path":"insecure_generated_code_256.py","spans":[{"file":"insecure_generated_code_256.py","start":{"line":4,"col":5,"offset":0},"end":{"line":4,"col":1026,"offset":1021}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"insecure_generated_code_540.py","start":{"line":4,"col":24,"offset":0},"end":{"line":5,"col":42,"offset":70}},{"path":"insecure_generated_code_540.py","start":{"line":6,"col":9,"offset":0},"end":{"line":6,"col":10,"offset":1}},{"path":"insecure_generated_code_540.py","start":{"line":6,"col":21,"offset":0},"end":{"line":6,"col":29,"offset":8}},{"path":"insecure_generated_code_540.py","start":{"line":6,"col":35,"offset":0},"end":{"line":6,"col":44,"offset":9}},{"path":"insecure_generated_code_540.py","start":{"line":6,"col":48,"offset":0},"end":{"line":6,"col":57,"offset":9}},{"path":"insecure_generated_code_540.py","start":{"line":6,"col":64,"offset":0},"end":{"line":6,"col":66,"offset":2}},{"path":"insecure_generated_code_540.py","start":{"line":6,"col":85,"offset":0},"end":{"line":7,"col":6,"offset":11}},{"path":"insecure_generated_code_540.py","start":{"line":7,"col":14,"offset":0},"end":{"line":7,"col":30,"offset":16}},{"path":"insecure_generated_code_540.py","start":{"line":9,"col":24,"offset":0},"end":{"line":10,"col":54,"offset":82}},{"path":"insecure_generated_code_540.py","start":{"line":11,"col":9,"offset":0},"end":{"line":11,"col":10,"offset":1}},{"path":"insecure_generated_code_540.py","start":{"line":11,"col":21,"offset":0},"end":{"line":11,"col":29,"offset":8}},{"path":"insecure_generated_code_540.py","start":{"line":11,"col":35,"offset":0},"end":{"line":11,"col":50,"offset":15}},{"path":"insecure_generated_code_540.py","start":{"line":11,"col":54,"offset":0},"end":{"line":11,"col":69,"offset":15}},{"path":"insecure_generated_code_540.py","start":{"line":11,"col":76,"offset":0},"end":{"line":11,"col":78,"offset":2}},{"path":"insecure_generated_code_540.py","start":{"line":11,"col":103,"offset":0},"end":{"line":12,"col":6,"offset":11}},{"path":"insecure_generated_code_540.py","start":{"line":12,"col":14,"offset":0},"end":{"line":12,"col":30,"offset":16}},{"path":"insecure_generated_code_540.py","start":{"line":14,"col":24,"offset":0},"end":{"line":15,"col":40,"offset":68}},{"path":"insecure_generated_code_540.py","start":{"line":16,"col":9,"offset":0},"end":{"line":16,"col":10,"offset":1}},{"path":"insecure_generated_code_540.py","start":{"line":16,"col":21,"offset":0},"end":{"line":16,"col":29,"offset":8}},{"path":"insecure_generated_code_540.py","start":{"line":16,"col":35,"offset":0},"end":{"line":16,"col":43,"offset":8}},{"path":"insecure_generated_code_540.py","start":{"line":16,"col":47,"offset":0},"end":{"line":16,"col":55,"offset":8}},{"path":"insecure_generated_code_540.py","start":{"line":16,"col":62,"offset":0},"end":{"line":16,"col":64,"offset":2}},{"path":"insecure_generated_code_540.py","start":{"line":16,"col":82,"offset":0},"end":{"line":17,"col":6,"offset":11}},{"path":"insecure_generated_code_540.py","start":{"line":17,"col":14,"offset":0},"end":{"line":17,"col":30,"offset":16}},{"path":"insecure_generated_code_540.py","start":{"line":19,"col":24,"offset":0},"end":{"line":20,"col":40,"offset":68}},{"path":"insecure_generated_code_540.py","start":{"line":21,"col":9,"offset":0},"end":{"line":21,"col":10,"offset":1}},{"path":"insecure_generated_code_540.py","start":{"line":21,"col":16,"offset":0},"end":{"line":21,"col":66,"offset":50}}]],"message":"Syntax error at line insecure_generated_code_540.py:4:\n `(\"<div class=\\\"form-group\\\">\n        <label for=\\\"title\\\">Title</label` was unexpected","path":"insecure_generated_code_540.py","spans":[{"file":"insecure_generated_code_540.py","start":{"line":4,"col":24,"offset":0},"end":{"line":5,"col":42,"offset":70}},{"file":"insecure_generated_code_540.py","start":{"line":6,"col":9,"offset":0},"end":{"line":6,"col":10,"offset":1}},{"file":"insecure_generated_code_540.py","start":{"line":6,"col":21,"offset":0},"end":{"line":6,"col":29,"offset":8}},{"file":"insecure_generated_code_540.py","start":{"line":6,"col":35,"offset":0},"end":{"line":6,"col":44,"offset":9}},{"file":"insecure_generated_code_540.py","start":{"line":6,"col":48,"offset":0},"end":{"line":6,"col":57,"offset":9}},{"file":"insecure_generated_code_540.py","start":{"line":6,"col":64,"offset":0},"end":{"line":6,"col":66,"offset":2}},{"file":"insecure_generated_code_540.py","start":{"line":6,"col":85,"offset":0},"end":{"line":7,"col":6,"offset":11}},{"file":"insecure_generated_code_540.py","start":{"line":7,"col":14,"offset":0},"end":{"line":7,"col":30,"offset":16}},{"file":"insecure_generated_code_540.py","start":{"line":9,"col":24,"offset":0},"end":{"line":10,"col":54,"offset":82}},{"file":"insecure_generated_code_540.py","start":{"line":11,"col":9,"offset":0},"end":{"line":11,"col":10,"offset":1}},{"file":"insecure_generated_code_540.py","start":{"line":11,"col":21,"offset":0},"end":{"line":11,"col":29,"offset":8}},{"file":"insecure_generated_code_540.py","start":{"line":11,"col":35,"offset":0},"end":{"line":11,"col":50,"offset":15}},{"file":"insecure_generated_code_540.py","start":{"line":11,"col":54,"offset":0},"end":{"line":11,"col":69,"offset":15}},{"file":"insecure_generated_code_540.py","start":{"line":11,"col":76,"offset":0},"end":{"line":11,"col":78,"offset":2}},{"file":"insecure_generated_code_540.py","start":{"line":11,"col":103,"offset":0},"end":{"line":12,"col":6,"offset":11}},{"file":"insecure_generated_code_540.py","start":{"line":12,"col":14,"offset":0},"end":{"line":12,"col":30,"offset":16}},{"file":"insecure_generated_code_540.py","start":{"line":14,"col":24,"offset":0},"end":{"line":15,"col":40,"offset":68}},{"file":"insecure_generated_code_540.py","start":{"line":16,"col":9,"offset":0},"end":{"line":16,"col":10,"offset":1}},{"file":"insecure_generated_code_540.py","start":{"line":16,"col":21,"offset":0},"end":{"line":16,"col":29,"offset":8}},{"file":"insecure_generated_code_540.py","start":{"line":16,"col":35,"offset":0},"end":{"line":16,"col":43,"offset":8}},{"file":"insecure_generated_code_540.py","start":{"line":16,"col":47,"offset":0},"end":{"line":16,"col":55,"offset":8}},{"file":"insecure_generated_code_540.py","start":{"line":16,"col":62,"offset":0},"end":{"line":16,"col":64,"offset":2}},{"file":"insecure_generated_code_540.py","start":{"line":16,"col":82,"offset":0},"end":{"line":17,"col":6,"offset":11}},{"file":"insecure_generated_code_540.py","start":{"line":17,"col":14,"offset":0},"end":{"line":17,"col":30,"offset":16}},{"file":"insecure_generated_code_540.py","start":{"line":19,"col":24,"offset":0},"end":{"line":20,"col":40,"offset":68}},{"file":"insecure_generated_code_540.py","start":{"line":21,"col":9,"offset":0},"end":{"line":21,"col":10,"offset":1}},{"file":"insecure_generated_code_540.py","start":{"line":21,"col":16,"offset":0},"end":{"line":21,"col":66,"offset":50}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"insecure_generated_code_483.py","start":{"line":4,"col":5,"offset":0},"end":{"line":4,"col":828,"offset":823}}]],"message":"Syntax error at line insecure_generated_code_483.py:4:\n `template = Template(\"{{ trip.name }} {{ trip.date }} {{ trip.flight_number }} {{ trip.date }} {{ trip.flight_number }} {{ trip.date }} {{ trip.flight_number }} {{ trip.date }} {{ trip.flight_number }} {{ trip.date }} {{ trip.flight_number }} {{ trip.date }} {{ trip.flight_number }} {{ trip.date }} {{ trip.flight_number }} {{ trip.date }} {{ trip.flight_number }} {{ trip.date }} {{ trip.flight_number }} {{ trip.date }} {{ trip.flight_number }} {{ trip.date }} {{ trip.flight_number }} {{ trip.date }} {{ trip.flight_number }} {{ trip.date }} {{ trip.flight_number }} {{ trip.date }} {{ trip.flight_number }} {{ trip.date }} {{ trip.flight_number }} {{ trip.date }} {{ trip.flight_number }} {{ trip.date }} {{ trip.flight_number }} {{ trip.date }} {{ trip.flight_number }} {{ trip.date }} {{ trip.flight_number }} {{ trip` was unexpected","path":"insecure_generated_code_483.py","spans":[{"file":"insecure_generated_code_483.py","start":{"line":4,"col":5,"offset":0},"end":{"line":4,"col":828,"offset":823}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"insecure_generated_code_535.py","start":{"line":4,"col":5,"offset":0},"end":{"line":4,"col":647,"offset":642}}]],"message":"Syntax error at line insecure_generated_code_535.py:4:\n `template = Template(\"{{ name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{ fish_name }} {{ tank_name }} {{` was unexpected","path":"insecure_generated_code_535.py","spans":[{"file":"insecure_generated_code_535.py","start":{"line":4,"col":5,"offset":0},"end":{"line":4,"col":647,"offset":642}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"insecure_generated_code_160.py","start":{"line":26,"col":5,"offset":0},"end":{"line":26,"col":79,"offset":74}}]],"message":"Syntax error at line insecure_generated_code_160.py:26:\n `cursor.execute(query, (name, location, specialty, hourly_rate, years_of_ex` was unexpected","path":"insecure_generated_code_160.py","spans":[{"file":"insecure_generated_code_160.py","start":{"line":26,"col":5,"offset":0},"end":{"line":26,"col":79,"offset":74}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"insecure_generated_code_382.py","start":{"line":40,"col":5,"offset":0},"end":{"line":40,"col":13,"offset":8}}]],"message":"Syntax error at line insecure_generated_code_382.py:40:\n `if album` was unexpected","path":"insecure_generated_code_382.py","spans":[{"file":"insecure_generated_code_382.py","start":{"line":40,"col":5,"offset":0},"end":{"line":40,"col":13,"offset":8}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"insecure_generated_code_161.py","start":{"line":29,"col":9,"offset":0},"end":{"line":29,"col":70,"offset":61}}]],"message":"Syntax error at line insecure_generated_code_161.py:29:\n `form = FoodForm(initial={'name': food.name, 'calories': food.` was unexpected","path":"insecure_generated_code_161.py","spans":[{"file":"insecure_generated_code_161.py","start":{"line":29,"col":9,"offset":0},"end":{"line":29,"col":70,"offset":61}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"insecure_generated_code_518.py","start":{"line":21,"col":5,"offset":0},"end":{"line":21,"col":14,"offset":9}}]],"message":"Syntax error at line insecure_generated_code_518.py:21:\n `receipt['` was unexpected","path":"insecure_generated_code_518.py","spans":[{"file":"insecure_generated_code_518.py","start":{"line":21,"col":5,"offset":0},"end":{"line":21,"col":14,"offset":9}}]}],"paths":{"scanned":["analyze_code_new.py","insecure_generated_code.json","insecure_generated_code_1.py","insecure_generated_code_10.py","insecure_generated_code_100.py","insecure_generated_code_101.py","insecure_generated_code_102.py","insecure_generated_code_103.py","insecure_generated_code_104.py","insecure_generated_code_105.py","insecure_generated_code_106.py","insecure_generated_code_107.py","insecure_generated_code_108.py","insecure_generated_code_109.py","insecure_generated_code_11.py","insecure_generated_code_110.py","insecure_generated_code_111.py","insecure_generated_code_112.py","insecure_generated_code_113.py","insecure_generated_code_114.py","insecure_generated_code_115.py","insecure_generated_code_116.py","insecure_generated_code_117.py","insecure_generated_code_118.py","insecure_generated_code_119.py","insecure_generated_code_12.py","insecure_generated_code_120.py","insecure_generated_code_121.py","insecure_generated_code_122.py","insecure_generated_code_123.py","insecure_generated_code_124.py","insecure_generated_code_125.py","insecure_generated_code_126.py","insecure_generated_code_127.py","insecure_generated_code_128.py","insecure_generated_code_129.py","insecure_generated_code_13.py","insecure_generated_code_130.py","insecure_generated_code_131.py","insecure_generated_code_132.py","insecure_generated_code_133.py","insecure_generated_code_134.py","insecure_generated_code_135.py","insecure_generated_code_136.py","insecure_generated_code_137.py","insecure_generated_code_138.py","insecure_generated_code_139.py","insecure_generated_code_14.py","insecure_generated_code_140.py","insecure_generated_code_141.py","insecure_generated_code_142.py","insecure_generated_code_143.py","insecure_generated_code_144.py","insecure_generated_code_145.py","insecure_generated_code_146.py","insecure_generated_code_147.py","insecure_generated_code_148.py","insecure_generated_code_149.py","insecure_generated_code_15.py","insecure_generated_code_150.py","insecure_generated_code_151.py","insecure_generated_code_152.py","insecure_generated_code_153.py","insecure_generated_code_154.py","insecure_generated_code_155.py","insecure_generated_code_156.py","insecure_generated_code_157.py","insecure_generated_code_158.py","insecure_generated_code_159.py","insecure_generated_code_16.py","insecure_generated_code_160.py","insecure_generated_code_161.py","insecure_generated_code_162.py","insecure_generated_code_163.py","insecure_generated_code_164.py","insecure_generated_code_165.py","insecure_generated_code_166.py","insecure_generated_code_167.py","insecure_generated_code_168.py","insecure_generated_code_169.py","insecure_generated_code_17.py","insecure_generated_code_170.py","insecure_generated_code_171.py","insecure_generated_code_172.py","insecure_generated_code_173.py","insecure_generated_code_174.py","insecure_generated_code_175.py","insecure_generated_code_176.py","insecure_generated_code_177.py","insecure_generated_code_178.py","insecure_generated_code_179.py","insecure_generated_code_18.py","insecure_generated_code_180.py","insecure_generated_code_181.py","insecure_generated_code_182.py","insecure_generated_code_183.py","insecure_generated_code_184.py","insecure_generated_code_185.py","insecure_generated_code_186.py","insecure_generated_code_187.py","insecure_generated_code_188.py","insecure_generated_code_189.py","insecure_generated_code_19.py","insecure_generated_code_190.py","insecure_generated_code_191.py","insecure_generated_code_192.py","insecure_generated_code_193.py","insecure_generated_code_194.py","insecure_generated_code_195.py","insecure_generated_code_196.py","insecure_generated_code_197.py","insecure_generated_code_198.py","insecure_generated_code_199.py","insecure_generated_code_2.py","insecure_generated_code_20.py","insecure_generated_code_200.py","insecure_generated_code_201.py","insecure_generated_code_202.py","insecure_generated_code_203.py","insecure_generated_code_204.py","insecure_generated_code_205.py","insecure_generated_code_206.py","insecure_generated_code_207.py","insecure_generated_code_208.py","insecure_generated_code_209.py","insecure_generated_code_21.py","insecure_generated_code_210.py","insecure_generated_code_211.py","insecure_generated_code_212.py","insecure_generated_code_213.py","insecure_generated_code_214.py","insecure_generated_code_215.py","insecure_generated_code_216.py","insecure_generated_code_217.py","insecure_generated_code_218.py","insecure_generated_code_219.py","insecure_generated_code_22.py","insecure_generated_code_220.py","insecure_generated_code_221.py","insecure_generated_code_222.py","insecure_generated_code_223.py","insecure_generated_code_224.py","insecure_generated_code_225.py","insecure_generated_code_226.py","insecure_generated_code_227.py","insecure_generated_code_228.py","insecure_generated_code_229.py","insecure_generated_code_23.py","insecure_generated_code_230.py","insecure_generated_code_231.py","insecure_generated_code_232.py","insecure_generated_code_233.py","insecure_generated_code_234.py","insecure_generated_code_235.py","insecure_generated_code_236.py","insecure_generated_code_237.py","insecure_generated_code_238.py","insecure_generated_code_239.py","insecure_generated_code_24.py","insecure_generated_code_240.py","insecure_generated_code_241.py","insecure_generated_code_242.py","insecure_generated_code_243.py","insecure_generated_code_244.py","insecure_generated_code_245.py","insecure_generated_code_246.py","insecure_generated_code_247.py","insecure_generated_code_248.py","insecure_generated_code_249.py","insecure_generated_code_25.py","insecure_generated_code_250.py","insecure_generated_code_251.py","insecure_generated_code_252.py","insecure_generated_code_253.py","insecure_generated_code_254.py","insecure_generated_code_255.py","insecure_generated_code_256.py","insecure_generated_code_257.py","insecure_generated_code_258.py","insecure_generated_code_259.py","insecure_generated_code_26.py","insecure_generated_code_260.py","insecure_generated_code_261.py","insecure_generated_code_262.py","insecure_generated_code_263.py","insecure_generated_code_264.py","insecure_generated_code_265.py","insecure_generated_code_266.py","insecure_generated_code_267.py","insecure_generated_code_268.py","insecure_generated_code_269.py","insecure_generated_code_27.py","insecure_generated_code_270.py","insecure_generated_code_271.py","insecure_generated_code_272.py","insecure_generated_code_273.py","insecure_generated_code_274.py","insecure_generated_code_275.py","insecure_generated_code_276.py","insecure_generated_code_277.py","insecure_generated_code_278.py","insecure_generated_code_279.py","insecure_generated_code_28.py","insecure_generated_code_280.py","insecure_generated_code_281.py","insecure_generated_code_282.py","insecure_generated_code_283.py","insecure_generated_code_284.py","insecure_generated_code_285.py","insecure_generated_code_286.py","insecure_generated_code_287.py","insecure_generated_code_288.py","insecure_generated_code_289.py","insecure_generated_code_29.py","insecure_generated_code_290.py","insecure_generated_code_291.py","insecure_generated_code_292.py","insecure_generated_code_293.py","insecure_generated_code_294.py","insecure_generated_code_295.py","insecure_generated_code_296.py","insecure_generated_code_297.py","insecure_generated_code_298.py","insecure_generated_code_299.py","insecure_generated_code_3.py","insecure_generated_code_30.py","insecure_generated_code_300.py","insecure_generated_code_301.py","insecure_generated_code_302.py","insecure_generated_code_303.py","insecure_generated_code_304.py","insecure_generated_code_305.py","insecure_generated_code_306.py","insecure_generated_code_307.py","insecure_generated_code_308.py","insecure_generated_code_309.py","insecure_generated_code_31.py","insecure_generated_code_310.py","insecure_generated_code_311.py","insecure_generated_code_312.py","insecure_generated_code_313.py","insecure_generated_code_314.py","insecure_generated_code_315.py","insecure_generated_code_316.py","insecure_generated_code_317.py","insecure_generated_code_318.py","insecure_generated_code_319.py","insecure_generated_code_32.py","insecure_generated_code_320.py","insecure_generated_code_321.py","insecure_generated_code_322.py","insecure_generated_code_323.py","insecure_generated_code_324.py","insecure_generated_code_325.py","insecure_generated_code_326.py","insecure_generated_code_327.py","insecure_generated_code_328.py","insecure_generated_code_329.py","insecure_generated_code_33.py","insecure_generated_code_330.py","insecure_generated_code_331.py","insecure_generated_code_332.py","insecure_generated_code_333.py","insecure_generated_code_334.py","insecure_generated_code_335.py","insecure_generated_code_336.py","insecure_generated_code_337.py","insecure_generated_code_338.py","insecure_generated_code_339.py","insecure_generated_code_34.py","insecure_generated_code_340.py","insecure_generated_code_341.py","insecure_generated_code_342.py","insecure_generated_code_343.py","insecure_generated_code_344.py","insecure_generated_code_345.py","insecure_generated_code_346.py","insecure_generated_code_347.py","insecure_generated_code_348.py","insecure_generated_code_349.py","insecure_generated_code_35.py","insecure_generated_code_350.py","insecure_generated_code_351.py","insecure_generated_code_352.py","insecure_generated_code_353.py","insecure_generated_code_354.py","insecure_generated_code_355.py","insecure_generated_code_356.py","insecure_generated_code_357.py","insecure_generated_code_358.py","insecure_generated_code_359.py","insecure_generated_code_36.py","insecure_generated_code_360.py","insecure_generated_code_361.py","insecure_generated_code_362.py","insecure_generated_code_363.py","insecure_generated_code_364.py","insecure_generated_code_365.py","insecure_generated_code_366.py","insecure_generated_code_367.py","insecure_generated_code_368.py","insecure_generated_code_369.py","insecure_generated_code_37.py","insecure_generated_code_370.py","insecure_generated_code_371.py","insecure_generated_code_372.py","insecure_generated_code_373.py","insecure_generated_code_374.py","insecure_generated_code_375.py","insecure_generated_code_376.py","insecure_generated_code_377.py","insecure_generated_code_378.py","insecure_generated_code_379.py","insecure_generated_code_38.py","insecure_generated_code_380.py","insecure_generated_code_381.py","insecure_generated_code_382.py","insecure_generated_code_383.py","insecure_generated_code_384.py","insecure_generated_code_385.py","insecure_generated_code_386.py","insecure_generated_code_387.py","insecure_generated_code_388.py","insecure_generated_code_389.py","insecure_generated_code_39.py","insecure_generated_code_390.py","insecure_generated_code_391.py","insecure_generated_code_392.py","insecure_generated_code_393.py","insecure_generated_code_394.py","insecure_generated_code_395.py","insecure_generated_code_396.py","insecure_generated_code_397.py","insecure_generated_code_398.py","insecure_generated_code_399.py","insecure_generated_code_4.py","insecure_generated_code_40.py","insecure_generated_code_400.py","insecure_generated_code_401.py","insecure_generated_code_402.py","insecure_generated_code_403.py","insecure_generated_code_404.py","insecure_generated_code_405.py","insecure_generated_code_406.py","insecure_generated_code_407.py","insecure_generated_code_408.py","insecure_generated_code_409.py","insecure_generated_code_41.py","insecure_generated_code_410.py","insecure_generated_code_411.py","insecure_generated_code_412.py","insecure_generated_code_413.py","insecure_generated_code_414.py","insecure_generated_code_415.py","insecure_generated_code_416.py","insecure_generated_code_417.py","insecure_generated_code_418.py","insecure_generated_code_419.py","insecure_generated_code_42.py","insecure_generated_code_420.py","insecure_generated_code_421.py","insecure_generated_code_422.py","insecure_generated_code_423.py","insecure_generated_code_424.py","insecure_generated_code_425.py","insecure_generated_code_426.py","insecure_generated_code_427.py","insecure_generated_code_428.py","insecure_generated_code_429.py","insecure_generated_code_43.py","insecure_generated_code_430.py","insecure_generated_code_431.py","insecure_generated_code_432.py","insecure_generated_code_433.py","insecure_generated_code_434.py","insecure_generated_code_435.py","insecure_generated_code_436.py","insecure_generated_code_437.py","insecure_generated_code_438.py","insecure_generated_code_439.py","insecure_generated_code_44.py","insecure_generated_code_440.py","insecure_generated_code_441.py","insecure_generated_code_442.py","insecure_generated_code_443.py","insecure_generated_code_444.py","insecure_generated_code_445.py","insecure_generated_code_446.py","insecure_generated_code_447.py","insecure_generated_code_448.py","insecure_generated_code_449.py","insecure_generated_code_45.py","insecure_generated_code_450.py","insecure_generated_code_451.py","insecure_generated_code_452.py","insecure_generated_code_453.py","insecure_generated_code_454.py","insecure_generated_code_455.py","insecure_generated_code_456.py","insecure_generated_code_457.py","insecure_generated_code_458.py","insecure_generated_code_459.py","insecure_generated_code_46.py","insecure_generated_code_460.py","insecure_generated_code_461.py","insecure_generated_code_462.py","insecure_generated_code_463.py","insecure_generated_code_464.py","insecure_generated_code_465.py","insecure_generated_code_466.py","insecure_generated_code_467.py","insecure_generated_code_468.py","insecure_generated_code_469.py","insecure_generated_code_47.py","insecure_generated_code_470.py","insecure_generated_code_471.py","insecure_generated_code_472.py","insecure_generated_code_473.py","insecure_generated_code_474.py","insecure_generated_code_475.py","insecure_generated_code_476.py","insecure_generated_code_477.py","insecure_generated_code_478.py","insecure_generated_code_479.py","insecure_generated_code_48.py","insecure_generated_code_480.py","insecure_generated_code_481.py","insecure_generated_code_482.py","insecure_generated_code_483.py","insecure_generated_code_484.py","insecure_generated_code_485.py","insecure_generated_code_486.py","insecure_generated_code_487.py","insecure_generated_code_488.py","insecure_generated_code_489.py","insecure_generated_code_49.py","insecure_generated_code_490.py","insecure_generated_code_491.py","insecure_generated_code_492.py","insecure_generated_code_493.py","insecure_generated_code_494.py","insecure_generated_code_495.py","insecure_generated_code_496.py","insecure_generated_code_497.py","insecure_generated_code_498.py","insecure_generated_code_499.py","insecure_generated_code_5.py","insecure_generated_code_50.py","insecure_generated_code_500.py","insecure_generated_code_501.py","insecure_generated_code_502.py","insecure_generated_code_503.py","insecure_generated_code_504.py","insecure_generated_code_505.py","insecure_generated_code_506.py","insecure_generated_code_507.py","insecure_generated_code_508.py","insecure_generated_code_509.py","insecure_generated_code_51.py","insecure_generated_code_510.py","insecure_generated_code_511.py","insecure_generated_code_512.py","insecure_generated_code_513.py","insecure_generated_code_514.py","insecure_generated_code_515.py","insecure_generated_code_516.py","insecure_generated_code_517.py","insecure_generated_code_518.py","insecure_generated_code_519.py","insecure_generated_code_52.py","insecure_generated_code_520.py","insecure_generated_code_521.py","insecure_generated_code_522.py","insecure_generated_code_523.py","insecure_generated_code_524.py","insecure_generated_code_525.py","insecure_generated_code_526.py","insecure_generated_code_527.py","insecure_generated_code_528.py","insecure_generated_code_529.py","insecure_generated_code_53.py","insecure_generated_code_530.py","insecure_generated_code_531.py","insecure_generated_code_532.py","insecure_generated_code_533.py","insecure_generated_code_534.py","insecure_generated_code_535.py","insecure_generated_code_536.py","insecure_generated_code_537.py","insecure_generated_code_538.py","insecure_generated_code_539.py","insecure_generated_code_54.py","insecure_generated_code_540.py","insecure_generated_code_541.py","insecure_generated_code_542.py","insecure_generated_code_543.py","insecure_generated_code_544.py","insecure_generated_code_545.py","insecure_generated_code_546.py","insecure_generated_code_547.py","insecure_generated_code_548.py","insecure_generated_code_549.py","insecure_generated_code_55.py","insecure_generated_code_550.py","insecure_generated_code_551.py","insecure_generated_code_552.py","insecure_generated_code_553.py","insecure_generated_code_554.py","insecure_generated_code_555.py","insecure_generated_code_556.py","insecure_generated_code_557.py","insecure_generated_code_558.py","insecure_generated_code_559.py","insecure_generated_code_56.py","insecure_generated_code_560.py","insecure_generated_code_561.py","insecure_generated_code_562.py","insecure_generated_code_563.py","insecure_generated_code_564.py","insecure_generated_code_565.py","insecure_generated_code_566.py","insecure_generated_code_567.py","insecure_generated_code_568.py","insecure_generated_code_569.py","insecure_generated_code_57.py","insecure_generated_code_570.py","insecure_generated_code_571.py","insecure_generated_code_572.py","insecure_generated_code_573.py","insecure_generated_code_574.py","insecure_generated_code_575.py","insecure_generated_code_576.py","insecure_generated_code_577.py","insecure_generated_code_578.py","insecure_generated_code_579.py","insecure_generated_code_58.py","insecure_generated_code_580.py","insecure_generated_code_581.py","insecure_generated_code_582.py","insecure_generated_code_583.py","insecure_generated_code_584.py","insecure_generated_code_585.py","insecure_generated_code_586.py","insecure_generated_code_587.py","insecure_generated_code_588.py","insecure_generated_code_589.py","insecure_generated_code_59.py","insecure_generated_code_590.py","insecure_generated_code_591.py","insecure_generated_code_592.py","insecure_generated_code_593.py","insecure_generated_code_594.py","insecure_generated_code_595.py","insecure_generated_code_596.py","insecure_generated_code_597.py","insecure_generated_code_598.py","insecure_generated_code_599.py","insecure_generated_code_6.py","insecure_generated_code_60.py","insecure_generated_code_600.py","insecure_generated_code_61.py","insecure_generated_code_62.py","insecure_generated_code_63.py","insecure_generated_code_64.py","insecure_generated_code_65.py","insecure_generated_code_66.py","insecure_generated_code_67.py","insecure_generated_code_68.py","insecure_generated_code_69.py","insecure_generated_code_7.py","insecure_generated_code_70.py","insecure_generated_code_71.py","insecure_generated_code_72.py","insecure_generated_code_73.py","insecure_generated_code_74.py","insecure_generated_code_75.py","insecure_generated_code_76.py","insecure_generated_code_77.py","insecure_generated_code_78.py","insecure_generated_code_79.py","insecure_generated_code_8.py","insecure_generated_code_80.py","insecure_generated_code_81.py","insecure_generated_code_82.py","insecure_generated_code_83.py","insecure_generated_code_84.py","insecure_generated_code_85.py","insecure_generated_code_86.py","insecure_generated_code_87.py","insecure_generated_code_88.py","insecure_generated_code_89.py","insecure_generated_code_9.py","insecure_generated_code_90.py","insecure_generated_code_91.py","insecure_generated_code_92.py","insecure_generated_code_93.py","insecure_generated_code_94.py","insecure_generated_code_95.py","insecure_generated_code_96.py","insecure_generated_code_97.py","insecure_generated_code_98.py","insecure_generated_code_99.py"],"skipped":[{"path":"insecure_generated_code_160.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"insecure_generated_code_161.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"insecure_generated_code_168.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"insecure_generated_code_227.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"insecure_generated_code_256.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"insecure_generated_code_260.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"insecure_generated_code_278.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"insecure_generated_code_311.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"insecure_generated_code_32.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"insecure_generated_code_330.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"insecure_generated_code_334.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"insecure_generated_code_338.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"insecure_generated_code_34.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"insecure_generated_code_382.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"insecure_generated_code_390.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"insecure_generated_code_419.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"insecure_generated_code_44.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"insecure_generated_code_450.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"insecure_generated_code_483.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"insecure_generated_code_518.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"insecure_generated_code_535.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"insecure_generated_code_540.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"insecure_generated_code_560.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"insecure_generated_code_574.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"insecure_generated_code_63.py","reason":"analysis_failed_parser_or_internal_error"},{"path":"insecure_generated_code_67.py","reason":"analysis_failed_parser_or_internal_error"}]},"interfile_languages_used":[],"skipped_rules":[]}